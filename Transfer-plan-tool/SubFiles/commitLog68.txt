b'commit 207aefa5d94dfbc6e41e738d0dea43d2f71e859f
Author: Sapthagiri GUDIHALLI (JV) <sapthagiri.gudihalli.jv@valeo.com>
Date:   Mon Jan 17 16:27:50 2022 +0100

    $100kW-50873$ - [WBS] B-Sample - MISC - VSI Serv Integration - BSW
    
    Change-Id: I06826d05e376f1aa7489edeaf647f80e62c58bf9

diff --git a/src/fw_cu/Components/Cmn/Shared/MemMap/include/NextGen_MemMap.h b/src/fw_cu/Components/Cmn/Shared/MemMap/include/NextGen_MemMap.h
index 9d2156e01..1e5c4b4fd 100644
--- a/src/fw_cu/Components/Cmn/Shared/MemMap/include/NextGen_MemMap.h
+++ b/src/fw_cu/Components/Cmn/Shared/MemMap/include/NextGen_MemMap.h
@@ -6440,6 +6440,23 @@
    #define TC2_STOP_SEC_CODE
    #include "BasicNextGen_MemMap.h"
 
+#elif (defined VSISRV_START_SEC_CODE)
+   #undef VSISRV_START_SEC_CODE
+   #define TC2_START_SEC_CODE
+   #include "BasicNextGen_MemMap.h"
+#elif (defined VSISRV_STOP_SEC_CODE)
+   #undef VSISRV_STOP_SEC_CODE
+   #define TC2_STOP_SEC_CODE
+   #include "BasicNextGen_MemMap.h"
+
+#elif (defined VSISRV_START_SEC_CONST)
+   #undef VSISRV_START_SEC_CONST
+   #define TC2_START_SEC_CODE
+   #include "BasicNextGen_MemMap.h"
+#elif (defined VSISRV_STOP_SEC_CONST)
+   #undef VSISRV_STOP_SEC_CONST
+   #define TC2_STOP_SEC_CODE
+   #include "BasicNextGen_MemMap.h"
 
 #elif (defined FPGA_START_SEC_CODE_FAST)
    #undef FPGA_START_SEC_CODE_FAST
diff --git a/src/fw_cu/Components/Inv/RtEnv/DrvCtrlSdl/src/DrvCtrlSdl.c b/src/fw_cu/Components/Inv/RtEnv/DrvCtrlSdl/src/DrvCtrlSdl.c
index 2d2de1b5a..088aaa23c 100644
--- a/src/fw_cu/Components/Inv/RtEnv/DrvCtrlSdl/src/DrvCtrlSdl.c
+++ b/src/fw_cu/Components/Inv/RtEnv/DrvCtrlSdl/src/DrvCtrlSdl.c
@@ -135,6 +135,8 @@
 #include "LlswQSpi.h"
 #include "LlswFpgaIf.h"
 #include "BswFpgaIf.h"
+#include "VsiSrv.h"
+
 
 
 #ifdef SWIT_Active
@@ -1489,7 +1491,7 @@ static DrvCtrlSdlRblCfgType DrvCtrlSdlRblCfgPwmSngSample[] =
    { &PwmSpMgr_RunA, &DrvCtrlSdlRblPwmPwmSpMgr },
    { &Mod3Pha_RunA, &DrvCtrlSdlRblPwmMod3Pha },
    { &PwmSpMux_RunA, &DrvCtrlSdlRblPwmPwmSpMux },
-   { &BswFpgaIf_SetTxFrm, &DrvCtrlSdlRblPwmFpgaSetTx },     /* DRCO FPGA IFACE send */
+   { &VSISRV_vidSetFrameTx, &DrvCtrlSdlRblPwmFpgaSetTx },     /* DRCO FPGA IFACE send */
    { &DrvCtrlSdl_RblPwmCntrEnd, &DrvCtrlSdlRblPwmCntrEnd },
 #ifndef SERIES_PRODUCTION
    { &HvAcIMeasEolCal_Run, &DrvCtrlSdlRblPwmHvAcIMeasEolCal },
@@ -1534,7 +1536,7 @@ static DrvCtrlSdlRblCfgType DrvCtrlSdlRblCfg1ms[] =
 #endif /* SYSCON_FTR_PSM == 1  USE_IPMCTRL_CONTROL */
    { &DrvCtrlErrDeb_Run1ms, &DrvCtrlSdlRbl1msDrvCtrlErrDeb },
    { &DrvCtrlC2c_Send1ms, &DrvCtrlSdlRbl1msC2cSend },
-   { &BswFpgaIf_SetTxFrm1ms, &DrvCtrlSdlRbl1msFpgaSetTx },
+   { &BswFpgaIf_TxRx1ms, &DrvCtrlSdlRbl1msFpgaSetTx },
    { &DrvCtrlSdl_RblDataAcqn1ms, &DrvCtrlSdlRbl1msDataAcqn },
    { NULL_PTR, NULL_PTR }
 };
@@ -2038,7 +2040,7 @@ FUNC(void, DRVCTRLSDL_CODE) DrvCtrlSdl_Init(void) /*PRQA S 1503*/
 
    LlswFpgaIf_Init();
    
-   BswFpgaIf_Init();
+   VSISRV_vidInit();
 
    /*********************
     * ENABLE TIMESLICES *
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/include/BswFpgaIf.h b/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/include/BswFpgaIf.h
index 2532dc673..6671b940b 100644
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/include/BswFpgaIf.h
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/include/BswFpgaIf.h
@@ -1,23 +1,16 @@
+/* *************************************************************************** */
+/* File:      BSWFPGAIF.h                                                      */
+/*                                                                             */
+/*                                                                             */
+/* First author:     Sapthagiri Gudihalli                                      */
+/* Other authors:   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t */
+/* *************************************************************************** */
+/* All Rights Reserved.  Confidential                                          */
+/* *************************************************************************** */
+
+#ifndef BSWFPGAIF_H
+#define BSWFPGAIF_H
 
-/*******************************************************************************
-**                      Revision Control History                              **
-*******************************************************************************/
-
-/* ***************************************************************************************************************** */
-/* File:      FPGAIFAAPL.h                                                                                           */
-/*                                                                                                                   */
-/*                                                                                                                   */
-/* First author:     Sapthagiri Gudihalli\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t */
-/* Other authors:   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t */
-/* ***************************************************************************************************************** */
-/* All Rights Reserved.  Confidential                                                                                */
-/* ***************************************************************************************************************** */
-
-#ifndef FPGAIFAPP_H
-#define FPGAIFAPP_H
-
-#include "BswFpgaIfChk.h"
-#include "BswFpgaIf_Type.h"
 #include "Std_Types.h"
 #include "C2cComSftyData.h"
 #include "AddEnumTypes.h"
@@ -27,65 +20,59 @@
 #include "HvDcUMeas_WrprData.h"
 /* Core 2 core communication */
 #include "C2cComBswData.h"
-
+#include "Mod3Pha_Data.h"
 /*Fpga */
 #include "LlswFpgaIf.h"
+#include "VsiSrv.h"
+
+extern volatile VsisrvFrameRxType BswFpgaIfFrameRx;
+extern volatile VsisrvFrameTxType BswFpgaIfFrameTx;
+extern volatile VsisrvIpduTxType BswFpgaIfIpduTx;
+extern volatile VsisrvIpduRxType BswFpgaIfIpduRx;
+extern volatile VsisrvIpduTxType BswFpgaIfIpduTxDef;
+extern volatile VsisrvIpduRxType BswFpgaIfIpduRxDef;
 
-extern volatile BswFpgaIf_FrameRxType BswFpgaIfFrameRx;
-extern volatile BswFpgaIf_FrameTxType BswFpgaIfFrameTx;
-extern volatile BswFpgaIf_IpduTxType BswFpgaIfIpduTx;
-extern volatile BswFpgaIf_IpduRxType BswFpgaIfIpduRx;
-extern volatile BswFpgaIf_IpduTxType BswFpgaIfIpduTxDef;
-extern volatile BswFpgaIf_IpduRxType BswFpgaIfIpduRxDef;
-extern volatile uint8 txMuxIdCnt;
 
 /******************************************************************************
 **                      Defines                                              **
 *******************************************************************************/
+#define BSWFPGAIF_TXBUFFER  BswFpgaIfFrameTx.Data32
+#define BSWFPGAIF_RXBUFFER  BswFpgaIfFrameRx.Data32
+#define BSWFPGAIF_FALSE   0u
+#define BSWFPGAIF_TRUE    1u
 
 #define BSWFPGAIF_MODE_OFF               0u
 #define BSWFPGAIF_MODE_PWM_DIRECT        1u
 #define BSWFPGAIF_MODE_INIT              2u
 #define BSWFPGAIF_MODE_ACTIVE_DISCHARGE  3u
 
-#define BswFpgaIf_START_DATA8_FRAME_TXS      BswFpgaIfFrameTx.Data.TxS.Data8
-#define BswFpgaIf_START_DATA8_FRAME_TXA      BswFpgaIfFrameTx.Data.TxA.Data8
-#define BswFpgaIf_START_DATA8_FRAME_RXA      BswFpgaIfFrameRx.Data.RxA.Data8
-#define BswFpgaIf_START_DATA8_FRAME_RXS      BswFpgaIfFrameRx.Data.RxS.Data8
-
-#define BSWFPGAIF_TXBUFFER  BswFpgaIfFrameTx.Data32
-#define BSWFPGAIF_RXBUFFER  BswFpgaIfFrameRx.Data32
 #define BSWFPGAIF_TXID0  0u
 #define BSWFPGAIF_TXID1  1u
 #define BSWFPGAIF_TXID2  2u
 #define BSWFPGAIF_TXID3  3u
 
-#define BswFpgaIf_STATUS_NOK                 (boolean)0u
-#define BswFpgaIf_STATUS_OK                  (boolean)1u
-
-#define BswFpgaIf_SecAtomicStart()
-#define BswFpgaIf_SecAtomicStop()
-#define BSWFPGAIF_FALSE   0u
-#define BSWFPGAIF_TRUE    1u
+#define BSWFPGAIF_CLK_FRQ_FPGA 20000000.0F
 
 /*----------------------------------------------------------------------------*/
 /*                      Extern Declarations                                   */
 /*----------------------------------------------------------------------------*/
 
-extern volatile BswFpgaIf_IpduTxType BswFpgaIfIpduTx;
-
 extern const uint16 BswFpgaIf_u16AutSigEmergencySwDelayC;
-extern uint16 BswFpgaIf_u16AutSigEmergencySwDelay;
-extern  uint16 BswFpgaIf_bAutSigEmergencySwMask;
-extern uint16 BswFpgaIf_u16ValueMaxGroup1;
-extern uint16 BswFpgaIf_u16ValueMaxGroup2;
 extern const uint16 BswFpgaIf_u16Cal1PwmFreqC;
 extern const uint16 BswFpgaIf_u16Cal1PwmDeadtimeC;
 extern const uint16 BswFpgaIf_u16Cal1M4Id0SpareC;
 extern const uint16 BswFpgaIf_u16Cal1PwmInitValUlC;
 extern const uint16 BswFpgaIf_u16Cal1PwmInitValUrC;
 
-extern uint8 \tu8GetEnsStatus;
+#define ISWIF_START_SEC_VAR_FAST_CLEARED
+#include "MemMap.h"
+
+extern uint16 BswFpgaIf_u16AutSigEmergencySwDelay;
+extern  uint16 BswFpgaIf_bAutSigEmergencySwMask;
+extern uint16 BswFpgaIf_u16ValueMaxGroup1;
+extern uint16 BswFpgaIf_u16ValueMaxGroup2;
+
+extern uint8   u8GetEnsStatus;
 extern uint8    BswFpgaIfRxaStateResModeRes;
 extern uint8    BswFpgaIfRxaStateResPWMRatioFreq;
 extern uint8    BswFpgaIfRxaStateResSwitchType;
@@ -97,40 +84,6 @@ extern uint8    BswFpgaIfTxaStateReqModeReq;
 extern uint8    BswFpgaIfTxaStateReqOperation;
 extern uint8    BswFpgaIfTxaStateReqSwitchType;
 extern uint8    BswFpgaIfTxsPwmRatioFreq;
-/*
-extern boolean BswFpgaIfTxaFaultAActiveDisAc;
-extern boolean BswFpgaIfTxaFaultAActiveDisIn;
-extern boolean BswFpgaIfTxaFaultAEmergencyStop;
-extern boolean BswFpgaIfTxaFaultAIgbtH;
-extern boolean BswFpgaIfTxaFaultAIgbtL;
-extern boolean BswFpgaIfTxaFaultALossComSpi;
-extern boolean BswFpgaIfTxaFaultAPwrSupHs;
-extern boolean BswFpgaIfTxaFaultAPwrSupLs;
-extern boolean BswFpgaIfTxaFaultAPwrSupMul;
-extern boolean BswFpgaIfTxaFaultASpare01;
-extern boolean BswFpgaIfTxaFaultASpare02;
-extern boolean BswFpgaIfTxaFaultASpare03;
-extern boolean BswFpgaIfTxaFaultASpare04;
-extern boolean BswFpgaIfTxaFaultASpare05;
-extern boolean BswFpgaIfTxaFaultASpare06;
-extern boolean BswFpgaIfTxaFaultASpare07;
-extern boolean BswFpgaIfTxaFaultBIgbtMidPointU;
-extern boolean BswFpgaIfTxaFaultBIgbtMidPointV;
-extern boolean BswFpgaIfTxaFaultBIgbtMidPointW;
-extern boolean BswFpgaIfTxaFaultBOverCurBat;
-extern boolean BswFpgaIfTxaFaultBOverTempCtrlBd;
-extern boolean BswFpgaIfTxaFaultBOverTempDrvBd;
-extern boolean BswFpgaIfTxaFaultBOverTempIgbt;
-extern boolean BswFpgaIfTxaFaultBOverUnderCurUl;
-extern boolean BswFpgaIfTxaFaultBOverUnderCurUr;
-extern boolean BswFpgaIfTxaFaultBOverUnderCurVl;
-extern boolean BswFpgaIfTxaFaultBOverUnderCurVr;
-extern boolean BswFpgaIfTxaFaultBOverUnderCurWl;
-extern boolean BswFpgaIfTxaFaultBOverUnderCurWr;
-extern boolean BswFpgaIfTxaFaultBOverVoltVBat;
-extern boolean BswFpgaIfTxaFaultBUnderVoltVBat;
-extern boolean BswFpgaIfTxaFaultBWdgCpld;
-*/
 
 extern boolean BswFpgaIfTxaFaultBSpare3;
 extern boolean BswFpgaIfTxaFaultBSpare2;
@@ -138,31 +91,37 @@ extern boolean BswFpgaIfTxaFaultBSpare1;
 extern boolean BswFpgaIfTxaFaultBSpare0;
 extern boolean BswFpgaIfTxaFaultBOverUnderCurU;
 extern boolean BswFpgaIfTxaFaultBOverUnderCurV;
-extern boolean BswFpgaIfTxaFaultBOverUnderCurW; 
+extern boolean BswFpgaIfTxaFaultBOverUnderCurW;
 extern uint16 BswFpgaIfTxaFault_A_Data;
 extern uint16 BswFpgaIfTxaFault_B_Data;
 extern uint16 BswFpgaIf_IPhaRawVal[SYSDEF_EM_PHA_CNT_MAX];
 extern uint16 BswFpgaIf_UdcRawVal;
 
-/* extern uint16 BswFpgaIfRx_PwrSupply_5V_HS;
-extern uint16 BswFpgaIfRx_PwrSupply_5V_LS;
-extern uint16 BswFpgaIfRx_PwrSupply_16V_Multi;
-extern uint16 BswFpgaIfRx_FpgaVer_LSW;
-extern uint16 BswFpgaIfRx_FpgaVer_MSW;
-extern uint16 BswFpgaIfRx_DebugMux_64To75;
-extern uint16 BswFpgaIfRx_CurMeasPh_U;
-extern uint16 BswFpgaIfRx_CurMeasPh_V;
-extern uint16 BswFpgaIfRx_CurMeasPh_W;
-extern uint16 BswFpgaIfRx_CtrlBd_Temp;
-extern uint16 BswFpgaIfRx_DrvBd_Temp;
-extern uint16 BswFpgaIfRx_DcLinkVol_DrvBd;
-extern uint16 BswFpgaIfRx_DcLinkVol_CtrlBd;
-extern uint16 BswFpgaIfRx_IgbtTemp_U;
-extern uint16 BswFpgaIfRx_IgbtTemp_V;
-extern uint16 BswFpgaIfRx_IgbtTemp_W; */
+#define ISWIF_STOP_SEC_VAR_FAST_CLEARED
+#include "MemMap.h"
+
+/*Extern function declarations*/
+#define BSWFPGAIF_START_SEC_CODE_SLOW
+#include "NextGen_MemMap.h"
+
+extern void BswFpgaIf_SetTxSyncData(void);
+extern uint8 BswFpgaIf_SetTxAsyncData(void);
+extern void BswFpgaIf_DrcvRxSignals (void);
+extern void BswFpgaIf_TxRx1ms(void);
+extern void BswFpgaIf_Init(void);
+extern void BswFpgaIf_ReadIgbtTemp(void);
+
+#define BSWFPGAIF_STOP_SEC_CODE_SLOW
+#include "NextGen_MemMap.h"
 
-extern const boolean BswFpgaIfReiniCombinedFltOvrdEna; 
-extern const boolean BswFpgaIfTxModReqOvrdEna; 
+#define START_SEC_CALIB
+/*lint -e(537,451) Repeated inclusion is needed. */
+#include "MemMap.h"
+
+extern const uint16 BswFpgaIfPhaOcThd;
+extern const uint16 FltMskVal;
+extern const boolean BswFpgaIfReiniCombinedFltOvrdEna;
+extern const boolean BswFpgaIfTxModReqOvrdEna;
 extern const boolean BswFpgaIfTxPwmCtrlStgOnOffOvrdEna[SYSDEF_EM_PHA_CNT_MAX];
 extern const boolean BswFpgaIfTxPwmRatioFreqReqOvrdEna;
 extern const boolean BswFpgaIfTxPwmMinDutycycOvrdEna;
@@ -204,1869 +163,9 @@ extern const uint16 BswFpgaIfDebugValTxOvrdVal;
 extern const boolean BswFpgaIfTxEmergencySwOvrdVal;
 extern const uint8 BswFpgaIfTxSCSpeedReadyOvrdVal;
 
-/*Extern function declarations*/
-
-void BswFpgaIf_SetTxSyncData(void);
-void BswFpgaIf_SetTxAsyncData(void);
-extern void BswFpgaIf_UpdRxFrm(void);
-extern void BswFpgaIf_DrcvRxSignals (void);
-extern void BswFpgaIf_SetTxFrm(void);
-extern void BswFpgaIf_SetTxFrm1ms(void);
-extern void BswFpgaIf_Init(void);
-
-/*----------------------------------------------------------------------------*/
-/* MACRO FUNCTIONS Scalings                                                   */
-/*----------------------------------------------------------------------------*/
-/* Scaling fixdt(1,16,14) Group1 to value max */
-#define BswFpgaIf_ScalingGroup1(value)                                            \\
-   (uint16)(((((uint32)value) << 2) * BswFpgaIf_u16ValueMaxGroup1) >> 16)
-
-/* Scaling fixdt(1,16,14) Group1 to value max */
-#define BswFpgaIf_ScalingGroup2(value)                                            \\
-   (uint16)(((((uint32)value) << 2) * BswFpgaIf_u16ValueMaxGroup2) >> 16)
-
-/*----------------------------------------------------------------------------*/
-/* MACRO FUNCTIONS Get Frame                                                  */
-/*----------------------------------------------------------------------------*/
-/*----------------*/
-/* Frame Tx       */
-/*----------------*/
-
-#define BswFpgaIf_GetFrameTxSCtrl()                                               \\
-   BswFpgaIfFrameTx.Data.TxS.Signal.Ctrl
-
-#define BswFpgaIf_GetFrameTxACtrl()                                               \\
-   BswFpgaIfFrameTx.Data.TxA.Signal.Ctrl
-
-/*----------------*/
-/* Frame Rx       */
-/*----------------*/
-#define BswFpgaIf_GetFrameRxAId()                                                 \\
-   BswFpgaIfFrameRx.Data.RxA.Signal.Data8[3]
-
-#define BswFpgaIf_GetFrameRxACtrl()                                               \\
-   BswFpgaIfFrameRx.Data.RxA.Signal.Crc
-
-#define BswFpgaIf_GetFrameRxSCtrl()                                               \\
-   BswFpgaIfFrameRx.Data.RxS.Signal.Crc
-
-/*----------------*/
-/* Frame status   */
-/*----------------*/
-#define BswFpgaIf_GetFrameFS_TXA                                                \\
-   BswFpgaIfFrameRx.Data.RxS.Signal.FS_TXA
-
-#define BswFpgaIf_GetFrameFS_TXS                                                \\
-   BswFpgaIfFrameRx.Data.RxS.Signal.FS_TXS
-
-#define BswFpgaIf_GetFrameFS_SOL                                                \\
-   BswFpgaIfFrameRx.Data.RxS.Signal.FS_SOL
-
-#define BswFpgaIf_GetFrameFS_SOE                                                \\
-   BswFpgaIfFrameRx.Data.RxS.Signal.FS_SOE
-
-#define BswFpgaIf_GetFrameFS_RXA()                                                \\
-   BswFpgaIf_bCheckStatusRxA
-
-#define BswFpgaIf_GetFrameFS_RXS()                                                \\
-   BswFpgaIf_bCheckStatusRxS
-
-#define BswFpgaIf_GetFrameFS_IdRX()                                               \\
-   BswFpgaIf_bCheckStatusIdRx
-
-/*----------------------------------------------------------------------------*/
-/* MACRO FUNCTIONS Copy ipdu -> frame                                         */
-/*----------------------------------------------------------------------------*/
-
-/******************************************************************************/
-/*                                                                            */
-/* !Description : Copy ipdu TxS to frame TxS                                  */
-/*                                                                            */
-/******************************************************************************/
-/*  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  */
-/******************************************************************************/
-#define BswFpgaIf_CopyIpduTxSToFrameTxS()                                     \\
-   BswFpgaIfFrameTx.Data.TxS.Data32[0] = BswFpgaIfIpduTx.Data.TxS.Data32[0];               \\
-   BswFpgaIfFrameTx.Data.TxS.Data32[1] = BswFpgaIfIpduTx.Data.TxS.Data32[1];               \\
-   BswFpgaIfFrameTx.Data.TxS.Data32[2] = BswFpgaIfIpduTx.Data.TxS.Data32[2]
-
-/******************************************************************************/
-/*                                                                            */
-/* !Description : Copy ipdu TxA to frame TxA ID 0                             */
-/*                                                                            */
-/******************************************************************************/
-/*                                                                            */
-/******************************************************************************/
-#define BswFpgaIf_CopyIpduTxAToFrameTxAId0()                                  \\
-   BswFpgaIfFrameTx.Data.TxA.Data32[0] = BswFpgaIfIpduTx.Data.TxA.IdMx[0].Data32[0];       \\
-   BswFpgaIfFrameTx.Data.TxA.Data32[1] = BswFpgaIfIpduTx.Data.TxA.IdMx[0].Data32[1];       \\
-   BswFpgaIfFrameTx.Data.TxA.Data32[2] = BswFpgaIfIpduTx.Data.TxA.IdMx[0].Data32[2];       \\
-   BswFpgaIfFrameTx.Data.TxA.Data32[3] = BswFpgaIfIpduTx.Data.TxA.IdMx[0].Data32[3];       \\
-   BswFpgaIfFrameTx.Data.TxA.Data32[4] = BswFpgaIfIpduTx.Data.TxA.IdMx[0].Data32[4]       \\
-
-/******************************************************************************/
-/*                                                                            */
-/* !Description : Copy ipdu TxA to frame TxA ID 1                             */
-/*                                                                            */
-/******************************************************************************/
-/*                                                                            */
-/******************************************************************************/
-#define BswFpgaIf_CopyIpduTxAToFrameTxAId1()                                      \\
-   BswFpgaIfFrameTx.Data.TxA.Data32[0] = BswFpgaIfIpduTx.Data.TxA.IdMx[1].Data32[0];       \\
-   BswFpgaIfFrameTx.Data.TxA.Data32[1] = BswFpgaIfIpduTx.Data.TxA.IdMx[1].Data32[1];       \\
-   BswFpgaIfFrameTx.Data.TxA.Data32[2] = BswFpgaIfIpduTx.Data.TxA.IdMx[1].Data32[2];       \\
-   BswFpgaIfFrameTx.Data.TxA.Data32[3] = BswFpgaIfIpduTx.Data.TxA.IdMx[1].Data32[3];       \\
-   BswFpgaIfFrameTx.Data.TxA.Data32[4] = BswFpgaIfIpduTx.Data.TxA.IdMx[1].Data32[4]       \\
-
-/******************************************************************************/
-/*                                                                            */
-/* !Description : Copy ipdu TxA to frame TxA ID 2                             */
-
-/******************************************************************************/
-/*                                                                            */
-/******************************************************************************/
-#define BswFpgaIf_CopyIpduTxAToFrameTxAId2()                                  \\
-   BswFpgaIfFrameTx.Data.TxA.Data32[0] = BswFpgaIfIpduTx.Data.TxA.IdMx[2].Data32[0];       \\
-   BswFpgaIfFrameTx.Data.TxA.Data32[1] = BswFpgaIfIpduTx.Data.TxA.IdMx[2].Data32[1];       \\
-   BswFpgaIfFrameTx.Data.TxA.Data32[2] = BswFpgaIfIpduTx.Data.TxA.IdMx[2].Data32[2];       \\
-   BswFpgaIfFrameTx.Data.TxA.Data32[3] = BswFpgaIfIpduTx.Data.TxA.IdMx[2].Data32[3];       \\
-   BswFpgaIfFrameTx.Data.TxA.Data32[4] = BswFpgaIfIpduTx.Data.TxA.IdMx[2].Data32[4]       \\
-
-/******************************************************************************/
-/*                                                                            */
-/* !Description : Copy ipdu TxA to frame TxA ID 3                             */
-/*                                                                            */
-/******************************************************************************/
-
-/******************************************************************************/
-#define BswFpgaIf_CopyIpduTxAToFrameTxAId3()                                  \\
-   BswFpgaIfFrameTx.Data.TxA.Data32[0] = BswFpgaIfIpduTx.Data.TxA.IdMx[3].Data32[0];       \\
-   BswFpgaIfFrameTx.Data.TxA.Data32[1] = BswFpgaIfIpduTx.Data.TxA.IdMx[3].Data32[1];       \\
-   BswFpgaIfFrameTx.Data.TxA.Data32[2] = BswFpgaIfIpduTx.Data.TxA.IdMx[3].Data32[2];       \\
-   BswFpgaIfFrameTx.Data.TxA.Data32[3] = BswFpgaIfIpduTx.Data.TxA.IdMx[3].Data32[3];       \\
-   BswFpgaIfFrameTx.Data.TxA.Data32[4] = BswFpgaIfIpduTx.Data.TxA.IdMx[3].Data32[4]       \\
-
-/******************************************************************************/
-/*                                                                            */
-/* !Description : Copy frame RxA to ipdu RxA                                  */
-/*                                                                            */
-/******************************************************************************/
-
-/******************************************************************************/
-#define BswFpgaIf_CopyFrameRxAToIpduRxA()                                         \\
-   BswFpgaIfIpduRx.Data.RxA.Id.MxA.Data32[0] = BswFpgaIfFrameRx.Data.RxA.Data32[0];        \\
-   BswFpgaIfIpduRx.Data.RxA.Id.MxA.Data32[1] = BswFpgaIfFrameRx.Data.RxA.Data32[1];        \\
-   BswFpgaIfIpduRx.Data.RxA.Id.MxA.Data32[2] = BswFpgaIfFrameRx.Data.RxA.Data32[2];        \\
-   BswFpgaIfIpduRx.Data.RxA.Id.MxA.Data32[3] = BswFpgaIfFrameRx.Data.RxA.Data32[3]
-
-/******************************************************************************/
-/*                                                                            */
-/* !Description : Copy frame RxS to ipdu RxS                                  */
-/******************************************************************************/
-
-/******************************************************************************/
-#define BswFpgaIf_CopyFrameRxSToIpduRxS()                                         \\
-\t\tBswFpgaIfIpduRx.Data.RxS.Data32[0] = BswFpgaIfFrameRx.Data.RxS.Data32[0];               \\
-\t\tBswFpgaIfIpduRx.Data.RxS.Data32[1] = BswFpgaIfFrameRx.Data.RxS.Data32[1];               \\
-\t\tBswFpgaIfIpduRx.Data.RxS.Data32[2] = BswFpgaIfFrameRx.Data.RxS.Data32[2];               \\
-\t\tBswFpgaIfIpduRx.Data.RxS.Data32[3] = BswFpgaIfFrameRx.Data.RxS.Data32[3]
-
-
-/******************************************************************************/
-/*                                                                            */
-/* !Description : Copy frame RxA to ipdu RxA ID 0                             */
-/*                                                                            */
-/******************************************************************************/
-
-/******************************************************************************/
-#define BswFpgaIf_CopyFrameRxAToIpduRxAId0()                                      \\
-   /* BswFpgaIfIpduRx.Data.RxA.IdMx[0].Data32[0] = BswFpgaIfFrameRx.Data.RxA.Data32[0]; */ \\
-   /* BswFpgaIfIpduRx.Data.RxA.IdMx[0].Data32[1] = BswFpgaIfFrameRx.Data.RxA.Data32[1]; */ \\
-   BswFpgaIfIpduRx.Data.RxA.IdMx[0].Data32[2] = BswFpgaIfFrameRx.Data.RxA.Data32[2];       \\
-   BswFpgaIfIpduRx.Data.RxA.IdMx[0].Data32[3] = BswFpgaIfFrameRx.Data.RxA.Data32[3]
-
-/******************************************************************************/
-/*                                                                            */
-/* !Description : Copy frame RxA to ipdu RxA ID 1                             */
-/*                                                                            */
-/******************************************************************************/
-
-/******************************************************************************/
-#define BswFpgaIf_CopyFrameRxAToIpduRxAId1()                                      \\
-   /* BswFpgaIfIpduRx.Data.RxA.IdMx[1].Data32[0] = BswFpgaIfFrameRx.Data.RxA.Data32[0]; */ \\
-   /* BswFpgaIfIpduRx.Data.RxA.IdMx[1].Data32[1] = BswFpgaIfFrameRx.Data.RxA.Data32[1]; */ \\
-   BswFpgaIfIpduRx.Data.RxA.IdMx[1].Data32[2] = BswFpgaIfFrameRx.Data.RxA.Data32[2];       \\
-   BswFpgaIfIpduRx.Data.RxA.IdMx[1].Data32[3] = BswFpgaIfFrameRx.Data.RxA.Data32[3]
-
-/******************************************************************************/
-/*                                                                            */
-/* !Description : Copy frame RxA to ipdu RxA ID 2                             */
-/*                                                                            */
-/******************************************************************************/
-
-/******************************************************************************/
-#define BswFpgaIf_CopyFrameRxAToIpduRxAId2()                                      \\
-   /* BswFpgaIfIpduRx.Data.RxA.IdMx[2].Data32[0] = BswFpgaIfFrameRx.Data.RxA.Data32[0]; */ \\
-   /* BswFpgaIfIpduRx.Data.RxA.IdMx[2].Data32[1] = BswFpgaIfFrameRx.Data.RxA.Data32[1]; */ \\
-   BswFpgaIfIpduRx.Data.RxA.IdMx[2].Data32[2] = BswFpgaIfFrameRx.Data.RxA.Data32[2];       \\
-   BswFpgaIfIpduRx.Data.RxA.IdMx[2].Data32[3] = BswFpgaIfFrameRx.Data.RxA.Data32[3]
-
-/******************************************************************************/
-/*                                                                            */
-/* !Description : Copy frame RxA to ipdu RxA ID 3                             */
-/*                                                                            */
-/******************************************************************************/
-
-/******************************************************************************/
-#define BswFpgaIf_CopyFrameRxAToIpduRxAId3()                                      \\
-   /* BswFpgaIfIpduRx.Data.RxA.IdMx[3].Data32[0] = BswFpgaIfFrameRx.Data.RxA.Data32[0]; */ \\
-   /* BswFpgaIfIpduRx.Data.RxA.IdMx[3].Data32[1] = BswFpgaIfFrameRx.Data.RxA.Data32[1]; */ \\
-   BswFpgaIfIpduRx.Data.RxA.IdMx[3].Data32[2] = BswFpgaIfFrameRx.Data.RxA.Data32[2];       \\
-   BswFpgaIfIpduRx.Data.RxA.IdMx[3].Data32[3] = BswFpgaIfFrameRx.Data.RxA.Data32[3]
-
-
-/******************************************************************************/
-/*                                                                            */
-/* !Description : Id Rx Nm1 read                                              */
-/*                                                                            */
-/******************************************************************************/
-#define BswFpgaIf_IdRxNm1Read()                                                   \\
-   BswFpgaIf_u8IdRxNm1
-
-/******************************************************************************/
-/*                                                                            */
-/* !Description : Id Rx Nm1 set                                               */
-/******************************************************************************/
-#define BswFpgaIf_IdRxNm1Set(u8IDRx)                                              \\
-   BswFpgaIf_u8IdRxNm1 = u8IDRx
-
-
-/******************************************************************************/
-/*                                                                            */
-/* !Description : Com Init flag read                                          */
-/*                                                                            */
-/******************************************************************************/
-
-#define BswFpgaIf_ComInitRead()                                                   \\
-   BswFpgaIf_bComInit
-
-/******************************************************************************/
-/*                                                                            */
-/* !Description : Com Init flag off                                           */
-/******************************************************************************/
-#define BswFpgaIf_ComInitOff()                                                    \\
-   BswFpgaIf_bComInit = 0u
-
-/******************************************************************************/
-/*                                                                            */
-/* !Description : Com Init flag on                                            */
-/******************************************************************************/
-#define BswFpgaIf_ComInitOn()                                                     \\
-   BswFpgaIf_bComInit = 1u
-
-/*******************************************************************************
-**                      Static Inline                                                **
-*******************************************************************************/
-
-/******************************************************************************/
-/*                                                                            */
-/* !Description : Aut Signal EmergencySw                                      */
-/******************************************************************************/
-static inline  void BswFpgaIf_AutSigEmergencySw(boolean value);
-static inline  void BswFpgaIf_AutSigEmergencySw(boolean value)
-{
-   if (value != 0)
-   {
-\t   BswFpgaIf_bAutSigEmergencySwMask = 0;
-   }
-   else
-   {
-\t   BswFpgaIf_bAutSigEmergencySwMask = 1;
-   }
-}
-
-/******************************************************************************/
-/*                                                                            */
-/* !Description : Aut Signal EmergencySw delay                                */
-/******************************************************************************/
-static inline  void BswFpgaIf_AutSigEmergencySwDelay(uint16 value, boolean aut);
-static inline  void BswFpgaIf_AutSigEmergencySwDelay(uint16 value, boolean aut)
-{
-   if (aut != 0)
-   {
-      if (value != 0)
-      {
-    \t  BswFpgaIf_AutSigEmergencySw(0);
-      }
-      BswFpgaIf_u16AutSigEmergencySwDelay = value;
-   }
-}
-
-static inline void BswFpgaIf_SetSignalStateReqSCSpeedReady(uint8 value);
-static inline void BswFpgaIf_SetSignalStateReqSCSpeedReady(uint8 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   if(BswFpgaIfTxSCSpeedReadyOvrdEna == BSWFPGAIF_FALSE)
-   {
-\t BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.StateReq.Field.SCSpeedReady = value;
-     BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.StateReq.Field.SCSpeedReady = value;
-     BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.StateReq.Field.SCSpeedReady = value;
-     BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.StateReq.Field.SCSpeedReady = value;
-   }
-   else 
-   {
-     BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.StateReq.Field.SCSpeedReady = BswFpgaIfTxSCSpeedReadyOvrdVal;
-     BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.StateReq.Field.SCSpeedReady = BswFpgaIfTxSCSpeedReadyOvrdVal;
-     BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.StateReq.Field.SCSpeedReady = BswFpgaIfTxSCSpeedReadyOvrdVal;
-     BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.StateReq.Field.SCSpeedReady = BswFpgaIfTxSCSpeedReadyOvrdVal;
-   }
-   BswFpgaIf_SecAtomicStop();
-}
-
-/*----------------*/
-static inline void BswFpgaIf_SetSignalStateReqOperation(uint8 value);
-static inline void BswFpgaIf_SetSignalStateReqOperation(uint8 value)
-{
-\tBswFpgaIf_SecAtomicStart();
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.StateReq.Field.Operation = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.StateReq.Field.Operation = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.StateReq.Field.Operation = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.StateReq.Field.Operation = value;
-   BswFpgaIf_SecAtomicStop();
-}
-
-/*----------------*/
-static inline void BswFpgaIf_SetSignalStateReqSwitchType(uint8 value);
-static inline void BswFpgaIf_SetSignalStateReqSwitchType(uint8 value)
-{
-\tBswFpgaIf_SecAtomicStart();
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.StateReq.Field.SwitchType = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.StateReq.Field.SwitchType = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.StateReq.Field.SwitchType = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.StateReq.Field.SwitchType = value;
-   BswFpgaIf_SecAtomicStop();
-}
-
-/*----------------*/
-static inline void BswFpgaIf_SetSignalStateReqModeReq(uint8 value);
-static inline void BswFpgaIf_SetSignalStateReqModeReq(uint8 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   if(BswFpgaIfTxModReqOvrdEna == BSWFPGAIF_FALSE)
-   {
-     BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.StateReq.Field.ModeReq = value;
-     BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.StateReq.Field.ModeReq = value;
-     BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.StateReq.Field.ModeReq = value;
-     BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.StateReq.Field.ModeReq = value;
-   }
-   else
-   {
-\t BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.StateReq.Field.ModeReq = BswFpgaIfTxModReqOvrdVal;
-     BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.StateReq.Field.ModeReq = BswFpgaIfTxModReqOvrdVal;
-     BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.StateReq.Field.ModeReq = BswFpgaIfTxModReqOvrdVal;
-     BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.StateReq.Field.ModeReq = BswFpgaIfTxModReqOvrdVal;
-   }
-   BswFpgaIf_SecAtomicStop();
-}
-
-
-/*----------------*/
-static inline void BswFpgaIf_SetSignalEmergencyStop(boolean value);
-static inline void BswFpgaIf_SetSignalEmergencyStop(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   if(BswFpgaIfTxEmergencySwOvrdEna == BSWFPGAIF_FALSE)
-   {
-     BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.StateReq.Field.EmergencySw = value;
-     BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.StateReq.Field.EmergencySw = value;
-     BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.StateReq.Field.EmergencySw = value;
-     BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.StateReq.Field.EmergencySw = value;
-   }
-   else
-   {
-\t BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.StateReq.Field.EmergencySw = BswFpgaIfTxEmergencySwOvrdVal;
-     BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.StateReq.Field.EmergencySw = BswFpgaIfTxEmergencySwOvrdVal;
-     BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.StateReq.Field.EmergencySw = BswFpgaIfTxEmergencySwOvrdVal;
-     BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.StateReq.Field.EmergencySw = BswFpgaIfTxEmergencySwOvrdVal;
-   }
-   BswFpgaIf_SecAtomicStop();
-}
-
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultAEmergencyStop(boolean value);
-static inline void BswFpgaIf_SetSignalFaultAEmergencyStop(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.EmergencyStop = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.EmergencyStop = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.EmergencyStop = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.EmergencyStop = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultAPwrSupLs(boolean value);
-static inline void BswFpgaIf_SetSignalFaultAPwrSupLs(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.PwrSupLs = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.PwrSupLs = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.PwrSupLs = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.PwrSupLs = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultAPwrSupHs(boolean value);
-static inline void BswFpgaIf_SetSignalFaultAPwrSupHs(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.PwrSupHs = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.PwrSupHs = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.PwrSupHs = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.PwrSupHs = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultAPwrSupMul(boolean value);
-static inline void BswFpgaIf_SetSignalFaultAPwrSupMul(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.PwrSupMul = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.PwrSupMul = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.PwrSupMul = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.PwrSupMul = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultAIgbtL(boolean value);
-static inline void BswFpgaIf_SetSignalFaultAIgbtL(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.IgbtL = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.IgbtL = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.IgbtL = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.IgbtL = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultAIgbtH(boolean value);
-static inline void BswFpgaIf_SetSignalFaultAIgbtH(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.IgbtH = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.IgbtH = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.IgbtH = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.IgbtH = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultAActiveDisIn(boolean value);
-static inline void BswFpgaIf_SetSignalFaultAActiveDisIn(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.ActiveDisIn = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.ActiveDisIn = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.ActiveDisIn = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.ActiveDisIn = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultAActiveDisAc(boolean value);
-static inline void BswFpgaIf_SetSignalFaultAActiveDisAc(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.ActiveDisAc = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.ActiveDisAc = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.ActiveDisAc = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.ActiveDisAc = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultASpare07(boolean value);
-static inline void BswFpgaIf_SetSignalFaultASpare07(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.Spare07 = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.Spare07 = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.Spare07 = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.Spare07 = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultASpare06(boolean value);
-static inline void BswFpgaIf_SetSignalFaultASpare06(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.Spare06 = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.Spare06 = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.Spare06 = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.Spare06 = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultASpare05(boolean value);
-static inline void BswFpgaIf_SetSignalFaultASpare05(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.Spare05 = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.Spare05 = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.Spare05 = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.Spare05 = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultASpare04(boolean value);
-static inline void BswFpgaIf_SetSignalFaultASpare04(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.Spare04 = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.Spare04 = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.Spare04 = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.Spare04 = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultASpare03(boolean value);
-static inline void BswFpgaIf_SetSignalFaultASpare03(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.Spare03 = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.Spare03 = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.Spare03 = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.Spare03 = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultASpare02(boolean value);
-static inline void BswFpgaIf_SetSignalFaultASpare02(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.Spare02 = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.Spare02 = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.Spare02 = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.Spare02 = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultAMeasCoherence(boolean value);
-static inline void BswFpgaIf_SetSignalFaultAMeasCoherence(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.MeasCoherence = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.MeasCoherence = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.MeasCoherence = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.MeasCoherence = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultALossComSpi(boolean value);
-static inline void BswFpgaIf_SetSignalFaultALossComSpi(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.LossComSpi = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.LossComSpi = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.LossComSpi = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.LossComSpi = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----*/
-static inline void BswFpgaIf_SetSignalFaultALossComSpiNoSwDelay(boolean value);
-static inline void BswFpgaIf_SetSignalFaultALossComSpiNoSwDelay(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.LossComSpi = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.LossComSpi = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.LossComSpi = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.LossComSpi = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*--------*/
-
-/*--------*/
-/* FaultB */
-/*--------*/
-static inline void BswFpgaIf_SetSignalFaultB(uint16 value);
-static inline void BswFpgaIf_SetSignalFaultB(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   if (value != 0)
-   {
-      BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, 1);
-   }
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Data16 = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Data16 = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Data16 = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Data16 = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultBOverCurBat(boolean value);
-static inline void BswFpgaIf_SetSignalFaultBOverCurBat(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.OverCurBat = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.OverCurBat = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.OverCurBat = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.OverCurBat = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultBOverTempCtrlBd(boolean value);
-static inline void BswFpgaIf_SetSignalFaultBOverTempCtrlBd(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.OverTempCtrlBd = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.OverTempCtrlBd = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.OverTempCtrlBd = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.OverTempCtrlBd = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultBOverTempIgbt(boolean value);
-static inline void BswFpgaIf_SetSignalFaultBOverTempIgbt(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.OverTempIgbt = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.OverTempIgbt = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.OverTempIgbt = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.OverTempIgbt = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultBOverTempDrvBd(boolean value);
-static inline void BswFpgaIf_SetSignalFaultBOverTempDrvBd(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.OverTempDrvBd = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.OverTempDrvBd = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.OverTempDrvBd = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.OverTempDrvBd = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultBUnderVoltVBat(boolean value);
-static inline void BswFpgaIf_SetSignalFaultBUnderVoltVBat(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.UnderVoltVBat = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.UnderVoltVBat = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.UnderVoltVBat = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.UnderVoltVBat = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultBOverVoltVBat(boolean value);
-static inline void BswFpgaIf_SetSignalFaultBOverVoltVBat(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.OverVoltVBat = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.OverVoltVBat = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.OverVoltVBat = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.OverVoltVBat = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultBIgbtMidPointU(boolean value);
-static inline void BswFpgaIf_SetSignalFaultBIgbtMidPointU(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.IgbtMidPointU = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.IgbtMidPointU = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.IgbtMidPointU = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.IgbtMidPointU = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultBIgbtMidPointV(boolean value);
-static inline void BswFpgaIf_SetSignalFaultBIgbtMidPointV(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.IgbtMidPointV = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.IgbtMidPointV = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.IgbtMidPointV = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.IgbtMidPointV = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultBIgbtMidPointW(boolean value);
-static inline void BswFpgaIf_SetSignalFaultBIgbtMidPointW(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.IgbtMidPointW = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.IgbtMidPointW = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.IgbtMidPointW = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.IgbtMidPointW = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultBWdgCpld(boolean value);
-static inline void BswFpgaIf_SetSignalFaultBWdgCpld(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.WdgCpld = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.WdgCpld = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.WdgCpld = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.WdgCpld = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultBOverUnderCurWr(boolean value);
-static inline void BswFpgaIf_SetSignalFaultBOverUnderCurWr(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.OverUnderCurWr = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.OverUnderCurWr = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.OverUnderCurWr = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.OverUnderCurWr = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultBOverUnderCurWl(boolean value);
-static inline void BswFpgaIf_SetSignalFaultBOverUnderCurWl(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.OverUnderCurWl = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.OverUnderCurWl = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.OverUnderCurWl = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.OverUnderCurWl = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultBOverUnderCurVr(boolean value);
-static inline void BswFpgaIf_SetSignalFaultBOverUnderCurVr(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.OverUnderCurVr = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.OverUnderCurVr = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.OverUnderCurVr = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.OverUnderCurVr = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultBOverUnderCurVl(boolean value);
-static inline void BswFpgaIf_SetSignalFaultBOverUnderCurVl(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.OverUnderCurVl = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.OverUnderCurVl = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.OverUnderCurVl = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.OverUnderCurVl = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultBOverUnderCurUr(boolean value);
-static inline void BswFpgaIf_SetSignalFaultBOverUnderCurUr(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.OverUnderCurUr = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.OverUnderCurUr = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.OverUnderCurUr = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.OverUnderCurUr = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultBOverUnderCurUl(boolean value);
-static inline void BswFpgaIf_SetSignalFaultBOverUnderCurUl(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.OverUnderCurUl = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.OverUnderCurUl = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.OverUnderCurUl = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.OverUnderCurUl = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*--------*/
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFaultABReinit(boolean value);
-static inline void BswFpgaIf_SetSignalFaultABReinit(boolean value)
-{
-   uint16 valueComp1;
-   uint16 valueComp2;
-
-  BswFpgaIf_SecAtomicStart();
-   if (value != 0)
-   {
-      BswFpgaIf_SecAtomicStart();
-      BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, value);
-      BswFpgaIf_SecAtomicStop();
-      BswFpgaIf_SecAtomicStart();
-      valueComp1 = (uint16)(~BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Data16);
-      BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Data16 = valueComp1;
-      BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Data16 = valueComp1;
-      BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Data16 = valueComp1;
-      BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Data16 = valueComp1;
-      BswFpgaIf_SecAtomicStop();
-      BswFpgaIf_SecAtomicStart();
-      valueComp2 = (uint16)(~BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Data16);
-      BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Data16 = valueComp2;
-      BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Data16 = valueComp2;
-      BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Data16 = valueComp2;
-      BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Data16 = valueComp2;
-      BswFpgaIf_SecAtomicStop();
-   }
-}
-/*----------------*/
-
-/*--------*/
-/* MLI    */
-/*--------*/
-/*----------------*/
-static inline void BswFpgaIf_SetSignalPWM_Ul(uint16 value);
-static inline void BswFpgaIf_SetSignalPWM_Ul(uint16 value)
-{
-   uint16 valueScal;
-   valueScal = BswFpgaIf_ScalingGroup1(value);
-
-   /* BswFpgaIf_SecAtomicStart(); */
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Ul_MSB8 = (uint32)(valueScal >> 4);
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Ul_LSB4 = (uint32)(valueScal);
-   /* BswFpgaIf_SecAtomicStop(); */
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalPWM_Ur(uint16 value);
-static inline void BswFpgaIf_SetSignalPWM_Ur(uint16 value)
-{
-   uint16 valueScal;
-   /* #define BswFpgaIf_SecAtomicStart(); */
-
-   valueScal = BswFpgaIf_ScalingGroup1(value);
-
-   /* BswFpgaIf_SecAtomicStart(); */
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Ur_MSB4 = (uint32)(valueScal >> 8);
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Ur_LSB8 = (uint32)(valueScal);
-   /* BswFpgaIf_SecAtomicStop(); */
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalPWM_Vl(uint16 value);
-static inline void BswFpgaIf_SetSignalPWM_Vl(uint16 value)
-{
-   uint16 valueScal;
-   /* BswFpgaIf_SecAtomicStart(); */
-
-   valueScal = BswFpgaIf_ScalingGroup1(value);
-
-   /* #define BswFpgaIf_SecAtomicStart(); */
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Vl_MSB8 = (uint32)(valueScal >> 4);
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Vl_LSB4 = (uint32)(valueScal);
-   /* BswFpgaIf_SecAtomicStop(); */
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalPWM_Vr(uint16 value);
-static inline void BswFpgaIf_SetSignalPWM_Vr(uint16 value)
-{
-   uint16 valueScal;
-   /* BswFpgaIf_SecAtomicStart(); */
-
-   valueScal = BswFpgaIf_ScalingGroup1(value);
-
-   /* BswFpgaIf_SecAtomicStart(); */
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Vr_MSB4 = (uint32)(valueScal >> 8);
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Vr_LSB8 = (uint32)(valueScal);
-   /* BswFpgaIf_SecAtomicStop(); */
-}
-
-/*----------------*/
-static inline void BswFpgaIf_SetSignalPWM_Wl(uint16 value);
-static inline void BswFpgaIf_SetSignalPWM_Wl(uint16 value)
-{
-   uint16 valueScal;
-   /*  BswFpgaIf_SecAtomicStart(); */
-
-   valueScal = BswFpgaIf_ScalingGroup1(value);
-
-   /* BswFpgaIf_SecAtomicStart(); */
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Wl_MSB8 = (uint32)(valueScal >> 4);
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Wl_LSB4 = (uint32)(valueScal);
-   /* BswFpgaIf_SecAtomicStop(); */
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalPWM_Wr(uint16 value);
-static inline void BswFpgaIf_SetSignalPWM_Wr(uint16 value)
-{
-   uint16 valueScal;
-   /*  BswFpgaIf_SecAtomicStart(); */
-
-   valueScal = BswFpgaIf_ScalingGroup1(value);
-
-   /*  BswFpgaIf_SecAtomicStart(); */
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Wr_MSB4 = (uint32)(valueScal >> 8);
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Wr_LSB8 = (uint8)(valueScal);
-   /* BswFpgaIf_SecAtomicStop(); */
-}
-/*----------------*/
-static inline void BswFpgaIf_SetAtomicSignalPWM_All(
-                                         uint16 valuePwmUl,
-                                         uint16 valuePwmUr,
-                                         uint16 valuePwmVl,
-                                         uint16 valuePwmVr,
-                                         uint16 valuePwmWl,
-                                         uint16 valuePwmWr
-                                         );
-static inline void BswFpgaIf_SetAtomicSignalPWM_All(
-                                         uint16 valuePwmUl,
-                                         uint16 valuePwmUr,
-                                         uint16 valuePwmVl,
-                                         uint16 valuePwmVr,
-                                         uint16 valuePwmWl,
-                                         uint16 valuePwmWr
-                                         )
-{
-   uint16 valueScalPwmUl;
-   uint16 valueScalPwmUr;
-   uint16 valueScalPwmVl;
-   uint16 valueScalPwmVr;
-   uint16 valueScalPwmWl;
-   uint16 valueScalPwmWr;
-   BswFpgaIf_SecAtomicStart();
-
-   valueScalPwmUl = BswFpgaIf_ScalingGroup1(valuePwmUl);
-   valueScalPwmUr = BswFpgaIf_ScalingGroup1(valuePwmUr);
-   valueScalPwmVl = BswFpgaIf_ScalingGroup1(valuePwmVl);
-   valueScalPwmVr = BswFpgaIf_ScalingGroup1(valuePwmVr);
-   valueScalPwmWl = BswFpgaIf_ScalingGroup1(valuePwmWl);
-   valueScalPwmWr = BswFpgaIf_ScalingGroup1(valuePwmWr);
-
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Ul_MSB8 = (uint32)(valueScalPwmUl >> 4);
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Ul_LSB4 = (uint32)(valueScalPwmUl);
-/*--------*/
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Ur_MSB4 = (uint32)(valueScalPwmUr >> 8);
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Ur_LSB8 = (uint32)(valueScalPwmUr);
-/*--------*/
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Vl_MSB8 = (uint32)(valueScalPwmVl >> 4);
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Vl_LSB4 = (uint32)(valueScalPwmVl);
-/*--------*/
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Vr_MSB4 = (uint32)(valueScalPwmVr >> 8);
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Vr_LSB8 = (uint32)(valueScalPwmVr);
-/*--------*/
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Wl_MSB8 = (uint32)(valueScalPwmWl >> 4);
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Wl_LSB4 = (uint32)(valueScalPwmWl);
-/*--------*/
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Wr_MSB4 = (uint32)(valueScalPwmWr >> 8);
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Wr_LSB8 = (uint8)(valueScalPwmWr);
-/*----------------*/
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-/*--------*/
-/* SVM    */
-/*--------*/
-/*----------------*/
-static inline void BswFpgaIf_SetSignalSVM_V1(uint16 value);
-static inline void BswFpgaIf_SetSignalSVM_V1(uint16 value)
-{
-   /* BswFpgaIf_SecAtomicStart(); */
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_V1 = (uint32)(value);
-   /* BswFpgaIf_SecAtomicStop(); */
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalSVM_V2(uint16 value);
-static inline void BswFpgaIf_SetSignalSVM_V2(uint16 value)
-{
-   /* BswFpgaIf_SecAtomicStart(); */
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_V2_MSB2 = (uint32)(value >> 4);
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_V2_LSB4 = (uint32)(value);
-   /* BswFpgaIf_SecAtomicStop(); */
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalSVM_V3(uint16 value);
-static inline void BswFpgaIf_SetSignalSVM_V3(uint16 value)
-{
-   /* BswFpgaIf_SecAtomicStart(); */
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_V3_MSB4 = (uint32)(value >> 2);
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_V3_LSB2 = (uint32)(value);
-   /* BswFpgaIf_SecAtomicStop(); */
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalSVM_V4(uint16 value);
-static inline void BswFpgaIf_SetSignalSVM_V4(uint16 value)
-{
-   /* BswFpgaIf_SecAtomicStart(); */
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_V4 = (uint32)(value);
-   /* BswFpgaIf_SecAtomicStop(); */
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalSVM_AT1(uint16 value);
-static inline void BswFpgaIf_SetSignalSVM_AT1(uint16 value)
-{
-   uint16 valueScal;
-   /* BswFpgaIf_SecAtomicStart(); */
-
-   valueScal = BswFpgaIf_ScalingGroup1(value);
-
-   /* #define BswFpgaIf_SecAtomicStart(); */
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_AT1_MSB8 = (uint32)(valueScal >> 4);
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_AT1_LSB4 = (uint32)(valueScal);
-   /* BswFpgaIf_SecAtomicStop(); */
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalSVM_AT2(uint16 value);
-static inline void BswFpgaIf_SetSignalSVM_AT2(uint16 value)
-{
-   uint16 valueScal;
-   /* BswFpgaIf_SecAtomicStart(); */
-
-   valueScal = BswFpgaIf_ScalingGroup1(value);
-
-   /* BswFpgaIf_SecAtomicStart(); */
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_AT2_MSB4 = (uint32)(valueScal >> 8);
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_AT2_LSB8 = (uint8)(valueScal);
-   /* BswFpgaIf_SecAtomicStop(); */
-}
-
-/*----------------*/
-static inline void BswFpgaIf_SetSignalSVM_AT3(uint16 value);
-static inline void BswFpgaIf_SetSignalSVM_AT3(uint16 value)
-{
-   uint16 valueScal;
-   /* BswFpgaIf_SecAtomicStart(); */
-
-   valueScal = BswFpgaIf_ScalingGroup1(value);
-
-   /* #define BswFpgaIf_SecAtomicStart(); */
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_AT3_MSB8 = (uint32)(valueScal >> 4);
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_AT3_LSB4 = (uint32)(valueScal);
-   /* BswFpgaIf_SecAtomicStop(); */
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalSVM_AT4(uint16 value);
-static inline void BswFpgaIf_SetSignalSVM_AT4(uint16 value)
-{
-   uint16 valueScal;
-   /* BswFpgaIf_SecAtomicStart(); */
-
-   valueScal = BswFpgaIf_ScalingGroup1(value);
-
-   /* BswFpgaIf_SecAtomicStart(); */
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_AT4_MSB4 = (uint32)(valueScal >> 8);
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_AT4_LSB8 = (uint8)(valueScal);
-   /* BswFpgaIf_SecAtomicStop(); */
-}
-/*----------------*/
-static inline void BswFpgaIf_SetAtomicSignalSVM_All(
-                                         uint16 valueSvmV1,
-                                         uint16 valueSvmV2,
-                                         uint16 valueSvmV3,
-                                         uint16 valueSvmV4,
-                                         uint16 valueSvmAT1,
-                                         uint16 valueSvmAT2,
-                                         uint16 valueSvmAT3,
-                                         uint16 valueSvmAT4
-                                         );
-static inline void BswFpgaIf_SetAtomicSignalSVM_All(
-                                         uint16 valueSvmV1,
-                                         uint16 valueSvmV2,
-                                         uint16 valueSvmV3,
-                                         uint16 valueSvmV4,
-                                         uint16 valueSvmAT1,
-                                         uint16 valueSvmAT2,
-                                         uint16 valueSvmAT3,
-                                         uint16 valueSvmAT4
-                                         )
-{
-   uint16 valueScalSvmAT1;
-   uint16 valueScalSvmAT2;
-   uint16 valueScalSvmAT3;
-   uint16 valueScalSvmAT4;
-   BswFpgaIf_SecAtomicStart();
-
-   valueScalSvmAT1 = BswFpgaIf_ScalingGroup1(valueSvmAT1);
-   valueScalSvmAT2 = BswFpgaIf_ScalingGroup1(valueSvmAT2);
-   valueScalSvmAT3 = BswFpgaIf_ScalingGroup1(valueSvmAT3);
-   valueScalSvmAT4 = BswFpgaIf_ScalingGroup1(valueSvmAT4);
-
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_V1 = (uint32)(valueSvmV1);
-/*--------*/
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_V2_MSB2 = (uint32)(valueSvmV2 >> 4);
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_V2_LSB4 = (uint32)(valueSvmV2);
-/*--------*/
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_V3_MSB4 = (uint32)(valueSvmV3 >> 2);
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_V3_LSB2 = (uint32)(valueSvmV3);
-/*--------*/
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_V4 = (uint32)(valueSvmV4);
-/*--------*/
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_AT1_MSB8 = (uint32)(valueScalSvmAT1 >> 4);
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_AT1_LSB4 = (uint32)(valueScalSvmAT1);
-/*--------*/
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_AT2_MSB4 = (uint32)(valueScalSvmAT2 >> 8);
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_AT2_LSB8 = (uint8)(valueScalSvmAT2);
-/*--------*/
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_AT3_MSB8 = (uint32)(valueScalSvmAT3 >> 4);
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_AT3_LSB4 = (uint32)(valueScalSvmAT3);
-/*--------*/
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_AT4_MSB4 = (uint32)(valueScalSvmAT4 >> 8);
-   BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_AT4_LSB8 = (uint8)(valueScalSvmAT4);
-/*----------------*/
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalPWM_Ul_ON(boolean value);
-static inline void BswFpgaIf_SetSignalPWM_Ul_ON(boolean value)
-{
-   /* BswFpgaIf_SecAtomicStart(); */
-   if(BswFpgaIfTxPwmCtrlStgOnOffOvrdEna[0] == BSWFPGAIF_FALSE)
-   {
-     BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Ul_ON = value;
-   }
-   else
-   {
-\t BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Ul_ON = BswFpgaIfTxPwmCtrlStgOnOffOvrdVal[0];
-   }
-   /* BswFpgaIf_SecAtomicStop(); */
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalPWM_Ur_ON(boolean value);
-static inline void BswFpgaIf_SetSignalPWM_Ur_ON(boolean value)
-{
-   /* BswFpgaIf_SecAtomicStart(); */
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Ur_ON = value;
-   /* BswFpgaIf_SecAtomicStop(); */
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalPWM_Vl_ON(boolean value);
-static inline void BswFpgaIf_SetSignalPWM_Vl_ON(boolean value)
-{
-   /* BswFpgaIf_SecAtomicStart(); */
-   if(BswFpgaIfTxPwmCtrlStgOnOffOvrdEna[1] == BSWFPGAIF_FALSE)
-   {
-     BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Vl_ON = value;
-   }
-   else
-   {
-\t BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Vl_ON = BswFpgaIfTxPwmCtrlStgOnOffOvrdVal[1];
-   }
-   /* BswFpgaIf_SecAtomicStop(); */
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalPWM_Vr_ON(boolean value);
-static inline void BswFpgaIf_SetSignalPWM_Vr_ON(boolean value)
-{
-   /* BswFpgaIf_SecAtomicStart(); */
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Vr_ON = value;
-   /* BswFpgaIf_SecAtomicStop(); */
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalPWM_Wl_ON(boolean value);
-static inline void BswFpgaIf_SetSignalPWM_Wl_ON(boolean value)
-{
-   /* BswFpgaIf_SecAtomicStart(); */
-   if(BswFpgaIfTxPwmCtrlStgOnOffOvrdEna[2] == BSWFPGAIF_FALSE)
-   {
-     BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Wl_ON = value;
-   }
-   else
-   {
-\t BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Wl_ON = BswFpgaIfTxPwmCtrlStgOnOffOvrdVal[2];
-   }
-   /* BswFpgaIf_SecAtomicStop(); */
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalPWM_Wr_ON(boolean value);
-static inline void BswFpgaIf_SetSignalPWM_Wr_ON(boolean value)
-{
-   /* BswFpgaIf_SecAtomicStart(); */
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Wr_ON = value;
-   /* BswFpgaIf_SecAtomicStop(); */
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalPWM_All_ON(boolean value);
-static inline void BswFpgaIf_SetSignalPWM_All_ON(boolean value)
-{
-   /* BswFpgaIf_SecAtomicStart(); */
-   if (value == 0)
-   {
-      BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field2.PWM_All_ON = 0x00;
-   }
-   else
-   {
-      BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field2.PWM_All_ON = 0x3F;
-   }
-   /* BswFpgaIf_SecAtomicStop(); */
-}
-/*----------------*/
-static inline void BswFpgaIf_SetAtomicSignalPWM_All_ON(
-                                            boolean valuePwmUlOn,
-                                            boolean valuePwmUrOn,
-                                            boolean valuePwmVlOn,
-                                            boolean valuePwmVrOn,
-                                            boolean valuePwmWlOn,
-                                            boolean valuePwmWrOn
-                                            );
-static inline void BswFpgaIf_SetAtomicSignalPWM_All_ON(
-                                            boolean valuePwmUlOn,
-                                            boolean valuePwmUrOn,
-                                            boolean valuePwmVlOn,
-                                            boolean valuePwmVrOn,
-                                            boolean valuePwmWlOn,
-                                            boolean valuePwmWrOn
-                                            )
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Ul_ON = valuePwmUlOn;
-/*--------*/
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Ur_ON = valuePwmUrOn;
-/*--------*/
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Vl_ON = valuePwmVlOn;
-/*--------*/
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Vr_ON = valuePwmVrOn;
-/*--------*/
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Wl_ON = valuePwmWlOn;
-/*--------*/
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Wr_ON = valuePwmWrOn;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalPWM_RatioFreq(uint8 value);
-static inline void BswFpgaIf_SetSignalPWM_RatioFreq(uint8 value)
-{
-   if(BswFpgaIfTxPwmRatioFreqReqOvrdEna == BSWFPGAIF_FALSE)
-   {
-     BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_RatioFreq = value;
-   }
-   else
-   {
-\t BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_RatioFreq = BswFpgaIfTxPwmRatioFreqReqOvrdVal;
-   }
-}
-/*----------------*/
-/* Set Ipdu TxA   */
-/*----------------*/
-/*----------------*/
-static inline void BswFpgaIf_SetSignalStateReqEmergencySw(boolean value);
-static inline void BswFpgaIf_SetSignalStateReqEmergencySw(boolean value)
-{
-   boolean localValue;
-   localValue = (boolean)(value | BswFpgaIf_bAutSigEmergencySwMask);
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.StateReq.Field.EmergencySw = localValue;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.StateReq.Field.EmergencySw = localValue;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.StateReq.Field.EmergencySw = localValue;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.StateReq.Field.EmergencySw = localValue;
-}
-
-
-
-/*----------------*/
-/*----------------*/
-
-/*----------------*/
-/*--------*/
-/* FaultA */
-/*--------*/
-static inline void BswFpgaIf_SetSignalFaultA(uint16 value);
-static inline void BswFpgaIf_SetSignalFaultA(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   if (value != 0)
-   {
-      BswFpgaIf_AutSigEmergencySwDelay(BswFpgaIf_u16AutSigEmergencySwDelayC, 1);
-   }
-   BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Data16 = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Data16 = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Data16 = value;
-   BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Data16 = value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-/*----------------*/
-
-/*----------------*/
-
-/*----------------*/
-
-/*----------------*/
-
-/*----------------*/
-/*----------------*/
-
-/*----------------*/
-/*----------------*/
-static inline void BswFpgaIf_SetSignalPwmMinDutyCycle(uint16 value);
-static inline void BswFpgaIf_SetSignalPwmMinDutyCycle(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   if(BswFpgaIfTxPwmMinDutycycOvrdEna == BSWFPGAIF_FALSE)
-   {
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M0PwmMinDutyCycle_MSB8 = (uint16)(value >> 4);
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M0PwmMinDutyCycle_LSB4 = (uint16)(value);
-   }
-   else
-   {
-\t BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M0PwmMinDutyCycle_MSB8 = (uint16)(BswFpgaIfTxPwmMinDutycycOvrdVal >> 4);
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M0PwmMinDutyCycle_LSB4 = (uint16)(BswFpgaIfTxPwmMinDutycycOvrdVal); 
-   }
-   BswFpgaIf_SecAtomicStop();
-
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalPwmMaxDutyCycle(uint16 value);
-static inline void BswFpgaIf_SetSignalPwmMaxDutyCycle(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   if(BswFpgaIfTxPwmMaxDutycycOvrdEna == BSWFPGAIF_FALSE)
-   {
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M0PwmMaxDutyCycle_MSB8 = (uint16)(value >> 4);
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M0PwmMaxDutyCycle_LSB4 = (uint16)(value);
-   }
-   else
-   {
-\t BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M0PwmMaxDutyCycle_MSB8 = (uint16)(BswFpgaIfTxPwmMaxDutycycOvrdVal >> 4);
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M0PwmMaxDutyCycle_LSB4 = (uint16)(BswFpgaIfTxPwmMaxDutycycOvrdVal);
-   }
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalM0Id2Spare09To11(uint8 value);
-static inline void BswFpgaIf_SetSignalM0Id2Spare09To11(uint8 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M0Id2Spare09To11 = (uint16)value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalM0Id2Spare05To07(uint8 value);
-static inline void BswFpgaIf_SetSignalM0Id2Spare05To07(uint8 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M0Id2Spare05To07 = (uint16)value;
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalActDischReq(boolean value);
-static inline void BswFpgaIf_SetSignalActDischReq(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   if(BswFpgaIfTxActDischReqOvrdEna == BSWFPGAIF_FALSE)
-   {
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.ActDisch_Req = (uint16)value;
-   }
-   else
-   {
-\t BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.ActDisch_Req = (uint16)BswFpgaIfTxActDischReqOvrdVal;
-   }
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalFyBPwrSupCtrl(boolean value);
-static inline void BswFpgaIf_SetSignalFyBPwrSupCtrl(boolean value)
-{
-   BswFpgaIf_SecAtomicStart();
-   if(BswFpgaIfTxFyBPwrSupCtrlOvrdEna == BSWFPGAIF_FALSE)
-   {
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FyBPwrSupCtrl = (uint16)value;
-   }
-   else
-   {
-\t BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FyBPwrSupCtrl = (uint16)BswFpgaIfTxFyBPwrSupCtrlOvrdVal; 
-   }
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalM0IFilAverage(uint8 value);
-static inline void BswFpgaIf_SetSignalM0IFilAverage(uint8 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   if(BswFpgaIfTxIFiltAvgOvrdEna == BSWFPGAIF_FALSE)
-   {
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M0IFilAverage = (uint16)value;
-   }
-   else
-   {
-\t BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M0IFilAverage = (uint16)BswFpgaIfTxIFiltAvgOvrdVal; 
-   }
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalM0VFilAverage(uint8 value);
-static inline void BswFpgaIf_SetSignalM0VFilAverage(uint8 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   if(BswFpgaIfTxVFiltAvgOvrdEna == BSWFPGAIF_FALSE)
-   {
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M0VFilAverage = (uint16)value;
-   }
-   else
-   {
-\t BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M0VFilAverage = (uint16)BswFpgaIfTxVFiltAvgOvrdVal;
-   }
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalDebugL(uint16 value);
-static inline void BswFpgaIf_SetSignalDebugL(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M0DebugL_MSB8 = (uint16)(value >> 4);
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M0DebugL_LSB4 = (uint16)(value);
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalM1Id0Spare(uint16 value);
-static inline void BswFpgaIf_SetSignalM1Id0Spare(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M1Id0Spare_MSB4 = (uint16)(value >> 8);
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M1Id0Spare_LSB8 = (uint32)(value);
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalM1Id1Spare(uint16 value);
-static inline void BswFpgaIf_SetSignalM1Id1Spare(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M1Id1Spare_MSB4 = (uint16)(value >> 8);
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M1Id1Spare_LSB8 = (uint32)(value);
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalM1Id2Spare(uint16 value);
-static inline void BswFpgaIf_SetSignalM1Id2Spare(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M1Id2Spare_MSB4 = (uint16)(value >> 8);
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M1Id2Spare_LSB8 = (uint32)(value);
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalDebugH(uint16 value);
-static inline void BswFpgaIf_SetSignalDebugH(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M1DebugH_MSB4 = (uint16)(value >> 8);
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M1DebugH_LSB8 = (uint32)(value);
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetAtomicDebugLDebugH(uint16 valueDebugL, uint16 valueDebugH);
-static inline void BswFpgaIf_SetAtomicDebugLDebugH(uint16 valueDebugL, uint16 valueDebugH)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M0DebugL_MSB8 = (uint16)(valueDebugL >> 4);
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M0DebugL_LSB4 = (uint16)(valueDebugL);
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M1DebugH_MSB4 = (uint16)(valueDebugH >> 8);
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M1DebugH_LSB8 = (uint32)(valueDebugH);
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-/*--------*/
-/* Calib  */
-/*--------*/
-static inline void BswFpgaIf_SetSignalPwmFreq(uint16 value);
-static inline void BswFpgaIf_SetSignalPwmFreq(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   if(BswFpgaIfTxPwmFreqOvrdEna == BSWFPGAIF_FALSE)
-   {
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M2PwmFreq_MSB8 = (uint16)(value >> 4);
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M2PwmFreq_LSB4 = (uint32)(value);
-   }
-   else
-   {
-\t BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M2PwmFreq_MSB8 = (uint16)(BswFpgaIfTxPwmFreqOvrdVal >> 4);
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M2PwmFreq_LSB4 = (uint32)(BswFpgaIfTxPwmFreqOvrdVal); 
-   }
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalPwmInitValVl(uint16 value);
-static inline void BswFpgaIf_SetSignalPwmInitValVl(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   if(BswFpgaIfTxPwmInitOvrdEna[1] == BSWFPGAIF_FALSE)
-   {
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M2PwmInitValVl_MSB8 = (uint16)(value >> 4);
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M2PwmInitValVl_LSB4 = (uint32)(value);
-   }
-   else
-   {
-\t BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M2PwmInitValVl_MSB8 = (uint16)(BswFpgaIfTxPwmInitOvrdVal[1] >> 4);
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M2PwmInitValVl_LSB4 = (uint32)(BswFpgaIfTxPwmInitOvrdVal[1]);
-   }
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalOverCurThBat(uint16 value);
-static inline void BswFpgaIf_SetSignalOverCurThBat(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M2OverCurThBat_MSB8 = (uint16)(value >> 4);
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M2OverCurThBat_LSB4 = (uint32)(value);
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalOverCurThMot(uint16 value);
-static inline void BswFpgaIf_SetSignalOverCurThMot(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M2OverCurThMot_MSB8 = (uint16)(value >> 4);
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M2OverCurThMot_LSB4 = (uint32)(value);
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalPwmDeadtime(uint16 value);
-static inline void BswFpgaIf_SetSignalPwmDeadtime(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   if(BswFpgaIfTxPwmDeadTimeOvrdEna == BSWFPGAIF_FALSE)
-   {
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M3PwmDeadtime_MSB4 = (uint16)(value >> 8);
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M3PwmDeadtime_LSB8 = (uint32)(value);
-   }
-   else
-   {
-\t BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M3PwmDeadtime_MSB4 = (uint16)(BswFpgaIfTxPwmDeadTimeOvrdVal >> 8);
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M3PwmDeadtime_LSB8 = (uint32)(BswFpgaIfTxPwmDeadTimeOvrdVal);  
-   }
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalPwmInitValVr(uint16 value);
-static inline void BswFpgaIf_SetSignalPwmInitValVr(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M3PwmInitValVr_MSB4 = (uint16)(value >> 8);
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M3PwmInitValVr_LSB8 = (uint32)(value);
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalOverVoltVbatTh(uint16 value);
-static inline void BswFpgaIf_SetSignalOverVoltVbatTh(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   if(BswFpgaIfTxOVbattThdOvrdEna == BSWFPGAIF_FALSE)
-   {
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M3OverVoltVbatTh_MSB4 = (uint16)(value >> 8);
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M3OverVoltVbatTh_LSB8 = (uint32)(value);
-   }
-   else
-   {
-\t BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M3OverVoltVbatTh_MSB4 = (uint16)(BswFpgaIfTxOVbattThdOvrdVal >> 8);
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M3OverVoltVbatTh_LSB8 = (uint32)(BswFpgaIfTxOVbattThdOvrdVal); 
-   }
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalActiveDisDur(uint16 value);
-static inline void BswFpgaIf_SetSignalActiveDisDur(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M3ActiveDisDur_MSB4 = (uint16)(value >> 8);
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M3ActiveDisDur_LSB8 = (uint32)(value);
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalM4Id0Spare(uint16 value);
-static inline void BswFpgaIf_SetSignalM4Id0Spare(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M4Id0Spare_MSB8 = (uint16)(value >> 4);
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M4Id0Spare_LSB4 = (uint32)(value);
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalPwmInitValWl(uint16 value);
-static inline void BswFpgaIf_SetSignalPwmInitValWl(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   if(BswFpgaIfTxPwmInitOvrdEna[2] == BSWFPGAIF_FALSE)
-   {
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M4PwmInitValWl_MSB8 = (uint16)(value >> 4);
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M4PwmInitValWl_LSB4 = (uint32)(value);
-   }
-   else
-   {
-\t BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M4PwmInitValWl_MSB8 = (uint16)(BswFpgaIfTxPwmInitOvrdVal[2] >> 4);
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M4PwmInitValWl_LSB4 = (uint32)(BswFpgaIfTxPwmInitOvrdVal[2]); 
-   }
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalM4Id2Spare(uint16 value);
-static inline void BswFpgaIf_SetSignalM4Id2Spare(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M4Id2Spare_MSB8 = (uint16)(value >> 4);
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M4Id2Spare_LSB4 = (uint32)(value);
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalSynchroDelay(uint16 value);
-static inline void BswFpgaIf_SetSignalSynchroDelay(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   if(BswFpgaIfTxSynDlyOvrdEna == BSWFPGAIF_FALSE)
-   {
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M4SynchroDelay_MSB8 = (uint16)(value >> 4);
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M4SynchroDelay_LSB4 = (uint32)(value);
-   }
-   else
-   {
-\t BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M4SynchroDelay_MSB8 = (uint16)(BswFpgaIfTxSynDlyOvrdVal >> 4);
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M4SynchroDelay_LSB4 = (uint32)(BswFpgaIfTxSynDlyOvrdVal);  
-   }
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalPwmInitValUl(uint16 value);
-static inline void BswFpgaIf_SetSignalPwmInitValUl(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   if(BswFpgaIfTxPwmInitOvrdEna[0] == BSWFPGAIF_FALSE)
-   {
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M5PwmInitValUl_MSB4 = (uint16)(value >> 8);
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M5PwmInitValUl_LSB8 = (uint32)(value);
-   }
-   else
-   {
-\t BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M5PwmInitValUl_MSB4 = (uint16)(BswFpgaIfTxPwmInitOvrdVal[0] >> 8);
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M5PwmInitValUl_LSB8 = (uint32)(BswFpgaIfTxPwmInitOvrdVal[0]);
-   }
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalPwmInitValWr(uint16 value);
-static inline void BswFpgaIf_SetSignalPwmInitValWr(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M5PwmInitValWr_MSB4 = (uint16)(value >> 8);
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M5PwmInitValWr_LSB8 = (uint32)(value);
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalM5Id2Spare(uint16 value);
-static inline void BswFpgaIf_SetSignalM5Id2Spare(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M5Id2Spare_MSB4 = (uint16)(value >> 8);
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M5Id2Spare_LSB8 = (uint32)(value);
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalM5Id3Spare(uint16 value);
-static inline void BswFpgaIf_SetSignalM5Id3Spare(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M5Id3Spare_MSB4 = (uint16)(value >> 8);
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M5Id3Spare_LSB8 = (uint32)(value);
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalPwmInitValUr(uint16 value);
-static inline void BswFpgaIf_SetSignalPwmInitValUr(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M6PwmInitValUr_MSB8 = (uint32)(value >> 4);
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M6PwmInitValUr_LSB4 = (uint16)(value);
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalM6Id1Spare(uint16 value);
-static inline void BswFpgaIf_SetSignalM6Id1Spare(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M6Id1Spare_MSB8 = (uint32)(value >> 4);
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M6Id1Spare_LSB4 = (uint16)(value);
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalM6Id2Spare(uint16 value);
-static inline void BswFpgaIf_SetSignalM6Id2Spare(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M6Id2Spare_MSB8 = (uint32)(value >> 4);
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M6Id2Spare_LSB4 = (uint16)(value);
-   BswFpgaIf_SecAtomicStop();
-}
-/*----------------*/
-static inline void BswFpgaIf_SetSignalM6Id3Spare(uint16 value);
-static inline void BswFpgaIf_SetSignalM6Id3Spare(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   if(BswFpgaIfTxMidPtFltWitSwtPerOvrdEna == BSWFPGAIF_TRUE)
-   {
-\t BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M6Id3Spare_MSB8 = (uint32)(BswFpgaIfTxMidPtFltWitSwtPerOvrdVal >> 4);
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M6Id3Spare_LSB4 = (uint16)(BswFpgaIfTxMidPtFltWitSwtPerOvrdVal);
-   }
-   else if(BswFpgaIfTxSwtPerFiltWitMidPtFltOvrdEna == BSWFPGAIF_TRUE)
-   {
-\t BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M6Id3Spare_MSB8 = (uint32)(BswFpgaIfTxSwtPerFiltWitMidPtFltOvrdVal >> 4);
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M6Id3Spare_LSB4 = (uint16)(BswFpgaIfTxSwtPerFiltWitMidPtFltOvrdVal);
-   }
-   else if(BswFpgaIfTxMidPtFltDisOvrdEna == BSWFPGAIF_TRUE)
-   {
-\t BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M6Id3Spare_MSB8 = (uint32)(BswFpgaIfTxMidPtFltDisOvrdVal >> 4);
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M6Id3Spare_LSB4 = (uint16)(BswFpgaIfTxMidPtFltDisOvrdVal);
-   }
-   else
-   {
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M6Id3Spare_MSB8 = (uint32)(value >> 4);
-     BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M6Id3Spare_LSB4 = (uint16)(value);
-   }
-   BswFpgaIf_SecAtomicStop();
-}
-/*--------*/
-/*----------------*/
-static inline void BswFpgaIf_SetSignalDebug(uint16 value);
-static inline void BswFpgaIf_SetSignalDebug(uint16 value)
-{
-   BswFpgaIf_SecAtomicStart();
-   
-   if(BswFpgaIfDebugValTxOvrdEna == BSWFPGAIF_FALSE)
-   {
-     BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.Debug_MSB4 = (uint16)(value >> 8);
-     BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.Debug_LSB8 = (uint16)(value);
-     
-     BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.Debug_MSB4 = (uint16)(value >> 8);
-     BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.Debug_LSB8 = (uint16)(value);
-     
-     BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.Debug_MSB4 = (uint16)(value >> 8);
-     BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.Debug_LSB8 = (uint16)(value);
-     
-     BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.Debug_MSB4 = (uint16)(value >> 8);
-     BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.Debug_LSB8 = (uint16)(value);
-   }
-   else
-   {
-\t BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.Debug_MSB4 = (uint16)(BswFpgaIfDebugValTxOvrdVal >> 8);
-     BswFpgaIfIpduTx.Data.TxA.IdMx[0].Signal.Debug_LSB8 = (uint16)(BswFpgaIfDebugValTxOvrdVal);
-     
-     BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.Debug_MSB4 = (uint16)(BswFpgaIfDebugValTxOvrdVal >> 8);
-     BswFpgaIfIpduTx.Data.TxA.IdMx[1].Signal.Debug_LSB8 = (uint16)(BswFpgaIfDebugValTxOvrdVal);
-     
-     BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.Debug_MSB4 = (uint16)(BswFpgaIfDebugValTxOvrdVal >> 8);
-     BswFpgaIfIpduTx.Data.TxA.IdMx[2].Signal.Debug_LSB8 = (uint16)(BswFpgaIfDebugValTxOvrdVal);
-     
-     BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.Debug_MSB4 = (uint16)(BswFpgaIfDebugValTxOvrdVal >> 8);
-     BswFpgaIfIpduTx.Data.TxA.IdMx[3].Signal.Debug_LSB8 = (uint16)(BswFpgaIfDebugValTxOvrdVal);
-   }
-   BswFpgaIf_SecAtomicStop();
-}
-
-static inline uint16 BswFpgaIf_GetSignalCurMeasPh_U(void);
-static inline uint16 BswFpgaIf_GetSignalCurMeasPh_U(void)
-{
-   uint16 localValue;
-
-   localValue =
-   (uint16)(((uint16)BswFpgaIfIpduRx.Data.RxS.Signal.CurMeasPh_U_MSB8 << 4)
-           | (uint16)BswFpgaIfIpduRx.Data.RxS.Signal.CurMeasPh_U_LSB4
-           );
-
-   return(localValue);
-}
-
-/*----------------*/
-static inline uint16 BswFpgaIf_GetSignalCurMeasPh_V(void);
-static inline uint16 BswFpgaIf_GetSignalCurMeasPh_V(void)
-{
-   uint16 localValue;
-
-   localValue =
-   (uint16)(((uint16)BswFpgaIfIpduRx.Data.RxS.Signal.CurMeasPh_V_MSB8 << 4)
-           | (uint16)BswFpgaIfIpduRx.Data.RxS.Signal.CurMeasPh_V_LSB4
-           );
-
-   return(localValue);
-}
-/*----------------*/
-
-/*----------------*/
-static inline uint16 BswFpgaIf_GetSignalCurMeasPh_W(void);
-static inline uint16 BswFpgaIf_GetSignalCurMeasPh_W(void)
-{
-   uint16 localValue;
-
-   localValue =
-   (uint16)(((uint16)BswFpgaIfIpduRx.Data.RxS.Signal.CurMeasPh_W_MSB8 << 4)
-           | (uint16)BswFpgaIfIpduRx.Data.RxS.Signal.CurMeasPh_W_LSB4
-           );
-
-   return(localValue);
-}
-/*----------------*/
-
-/*----------------*/
-static inline uint16 BswFpgaIf_GetSignalDCLinkVolatge(void);
-static inline uint16 BswFpgaIf_GetSignalDCLinkVolatge(void)
-{
-   uint16 localValue;
-
-   localValue =
-   (uint16)(((uint16)BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.DcLinkDrvBd_MSB8 << 4)
-           | (uint16)BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.DcLinkDrvBd_LSB4
-           );
-
-   return(localValue);
-}
-
-static inline uint16 BswFpgaIf_GetSignalIgbtVTemp(void);
-static inline uint16 BswFpgaIf_GetSignalIgbtVTemp(void)
-{
-   uint16 localValue = 0;
-
-   localValue =
-   (uint16)(((uint16)BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.IgbtTempV_MSB4 << 8)
-           | (uint16)BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.IgbtTempV_LSB8
-           );
-
-   return(localValue);
-}
-
-static inline uint16 BswFpgaIf_GetSignalIgbtUTemp(void);
-static inline uint16 BswFpgaIf_GetSignalIgbtUTemp(void)
-{
-   uint16 localValue = 0;
-
-   localValue =
-   (uint16)(((uint16)BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.IgbtTempU_MSB4 << 8)
-           | (uint16)BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.IgbtTempU_LSB8
-           );
-
-   return(localValue);
-}
-
-static inline uint16 BswFpgaIf_GetSignalIgbtWTemp(void);
-static inline uint16 BswFpgaIf_GetSignalIgbtWTemp(void)
-{
-   uint16 localValue = 0;
-
-   localValue =
-            (uint16)(((uint16)BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.IgbtTempW_MSB8 << 4)
-                    | (uint16)BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.IgbtTempW_LSB4
-                    );
+#define STOP_SEC_CALIB
+/*lint -e(537,451) Repeated inclusion is needed. */
+#include "MemMap.h"
 
-   return(localValue);
-}
 
-#endif /* FPGAIFAPP_H*/
+#endif /* BSWFPGAIF_H*/
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/include/BswFpgaIfChk.h b/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/include/BswFpgaIfChk.h
deleted file mode 100644
index 63507ca84..000000000
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/include/BswFpgaIfChk.h
+++ /dev/null
@@ -1,600 +0,0 @@
-
-/*******************************************************************************
-**                      Revision Control History                              **
-*******************************************************************************/
-
-/* ***************************************************************************************************************** */
-/* File:      FPGAIfAppChk.h                                                                                           */
-/*                                                                                                                   */
-/*                                                                                                                   */
-/* First author:     Sapthagiri Gudihalli\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t */
-/* Other authors:   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t */
-/* ***************************************************************************************************************** */
-/* All Rights Reserved.  Confidential                                                                                */
-/* ***************************************************************************************************************** */
-
-#ifndef FPGAIFAPPCHK_H
-#define FPGAIFAPPCHK_H
-
-/*******************************************************************************
-**                      Includes                                              **
-*******************************************************************************/
-#include <Std_Types.h>
-/*----------------------------------------------------------------------------*/
-/* Check Endianness                                                           */
-/*----------------------------------------------------------------------------*/
-#define _BSWFPGAIF__CHK_MOTOROLA  0
-#define _BSWFPGAIF__CHK_INTEL     1
-
-#define _BSWFPGAIF__CHK_ENDIANNESS _BSWFPGAIF__CHK_INTEL
-
-#define BswFpgaIfChk_STATUS_OK     1
-#define BswFpgaIfChk_STATUS_NOK    0
-
-/******************************************************************************/
-/* CALIBRATIONS DECLARATION                                                   */
-/******************************************************************************/
-
-extern const boolean BswFpgaIf_bChkCRCOffXOROnC;
-extern const uint16 BswFpgaIf_u16Crc16LkpTab_4825[];
-extern const uint16 BswFpgaIf_u16Crc16LkpTab_333F[];
-extern const uint16 BswFpgaIf_u16Crc16LkpTab_5643[];
-extern uint16 CrcReceived;
-extern uint16 CrcCalc;
-
-/*******************************************************************************
-**                      Types                                                 **
-*******************************************************************************/
-
-
-/*----------------------------------------------------------------------------*/
-/* Check calculation XOR CPL                                                  */
-/*----------------------------------------------------------------------------*/
-
-
-/******************************************************************************/
-/*                                                                            */
-/* !Function    : BswFpgaIf_vidCalcCRCData10B                                */
-/* !Description : Check calculation, TxS, 10 bytes data                       */
-/*              : CRC 16 bits, Polynomial 0x4825                              */
-/* !Number      :                                                             */
-/* !Reference   :                                                             */
-/*                                                                            */
-/******************************************************************************/
-/* !LastAuthor  :                                                             */
-/******************************************************************************/
-/*----------------------------------------------------------------------------*/
-/* Tests function BswFpgaIf_vidCalcCRCData10B:                               */
-/*----------------------------------------------------------------------------*/
-/* Test1 : u8DataTab             = 0x31 32 33 34 35 36 37 38 39 3A            */
-/*       : Data len              = 10                                         */
-/*       : Chk CRC polynom       = 0x4825                                     */
-/*       : Chk init              = 0xFFFF                                     */
-/*       : Chk xor final value   = 0x0000                                     */
-/*       = u16DataChk            = 0xAD3A                                     */
-/*----------------------------------------------------------------------------*/
-static inline void BswFpgaIf_vidCalcCRCData10B(
-   volatile uint8 *DataTab,
-   volatile uint16 *DataChk
-);
-static inline void BswFpgaIf_vidCalcCRCData10B(
-   volatile uint8 *DataTab,    /* !Comment : Data table                       */
-                                 /* !Type    : *uint8                         */
-                                 /* !Range   : 0 - 0xFF                       */
-                                 /*                                           */
-   volatile uint16 *DataChk   /* !Comment : CRC16 calculated                  */
-                                 /* !Type    : uint16*                        */
-                                 /* !Range   : 0 - 0xFFFF                     */
-                                 /*                                           */
-)
-{
-   uint16 u16LocalChk10B;
-
-   u16LocalChk10B = 0xFFFF;
-   u16LocalChk10B = (uint16)((u16LocalChk10B << 8) ^ BswFpgaIf_u16Crc16LkpTab_4825[(u16LocalChk10B >> 8) ^ (uint16)(DataTab[3])]);
-   u16LocalChk10B = (uint16)((u16LocalChk10B << 8) ^ BswFpgaIf_u16Crc16LkpTab_4825[(u16LocalChk10B >> 8) ^ (uint16)(DataTab[2])]);
-   u16LocalChk10B = (uint16)((u16LocalChk10B << 8) ^ BswFpgaIf_u16Crc16LkpTab_4825[(u16LocalChk10B >> 8) ^ (uint16)(DataTab[1])]);
-   u16LocalChk10B = (uint16)((u16LocalChk10B << 8) ^ BswFpgaIf_u16Crc16LkpTab_4825[(u16LocalChk10B >> 8) ^ (uint16)(DataTab[0])]);
-   u16LocalChk10B = (uint16)((u16LocalChk10B << 8) ^ BswFpgaIf_u16Crc16LkpTab_4825[(u16LocalChk10B >> 8) ^ (uint16)(DataTab[7])]);
-   u16LocalChk10B = (uint16)((u16LocalChk10B << 8) ^ BswFpgaIf_u16Crc16LkpTab_4825[(u16LocalChk10B >> 8) ^ (uint16)(DataTab[6])]);
-   u16LocalChk10B = (uint16)((u16LocalChk10B << 8) ^ BswFpgaIf_u16Crc16LkpTab_4825[(u16LocalChk10B >> 8) ^ (uint16)(DataTab[5])]);
-   u16LocalChk10B = (uint16)((u16LocalChk10B << 8) ^ BswFpgaIf_u16Crc16LkpTab_4825[(u16LocalChk10B >> 8) ^ (uint16)(DataTab[4])]);
-   u16LocalChk10B = (uint16)((u16LocalChk10B << 8) ^ BswFpgaIf_u16Crc16LkpTab_4825[(u16LocalChk10B >> 8) ^ (uint16)(DataTab[11])]);
-   u16LocalChk10B = (uint16)((u16LocalChk10B << 8) ^ BswFpgaIf_u16Crc16LkpTab_4825[(u16LocalChk10B >> 8) ^ (uint16)(DataTab[10])]);
-
-#if (_BSWFPGAIF__CHK_ENDIANNESS == _BSWFPGAIF__CHK_INTEL)
-   *DataChk = u16LocalChk10B;
-#elif (_BSWFPGAIF__CHK_ENDIANNESS == _BSWFPGAIF__CHK_MOTOROLA)
-   *u16DataChk10B = BswFpgaIf_u16SwapMsbLsb(u16LocalChk10B);
-#endif
-}
-
-/******************************************************************************/
-/*                                                                            */
-/* !Function    : BswFpgaIf__vidCalcXORCplData10B                         */
-/* !Description : Check calculation, TxS, 10 bytes data                       */
-/*              : XOR 16 bits checksum and complement                         */
-/* !Number      :                                                             */
-/* !Reference   :                                                             */
-/*                                                                            */
-/******************************************************************************/
-/* !LastAuthor  :                                                             */
-/******************************************************************************/
-/*----------------------------------------------------------------------------*/
-/* Tests function BswFpgaIf_vidCalcXORCplData10B                             */
-/*----------------------------------------------------------------------------*/
-/* Test1 : u8DataTab             = 0x31 32 33 34 35 36 37 38 39 3A            */
-/*       : Data len              = 10                                         */
-/*       : Chk init              = 0x0000                                     */
-/*       : Chk xor final value   = 0xFFFF                                     */
-/*       = u16DataChk            = 0xCDC6                                     */
-/*----------------------------------------------------------------------------*/
-static inline void BswFpgaIf_vidCalcXORCplData10B(
-   volatile uint8 *u8DataTab,
-   volatile uint16 *u16DataChk
-);
-static inline void BswFpgaIf_vidCalcXORCplData10B(
-   volatile uint8 *u8DataTab,    /* !Comment : Data table                     */
-                                 /* !Type    : *uint8                         */
-                                 /* !Range   : 0 - 0xFF                       */
-                                 /*                                           */
-   volatile uint16 *u16DataChk   /* !Comment : CRC16 calculated               */
-                                 /* !Type    : uint16*                        */
-                                 /* !Range   : 0 - 0xFFFF                     */
-                                 /*                                           */
-)
-{
-   uint16 u16LocalChk;
-
-   u16LocalChk = 0x0000;
-
-   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[1]) << 8) | (uint16)(u8DataTab[0]));
-   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[3]) << 8) | (uint16)(u8DataTab[2]));
-   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[5]) << 8) | (uint16)(u8DataTab[4]));
-   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[7]) << 8) | (uint16)(u8DataTab[6]));
-   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[9]) << 8) | (uint16)(u8DataTab[8]));
-
-   u16LocalChk ^= 0xFFFF;
-
-#if (_BSWFPGAIF__CHK_ENDIANNESS == _BSWFPGAIF__CHK_INTEL)
-   *u16DataChk = u16LocalChk;
-#elif (_BSWFPGAIF__CHK_ENDIANNESS == _BSWFPGAIF__CHK_MOTOROLA)
-   *u16DataChk = BswFpgaIf_u16SwapMsbLsb(u16LocalChk);
-#endif
-}
-
-
-/******************************************************************************/
-/*                                                                            */
-/* !Function    : BswFpgaIf_vidWriteDataCheck10B                                 */
-/* !Description : Write control, 10 bytes data                                */
-/* !Number      :  */
-/* !Reference   : */
-/*                                                                            */
-/******************************************************************************/
-/* !LastAuthor  :                                                     */
-/******************************************************************************/
-static inline void BswFpgaIf_vidWriteDataCheck10B(
-   volatile uint8  *u8DataTab,
-   volatile uint16 *u16DataChk
-);
-static inline void BswFpgaIf_vidWriteDataCheck10B(
-   volatile uint8  *u8DataTab,   /* !Comment : Data table                     */
-                                 /* !Type    : *uint8                         */
-                                 /* !Range   : 0 - 0xFF                       */
-                                 /*                                           */
-   volatile uint16 *u16DataChk   /* !Comment : CRC16 calculated               */
-                                 /* !Type    : uint16*                        */
-                                 /* !Range   : 0 - 0xFFFF                     */
-                                 /*                                           */
-)
-{
-   uint16 u16LocalDataChk;
-
-   if (BswFpgaIf_bChkCRCOffXOROnC == 0)
-   {
-      BswFpgaIf_vidCalcCRCData10B(u8DataTab, &u16LocalDataChk);
-   }
-   else
-   {
-      BswFpgaIf_vidCalcXORCplData10B(u8DataTab, &u16LocalDataChk);
-   }
-
-
-
-   u16LocalDataChk = (((uint16)(u16LocalDataChk >> 8) & 0xFF) |  ((uint16)(u16LocalDataChk << 8) & 0xFF00));
-
-
-   *u16DataChk = u16LocalDataChk;
-}
-
-
-/******************************************************************************/
-/*                                                                            */
-/* !Function    : BswFpgaIf_vidCalcCRCData14B                                    */
-/* !Description : Check calculation, RxA, RxS, 14 bytes data                  */
-/*              : CRC 16 bits, Polynomial 0x5643                              */
-
-
-/*                                                                            */
-/******************************************************************************/
-
-/******************************************************************************/
-/*----------------------------------------------------------------------------*/
-/* Tests function BswFpgaIf_vidCalcCRCData14B:                                   */
-/*----------------------------------------------------------------------------*/
-/* Test1 : u8DataTab             = 0x31 32 33 34 35 36 37 38 39 3A 3B 3C 3D   */
-/*       :                       =   3E                                       */
-/*       : Data len              = 14                                         */
-/*       : Chk CRC polynom       = 0x5643                                     */
-/*       : Chk init              = 0xFFFF                                     */
-/*       : Chk xor final value   = 0x0000                                     */
-/*       = u16DataChk            = 0xE8DE                                     */
-/*----------------------------------------------------------------------------*/
-static inline void BswFpgaIf_vidCalcCRCData14B(
-   volatile uint8 *u8DataTab14B,
-   volatile uint16 *u16DataChk14B
-);
-static inline void BswFpgaIf_vidCalcCRCData14B(
-   volatile uint8 *u8DataTab14B,    /* !Comment : Data table                     */
-                                 /* !Type    : *uint8                         */
-                                 /* !Range   : 0 - 0xFF                       */
-                                 /*                                           */
-   volatile uint16 *u16DataChk14B   /* !Comment : CRC16 calculated               */
-                                 /* !Type    : uint16*                        */
-                                 /* !Range   : 0 - 0xFFFF                     */
-                                 /*                                           */
-)
-{
-   uint16 u16LocalChk14B;
-
-   u16LocalChk14B = 0xFFFF;
-
-   u16LocalChk14B = (uint16)((u16LocalChk14B << 8) ^ BswFpgaIf_u16Crc16LkpTab_5643[(u16LocalChk14B >> 8) ^ (uint16)(u8DataTab14B[3])]);//BswFpgaIf_u16Crc16LkpTab_5643
-   u16LocalChk14B = (uint16)((u16LocalChk14B << 8) ^ BswFpgaIf_u16Crc16LkpTab_5643[(u16LocalChk14B >> 8) ^ (uint16)(u8DataTab14B[2])]);
-   u16LocalChk14B = (uint16)((u16LocalChk14B << 8) ^ BswFpgaIf_u16Crc16LkpTab_5643[(u16LocalChk14B >> 8) ^ (uint16)(u8DataTab14B[1])]);
-   u16LocalChk14B = (uint16)((u16LocalChk14B << 8) ^ BswFpgaIf_u16Crc16LkpTab_5643[(u16LocalChk14B >> 8) ^ (uint16)(u8DataTab14B[0])]);
-   u16LocalChk14B = (uint16)((u16LocalChk14B << 8) ^ BswFpgaIf_u16Crc16LkpTab_5643[(u16LocalChk14B >> 8) ^ (uint16)(u8DataTab14B[7])]);
-   u16LocalChk14B = (uint16)((u16LocalChk14B << 8) ^ BswFpgaIf_u16Crc16LkpTab_5643[(u16LocalChk14B >> 8) ^ (uint16)(u8DataTab14B[6])]);
-   u16LocalChk14B = (uint16)((u16LocalChk14B << 8) ^ BswFpgaIf_u16Crc16LkpTab_5643[(u16LocalChk14B >> 8) ^ (uint16)(u8DataTab14B[5])]);
-   u16LocalChk14B = (uint16)((u16LocalChk14B << 8) ^ BswFpgaIf_u16Crc16LkpTab_5643[(u16LocalChk14B >> 8) ^ (uint16)(u8DataTab14B[4])]);
-   u16LocalChk14B = (uint16)((u16LocalChk14B << 8) ^ BswFpgaIf_u16Crc16LkpTab_5643[(u16LocalChk14B >> 8) ^ (uint16)(u8DataTab14B[11])]);
-   u16LocalChk14B = (uint16)((u16LocalChk14B << 8) ^ BswFpgaIf_u16Crc16LkpTab_5643[(u16LocalChk14B >> 8) ^ (uint16)(u8DataTab14B[10])]);
-   u16LocalChk14B = (uint16)((u16LocalChk14B << 8) ^ BswFpgaIf_u16Crc16LkpTab_5643[(u16LocalChk14B >> 8) ^ (uint16)(u8DataTab14B[9])]);
-   u16LocalChk14B = (uint16)((u16LocalChk14B << 8) ^ BswFpgaIf_u16Crc16LkpTab_5643[(u16LocalChk14B >> 8) ^ (uint16)(u8DataTab14B[8])]);
-   u16LocalChk14B = (uint16)((u16LocalChk14B << 8) ^ BswFpgaIf_u16Crc16LkpTab_5643[(u16LocalChk14B >> 8) ^ (uint16)(u8DataTab14B[15])]);
-   u16LocalChk14B = (uint16)((u16LocalChk14B << 8) ^ BswFpgaIf_u16Crc16LkpTab_5643[(u16LocalChk14B >> 8) ^ (uint16)(u8DataTab14B[14])]);
-
-#if (_BSWFPGAIF__CHK_ENDIANNESS == _BSWFPGAIF__CHK_INTEL)
-   *u16DataChk14B = u16LocalChk14B;
-#elif (_BSWFPGAIF__CHK_ENDIANNESS == _BSWFPGAIF_CHK_MOTOROLA)
-   *u16DataChk14B = BswFpgaIf_u16SwapMsbLsb(u16LocalChk14B);
-#endif
-}
-
-
-/******************************************************************************/
-/*                                                                            */
-/* !Function    : BswFpgaIf_vidCalcXORCplData14B                             */
-/* !Description : Check calculation, RxA, RxS, 14 bytes data                  */
-/*              : XOR 16 bits checksum and complement                         */
-/*                                                                            */
-/******************************************************************************/
-
-/******************************************************************************/
-/*----------------------------------------------------------------------------*/
-/* Tests function BswFpgaIf_vidCalcXORCplData14B:                                */
-/*----------------------------------------------------------------------------*/
-/* Test1 : u8DataTab             = 0x31 32 33 34 35 36 37 38 39 3A 3B 3C 3D   */
-/*       :                       =   3E                                       */
-/*       : Data len              = 14                                         */
-/*       : Chk init              = 0x0000                                     */
-/*       : Chk xor final value   = 0xFFFF                                     */
-/*       = u16DataChk            = 0xCFC0                                     */
-/*----------------------------------------------------------------------------*/
-static inline void BswFpgaIf_vidCalcXORCplData14B(
-   volatile uint8 *u8DataTab,
-   volatile uint16 *u16DataChk
-);
-static inline void BswFpgaIf_vidCalcXORCplData14B(
-   volatile uint8 *u8DataTab,    /* !Comment : Data table                     */
-                                 /* !Type    : *uint8                         */
-                                 /* !Range   : 0 - 0xFF                       */
-                                 /*                                           */
-   volatile uint16 *u16DataChk   /* !Comment : CRC16 calculated               */
-                                 /* !Type    : uint16*                        */
-                                 /* !Range   : 0 - 0xFFFF                     */
-                                 /*                                           */
-)
-{
-   uint16 u16LocalChk;
-
-   u16LocalChk = 0x0000;
-
-   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[1])  << 8) | (uint16)(u8DataTab[0]));
-   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[3])  << 8) | (uint16)(u8DataTab[2]));
-   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[5])  << 8) | (uint16)(u8DataTab[4]));
-   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[7])  << 8) | (uint16)(u8DataTab[6]));
-   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[9])  << 8) | (uint16)(u8DataTab[8]));
-   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[11]) << 8) | (uint16)(u8DataTab[10]));
-   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[13]) << 8) | (uint16)(u8DataTab[12]));
-
-   u16LocalChk ^= 0xFFFF;
-
-#if (_BSWFPGAIF__CHK_ENDIANNESS == _BSWFPGAIF__CHK_INTEL)
-   *u16DataChk = u16LocalChk;
-#elif (_BSWFPGAIF__CHK_ENDIANNESS == _BSWFPGAIF_CHK_MOTOROLA)
-   *u16DataChk = BswFpgaIf_u16SwapMsbLsb(u16LocalChk);
-#endif
-}
-
-
-/******************************************************************************/
-/*                                                                            */
-/* !Function    : BSWFPGAIF_vidWriteDataCheck14B                             */
-/* !Description : Write control, 14 bytes data                                */
-/* !Number      :                                                             */
-/*                                                                            */
-/******************************************************************************/
-/*                    \t\t\t\t\t                                      */
-/******************************************************************************/
-static inline void BswFpgaIf_vidWriteDataCheck14B(
-   volatile uint8  *u8DataTab,
-   volatile uint16 *u16DataChk
-);
-static inline void BswFpgaIf_vidWriteDataCheck14B(
-   volatile uint8  *u8DataTab,   /* !Comment : Data table                     */
-                                 /* !Type    : *uint8                         */
-                                 /* !Range   : 0 - 0xFF                       */
-                                 /*                                           */
-   volatile uint16 *u16DataChk   /* !Comment : CRC16 calculated               */
-                                 /* !Type    : uint16*                        */
-                                 /* !Range   : 0 - 0xFFFF                     */
-                                 /*                                           */
-)
-{
-   uint16 u16LocalDataChk;
-
-   if (BswFpgaIf_bChkCRCOffXOROnC == 0)
-   {
-\t   BswFpgaIf_vidCalcCRCData14B(u8DataTab, &u16LocalDataChk);
-   }
-   else
-   {
-\t   BswFpgaIf_vidCalcXORCplData14B(u8DataTab, &u16LocalDataChk);
-   }
-
-   *u16DataChk = u16LocalDataChk;
-}
-
-
-/******************************************************************************/
-/*                                                                            */
-/* !Function    : BswFpgaIf_vidCalcCRCData18B                                    */
-/* !Description : Check calculation, TxA, 18 bytes data                       */
-/*              : CRC 16 bits, Polynomial 0x333F                              */
-
-
-/*                                                                            */
-/******************************************************************************/
-
-/******************************************************************************/
-/*----------------------------------------------------------------------------*/
-/* Tests function BswFpgaIf_vidCalcCRCData18B:                                   */
-/*----------------------------------------------------------------------------*/
-/* Test1 : u8DataTab             = 0x31 32 33 34 35 36 37 38 39 3A 3B 3C 3D   */
-/*       :                       =   3E 3F 40 41 42                           */
-/*       : Data len              = 18                                         */
-/*       : Chk CRC polynom       = 0x333F                                     */
-/*       : Chk init              = 0xFFFF                                     */
-/*       : Chk xor final value   = 0x0000                                     */
-/*       = u16DataChk            = 0x58FD                                     */
-/*----------------------------------------------------------------------------*/
-static inline void BswFpgaIf_vidCalcCRCData18B(
-   volatile uint8 *u8DataTab18B,
-   volatile uint16 *u16DataChk18B
-);
-static inline void BswFpgaIf_vidCalcCRCData18B(
-   volatile uint8 *u8DataTab18B,    /* !Comment : Data table                     */
-                                 /* !Type    : *uint8                         */
-                                 /* !Range   : 0 - 0xFF                       */
-                                 /*                                           */
-   volatile uint16 *u16DataChk18B   /* !Comment : CRC16 calculated               */
-                                 /* !Type    : uint16*                        */
-                                 /* !Range   : 0 - 0xFFFF                     */
-                                 /*                                           */
-)
-{
-   uint16 u16LocalChk18B;
-
-   u16LocalChk18B = 0xFFFF;
-
-   u16LocalChk18B = (uint16)((u16LocalChk18B << 8) ^ BswFpgaIf_u16Crc16LkpTab_333F[(u16LocalChk18B >> 8) ^ (uint16)(u8DataTab18B[3])]);
-   u16LocalChk18B = (uint16)((u16LocalChk18B << 8) ^ BswFpgaIf_u16Crc16LkpTab_333F[(u16LocalChk18B >> 8) ^ (uint16)(u8DataTab18B[2])]);//BswFpgaIf_u16Crc16LkpTab_333F
-   u16LocalChk18B = (uint16)((u16LocalChk18B << 8) ^ BswFpgaIf_u16Crc16LkpTab_333F[(u16LocalChk18B >> 8) ^ (uint16)(u8DataTab18B[1])]);
-   u16LocalChk18B = (uint16)((u16LocalChk18B << 8) ^ BswFpgaIf_u16Crc16LkpTab_333F[(u16LocalChk18B >> 8) ^ (uint16)(u8DataTab18B[0])]);
-   u16LocalChk18B = (uint16)((u16LocalChk18B << 8) ^ BswFpgaIf_u16Crc16LkpTab_333F[(u16LocalChk18B >> 8) ^ (uint16)(u8DataTab18B[7])]);
-   u16LocalChk18B = (uint16)((u16LocalChk18B << 8) ^ BswFpgaIf_u16Crc16LkpTab_333F[(u16LocalChk18B >> 8) ^ (uint16)(u8DataTab18B[6])]);
-   u16LocalChk18B = (uint16)((u16LocalChk18B << 8) ^ BswFpgaIf_u16Crc16LkpTab_333F[(u16LocalChk18B >> 8) ^ (uint16)(u8DataTab18B[5])]);
-   u16LocalChk18B = (uint16)((u16LocalChk18B << 8) ^ BswFpgaIf_u16Crc16LkpTab_333F[(u16LocalChk18B >> 8) ^ (uint16)(u8DataTab18B[4])]);
-   u16LocalChk18B = (uint16)((u16LocalChk18B << 8) ^ BswFpgaIf_u16Crc16LkpTab_333F[(u16LocalChk18B >> 8) ^ (uint16)(u8DataTab18B[11])]);
-   u16LocalChk18B = (uint16)((u16LocalChk18B << 8) ^ BswFpgaIf_u16Crc16LkpTab_333F[(u16LocalChk18B >> 8) ^ (uint16)(u8DataTab18B[10])]);
-   u16LocalChk18B = (uint16)((u16LocalChk18B << 8) ^ BswFpgaIf_u16Crc16LkpTab_333F[(u16LocalChk18B >> 8) ^ (uint16)(u8DataTab18B[9])]);
-   u16LocalChk18B = (uint16)((u16LocalChk18B << 8) ^ BswFpgaIf_u16Crc16LkpTab_333F[(u16LocalChk18B >> 8) ^ (uint16)(u8DataTab18B[8])]);
-   u16LocalChk18B = (uint16)((u16LocalChk18B << 8) ^ BswFpgaIf_u16Crc16LkpTab_333F[(u16LocalChk18B >> 8) ^ (uint16)(u8DataTab18B[15])]);
-   u16LocalChk18B = (uint16)((u16LocalChk18B << 8) ^ BswFpgaIf_u16Crc16LkpTab_333F[(u16LocalChk18B >> 8) ^ (uint16)(u8DataTab18B[14])]);
-   u16LocalChk18B = (uint16)((u16LocalChk18B << 8) ^ BswFpgaIf_u16Crc16LkpTab_333F[(u16LocalChk18B >> 8) ^ (uint16)(u8DataTab18B[13])]);
-   u16LocalChk18B = (uint16)((u16LocalChk18B << 8) ^ BswFpgaIf_u16Crc16LkpTab_333F[(u16LocalChk18B >> 8) ^ (uint16)(u8DataTab18B[12])]);
-   u16LocalChk18B = (uint16)((u16LocalChk18B << 8) ^ BswFpgaIf_u16Crc16LkpTab_333F[(u16LocalChk18B >> 8) ^ (uint16)(u8DataTab18B[19])]);
-   u16LocalChk18B = (uint16)((u16LocalChk18B << 8) ^ BswFpgaIf_u16Crc16LkpTab_333F[(u16LocalChk18B >> 8) ^ (uint16)(u8DataTab18B[18])]);
-
-#if (_BSWFPGAIF__CHK_ENDIANNESS == _BSWFPGAIF__CHK_INTEL)
-   *u16DataChk18B = u16LocalChk18B;
-#elif (_BSWFPGAIF__CHK_ENDIANNESS == _BSWFPGAIF_CHK_MOTOROLA)
-   *u16DataChk18B = BswFpgaIf_u16SwapMsbLsb(u16LocalChk18B);
-#endif
-}
-
-
-
-
-/******************************************************************************/
-/*                                                                            */
-/* !Function    : BswFpgaIf_vidCalcXORCplData18B                                 */
-/* !Description : Check calculation, TxA, 18 bytes data                       */
-/*              : XOR 16 bits checksum and complement                         */
-
-
-/*                                                                            */
-/******************************************************************************/
-
-/******************************************************************************/
-/*----------------------------------------------------------------------------*/
-/* Tests function BswFpgaIf_vidCalcXORCplData18B:                                */
-/*----------------------------------------------------------------------------*/
-/* Test1 : u8DataTab             = 0x31 32 33 34 35 36 37 38 39 3A 3B 3C 3D   */
-/*       :                       =   3E 3F 40 41 42                           */
-/*       : Data len              = 18                                         */
-/*       : Chk init              = 0x0000                                     */
-/*       : Chk xor final value   = 0xFFFF                                     */
-/*       = u16DataChk            = 0xCDBE                                     */
-/*----------------------------------------------------------------------------*/
-static inline void BswFpgaIf_vidCalcXORCplData18B(
-   volatile uint8 *u8DataTab,
-   volatile uint16 *u16DataChk
-);
-static inline void BswFpgaIf_vidCalcXORCplData18B(
-   volatile uint8 *u8DataTab,    /* !Comment : Data table                     */
-                                 /* !Type    : *uint8                         */
-                                 /* !Range   : 0 - 0xFF                       */
-                                 /*                                           */
-   volatile uint16 *u16DataChk   /* !Comment : CRC16 calculated               */
-                                 /* !Type    : uint16*                        */
-                                 /* !Range   : 0 - 0xFFFF                     */
-                                 /*                                           */
-)
-{
-   uint16 u16LocalChk;
-
-   u16LocalChk = 0x0000;
-
-   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[1])  << 8) | (uint16)(u8DataTab[0]));
-   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[3])  << 8) | (uint16)(u8DataTab[2]));
-   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[5])  << 8) | (uint16)(u8DataTab[4]));
-   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[7])  << 8) | (uint16)(u8DataTab[6]));
-   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[9])  << 8) | (uint16)(u8DataTab[8]));
-   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[11]) << 8) | (uint16)(u8DataTab[10]));
-   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[13]) << 8) | (uint16)(u8DataTab[12]));
-   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[15]) << 8) | (uint16)(u8DataTab[14]));
-   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[17]) << 8) | (uint16)(u8DataTab[16]));
-
-   u16LocalChk ^= 0xFFFF;
-
-#if (_BSWFPGAIF__CHK_ENDIANNESS == _BSWFPGAIF__CHK_INTEL)
-   *u16DataChk = u16LocalChk;
-#elif (_BSWFPGAIF__CHK_ENDIANNESS == _BSWFPGAIF_CHK_MOTOROLA)
-   *u16DataChk = BswFpgaIf_u16SwapMsbLsb(u16LocalChk);
-#endif
-}
-
-
-/******************************************************************************/
-/*                                                                            */
-/* !Function    : BswFpgaIf_vidWriteDataCheck18B                                 */
-/* !Description : Write control, 18 bytes data                                */
-
-/*                                                                            */
-/******************************************************************************/
-
-/******************************************************************************/
-static inline void BswFpgaIf_vidWriteDataCheck18B(
-   volatile uint8  *u8DataTab,
-   volatile uint16 *u16DataChk
-);
-static inline void BswFpgaIf_vidWriteDataCheck18B(
-   volatile uint8  *u8DataTab,   /* !Comment : Data table                     */
-                                 /* !Type    : *uint8                         */
-                                 /* !Range   : 0 - 0xFF                       */
-                                 /*                                           */
-   volatile uint16 *u16DataChk   /* !Comment : CRC16 calculated               */
-                                 /* !Type    : uint16*                        */
-                                 /* !Range   : 0 - 0xFFFF                     */
-                                 /*                                           */
-)
-{
-   uint16 u16LocalDataChk;
-
-   if (BswFpgaIf_bChkCRCOffXOROnC == 0)
-   {
-\t   BswFpgaIf_vidCalcCRCData18B(u8DataTab, &u16LocalDataChk);
-   }
-   else
-   {
-\t   BswFpgaIf_vidCalcXORCplData18B(u8DataTab, &u16LocalDataChk);
-   }
-
-   u16LocalDataChk = (((uint16)(u16LocalDataChk >> 8) & 0xFF) |  ((uint16)(u16LocalDataChk << 8) & 0xFF00));
-
-   *u16DataChk = u16LocalDataChk;
-}
-
-
-
-/******************************************************************************/
-/*                                                                            */
-/* !Function    : BswFpgaIf_vidVerifyDataCheck14B                            */
-/* !Description : Check control, 14 bytes data                                */
-
-
-/*                                                                            */
-/******************************************************************************/
-
-/******************************************************************************/
-static inline void BswFpgaIf_vidVerifyDataCheck14B(
-   volatile uint8 *u8DataTab,
-   uint16         u16DataChk,
-   boolean        *bChkStatus
-);
-static inline void BswFpgaIf_vidVerifyDataCheck14B(
-   volatile uint8 *u8DataTab,    /* !Comment : Data table                     */
-                                 /* !Type    : *uint8                         */
-                                 /* !Range   : 0 - 0xFF                       */
-                                 /*                                           */
-   uint16         u16DataChk,    /* !Comment : CRC16 calculated               */
-                                 /* !Type    : uint16*                        */
-                                 /* !Range   : 0 - 0xFFFF                     */
-                                 /*                                           */
-   boolean        *bChkStatus    /* !Comment : Chek OK calculation            */
-                                 /* !Type    : boolean*                       */
-                                 /* !Range   : BSWFPGAIF_STATUS_OK/ NOK      */
-                                 /*                                           */
-)
-{
-   uint16 u16LocalDataChk;
-
-   if (BswFpgaIf_bChkCRCOffXOROnC == 0)
-   {
-\t   BswFpgaIf_vidCalcCRCData14B(u8DataTab, &u16LocalDataChk);
-   }
-   else
-   {
-\t   BswFpgaIf_vidCalcXORCplData14B(u8DataTab, &u16LocalDataChk);
-   }
-
-   u16DataChk = (((uint16)(u16DataChk >> 8) & 0xFF) |  ((uint16)(u16DataChk << 8) & 0xFF00));
-
-   CrcReceived = u16DataChk;
-   CrcCalc = u16LocalDataChk;
-   if (u16DataChk == u16LocalDataChk)
-   {
-      *bChkStatus = BswFpgaIfChk_STATUS_OK;
-   }
-   else
-   {
-      *bChkStatus = BswFpgaIfChk_STATUS_NOK;
-   }
-}
-
-#endif /* FPGAIFAPPCHK_H*/
-
-
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/include/BswFpgaIf_Type.h b/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/include/BswFpgaIf_Type.h
deleted file mode 100644
index 74d63d3fa..000000000
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/include/BswFpgaIf_Type.h
+++ /dev/null
@@ -1,4763 +0,0 @@
-
-/*******************************************************************************
-**                      Revision Control History                              **
-*******************************************************************************/
-
-/* ***************************************************************************************************************** */
-/* File:      FPGAIf_Type.h                                                                                           */
-/*                                                                                                                   */
-/*                                                                                                                   */
-/* First author:     Sapthagiri Gudihalli\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t */
-/* Other authors:   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t */
-/* ***************************************************************************************************************** */
-/* All Rights Reserved.  Confidential                                                                                */
-/* ***************************************************************************************************************** */
-
-
-#ifndef BswFpgaIf_TYPE_H
-#define BswFpgaIf_TYPE_H
-
-/*******************************************************************************
-**                      Includes                                              **
-*******************************************************************************/
-#include <Std_Types.h>
-
-/*******************************************************************************
-**                      Types                                                 **
-*******************************************************************************/
-
-/*------------------------------------*/
-/* Frame TxS structure            */
-/*------------------------------------*/
-typedef struct
-   {
-\t     /*
-     @@ ELEMENT = Data8
-     @@ STRUCTURE = BswFpgaIfTxSSignalType
-     @@ A2L_TYPE = MEASURE
-     @@ DATA_TYPE = UBYTE
-     @@ DIMENSION = 8
-     @@ DESCRIPTION = "Data8"
-     @@ GROUP = BswFpgaIf
-     @@ END
-     */
- 
-\t   uint8 Data8[8];
-\t        /*
-        @@ ELEMENT = Ctrl
-        @@ STRUCTURE = BswFpgaIfTxSSignalType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD
-        @@ DESCRIPTION = "Ctrl"
-        @@ GROUP = BswFpgaIf
-        @@ END
-        */
- 
-\t   uint16 Ctrl;
-\t        /*
-        @@ ELEMENT = dummy
-        @@ STRUCTURE = BswFpgaIfTxSSignalType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD
-        @@ DESCRIPTION = "Dummy"
-        @@ GROUP = BswFpgaIf
-        @@ END
-        */
-\t   uint16 dummy;
-    }BswFpgaIfTxSSignalType;
-\t
-typedef union
-{
-\t/*
-     @@ ELEMENT = Data32
-     @@ STRUCTURE = BswFpgaIfFrameTxSType
-     @@ A2L_TYPE = MEASURE
-     @@ DATA_TYPE = ULONG
-     @@ DIMENSION = 3
-     @@ DESCRIPTION = "Data32"
-     @@ GROUP = BswFpgaIf
-     @@ END
-     */
-   uint32 Data32[3];
-   /*
-     @@ ELEMENT = Data16
-     @@ STRUCTURE = BswFpgaIfFrameTxSType
-     @@ A2L_TYPE = MEASURE
-     @@ DATA_TYPE = UWORD
-     @@ DIMENSION = 6
-     @@ DESCRIPTION = "Data16"
-     @@ GROUP = BswFpgaIf
-     @@ END
-     */
-   uint16 Data16[6];
-   /*
-     @@ ELEMENT = Data8
-     @@ STRUCTURE = BswFpgaIfFrameTxSType
-     @@ A2L_TYPE = MEASURE
-     @@ DATA_TYPE = UBYTE
-     @@ DIMENSION = 12
-     @@ DESCRIPTION = "Data8"
-     @@ GROUP = BswFpgaIf
-     @@ END
-     */
-   uint8  Data8[12];
-   
-      /*
-      @@ SUB_STRUCTURE = Signal
-      @@ STRUCTURE = BswFpgaIfFrameTxSType
-      @@ DATA_TYPE = STRUCTURE BswFpgaIfTxSSignalType
-      @@ END
-      */
-   BswFpgaIfTxSSignalType Signal;
-   
-}BswFpgaIfFrameTxSType;
-
-/*------------------------------------*/
-/* FPGA Frame TxA structure            */
-/*------------------------------------*/
-typedef struct
-   {
-\t   /*
-     @@ ELEMENT = Data8
-     @@ STRUCTURE = BswFpgaIfTxASignalType
-     @@ A2L_TYPE = MEASURE
-     @@ DATA_TYPE = UBYTE
-     @@ DIMENSION = 16
-     @@ DESCRIPTION = "Data8"
-     @@ GROUP = BswFpgaIf
-     @@ END
-     */
-\t   uint8 Data8[16];
-\t   /*
-     @@ ELEMENT = Ctrl
-     @@ STRUCTURE = BswFpgaIfTxASignalType
-     @@ A2L_TYPE = MEASURE
-     @@ DATA_TYPE = UWORD
-     @@ DIMENSION = 16
-     @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-     @@ GROUP = BswFpgaIf
-     @@ END
-     */
-\t   uint16 Ctrl;
-\t   /*
-     @@ ELEMENT = dummy
-     @@ STRUCTURE = BswFpgaIfTxASignalType
-     @@ A2L_TYPE = MEASURE
-     @@ DATA_TYPE = UWORD
-     @@ DIMENSION = 16
-     @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-     @@ GROUP = BswFpgaIf
-     @@ END
-     */
-      uint16 dummy;//Dummy
-   }BswFpgaIfTxASignalType;
-   
-typedef union
-{
-\t   /*
-     @@ ELEMENT = Data32
-     @@ STRUCTURE = BswFpgaIfFrameTxAType
-     @@ A2L_TYPE = MEASURE
-     @@ DATA_TYPE = ULONG
-     @@ DIMENSION = 5
-     @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-     @@ GROUP = BswFpgaIf
-     @@ END
-     */
-
-   uint32 Data32[5];
-      /*
-     @@ ELEMENT = Data16
-     @@ STRUCTURE = BswFpgaIfFrameTxAType
-     @@ A2L_TYPE = MEASURE
-     @@ DATA_TYPE = UWORD
-     @@ DIMENSION = 10
-     @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-     @@ GROUP = BswFpgaIf
-     @@ END
-     */
-
-   uint16 Data16[10];
-      /*
-     @@ ELEMENT = Data8
-     @@ STRUCTURE = BswFpgaIfFrameTxAType
-     @@ A2L_TYPE = MEASURE
-     @@ DATA_TYPE = UBYTE
-     @@ DIMENSION = 20
-     @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-     @@ GROUP = BswFpgaIf
-     @@ END
-     */
-   uint8  Data8[20];
-
-   /*
-      @@ SUB_STRUCTURE = Signal
-      @@ STRUCTURE = BswFpgaIfFrameTxAType
-      @@ DATA_TYPE = STRUCTURE BswFpgaIfTxASignalType
-      @@ END
-    */
-
-   BswFpgaIfTxASignalType Signal;
-   
-}BswFpgaIfFrameTxAType;
-
-#if 0
-/*------------------------------------*/
-/* BswFpgaIf Frame RxA structure            */
-/*------------------------------------*/
-typedef union
-{
-   uint32 Data32[4];
-   uint16 Data16[8];
-   uint8  Data8[16];
-   struct
-   {
-      uint8 Data8[13];
-      uint8 Id;
-   }Signal;
-}BswFpgaIf_FrameRxAType;
-
-#endif
-
-/*------------------------------------*/
-/* BswFpgaIf Frame RxA structure     */
-/*------------------------------------*/
-typedef struct
-   {
-\t      /*
-     @@ ELEMENT = Data8
-     @@ STRUCTURE = BswFpgaIfRxASignalType
-     @@ A2L_TYPE = MEASURE
-     @@ DATA_TYPE = UBYTE
-     @@ DIMENSION = 12
-     @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-     @@ GROUP = BswFpgaIf
-     @@ END
-     */
-
-      uint8 Data8[12];//96 bit
-\t     /*
-        @@ ELEMENT = Crc
-        @@ STRUCTURE = BswFpgaIfRxASignalType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD
-        @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-        @@ GROUP = BswFpgaIf
-        @@ END
-        */
-
-      uint16 Crc;
-\t     /*
-        @@ ELEMENT = Id
-        @@ STRUCTURE = BswFpgaIfRxASignalType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD
-        @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-        @@ GROUP = BswFpgaIf
-        @@ END
-        */
-      uint16 Id;//dummy
-   }BswFpgaIfRxASignalType;
-   
-typedef union
-{
-\t   /*
-          @@ ELEMENT = Data32
-          @@ STRUCTURE = BswFpgaIf_FrameRxAType
-          @@ A2L_TYPE = MEASURE
-          @@ DATA_TYPE = ULONG
-          @@ DIMENSION = 4
-          @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-          @@ GROUP = BswFpgaIf
-          @@ END
-     */
-
-   uint32 Data32[4];
-      /*
-          @@ ELEMENT = Data16
-          @@ STRUCTURE = BswFpgaIf_FrameRxAType
-          @@ A2L_TYPE = MEASURE
-          @@ DATA_TYPE = UWORD
-          @@ DIMENSION = 8
-          @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-          @@ GROUP = BswFpgaIf
-          @@ END
-   */
-
-   uint16 Data16[8];
-   
-   /*
-          @@ ELEMENT = Data8
-          @@ STRUCTURE = BswFpgaIf_FrameRxAType
-          @@ A2L_TYPE = MEASURE
-          @@ DATA_TYPE = UBYTE
-          @@ DIMENSION = 16
-          @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-          @@ GROUP = BswFpgaIf
-          @@ END
-          */
-   uint8  Data8[16];
-   
-      /*
-      @@ SUB_STRUCTURE = Signal
-      @@ STRUCTURE = BswFpgaIf_FrameRxAType
-      @@ DATA_TYPE = STRUCTURE BswFpgaIfRxASignalType
-      @@ END
-    */
-
-   BswFpgaIfRxASignalType Signal;
-   
-}BswFpgaIf_FrameRxAType;
-
-/*------------------------------------*/
-/* BswFpgaIf Frame RxS structure     */
-/*------------------------------------*/
-typedef struct
-   {
-\t   /*
-        @@ ELEMENT = Data8
-        @@ STRUCTURE = BswFpgaIfRxSSignalType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UBYTE
-        @@ DIMENSION = 12
-        @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-        @@ GROUP = BswFpgaIf
-        @@ END
-    */
-      uint8 Data8[12];
-\t     /*
-      @@ ELEMENT = Crc
-      @@ STRUCTURE = BswFpgaIfRxSSignalType
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = UWORD
-      @@ DESCRIPTION = "CRC value of RxS"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-
-      uint16 Crc;
-\t     /*
-      @@ ELEMENT = FS_SOE
-      @@ STRUCTURE = BswFpgaIfRxSSignalType
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = UWORD 0x01
-      @@ DESCRIPTION = "FS_SOE"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-
-      uint16 FS_SOE:1;
-\t     /*
-      @@ ELEMENT = FS_SOL
-      @@ STRUCTURE = BswFpgaIfRxSSignalType
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = UWORD 0x02
-      @@ DESCRIPTION = "CPLD emergency pin status"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-
-      uint16 FS_SOL:1;
-\t     /*
-      @@ ELEMENT = FS_TXS
-      @@ STRUCTURE = BswFpgaIfRxSSignalType
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = UWORD 0x04
-      @@ DESCRIPTION = "CPLD emergency pin status"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-
-      uint16 FS_TXS:1;
-\t     /*
-      @@ ELEMENT = FS_TXA
-      @@ STRUCTURE = BswFpgaIfRxSSignalType
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = UWORD 0x08
-      @@ DESCRIPTION = "CPLD emergency pin status"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-
-      uint16 FS_TXA:1;
-\t     /*
-      @@ ELEMENT = Align1_LSB4
-      @@ STRUCTURE = BswFpgaIfRxSSignalType
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = UWORD 0x10
-      @@ DESCRIPTION = "CPLD emergency pin status"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-
-      uint16 Align1_LSB4:4;
-\t     /*
-      @@ ELEMENT = Align1_MSB8
-      @@ STRUCTURE = BswFpgaIfRxSSignalType
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = UWORD
-      @@ DESCRIPTION = "CPLD emergency pin status"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-      uint16 Align1_MSB8:8;//dummy
-
-   }BswFpgaIfRxSSignalType;
-   
-typedef union
-{
-\t   /*
-            @@ ELEMENT = Data32
-            @@ STRUCTURE = BswFpgaIf_FrameRxSType
-            @@ A2L_TYPE = MEASURE
-            @@ DATA_TYPE = ULONG
-            @@ DIMENSION = 4
-            @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-            @@ GROUP = BswFpgaIf
-            @@ END
-       */
-
-   uint32 Data32[4];
-      /*
-            @@ ELEMENT = Data16
-            @@ STRUCTURE = BswFpgaIf_FrameRxSType
-            @@ A2L_TYPE = MEASURE
-            @@ DATA_TYPE = UWORD
-            @@ DIMENSION = 8
-            @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-            @@ GROUP = BswFpgaIf
-            @@ END
-       */
-
-   uint16 Data16[8];
-      /*
-            @@ ELEMENT = Data8
-            @@ STRUCTURE = BswFpgaIf_FrameRxSType
-            @@ A2L_TYPE = MEASURE
-            @@ DATA_TYPE = UBYTE
-            @@ DIMENSION = 16
-            @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-            @@ GROUP = BswFpgaIf
-            @@ END
-       */
-   uint8  Data8[16];
-
-   /*
-      @@ SUB_STRUCTURE = Signal
-      @@ STRUCTURE = BswFpgaIf_FrameRxSType
-      @@ DATA_TYPE = STRUCTURE BswFpgaIfRxSSignalType
-      @@ END
-      */
-   BswFpgaIfRxSSignalType Signal;
-   
-}BswFpgaIf_FrameRxSType;
-
-/*----------------------------------------------------------------------------*/
-/* BswFpgaIf Frame Tx structure                                                     */
-/*----------------------------------------------------------------------------*/
-typedef struct
-   {
-\t      /*
-   @@ SUB_STRUCTURE = TxS
-   @@ STRUCTURE = BswFpgaIfTxAsyncSyncType
-   @@ DATA_TYPE = STRUCTURE BswFpgaIfFrameTxSType
-   @@ END
-   */
-
-      BswFpgaIfFrameTxSType TxS;
-\t     /*
-   @@ SUB_STRUCTURE = TxA
-   @@ STRUCTURE = BswFpgaIfTxAsyncSyncType
-   @@ DATA_TYPE = STRUCTURE BswFpgaIfFrameTxAType
-   @@ END
-   */
-      BswFpgaIfFrameTxAType TxA;
-\t  
-   }BswFpgaIfTxAsyncSyncType;
-
-typedef union
-{
-\t/*
-     @@ ELEMENT = Data32
-     @@ STRUCTURE = BswFpgaIf_FrameTxType
-     @@ A2L_TYPE = MEASURE
-     @@ DATA_TYPE = ULONG
-     @@ DIMENSION = 8
-     @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-     @@ GROUP = BswFpgaIf
-     @@ END
-     */
-   uint32 Data32[8];
-   /*
-        @@ ELEMENT = Data16
-        @@ STRUCTURE = BswFpgaIf_FrameTxType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD
-        @@ DIMENSION = 16
-        @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-        @@ GROUP = BswFpgaIf
-        @@ END
-        */
-   uint16 Data16[16];
-   /*
-        @@ ELEMENT = Data8
-        @@ STRUCTURE = BswFpgaIf_FrameTxType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UBYTE
-        @@ DIMENSION = 32
-        @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-        @@ GROUP = BswFpgaIf
-        @@ END
-        */
-   uint8  Data8[32];
-   
-      /*
-   @@ SUB_STRUCTURE = Data
-   @@ STRUCTURE = BswFpgaIf_FrameTxType
-   @@ DATA_TYPE = STRUCTURE BswFpgaIfTxAsyncSyncType
-   @@ END
-   */
-   BswFpgaIfTxAsyncSyncType Data;
-
-}BswFpgaIf_FrameTxType;
-
-typedef struct
-{
-   uint32 Bacon;
-   BswFpgaIf_FrameTxType FrameTx;
-}BswFpgaIf_BaconFrameTxType;
-
-/*----------------------------------------------------------------------------*/
-/* BswFpgaIf Frame Rx structure                                              */
-/*----------------------------------------------------------------------------*/
-typedef struct
-   {
-\t      /*
-   @@ SUB_STRUCTURE = RxA
-   @@ STRUCTURE = BswFpgaIf_ASRxFrametype
-   @@ DATA_TYPE = STRUCTURE BswFpgaIf_FrameRxAType
-   @@ END
-   */
-
-      BswFpgaIf_FrameRxAType RxA;
-\t        /*
-      @@ SUB_STRUCTURE = RxS
-      @@ STRUCTURE = BswFpgaIf_ASRxFrametype
-      @@ DATA_TYPE = STRUCTURE BswFpgaIf_FrameRxSType
-      @@ END
-      */
-      BswFpgaIf_FrameRxSType RxS;
-\t  
-   }BswFpgaIf_ASRxFrametype;
-   
-typedef union
-{
-\t   /*
-       @@ ELEMENT = Data32
-       @@ STRUCTURE = BswFpgaIf_FrameRxType
-       @@ A2L_TYPE = MEASURE
-       @@ DATA_TYPE = ULONG
-       @@ DIMENSION = 8
-       @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-       @@ GROUP = BswFpgaIf
-       @@ END
-       */
-
-   uint32 Data32[8];
-      /*
-       @@ ELEMENT = Data16
-       @@ STRUCTURE = BswFpgaIf_FrameRxType
-       @@ A2L_TYPE = MEASURE
-       @@ DATA_TYPE = UWORD
-       @@ DIMENSION = 16
-       @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-       @@ GROUP = BswFpgaIf
-       @@ END
-       */
-
-   uint16 Data16[16];
-      /*
-       @@ ELEMENT = Data8
-       @@ STRUCTURE = BswFpgaIf_FrameRxType
-       @@ A2L_TYPE = MEASURE
-       @@ DATA_TYPE = UBYTE
-       @@ DIMENSION = 32
-       @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-       @@ GROUP = BswFpgaIf
-       @@ END
-       */
-   uint8  Data8[32];
-
-      /*
-      @@ SUB_STRUCTURE = Data
-      @@ STRUCTURE = BswFpgaIf_FrameRxType
-      @@ DATA_TYPE = STRUCTURE BswFpgaIf_ASRxFrametype
-      @@ END
-      */
-
-   BswFpgaIf_ASRxFrametype Data;
-   
-}BswFpgaIf_FrameRxType;
-
-/*------------------------------------  */
-/* BswFpgaIf IPDU PWMControl structure */
-/*------------------------------------  */
-typedef struct
-   {
-\t      /*
-      @@ ELEMENT = PWM_RatioFreq
-      @@ STRUCTURE = BswFpgaIf_IpduSignalFieldType
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = UBYTE 0x01
-      @@ DESCRIPTION = "PWM RatioFreq"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-\t  uint8 PWM_RatioFreq:2;
-\t  /*
-        @@ ELEMENT = PWM_Ul_ON
-        @@ STRUCTURE = BswFpgaIf_IpduSignalFieldType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UBYTE 0x04
-        @@ DESCRIPTION = "PWM_Ul_ON"
-        @@ GROUP = BswFpgaIf
-        @@ END
-        */
-\t  uint8 PWM_Ul_ON:1;
-\t  /*
-        @@ ELEMENT = PWM_Ur_ON
-        @@ STRUCTURE = BswFpgaIf_IpduSignalFieldType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UBYTE 0x08
-        @@ DESCRIPTION = "PWM_Ur_ON"
-        @@ GROUP = BswFpgaIf
-        @@ END
-        */
-\t  uint8 PWM_Ur_ON:1;
-\t  /*
-        @@ ELEMENT = PWM_Vl_ON
-        @@ STRUCTURE = BswFpgaIf_IpduSignalFieldType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UBYTE 0x10
-        @@ DESCRIPTION = "PWM_Vl_ON"
-        @@ GROUP = BswFpgaIf
-        @@ END
-        */
-\t  uint8 PWM_Vl_ON:1;
-\t  /*
-        @@ ELEMENT = PWM_Vr_ON
-        @@ STRUCTURE = BswFpgaIf_IpduSignalFieldType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UBYTE 0x20
-        @@ DESCRIPTION = "PWM_Vr_ON"
-        @@ GROUP = BswFpgaIf
-        @@ END
-        */
-\t  uint8 PWM_Vr_ON:1;
-\t    /*
-        @@ ELEMENT = PWM_Wl_ON
-        @@ STRUCTURE = BswFpgaIf_IpduSignalFieldType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UBYTE 0x40
-        @@ DESCRIPTION = "PWM_Wl_ON"
-        @@ GROUP = BswFpgaIf
-        @@ END
-        */
-\t  uint8 PWM_Wl_ON:1;
-\t    /*
-        @@ ELEMENT = PWM_Wr_ON
-        @@ STRUCTURE = BswFpgaIf_IpduSignalFieldType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UBYTE 0x80
-        @@ DESCRIPTION = "PWM_Wr_ON"
-        @@ GROUP = BswFpgaIf
-        @@ END
-        */
-\t  uint8 PWM_Wr_ON:1;
-   }BswFpgaIf_IpduSignalFieldType;
-   
-typedef struct
-   {
-   /*
-      @@ ELEMENT = PWM_RatioFreq
-      @@ STRUCTURE = BswFpgaIf_IpduSignalField2Type
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = UBYTE 0x03
-      @@ DESCRIPTION = "PWM_Wr_ON"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-
-      uint8 PWM_RatioFreq:2;
-      /*
-         @@ ELEMENT = PWM_All_ON
-         @@ STRUCTURE = BswFpgaIf_IpduSignalField2Type
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = UBYTE 0xFC
-         @@ DESCRIPTION = "PWM_Wr_ON"
-         @@ GROUP = BswFpgaIf
-         @@ END
-         */
-
-\t  uint8 PWM_All_ON:6;
-
-   }BswFpgaIf_IpduSignalField2Type;
-   
-typedef union
-{
-\t   /*
-        @@ ELEMENT = Data8
-        @@ STRUCTURE = BswFpgaIf_IpduSignalPWMControlType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UBYTE
-        @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-        @@ GROUP = BswFpgaIf
-        @@ END
-    */
-
-   uint8 Data8;
-      /*
-      @@ SUB_STRUCTURE = Field
-      @@ STRUCTURE = BswFpgaIf_IpduSignalPWMControlType
-      @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFieldType
-      @@ END
-      */
-
-   BswFpgaIf_IpduSignalFieldType Field;
-   /*
-      @@ SUB_STRUCTURE = Field2
-      @@ STRUCTURE = BswFpgaIf_IpduSignalPWMControlType
-      @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalField2Type
-      @@ END
-      */
-
-   BswFpgaIf_IpduSignalField2Type Field2;
-   
-}BswFpgaIf_IpduSignalPWMControlType;
-
-/*------------------------------------*/
-/* BswFpgaIf IPDU RxS structure             */
-/*------------------------------------*/
-typedef struct
-   {
-\t   /*
-     @@ ELEMENT = CurMeasPh_V_MSB8
-     @@ STRUCTURE = FpgaApplRxSSignalType
-     @@ A2L_TYPE = MEASURE
-     @@ DATA_TYPE = ULONG 0xFF
-     @@ DESCRIPTION = "CurMeasPh_V_MSB8"
-     @@ GROUP = BswFpgaIf
-     @@ END
-   */
-    uint32 CurMeasPh_V_MSB8:8;//152-159
-\t/*
-     @@ ELEMENT = HalfCoilCur_Ur_MSB4
-     @@ STRUCTURE = FpgaApplRxSSignalType
-     @@ A2L_TYPE = MEASURE
-     @@ DATA_TYPE = ULONG 0x0F
-     @@ DESCRIPTION = "PWM_Wr_ON"
-     @@ GROUP = BswFpgaIf
-     @@ END
-       */
-    uint32 HalfCoilCur_Ur_MSB4:4;//140-143
-\t/*
-         @@ ELEMENT = HalfCoilCur_Ur_LSB8
-         @@ STRUCTURE = FpgaApplRxSSignalType
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = ULONG 0xFF0
-         @@ DESCRIPTION = "PWM_Wr_ON"
-         @@ GROUP = BswFpgaIf
-         @@ END
-       */
-    uint32 HalfCoilCur_Ur_LSB8:8;//144-151
-\t/*
-         @@ ELEMENT = CurMeasPh_U_LSB4
-         @@ STRUCTURE = FpgaApplRxSSignalType
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = ULONG 0xF0
-         @@ DESCRIPTION = "CurMeasPh_U_LSB4"
-         @@ GROUP = BswFpgaIf
-         @@ END
-       */
-    uint32 CurMeasPh_U_LSB4:4;//136-139
-\t/*
-         @@ ELEMENT = CurMeasPh_U_MSB8
-         @@ STRUCTURE = FpgaApplRxSSignalType
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = ULONG 0xFF
-         @@ DESCRIPTION = "CurMeasPh_U_MSB8"
-         @@ GROUP = BswFpgaIf
-         @@ END
-       */
-    uint32 CurMeasPh_U_MSB8:8;//128-135
-/*
-         @@ ELEMENT = HalfCoilCur_Wr_MSB4
-         @@ STRUCTURE = FpgaApplRxSSignalType
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = ULONG 0x0F
-         @@ DESCRIPTION = "HalfCoilCur_Wr_MSB4"
-         @@ GROUP = BswFpgaIf
-         @@ END
-       */
-    uint32 HalfCoilCur_Wr_MSB4:4;//188-191
-\t/*
-         @@ ELEMENT = CurMeasPh_W_LSB4
-         @@ STRUCTURE = FpgaApplRxSSignalType
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = ULONG 0xF0
-         @@ DESCRIPTION = "CurMeasPh_W_LSB4"
-         @@ GROUP = BswFpgaIf
-         @@ END
-       */
-    uint32 CurMeasPh_W_LSB4:4;//184-187
-\t/*
-         @@ ELEMENT = CurMeasPh_W_MSB8
-         @@ STRUCTURE = FpgaApplRxSSignalType
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = ULONG 0xFF
-         @@ DESCRIPTION = "CurMeasPh_W_MSB8"
-         @@ GROUP = BswFpgaIf
-         @@ END
-       */
-    uint32 CurMeasPh_W_MSB8:8;//176-183
-\t/*
-         @@ ELEMENT = HalfCoilCur_Vr_LSB8
-         @@ STRUCTURE = FpgaApplRxSSignalType
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = ULONG 0xFF
-         @@ DESCRIPTION = "HalfCoilCur_Vr_LSB8"
-         @@ GROUP = BswFpgaIf
-         @@ END
-       */
-    uint32 HalfCoilCur_Vr_LSB8:8;//168-175
-/*
-         @@ ELEMENT = HalfCoilCur_Vr_MSB4
-         @@ STRUCTURE = FpgaApplRxSSignalType
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = ULONG 0x0F
-         @@ DESCRIPTION = "HalfCoilCur_Vr_MSB4"
-         @@ GROUP = BswFpgaIf
-         @@ END
-       */
-    uint32 HalfCoilCur_Vr_MSB4:4;//164-167
-\t/*
-         @@ ELEMENT = CurMeasPh_V_LSB4
-         @@ STRUCTURE = FpgaApplRxSSignalType
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = ULONG 0xF0
-         @@ DESCRIPTION = "CurMeasPh_V_LSB4"
-         @@ GROUP = BswFpgaIf
-         @@ END
-       */
-    uint32 CurMeasPh_V_LSB4:4;//160-163
-/*
-         @@ ELEMENT = PwrSupply_5V_LS_MSB4
-         @@ STRUCTURE = FpgaApplRxSSignalType
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = ULONG 0x0F
-         @@ DESCRIPTION = "PwrSupply_5V_LS_MSB4"
-         @@ GROUP = BswFpgaIf
-         @@ END
-       */
-    uint32 PwrSupply_5V_LS_MSB4:4;//212-215
-\t/*
-         @@ ELEMENT = PwrSupply_5V_LS_LSB8
-         @@ STRUCTURE = FpgaApplRxSSignalType
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = ULONG 0xFF0
-         @@ DESCRIPTION = "PwrSupply_5V_LS_LSB8"
-         @@ GROUP = BswFpgaIf
-         @@ END
-       */
-    uint32 PwrSupply_5V_LS_LSB8:8;//216-223
-\t/*
-         @@ ELEMENT = PwrSupply_5V_HS_MSB8
-         @@ STRUCTURE = FpgaApplRxSSignalType
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = ULONG 0xFF0
-         @@ DESCRIPTION = "PwrSupply_5V_HS_MSB8"
-         @@ GROUP = BswFpgaIf
-         @@ END
-       */
-    uint32 PwrSupply_5V_HS_MSB8:8;//200-207
-\t/*
-         @@ ELEMENT = PwrSupply_5V_HS_LSB4
-         @@ STRUCTURE = FpgaApplRxSSignalType
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = ULONG 0xF0
-         @@ DESCRIPTION = "PwrSupply_5V_HS_LSB4"
-         @@ GROUP = BswFpgaIf
-         @@ END
-       */
-    uint32 PwrSupply_5V_HS_LSB4:4;//208-211
-\t/*
-         @@ ELEMENT = HalfCoilCur_Wr_LSB8
-         @@ STRUCTURE = FpgaApplRxSSignalType
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = ULONG 0xFF
-         @@ DESCRIPTION = "HalfCoilCur_Wr_LSB8"
-         @@ GROUP = BswFpgaIf
-         @@ END
-       */
-    uint32 HalfCoilCur_Wr_LSB8:8;//192-199
-/*
-         @@ ELEMENT = Ctrl
-         @@ STRUCTURE = FpgaApplRxSSignalType
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = UWORD
-         @@ DESCRIPTION = "Ctrl"
-         @@ GROUP = BswFpgaIf
-         @@ END
-       */
-      uint16 Ctrl;
-\t  /*
-        @@ ELEMENT = FS_SOE
-        @@ STRUCTURE = FpgaApplRxSSignalType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD 0x0001
-        @@ DESCRIPTION = "FS_SOE"
-        @@ GROUP = BswFpgaIf
-        @@ END
-      */
-      uint16 FS_SOE:1;
-\t  /*
-        @@ ELEMENT = FS_SOL
-        @@ STRUCTURE = FpgaApplRxSSignalType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD 0x0002
-        @@ DESCRIPTION = "FS_SOL"
-        @@ GROUP = BswFpgaIf
-        @@ END
-      */
-      uint16 FS_SOL:1;
-\t  /*
-        @@ ELEMENT = FS_TXS
-        @@ STRUCTURE = FpgaApplRxSSignalType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD 0x0004
-        @@ DESCRIPTION = "FS_TXS"
-        @@ GROUP = BswFpgaIf
-        @@ END
-      */
-      uint16 FS_TXS:1;
-\t  /*
-        @@ ELEMENT = FS_TXA
-        @@ STRUCTURE = FpgaApplRxSSignalType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD 0x0008
-        @@ DESCRIPTION = "FS_TXA"
-        @@ GROUP = BswFpgaIf
-        @@ END
-      */
-      uint16 FS_TXA:1;
-\t  /*
-        @@ ELEMENT = PwrSup_16V_MULTI_LSB4
-        @@ STRUCTURE = FpgaApplRxSSignalType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD 0x00F0
-        @@ DESCRIPTION = "PwrSup_16V_MULTI_LSB4"
-        @@ GROUP = BswFpgaIf
-        @@ END
-      */
-      uint16 PwrSup_16V_MULTI_LSB4:4;
-\t  /*
-        @@ ELEMENT = PwrSup_16V_MULTI_MSB8
-        @@ STRUCTURE = FpgaApplRxSSignalType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD 0xFF
-        @@ DESCRIPTION = "PwrSup_16V_MULTI_MSB8"
-        @@ GROUP = BswFpgaIf
-        @@ END
-      */
-      uint16 PwrSup_16V_MULTI_MSB8:8;
-
-   }FpgaApplRxSSignalType;
-   
-typedef union
-{
-\t/*
-      @@ ELEMENT = Data32
-      @@ STRUCTURE = BswFpgaIf_IpduRxSType
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = ULONG
-      @@ DIMENSION = 4
-      @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-      @@ GROUP = BswFpgaIf
-      @@ END
-       */
-   uint32 Data32[4];
-   /*
-         @@ ELEMENT = Data16
-         @@ STRUCTURE = BswFpgaIf_IpduRxSType
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = UWORD
-         @@ DIMENSION = 8
-         @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-         @@ GROUP = BswFpgaIf
-         @@ END
-          */
-   uint16 Data16[8];
-   /*
-         @@ ELEMENT = Data8
-         @@ STRUCTURE = BswFpgaIf_IpduRxSType
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = UBYTE
-         @@ DIMENSION = 16
-         @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-         @@ GROUP = BswFpgaIf
-         @@ END
-          */
-   uint8  Data8[16];
-   
-      /*
-     @@ SUB_STRUCTURE = Signal
-     @@ STRUCTURE = BswFpgaIf_IpduRxSType
-     @@ DATA_TYPE = STRUCTURE FpgaApplRxSSignalType
-     @@ END
-   */
-   FpgaApplRxSSignalType Signal;
-   
-}BswFpgaIf_IpduRxSType;
-
-/*------------------------------------*/
-/* BswFpgaIf IPDU common structures  */
-/*------------------------------------*/
-
-/*------------------------------------*/
-/* BswFpgaIf IPDU FaultA structure    */
-/*------------------------------------*/
-typedef struct
-   {
-\t      /*
-        @@ ELEMENT = LossComSpi
-        @@ STRUCTURE = BswFpgaIf_IpduFaultAFieldType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD 0x0001
-        @@ DESCRIPTION = "LossComSpi"
-        @@ GROUP = BswFpgaIf
-        @@ END
-      */
-      uint16 LossComSpi:1;
-\t     /*
-        @@ ELEMENT = MeasCoherence
-        @@ STRUCTURE = BswFpgaIf_IpduFaultAFieldType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD 0x0002
-        @@ DESCRIPTION = "MeasCoherence"
-        @@ GROUP = BswFpgaIf
-        @@ END
-      */
-
-      uint16 MeasCoherence:1; 
-\t     /*
-        @@ ELEMENT = Spare02
-        @@ STRUCTURE = BswFpgaIf_IpduFaultAFieldType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD 0x0004
-        @@ DESCRIPTION = "Spare02"
-        @@ GROUP = BswFpgaIf
-        @@ END
-      */
-
-      uint16 Spare02:1;
-\t     /*
-        @@ ELEMENT = Spare03
-        @@ STRUCTURE = BswFpgaIf_IpduFaultAFieldType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD 0x0008
-        @@ DESCRIPTION = "Spare03"
-        @@ GROUP = BswFpgaIf
-        @@ END
-   */
-
-      uint16 Spare03:1;
-\t     /*
-        @@ ELEMENT = Spare04
-        @@ STRUCTURE = BswFpgaIf_IpduFaultAFieldType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD 0x0010
-        @@ DESCRIPTION = "Spare04"
-        @@ GROUP = BswFpgaIf
-        @@ END
-      */
-
-      uint16 Spare04:1;
-\t     /*
-        @@ ELEMENT = Spare05
-        @@ STRUCTURE = BswFpgaIf_IpduFaultAFieldType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD 0x0020
-        @@ DESCRIPTION = "Spare05"
-        @@ GROUP = BswFpgaIf
-        @@ END
-      */
-
-      uint16 Spare05:1;
-\t     /*
-        @@ ELEMENT = Spare06
-        @@ STRUCTURE = BswFpgaIf_IpduFaultAFieldType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD 0x0040
-        @@ DESCRIPTION = "Spare06"
-        @@ GROUP = BswFpgaIf
-        @@ END
-      */
-
-      uint16 Spare06:1;
-\t     /*
-        @@ ELEMENT = Spare07
-        @@ STRUCTURE = BswFpgaIf_IpduFaultAFieldType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD 0x0080
-        @@ DESCRIPTION = "Spare07"
-        @@ GROUP = BswFpgaIf
-        @@ END
-      */
-
-      uint16 Spare07:1;
-\t     /*
-        @@ ELEMENT = ActiveDisAc
-        @@ STRUCTURE = BswFpgaIf_IpduFaultAFieldType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD 0x01
-        @@ DESCRIPTION = "ActiveDisAc"
-        @@ GROUP = BswFpgaIf
-        @@ END
-      */
-
-      uint16 ActiveDisAc:1;
-\t     /*
-        @@ ELEMENT = ActiveDisIn
-        @@ STRUCTURE = BswFpgaIf_IpduFaultAFieldType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD 0x02
-        @@ DESCRIPTION = "ActiveDisIn"
-        @@ GROUP = BswFpgaIf
-        @@ END
-      */
-
-      uint16 ActiveDisIn:1;
-\t     /*
-        @@ ELEMENT = IgbtH
-        @@ STRUCTURE = BswFpgaIf_IpduFaultAFieldType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD 0x04
-        @@ DESCRIPTION = "IgbtH"
-        @@ GROUP = BswFpgaIf
-        @@ END
-      */
-
-      uint16 IgbtH:1;
-\t     /*
-        @@ ELEMENT = IgbtL
-        @@ STRUCTURE = BswFpgaIf_IpduFaultAFieldType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD 0x08
-        @@ DESCRIPTION = "IgbtL"
-        @@ GROUP = BswFpgaIf
-        @@ END
-      */
-
-      uint16 IgbtL:1;
-\t     /*
-        @@ ELEMENT = PwrSupMul
-        @@ STRUCTURE = BswFpgaIf_IpduFaultAFieldType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD 0x10
-        @@ DESCRIPTION = "PwrSupMul"
-        @@ GROUP = BswFpgaIf
-        @@ END
-      */
-
-      uint16 PwrSupMul:1;
-\t     /*
-        @@ ELEMENT = PwrSupHs
-        @@ STRUCTURE = BswFpgaIf_IpduFaultAFieldType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD 0x20
-        @@ DESCRIPTION = "PwrSupHs"
-        @@ GROUP = BswFpgaIf
-        @@ END
-      */
-
-      uint16 PwrSupHs:1;
-\t     /*
-        @@ ELEMENT = PwrSupLs
-        @@ STRUCTURE = BswFpgaIf_IpduFaultAFieldType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD 0x40
-        @@ DESCRIPTION = "PwrSupLs"
-        @@ GROUP = BswFpgaIf
-        @@ END
-      */
-      uint16 PwrSupLs:1;
-\t     /*
-        @@ ELEMENT = EmergencyStop
-        @@ STRUCTURE = BswFpgaIf_IpduFaultAFieldType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD 0x80
-        @@ DESCRIPTION = "EmergencyStop"
-        @@ GROUP = BswFpgaIf
-        @@ END
-      */
-      uint16 EmergencyStop:1;
-   }BswFpgaIf_IpduFaultAFieldType;
-   
-typedef union
-{
-\t   /*
-       @@ ELEMENT = Data16
-       @@ STRUCTURE = BswFpgaIf_IpduSignalFaultAType
-       @@ A2L_TYPE = MEASURE
-       @@ DATA_TYPE = UWORD
-       @@ DESCRIPTION = "Data16"
-       @@ GROUP = BswFpgaIf
-       @@ END
-   */
-   uint16 Data16;
-      /*
-     @@ SUB_STRUCTURE = Field
-     @@ STRUCTURE = BswFpgaIf_IpduSignalFaultAType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduFaultAFieldType
-     @@ END
-   */
-   BswFpgaIf_IpduFaultAFieldType Field;
-   
-}BswFpgaIf_IpduSignalFaultAType;
-
-/*------------------------------------*/
-/* BswFpgaIf IPDU FaultB structure   */
-/*------------------------------------*/
-typedef struct
-   {
-\t   /*
-   @@ ELEMENT = OverUnderCurUr
-   @@ STRUCTURE = BswFpgaIf_IpduSignalFaultBFieldType
-   @@ A2L_TYPE = MEASURE
-   @@ DATA_TYPE = UWORD 0x01 [0 ... 1]
-   @@ DESCRIPTION = "OverUnderCurUr"
-   @@ GROUP = BswFpgaIf
-   @@ END
-   */
-      uint16 OverUnderCurUr:1;
-\t  /*
-     @@ ELEMENT = OverUnderCurUl
-     @@ STRUCTURE = BswFpgaIf_IpduSignalFaultBFieldType
-     @@ A2L_TYPE = MEASURE
-     @@ DATA_TYPE = UWORD 0x02 [0 ... 1]
-     @@ DESCRIPTION = "OverUnderCurUl"
-     @@ GROUP = BswFpgaIf
-     @@ END
-     */
-      uint16 OverUnderCurUl:1;
-\t  /*
- @@ ELEMENT = OverUnderCurVr
- @@ STRUCTURE = BswFpgaIf_IpduSignalFaultBFieldType
- @@ A2L_TYPE = MEASURE
- @@ DATA_TYPE = UWORD 0x04 [0 ... 1]
- @@ DESCRIPTION = "OverUnderCurVr"
- @@ GROUP = BswFpgaIf
- @@ END
- */
-      uint16 OverUnderCurVr:1;
-\t  /*
- @@ ELEMENT = OverUnderCurVl
- @@ STRUCTURE = BswFpgaIf_IpduSignalFaultBFieldType
- @@ A2L_TYPE = MEASURE
- @@ DATA_TYPE = UWORD 0x08 [0 ... 1]
- @@ DESCRIPTION = "OverUnderCurVl"
- @@ GROUP = BswFpgaIf
- @@ END
- */
-      uint16 OverUnderCurVl:1;
-\t  /*
-  @@ ELEMENT = OverUnderCurWr
-  @@ STRUCTURE = BswFpgaIf_IpduSignalFaultBFieldType
-  @@ A2L_TYPE = MEASURE
-  @@ DATA_TYPE = UWORD 0x10 [0 ... 1]
-  @@ DESCRIPTION = "OverUnderCurWr"
-  @@ GROUP = BswFpgaIf
-  @@ END
-  */
-      uint16 OverUnderCurWr:1;
-\t  /*
-  @@ ELEMENT = OverUnderCurWl
-  @@ STRUCTURE = BswFpgaIf_IpduSignalFaultBFieldType
-  @@ A2L_TYPE = MEASURE
-  @@ DATA_TYPE = UWORD 0x20 [0 ... 1]
-  @@ DESCRIPTION = "OverUnderCurWl"
-  @@ GROUP = BswFpgaIf
-  @@ END
-  */
-      uint16 OverUnderCurWl:1;
-\t  /*
- @@ ELEMENT = WdgCpld
- @@ STRUCTURE = BswFpgaIf_IpduSignalFaultBFieldType
- @@ A2L_TYPE = MEASURE
- @@ DATA_TYPE = UWORD 0x40 [0 ... 1]
- @@ DESCRIPTION = "WdgCpld"
- @@ GROUP = BswFpgaIf
- @@ END
- */
-      uint16 WdgCpld:1;
-\t  /*
-  @@ ELEMENT = IgbtMidPointW
-  @@ STRUCTURE = BswFpgaIf_IpduSignalFaultBFieldType
-  @@ A2L_TYPE = MEASURE
-  @@ DATA_TYPE = UWORD 0x80 [0 ... 1]
-  @@ DESCRIPTION = "IgbtMidPointW"
-  @@ GROUP = BswFpgaIf
-  @@ END
-  */
-      uint16 IgbtMidPointW:1;
-\t   /*
-  @@ ELEMENT = IgbtMidPointV
-  @@ STRUCTURE = BswFpgaIf_IpduSignalFaultBFieldType
-  @@ A2L_TYPE = MEASURE
-  @@ DATA_TYPE = UWORD 0x01 [0 ... 1]
-  @@ DESCRIPTION = "IgbtMidPointV"
-  @@ GROUP = BswFpgaIf
-  @@ END
-  */
-      uint16 IgbtMidPointV:1;
-\t  /*
-   @@ ELEMENT = IgbtMidPointU
-   @@ STRUCTURE = BswFpgaIf_IpduSignalFaultBFieldType
-   @@ A2L_TYPE = MEASURE
-   @@ DATA_TYPE = UWORD 0x02 [0 ... 1]
-   @@ DESCRIPTION = "IgbtMidPointU"
-   @@ GROUP = BswFpgaIf
-   @@ END
-   */
-      uint16 IgbtMidPointU:1;
-\t  /*
-   @@ ELEMENT = OverVoltVBat
-   @@ STRUCTURE = BswFpgaIf_IpduSignalFaultBFieldType
-   @@ A2L_TYPE = MEASURE
-   @@ DATA_TYPE = UWORD 0x04 [0 ... 1]
-   @@ DESCRIPTION = "OverVoltVBat"
-   @@ GROUP = BswFpgaIf
-   @@ END
-   */
-      uint16 OverVoltVBat:1;
-\t     /*
-   @@ ELEMENT = UnderVoltVBat
-   @@ STRUCTURE = BswFpgaIf_IpduSignalFaultBFieldType
-   @@ A2L_TYPE = MEASURE
-   @@ DATA_TYPE = UWORD 0x08 [0 ... 1]
-   @@ DESCRIPTION = "UnderVoltVBat"
-   @@ GROUP = BswFpgaIf
-   @@ END
-   */
-      uint16 UnderVoltVBat:1;
-\t     /*
-   @@ ELEMENT = OverTempDrvBd
-   @@ STRUCTURE = BswFpgaIf_IpduSignalFaultBFieldType
-   @@ A2L_TYPE = MEASURE
-   @@ DATA_TYPE = UWORD 0x10 [0 ... 1]
-   @@ DESCRIPTION = "OverTempDrvBd"
-   @@ GROUP = BswFpgaIf
-   @@ END
-   */
-      uint16 OverTempDrvBd:1;
-\t     /*
-   @@ ELEMENT = OverTempIgbt
-   @@ STRUCTURE = BswFpgaIf_IpduSignalFaultBFieldType
-   @@ A2L_TYPE = MEASURE
-   @@ DATA_TYPE = UWORD 0x20 [0 ... 1]
-   @@ DESCRIPTION = "OverTempIgbt"
-   @@ GROUP = BswFpgaIf
-   @@ END
-   */
-
-      uint16 OverTempIgbt:1;
-\t     /*
-   @@ ELEMENT = OverTempCtrlBd
-   @@ STRUCTURE = BswFpgaIf_IpduSignalFaultBFieldType
-   @@ A2L_TYPE = MEASURE
-   @@ DATA_TYPE = UWORD 0x40 [0 ... 1]
-   @@ DESCRIPTION = "OverTempCtrlBd"
-   @@ GROUP = BswFpgaIf
-   @@ END
-   */
-
-      uint16 OverTempCtrlBd:1;
-   /*
-   @@ ELEMENT = OverCurBat
-   @@ STRUCTURE = BswFpgaIf_IpduSignalFaultBFieldType
-   @@ A2L_TYPE = MEASURE 
-   @@ DATA_TYPE = UWORD 0x80 [0 ... 1]
-   @@ DESCRIPTION = "OverCurBat"
-   @@ GROUP = BswFpgaIf
-   @@ END
-   */
-      uint16 OverCurBat:1;
-
-   }BswFpgaIf_IpduSignalFaultBFieldType;
-   
-typedef union
-{
-\t   /*
-   @@ ELEMENT = Data16
-   @@ STRUCTURE = BswFpgaIf_IpduSignalFaultBType
-   @@ A2L_TYPE = MEASURE
-   @@ DATA_TYPE = UWORD
-   @@ DESCRIPTION = "Data16"
-   @@ GROUP = BswFpgaIf
-   @@ END
-   */
-
-   uint16 Data16;
-   
-      /*
-     @@ SUB_STRUCTURE = Field
-     @@ STRUCTURE = BswFpgaIf_IpduSignalFaultBType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultBFieldType
-     @@ END
-   */
-
-   BswFpgaIf_IpduSignalFaultBFieldType Field;
-
-}BswFpgaIf_IpduSignalFaultBType;
-
-/*------------------------------------*/
-/* BswFpgaIf IPDU FaultC structure          */
-/*------------------------------------*/
-  typedef struct
-   {
-\t      /*
-      @@ ELEMENT = Spare08
-      @@ STRUCTURE = BswFpgaIf_IpduSignalFaultCFieldTypeField
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = UWORD 0x01
-      @@ DESCRIPTION = "Spare08"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-
-      uint16 Spare08:1;
-\t     /*
-         @@ ELEMENT = Spare09
-         @@ STRUCTURE = BswFpgaIf_IpduSignalFaultCFieldTypeField
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = UWORD 0x02
-         @@ DESCRIPTION = "Spare09"
-         @@ GROUP = BswFpgaIf
-         @@ END
-         */
-
-      uint16 Spare09:1;
-\t     /*
-         @@ ELEMENT = Spare10
-         @@ STRUCTURE = BswFpgaIf_IpduSignalFaultCFieldTypeField
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = UWORD 0x04
-         @@ DESCRIPTION = "Spare10"
-         @@ GROUP = BswFpgaIf
-         @@ END
-         */
-
-      uint16 Spare10:1;
-\t     /*
-         @@ ELEMENT = Spare11
-         @@ STRUCTURE = BswFpgaIf_IpduSignalFaultCFieldTypeField
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = UWORD 0x08
-         @@ DESCRIPTION = "Spare11"
-         @@ GROUP = BswFpgaIf
-         @@ END
-         */
-      uint16 Spare11:1;
-\t     /*
-         @@ ELEMENT = Spare12
-         @@ STRUCTURE = BswFpgaIf_IpduSignalFaultCFieldTypeField
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = UWORD 0x10
-         @@ DESCRIPTION = "Spare12"
-         @@ GROUP = BswFpgaIf
-         @@ END
-         */
-      uint16 Spare12:1;
-\t  /*
-         @@ ELEMENT = Spare13
-         @@ STRUCTURE = BswFpgaIf_IpduSignalFaultCFieldTypeField
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = UWORD 0x20
-         @@ DESCRIPTION = "Spare13"
-         @@ GROUP = BswFpgaIf
-         @@ END
-         */
-      uint16 Spare13:1;
-\t  /*
-         @@ ELEMENT = Spare14
-         @@ STRUCTURE = BswFpgaIf_IpduSignalFaultCFieldTypeField
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = UWORD 0x40
-         @@ DESCRIPTION = "Spare14"
-         @@ GROUP = BswFpgaIf
-         @@ END
-         */
-      uint16 Spare14:1;
-\t  /*
-         @@ ELEMENT = Spare15
-         @@ STRUCTURE = BswFpgaIf_IpduSignalFaultCFieldTypeField
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = UWORD 0x80
-         @@ DESCRIPTION = "Spare15"
-         @@ GROUP = BswFpgaIf
-         @@ END
-         */
-      uint16 Spare15:1;
-   /*
-         @@ ELEMENT = Spare00
-         @@ STRUCTURE = BswFpgaIf_IpduSignalFaultCFieldTypeField
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = UWORD 0x01
-         @@ DESCRIPTION = "Spare00"
-         @@ GROUP = BswFpgaIf
-         @@ END
-         */
-      uint16 Spare00:1;
-\t     /*
-         @@ ELEMENT = PwmParamFlag
-         @@ STRUCTURE = BswFpgaIf_IpduSignalFaultCFieldTypeField
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = UWORD 0x02
-         @@ DESCRIPTION = "PwmParamFlag"
-         @@ GROUP = BswFpgaIf
-         @@ END
-         */
-
-      uint16 PwmParamFlag:1;
-\t     /*
-         @@ ELEMENT = PwmClampFlag
-         @@ STRUCTURE = BswFpgaIf_IpduSignalFaultCFieldTypeField
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = UWORD 0x04
-         @@ DESCRIPTION = "PwmClampFlag"
-         @@ GROUP = BswFpgaIf
-         @@ END
-         */
-
-      uint16 PwmClampFlag:1;
-\t     /*
-            @@ ELEMENT = Spare03
-            @@ STRUCTURE = BswFpgaIf_IpduSignalFaultCFieldTypeField
-            @@ A2L_TYPE = MEASURE
-            @@ DATA_TYPE = UWORD 0x08
-            @@ DESCRIPTION = "Spare03"
-            @@ GROUP = BswFpgaIf
-            @@ END
-            */
-
-      uint16 Spare03:1;
-\t     /*
-      @@ ELEMENT = LowSpeedReach
-      @@ STRUCTURE = BswFpgaIf_IpduSignalFaultCFieldTypeField
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = UWORD 0x10
-      @@ DESCRIPTION = "LowSpeedReach"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-
-      uint16 LowSpeedReach:1;
-\t     /*
-      @@ ELEMENT = Spare05
-      @@ STRUCTURE = BswFpgaIf_IpduSignalFaultCFieldTypeField
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = UWORD 0x20
-      @@ DESCRIPTION = "Spare05"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-
-      uint16 Spare05:1;
-\t     /*
-      @@ ELEMENT = Spare06
-      @@ STRUCTURE = BswFpgaIf_IpduSignalFaultCFieldTypeField
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = UWORD 0x40
-      @@ DESCRIPTION = "Spare06"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-
-      uint16 Spare06:1;
-\t     /*
-      @@ ELEMENT = Spare07
-      @@ STRUCTURE = BswFpgaIf_IpduSignalFaultCFieldTypeField
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = UWORD 0x80
-      @@ DESCRIPTION = "Spare07"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-      uint16 Spare07:1;
-   }BswFpgaIf_IpduSignalFaultCFieldTypeField;
-   
-typedef union
-{
-   /*
-      @@ ELEMENT = Data16
-      @@ STRUCTURE = BswFpgaIf_IpduSignalFaultCType
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = UWORD
-      @@ DESCRIPTION = "Data16"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-   uint16 Data16;
-      /*
-        @@ SUB_STRUCTURE = Field
-        @@ STRUCTURE = BswFpgaIf_IpduSignalFaultCType
-        @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultCFieldTypeField
-        @@ END
-      */
- BswFpgaIf_IpduSignalFaultCFieldTypeField Field;
-
-}BswFpgaIf_IpduSignalFaultCType;
-
-/*------------------------------------*/
-/* BswFpgaIf IPDU StateReq structure        */
-/*------------------------------------*/
-typedef struct
-   {//10001111
-      /*
-         @@ ELEMENT = ModeReq
-         @@ STRUCTURE = BswFpgaIf_IpduSignalStateReqFieldType
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = UBYTE 0x03
-         @@ DESCRIPTION = "ModeReq"
-         @@ GROUP = BswFpgaIf
-         @@ END
-         */
-
-\t   uint8 ModeReq:2;//10
-\t      /*
-            @@ ELEMENT = SwitchType
-            @@ STRUCTURE = BswFpgaIf_IpduSignalStateReqFieldType
-            @@ A2L_TYPE = MEASURE
-            @@ DATA_TYPE = UBYTE 0x1C
-            @@ DESCRIPTION = "SwitchType"
-            @@ GROUP = BswFpgaIf
-            @@ END
-            */
-
-\t   uint8 SwitchType:3;//001
-\t      /*
-         @@ ELEMENT = Operation
-         @@ STRUCTURE = BswFpgaIf_IpduSignalStateReqFieldType
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = UBYTE 0x20
-         @@ DESCRIPTION = "Operation"
-         @@ GROUP = BswFpgaIf
-         @@ END
-         */
-
-\t   uint8 Operation:1;//1
-\t      /*
-            @@ ELEMENT = SCSpeedReady
-            @@ STRUCTURE = BswFpgaIf_IpduSignalStateReqFieldType
-            @@ A2L_TYPE = MEASURE
-            @@ DATA_TYPE = UBYTE 0x40
-            @@ DESCRIPTION = "SCSpeedReady"
-            @@ GROUP = BswFpgaIf
-            @@ END
-            */
-
-\t   uint8 SCSpeedReady:1;//1
-\t      /*
-               @@ ELEMENT = EmergencySw
-               @@ STRUCTURE = BswFpgaIf_IpduSignalStateReqFieldType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = UBYTE 0x80
-               @@ DESCRIPTION = "EmergencySw"
-               @@ GROUP = BswFpgaIf
-               @@ END
-               */
-\t   uint8 EmergencySw:1;//1
-   }BswFpgaIf_IpduSignalStateReqFieldType;
-   
-typedef union
-{
-   /*
-      @@ ELEMENT = Data8
-      @@ STRUCTURE = BswFpgaIf_IpduSignalStateReqType
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = UBYTE
-      @@ DESCRIPTION = "Data8"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-
-   uint8 Data8; //111 001 10
-   
-   /*
-     @@ SUB_STRUCTURE = Field
-     @@ STRUCTURE = BswFpgaIf_IpduSignalStateReqType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalStateReqFieldType
-     @@ END
-   */
-   BswFpgaIf_IpduSignalStateReqFieldType Field;
-   
-}BswFpgaIf_IpduSignalStateReqType;
-
-/*------------------------------------*/
-/* BswFpgaIf IPDU StateRes structure        */
-/*------------------------------------*/
-typedef struct
-   {
-\t   /*
-               @@ ELEMENT = ModeRes
-               @@ STRUCTURE = BswFpgaIf_IpduSignalStateResFieldType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = UBYTE 0x03
-               @@ DESCRIPTION = "ModeRes"
-               @@ GROUP = BswFpgaIf
-               @@ END
-               */
-      uint8 ModeRes:2;
-\t  /*
-               @@ ELEMENT = SwitchTypeRes
-               @@ STRUCTURE = BswFpgaIf_IpduSignalStateResFieldType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = UBYTE 0x1C
-               @@ DESCRIPTION = "SwitchTypeRes"
-               @@ GROUP = BswFpgaIf
-               @@ END
-               */
-      uint8 SwitchTypeRes:3;
-\t     /*
-               @@ ELEMENT = CurAcq
-               @@ STRUCTURE = BswFpgaIf_IpduSignalStateResFieldType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = UBYTE 0x20
-               @@ DESCRIPTION = "CurAcq"
-               @@ GROUP = BswFpgaIf
-               @@ END
-               */
-      uint8 CurAcq:1;
-\t     /*
-               @@ ELEMENT = PWM_RatioFreqRes
-               @@ STRUCTURE = BswFpgaIf_IpduSignalStateResFieldType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = UBYTE 0xC0
-               @@ DESCRIPTION = "PWM_RatioFreqRes"
-               @@ GROUP = BswFpgaIf
-               @@ END
-               */
-      uint8 PWM_RatioFreqRes:2;
-   }BswFpgaIf_IpduSignalStateResFieldType;
-   
-typedef union
-{
-\t   /*
-      @@ ELEMENT = Data8
-      @@ STRUCTURE = BswFpgaIf_IpduSignalStateResType
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = UBYTE
-      @@ DESCRIPTION = "Data8"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-
-   uint8 Data8;
-   /*
-     @@ SUB_STRUCTURE = Field
-     @@ STRUCTURE = BswFpgaIf_IpduSignalStateResType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalStateResFieldType
-     @@ END
-   */
-
-   BswFpgaIf_IpduSignalStateResFieldType Field;
-
-}BswFpgaIf_IpduSignalStateResType;
-
-/*------------------------------------*/
-/* BswFpgaIf IPDU RxA structure      */
-/*------------------------------------*/
-typedef struct
-   {
-   /*
-     @@ SUB_STRUCTURE = FaultA
-     @@ STRUCTURE = BswFpgaIf_IpduRxASignalType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultAType
-     @@ END
-   */
-
-      BswFpgaIf_IpduSignalFaultAType FaultA;
-\t        /*
-        @@ SUB_STRUCTURE = StateRes
-        @@ STRUCTURE = BswFpgaIf_IpduRxASignalType
-        @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalStateResType
-        @@ END
-      */
-
-      BswFpgaIf_IpduSignalStateResType StateRes;
-\t        /*
-            @@ ELEMENT = Id
-            @@ STRUCTURE = BswFpgaIf_IpduRxASignalType
-            @@ A2L_TYPE = MEASURE
-            @@ DATA_TYPE = UBYTE
-            @@ DESCRIPTION = "Id"
-            @@ GROUP = BswFpgaIf
-            @@ END
-            */
-      uint8 Id;
-      /*
-        @@ SUB_STRUCTURE = FaultC
-        @@ STRUCTURE = BswFpgaIf_IpduRxASignalType
-        @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultCType
-        @@ END
-      */
-      BswFpgaIf_IpduSignalFaultCType FaultC;
-\t        /*
-        @@ SUB_STRUCTURE = FaultB
-        @@ STRUCTURE = BswFpgaIf_IpduRxASignalType
-        @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultBType
-        @@ END
-      */
-      BswFpgaIf_IpduSignalFaultBType FaultB;
-      /*
-                  @@ ELEMENT = M1_MSB8
-                  @@ STRUCTURE = BswFpgaIf_IpduRxASignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = ULONG 0xFF
-                  @@ DESCRIPTION = "M1_MSB8"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-                  */
-
-      uint32 M1_MSB8:8;
-\t        /*
-                  @@ ELEMENT = M0_LSB8
-                  @@ STRUCTURE = BswFpgaIf_IpduRxASignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = ULONG 0xFF
-                  @@ DESCRIPTION = "M0_LSB8"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-                  */
-
-      uint32 M0_LSB8:8;
-\t        /*
-                  @@ ELEMENT = M0_MSB4
-                  @@ STRUCTURE = BswFpgaIf_IpduRxASignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = ULONG 0x0F
-                  @@ DESCRIPTION = "M0_MSB4"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-                  */
-
-      uint32 M0_MSB4:4;
-      /*
-                  @@ ELEMENT = Debug64To75_LSB4
-                  @@ STRUCTURE = BswFpgaIf_IpduRxASignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = ULONG 0x0F0
-                  @@ DESCRIPTION = "Debug64To75_LSB4"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-                  */
-
-      uint32 Debug64To75_LSB4:4;
-\t        /*
-                  @@ ELEMENT = Debug64To75_MSB8
-                  @@ STRUCTURE = BswFpgaIf_IpduRxASignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = ULONG 0xFF
-                  @@ DESCRIPTION = "Debug64To75_MSB8"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-                  */
-
-      uint32 Debug64To75_MSB8:8;
-      /*
-                  @@ ELEMENT = Ctrl
-                  @@ STRUCTURE = BswFpgaIf_IpduRxASignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = UWORD
-                  @@ DESCRIPTION = "Ctrl"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-                  */
-
-      uint16 Ctrl;
-\t        /*
-                  @@ ELEMENT = Debug100To111_MSB4
-                  @@ STRUCTURE = BswFpgaIf_IpduRxASignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = UWORD 0x000F
-                  @@ DESCRIPTION = "Debug100To111_MSB4"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-                  */
-
-      uint16 Debug100To111_MSB4:4;
-\t        /*
-                  @@ ELEMENT = Debug100To111_LSB8
-                  @@ STRUCTURE = BswFpgaIf_IpduRxASignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = UWORD 0x0FF0
-                  @@ DESCRIPTION = "Debug100To111_LSB8"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-                  */
-
-      uint16 Debug100To111_LSB8:8;
-\t        /*
-                  @@ ELEMENT = M1_LSB4
-                  @@ STRUCTURE = BswFpgaIf_IpduRxASignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = UWORD 0xF000
-                  @@ DESCRIPTION = "M1_LSB4"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-                  */
-      uint16 M1_LSB4:4;
-   }BswFpgaIf_IpduRxASignalType;
-   
-typedef union
-{
-\t/*
-         @@ ELEMENT = Data32
-         @@ STRUCTURE = BswFpgaIf_IpduRxAType
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = ULONG
-         @@ DIMENSION = 4
-         @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-         @@ GROUP = BswFpgaIf
-         @@ END
-          */
-   uint32 Data32[4];
-      /*
-         @@ ELEMENT = Data16
-         @@ STRUCTURE = BswFpgaIf_IpduRxAType
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = UWORD
-         @@ DIMENSION = 8
-         @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-         @@ GROUP = BswFpgaIf
-         @@ END
-          */
-   uint16 Data16[8];
-      /*
-         @@ ELEMENT = Data8
-         @@ STRUCTURE = BswFpgaIf_IpduRxAType
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = UBYTE
-         @@ DIMENSION = 16
-         @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-         @@ GROUP = BswFpgaIf
-         @@ END
-          */
-   uint8  Data8[16];
-     /*
-     @@ SUB_STRUCTURE = Signal
-     @@ STRUCTURE = BswFpgaIf_IpduRxAType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduRxASignalType
-     @@ END
-   */
-   BswFpgaIf_IpduRxASignalType Signal;
-
-}BswFpgaIf_IpduRxAType;
-
-/*------------------------------------*/
-/* BswFpgaIf IPDU RxA ID 0 structure        */
-/*------------------------------------*/
-  typedef struct
-   {
-\t      /*
-     @@ SUB_STRUCTURE = FaultA
-     @@ STRUCTURE = BswFpgaIf_IpduRxAId0SignalType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultAType
-     @@ END
-   */
-
-      BswFpgaIf_IpduSignalFaultAType FaultA;
-\t     /*
-     @@ SUB_STRUCTURE = StateRes
-     @@ STRUCTURE = BswFpgaIf_IpduRxAId0SignalType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalStateResType
-     @@ END
-   */
-      BswFpgaIf_IpduSignalStateResType StateRes;
-\t     /*
-         @@ ELEMENT = Id
-         @@ STRUCTURE = BswFpgaIf_IpduRxAId0SignalType
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = UBYTE
-         @@ DESCRIPTION = "Id"
-         @@ GROUP = BswFpgaIf
-         @@ END
-          */
-      uint8 Id;
-   /*
-     @@ SUB_STRUCTURE = FaultC
-     @@ STRUCTURE = BswFpgaIf_IpduRxAId0SignalType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultCType
-     @@ END
-   */
-
-      BswFpgaIf_IpduSignalFaultCType FaultC;
-\t     /*
-     @@ SUB_STRUCTURE = FaultB
-     @@ STRUCTURE = BswFpgaIf_IpduRxAId0SignalType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultBType
-     @@ END
-   */
-
-      BswFpgaIf_IpduSignalFaultBType FaultB;
-
-   /*
-               @@ ELEMENT = IgbtTempW_MSB8
-               @@ STRUCTURE = BswFpgaIf_IpduRxAId0SignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = ULONG 0xFF
-               @@ DESCRIPTION = "IgbtTempW_MSB8"
-               @@ GROUP = BswFpgaIf
-               @@ END
-  */
-      uint32 IgbtTempW_MSB8:8;
-        /*
-               @@ ELEMENT = IgbtTempV_LSB8
-               @@ STRUCTURE = BswFpgaIf_IpduRxAId0SignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = ULONG 0xFF
-               @@ DESCRIPTION = "IgbtTempV_LSB8"
-               @@ GROUP = BswFpgaIf
-               @@ END
-  */
-
-      uint32 IgbtTempV_LSB8:8;
-        /*
-               @@ ELEMENT = IgbtTempV_MSB4
-               @@ STRUCTURE = BswFpgaIf_IpduRxAId0SignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = ULONG 0xF
-               @@ DESCRIPTION = "IgbtTempV_MSB4"
-               @@ GROUP = BswFpgaIf
-               @@ END
-  */
-
-      uint32 IgbtTempV_MSB4:4;
-        /*
-               @@ ELEMENT = Debug64To75_LSB4
-               @@ STRUCTURE = BswFpgaIf_IpduRxAId0SignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = ULONG 0x0F0
-               @@ DESCRIPTION = "Debug64To75_LSB4"
-               @@ GROUP = BswFpgaIf
-               @@ END
-  */
-
-      uint32 Debug64To75_LSB4:4;
-\t     /*
-               @@ ELEMENT = Debug64To75_MSB8
-               @@ STRUCTURE = BswFpgaIf_IpduRxAId0SignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = ULONG 0xFF
-               @@ DESCRIPTION = "Debug64To75_MSB8"
-               @@ GROUP = BswFpgaIf
-               @@ END
-  */
-
-      uint32 Debug64To75_MSB8:8;
-   /*
-               @@ ELEMENT = Ctrl
-               @@ STRUCTURE = BswFpgaIf_IpduRxAId0SignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = UWORD
-               @@ DESCRIPTION = "Ctrl"
-               @@ GROUP = BswFpgaIf
-               @@ END
-  */
-
-      uint16 Ctrl;
-      /*
-             @@ ELEMENT = IgbtTempU_LSB8
-             @@ STRUCTURE = BswFpgaIf_IpduRxAId0SignalType
-             @@ A2L_TYPE = MEASURE
-             @@ DATA_TYPE = UWORD 0x0FF
-             @@ DESCRIPTION = "IgbtTempU_LSB8"
-             @@ GROUP = BswFpgaIf
-             @@ END
-*/
-
-    uint16 IgbtTempU_LSB8:8;
-      /*
-               @@ ELEMENT = IgbtTempU_MSB4
-               @@ STRUCTURE = BswFpgaIf_IpduRxAId0SignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = UWORD 0x0F00
-               @@ DESCRIPTION = "IgbtTempU_MSB4"
-               @@ GROUP = BswFpgaIf
-               @@ END
-  */
-
-      uint16 IgbtTempU_MSB4:4;
-
-        /*
-               @@ ELEMENT = IgbtTempW_LSB4
-               @@ STRUCTURE = BswFpgaIf_IpduRxAId0SignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = UWORD 0xF000
-               @@ DESCRIPTION = "IgbtTempW_LSB4"
-               @@ GROUP = BswFpgaIf
-               @@ END
-  */
-      uint16 IgbtTempW_LSB4:4;
-
-   }BswFpgaIf_IpduRxAId0SignalType;
-   
-typedef union
-{
-\t/*
-      @@ ELEMENT = Data32
-      @@ STRUCTURE = BswFpgaIf_IpduRxAId0Type
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = ULONG
-      @@ DIMENSION = 4
-      @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-      @@ GROUP = BswFpgaIf
-      @@ END
-       */
-   uint32 Data32[4];
-   /*
-      @@ ELEMENT = Data16
-      @@ STRUCTURE = BswFpgaIf_IpduRxAId0Type
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = UWORD
-      @@ DIMENSION = 8
-      @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-      @@ GROUP = BswFpgaIf
-      @@ END
-       */
-   uint16 Data16[8];
-   /*
-      @@ ELEMENT = Data8
-      @@ STRUCTURE = BswFpgaIf_IpduRxAId0Type
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = UBYTE
-      @@ DIMENSION = 16
-      @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-      @@ GROUP = BswFpgaIf
-      @@ END
-       */
-   uint8  Data8[16];
-   /*
-     @@ SUB_STRUCTURE = Signal
-     @@ STRUCTURE = BswFpgaIf_IpduRxAId0Type
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduRxAId0SignalType
-     @@ END
-   */
-   BswFpgaIf_IpduRxAId0SignalType Signal;
-   
-}BswFpgaIf_IpduRxAId0Type;
-
-/*------------------------------------*/
-/* BswFpgaIf IPDU RxA ID 1 structure */
-/*------------------------------------*/
-typedef struct
- {
-\t    /*
-     @@ SUB_STRUCTURE = FaultA
-     @@ STRUCTURE = BswFpgaIf_IpduRxAId1SignalType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultAType
-     @@ END
-   */
-
-      BswFpgaIf_IpduSignalFaultAType FaultA;
-   /*
-     @@ SUB_STRUCTURE = StateRes
-     @@ STRUCTURE = BswFpgaIf_IpduRxAId1SignalType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalStateResType
-     @@ END
-   */
-
-      BswFpgaIf_IpduSignalStateResType StateRes;
-\t  /*
-      @@ ELEMENT = Id
-      @@ STRUCTURE = BswFpgaIf_IpduRxAId1SignalType
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = UBYTE
-      @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-      @@ GROUP = BswFpgaIf
-      @@ END
-       */
-
-      uint8 Id;
-/*
-        @@ SUB_STRUCTURE = FaultC
-        @@ STRUCTURE = BswFpgaIf_IpduRxAId1SignalType
-        @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultCType
-        @@ END
-      */
-      BswFpgaIf_IpduSignalFaultCType FaultC;
-\t  /*
-        @@ SUB_STRUCTURE = FaultB
-        @@ STRUCTURE = BswFpgaIf_IpduRxAId1SignalType
-        @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultBType
-        @@ END
-      */
-      BswFpgaIf_IpduSignalFaultBType FaultB;
-/*
-                  @@ ELEMENT = DcLinkDrvBd_MSB8
-                  @@ STRUCTURE = BswFpgaIf_IpduRxAId1SignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = ULONG 0xFF
-                  @@ DESCRIPTION = "DcLinkDrvBd_MSB8"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-     */
-      uint32 DcLinkDrvBd_MSB8:8;
-\t  /*
-                  @@ ELEMENT = DcLinkCtrlBd_LSB8
-                  @@ STRUCTURE = BswFpgaIf_IpduRxAId1SignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = ULONG 0xFF
-                  @@ DESCRIPTION = "DcLinkCtrlBd_LSB8"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-     */
-      uint32 DcLinkCtrlBd_LSB8:8;
-\t        /*
-                  @@ ELEMENT = DcLinkCtrlBd_MSB4
-                  @@ STRUCTURE = BswFpgaIf_IpduRxAId1SignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = ULONG 0xF
-                  @@ DESCRIPTION = "DcLinkCtrlBd_MSB4"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-     */
-
-      uint32 DcLinkCtrlBd_MSB4:4;
-\t        /*
-                  @@ ELEMENT = Debug64To75_LSB4
-                  @@ STRUCTURE = BswFpgaIf_IpduRxAId1SignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = ULONG 0xF0
-                  @@ DESCRIPTION = "Debug64To75_LSB4"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-     */
-
-      uint32 Debug64To75_LSB4:4;
-\t        /*
-                  @@ ELEMENT = Debug64To75_MSB8
-                  @@ STRUCTURE = BswFpgaIf_IpduRxAId1SignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = ULONG 0xFF
-                  @@ DESCRIPTION = "Debug64To75_MSB8"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-     */
-
-      uint32 Debug64To75_MSB8:8;
-
-      /*
-                  @@ ELEMENT = Ctrl
-                  @@ STRUCTURE = BswFpgaIf_IpduRxAId1SignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = UWORD
-                  @@ DESCRIPTION = "Ctrl"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-     */
-
-      uint16 Ctrl;
-\t        /*
-                  @@ ELEMENT = Debug100To111_MSB4
-                  @@ STRUCTURE = BswFpgaIf_IpduRxAId1SignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = UWORD 0x000F
-                  @@ DESCRIPTION = "Debug100To111_MSB4"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-     */
-
-      uint16 Debug100To111_MSB4:4;
-\t        /*
-                  @@ ELEMENT = Debug100To111_LSB8
-                  @@ STRUCTURE = BswFpgaIf_IpduRxAId1SignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = UWORD 0x0FF0
-                  @@ DESCRIPTION = "Debug100To111_LSB8"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-     */
-
-      uint16 Debug100To111_LSB8:8;
-\t        /*
-                  @@ ELEMENT = DcLinkDrvBd_LSB4
-                  @@ STRUCTURE = BswFpgaIf_IpduRxAId1SignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = UWORD 0xF0
-                  @@ DESCRIPTION = "DcLinkDrvBd_LSB4"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-     */
-      uint16 DcLinkDrvBd_LSB4:4;
-
-   }BswFpgaIf_IpduRxAId1SignalType;
-   
-typedef union
-{
-   /*
-         @@ ELEMENT = Data32
-         @@ STRUCTURE = BswFpgaIf_IpduRxAId1Type
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = ULONG
-         @@ DIMENSION = 4
-         @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-         @@ GROUP = BswFpgaIf
-         @@ END
-          */
-
-   uint32 Data32[4];
-      /*
-         @@ ELEMENT = Data16
-         @@ STRUCTURE = BswFpgaIf_IpduRxAId1Type
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = UWORD
-         @@ DIMENSION = 8
-         @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-         @@ GROUP = BswFpgaIf
-         @@ END
-          */
-
-   uint16 Data16[8];
-      /*
-         @@ ELEMENT = Data8
-         @@ STRUCTURE = BswFpgaIf_IpduRxAId1Type
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = UBYTE
-         @@ DIMENSION = 16
-         @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-         @@ GROUP = BswFpgaIf
-         @@ END
-          */
-   uint8  Data8[16];
-      /*
-     @@ SUB_STRUCTURE = Signal
-     @@ STRUCTURE = BswFpgaIf_IpduRxAId1Type
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduRxAId1SignalType
-     @@ END
-   */
-
-   BswFpgaIf_IpduRxAId1SignalType Signal;
-}BswFpgaIf_IpduRxAId1Type;
-
-/*------------------------------------*/
-/* BswFpgaIf IPDU RxA ID 2 structure        */
-/*------------------------------------*/
-typedef struct
-   {
-\t      /*
-     @@ SUB_STRUCTURE = FaultA
-     @@ STRUCTURE = BswFpgaIf_IpduRxAId2SignalType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultAType
-     @@ END
-   */
-
-\t   BswFpgaIf_IpduSignalFaultAType FaultA;
-\t      /*
-     @@ SUB_STRUCTURE = StateRes
-     @@ STRUCTURE = BswFpgaIf_IpduRxAId2SignalType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalStateResType
-     @@ END
-   */
-
-\t   BswFpgaIf_IpduSignalStateResType StateRes;
-\t      /*
-         @@ ELEMENT = Id
-         @@ STRUCTURE = BswFpgaIf_IpduRxAId2SignalType
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = UBYTE
-         @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-         @@ GROUP = BswFpgaIf
-         @@ END
-          */
-
-\t   uint8 Id;
-      /*
-        @@ SUB_STRUCTURE = FaultC
-        @@ STRUCTURE = BswFpgaIf_IpduRxAId2SignalType
-        @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultCType
-        @@ END
-      */
-
-\t   BswFpgaIf_IpduSignalFaultCType FaultC;
-\t         /*
-        @@ SUB_STRUCTURE = FaultB
-        @@ STRUCTURE = BswFpgaIf_IpduRxAId2SignalType
-        @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultBType
-        @@ END
-      */
-
-\t   BswFpgaIf_IpduSignalFaultBType FaultB;
-      /*
-                  @@ ELEMENT = M1VFpgaL_MSB8
-                  @@ STRUCTURE = BswFpgaIf_IpduRxAId2SignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = ULONG 0xFF
-                  @@ DESCRIPTION = "M1VFpgaL_MSB8"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-     */
-
-\t   uint32 M1VFpgaL_MSB8:8;
-\t         /*
-                  @@ ELEMENT = TempCtrlBd_LSB8
-                  @@ STRUCTURE = BswFpgaIf_IpduRxAId2SignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = ULONG 0xFF
-                  @@ DESCRIPTION = "TempCtrlBd_LSB8"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-     */
-
-\t   uint32 TempCtrlBd_LSB8:8;
-\t         /*
-                  @@ ELEMENT = TempCtrlBd_MSB4
-                  @@ STRUCTURE = BswFpgaIf_IpduRxAId2SignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = ULONG 0x0F
-                  @@ DESCRIPTION = "TempCtrlBd_MSB4"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-     */
-
-\t   uint32 TempCtrlBd_MSB4:4;
-\t         /*
-                  @@ ELEMENT = Debug64To75_LSB4
-                  @@ STRUCTURE = BswFpgaIf_IpduRxAId2SignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = ULONG 0xF0
-                  @@ DESCRIPTION = "Debug64To75_LSB4"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-     */
-
-
-\t   uint32 Debug64To75_LSB4:4;
-\t         /*
-                  @@ ELEMENT = Debug64To75_MSB8
-                  @@ STRUCTURE = BswFpgaIf_IpduRxAId2SignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = ULONG 0xFF
-                  @@ DESCRIPTION = "Debug64To75_MSB8"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-     */
-
-\t   uint32 Debug64To75_MSB8:8;
-
-      /*
-                  @@ ELEMENT = Ctrl
-                  @@ STRUCTURE = BswFpgaIf_IpduRxAId2SignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = UWORD
-                  @@ DESCRIPTION = "Ctrl"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-     */
-
-      uint16 Ctrl;
-\t  /*
-                  @@ ELEMENT = Debug100To111_MSB4
-                  @@ STRUCTURE = BswFpgaIf_IpduRxAId2SignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = UWORD 0x000F
-                  @@ DESCRIPTION = "Debug100To111_MSB4"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-     */
-
-      uint16 Debug100To111_MSB4:4;
-\t  /*
-                  @@ ELEMENT = Debug100To111_LSB8
-                  @@ STRUCTURE = BswFpgaIf_IpduRxAId2SignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = UWORD 0x0FF0
-                  @@ DESCRIPTION = "Debug100To111_LSB8"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-     */
-
-      uint16 Debug100To111_LSB8:8;
-\t  /*
-                  @@ ELEMENT = M1VFpgaL_LSB4
-                  @@ STRUCTURE = BswFpgaIf_IpduRxAId2SignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = UWORD 0xF0
-                  @@ DESCRIPTION = "M1VFpgaL_LSB4"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-     */
-      uint16 M1VFpgaL_LSB4:4;
-
-   }BswFpgaIf_IpduRxAId2SignalType;
-
-typedef union
-{
-\t   /*
-         @@ ELEMENT = Data32
-         @@ STRUCTURE = BswFpgaIf_IpduRxAId2Type
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = ULONG
-         @@ DIMENSION = 4
-         @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-         @@ GROUP = BswFpgaIf
-         @@ END
-          */
-
-   uint32 Data32[4];
-      /*
-         @@ ELEMENT = Data16
-         @@ STRUCTURE = BswFpgaIf_IpduRxAId2Type
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = UWORD
-         @@ DIMENSION = 8
-         @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-         @@ GROUP = BswFpgaIf
-         @@ END
-          */
-
-   uint16 Data16[8];
-      /*
-         @@ ELEMENT = Data8
-         @@ STRUCTURE = BswFpgaIf_IpduRxAId2Type
-         @@ A2L_TYPE = MEASURE
-         @@ DATA_TYPE = UBYTE
-         @@ DIMENSION = 4
-         @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-         @@ GROUP = BswFpgaIf
-         @@ END
-          */
-   uint8  Data8[16];
-      /*
-     @@ SUB_STRUCTURE = Signal
-     @@ STRUCTURE = BswFpgaIf_IpduRxAId2Type
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduRxAId2SignalType
-     @@ END
-   */
-
-   BswFpgaIf_IpduRxAId2SignalType Signal;
-   
-}BswFpgaIf_IpduRxAId2Type;
-
-/*------------------------------------*/
-/* BswFpgaIf IPDU RxA ID 3 structure */
-/*------------------------------------*/
-typedef struct
-{
-\t      /*
-     @@ SUB_STRUCTURE = FaultA
-     @@ STRUCTURE = BswFpgaIf_IpduRxAId3SignalType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultAType
-     @@ END
-   */
-
-\t      BswFpgaIf_IpduSignalFaultAType FaultA;
-\t\t     /*
-     @@ SUB_STRUCTURE = StateRes
-     @@ STRUCTURE = BswFpgaIf_IpduRxAId3SignalType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalStateResType
-     @@ END
-   */
-
-\t      BswFpgaIf_IpduSignalStateResType StateRes;
-\t\t  \t\t     /*
-               @@ ELEMENT = Id
-               @@ STRUCTURE = BswFpgaIf_IpduRxAId3SignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = UBYTE
-               @@ DESCRIPTION = "Id"
-               @@ GROUP = BswFpgaIf
-               @@ END
-  */
-\t      uint8 Id;
-\t\t     /*
-     @@ SUB_STRUCTURE = FaultC
-     @@ STRUCTURE = BswFpgaIf_IpduRxAId3SignalType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultCType
-     @@ END
-   */
-
-\t      BswFpgaIf_IpduSignalFaultCType FaultC;
-\t\t     /*
-     @@ SUB_STRUCTURE = FaultB
-     @@ STRUCTURE = BswFpgaIf_IpduRxAId3SignalType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultBType
-     @@ END
-   */
-
-\t      BswFpgaIf_IpduSignalFaultBType FaultB;
-\t\t     /*
-               @@ ELEMENT = M1VFpgaH_MSB8
-               @@ STRUCTURE = BswFpgaIf_IpduRxAId3SignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = ULONG 0xFF
-               @@ DESCRIPTION = "M1VFpgaH_MSB8"
-               @@ GROUP = BswFpgaIf
-               @@ END
-  */
-
-\t      uint32 M1VFpgaH_MSB8:8;
-\t\t     /*
-               @@ ELEMENT = TempDrvBd_MSB4
-               @@ STRUCTURE = BswFpgaIf_IpduRxAId3SignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = ULONG 0xF00
-               @@ DESCRIPTION = "TempDrvBd_MSB4"
-               @@ GROUP = BswFpgaIf
-               @@ END
-  */
-
-      uint32 TempDrvBd_MSB4:4;
-\t     /*
-               @@ ELEMENT = TempDrvBd_LSB8
-               @@ STRUCTURE = BswFpgaIf_IpduRxAId3SignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = ULONG 0xFF
-               @@ DESCRIPTION = "TempDrvBd_LSB8"
-               @@ GROUP = BswFpgaIf
-               @@ END
-  */
-
-      uint32 TempDrvBd_LSB8:8;
-\t     /*
-               @@ ELEMENT = Debug64To75_MSB8
-               @@ STRUCTURE = BswFpgaIf_IpduRxAId3SignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = ULONG 0xFF0
-               @@ DESCRIPTION = "Debug64To75_MSB8"
-               @@ GROUP = BswFpgaIf
-               @@ END
-  */
-
-      uint32 Debug64To75_MSB8:8;
-\t     /*
-               @@ ELEMENT = Debug64To75_LSB4
-               @@ STRUCTURE = BswFpgaIf_IpduRxAId3SignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = ULONG 0xF
-               @@ DESCRIPTION = "Debug64To75_LSB4"
-               @@ GROUP = BswFpgaIf
-               @@ END
-  */
-
-      uint32 Debug64To75_LSB4:4;
-\t     /*
-               @@ ELEMENT = Ctrl
-               @@ STRUCTURE = BswFpgaIf_IpduRxAId3SignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = UWORD
-               @@ DESCRIPTION = "Ctrl"
-               @@ GROUP = BswFpgaIf
-               @@ END
-  */
-
-      uint16 Ctrl;
-\t     /*
-               @@ ELEMENT = Debug100To111_MSB4
-               @@ STRUCTURE = BswFpgaIf_IpduRxAId3SignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = UWORD 0x000F
-               @@ DESCRIPTION = "Debug100To111_MSB4"
-               @@ GROUP = BswFpgaIf
-               @@ END
-  */
-
-      uint16 Debug100To111_MSB4:4;
-\t     /*
-               @@ ELEMENT = Debug100To111_LSB8
-               @@ STRUCTURE = BswFpgaIf_IpduRxAId3SignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = UWORD 0x0FF0
-               @@ DESCRIPTION = "Debug100To111_LSB8"
-               @@ GROUP = BswFpgaIf
-               @@ END
-  */
-
-      uint16 Debug100To111_LSB8:8;
-\t     /*
-               @@ ELEMENT = M1VFpgaH_LSB4
-               @@ STRUCTURE = BswFpgaIf_IpduRxAId3SignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = UWORD 0xF0
-               @@ DESCRIPTION = "M1VFpgaH_LSB4"
-               @@ GROUP = BswFpgaIf
-               @@ END
-  */
-      uint16 M1VFpgaH_LSB4:4;
-\t  
-   }BswFpgaIf_IpduRxAId3SignalType;
-   
-typedef union
-{
-\t   /*
-            @@ ELEMENT = Data32
-            @@ STRUCTURE = BswFpgaIf_IpduRxAId3Type
-            @@ A2L_TYPE = MEASURE
-            @@ DATA_TYPE = ULONG
-            @@ DIMENSION = 4
-            @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-            @@ GROUP = BswFpgaIf
-            @@ END
-             */
-
-   uint32 Data32[4];
-      /*
-            @@ ELEMENT = Data16
-            @@ STRUCTURE = BswFpgaIf_IpduRxAId3Type
-            @@ A2L_TYPE = MEASURE
-            @@ DATA_TYPE = UWORD
-            @@ DIMENSION = 8
-            @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-            @@ GROUP = BswFpgaIf
-            @@ END
-             */
-   uint16 Data16[8];
-      /*
-            @@ ELEMENT = Data8
-            @@ STRUCTURE = BswFpgaIf_IpduRxAId3Type
-            @@ A2L_TYPE = MEASURE
-            @@ DATA_TYPE = UBYTE
-            @@ DIMENSION = 16
-            @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-            @@ GROUP = BswFpgaIf
-            @@ END
-             */
-
-   uint8  Data8[16];
-   
-      /*
-     @@ SUB_STRUCTURE = Signal
-     @@ STRUCTURE = BswFpgaIf_IpduRxAId3Type
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduRxAId3SignalType
-     @@ END
-   */
-
-   BswFpgaIf_IpduRxAId3SignalType Signal;
-
-}BswFpgaIf_IpduRxAId3Type;
-
-/*------------------------------------*/
-/* BswFpgaIf_ IPDU Tx structures             */
-/*------------------------------------*/
-
-/*------------------------------------*/
-/* BswFpgaIf IPDU TxS structure             */
-/*------------------------------------*/
-typedef struct
-   {
-\t      /*
-               @@ ELEMENT = PWM_Vl_MSB8
-               @@ STRUCTURE = BswFpgaIf_IpduTxSSignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = ULONG 0xFF
-               @@ DESCRIPTION = "PWM_Vl_MSB8"
-               @@ GROUP = BswFpgaIf
-               @@ END
-  */
-
-     uint32 PWM_Vl_MSB8:8;
-\t    /*
-               @@ ELEMENT = PWM_Ur_LSB8
-               @@ STRUCTURE = BswFpgaIf_IpduTxSSignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = ULONG 0x0F
-               @@ DESCRIPTION = "PWM_Ur_LSB8"
-               @@ GROUP = BswFpgaIf
-               @@ END
-  */
-
-\t uint32 PWM_Ur_LSB8:8;
-\t    /*
-               @@ ELEMENT = PWM_Ur_MSB4
-               @@ STRUCTURE = BswFpgaIf_IpduTxSSignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = ULONG 0xF0
-               @@ DESCRIPTION = "PWM_Ur_MSB4"
-               @@ GROUP = BswFpgaIf
-               @@ END
-  */
-
-\t uint32 PWM_Ur_MSB4:4;
-\t    /*
-               @@ ELEMENT = PWM_Ul_LSB4
-               @@ STRUCTURE = BswFpgaIf_IpduTxSSignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = ULONG 0xFF
-               @@ DESCRIPTION = "PWM_Ul_LSB4"
-               @@ GROUP = BswFpgaIf
-               @@ END
-  */
-
-\t uint32 PWM_Ul_LSB4:4;
-\t /*
-               @@ ELEMENT = PWM_Ul_MSB8
-               @@ STRUCTURE = BswFpgaIf_IpduTxSSignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = ULONG 0xFF
-               @@ DESCRIPTION = "PWM_Ul_MSB8"
-               @@ GROUP = BswFpgaIf
-               @@ END
-  */
-
-\t uint32 PWM_Ul_MSB8:8;
-
-   /*
-               @@ ELEMENT = PWM_Wr_MSB4
-               @@ STRUCTURE = BswFpgaIf_IpduTxSSignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = ULONG 0x0F
-               @@ DESCRIPTION = "PWM_Wr_MSB4"
-               @@ GROUP = BswFpgaIf
-               @@ END
-  */
-     uint32 PWM_Wr_MSB4:4;
-\t   /*
-              @@ ELEMENT = PWM_Wl_LSB4
-              @@ STRUCTURE = BswFpgaIf_IpduTxSSignalType
-              @@ A2L_TYPE = MEASURE
-              @@ DATA_TYPE = ULONG 0xF0
-              @@ DESCRIPTION = "PWM_Wl_LSB4"
-              @@ GROUP = BswFpgaIf
-              @@ END
- */
-
-     uint32 PWM_Wl_LSB4:4;
-\t   /*
-              @@ ELEMENT = PWM_Wl_MSB8
-              @@ STRUCTURE = BswFpgaIf_IpduTxSSignalType
-              @@ A2L_TYPE = MEASURE
-              @@ DATA_TYPE = ULONG 0xFF
-              @@ DESCRIPTION = "PWM_Wl_MSB8"
-              @@ GROUP = BswFpgaIf
-              @@ END
- */
-
-     uint32 PWM_Wl_MSB8:8;
-\t   /*
-              @@ ELEMENT = PWM_Vr_LSB8
-              @@ STRUCTURE = BswFpgaIf_IpduTxSSignalType
-              @@ A2L_TYPE = MEASURE
-              @@ DATA_TYPE = ULONG 0xFF
-              @@ DESCRIPTION = "PWM_Vr_LSB8"
-              @@ GROUP = BswFpgaIf
-              @@ END
- */
-
-     uint32 PWM_Vr_LSB8:8;
-\t   /*
-              @@ ELEMENT = PWM_Vr_MSB4
-              @@ STRUCTURE = BswFpgaIf_IpduTxSSignalType
-              @@ A2L_TYPE = MEASURE
-              @@ DATA_TYPE = ULONG 0x0F
-              @@ DESCRIPTION = "PWM_Vr_MSB4"
-              @@ GROUP = BswFpgaIf
-              @@ END
- */
-
-     uint32 PWM_Vr_MSB4:4;
-\t   /*
-              @@ ELEMENT = PWM_Vl_LSB4
-              @@ STRUCTURE = BswFpgaIf_IpduTxSSignalType
-              @@ A2L_TYPE = MEASURE
-              @@ DATA_TYPE = ULONG 0xF0
-              @@ DESCRIPTION = "PWM_Vl_LSB4"
-              @@ GROUP = BswFpgaIf
-              @@ END
- */
-
-     uint32 PWM_Vl_LSB4:4;
-  /*
-              @@ ELEMENT = Ctrl
-              @@ STRUCTURE = BswFpgaIf_IpduTxSSignalType
-              @@ A2L_TYPE = MEASURE
-              @@ DATA_TYPE = UWORD
-              @@ DESCRIPTION = "Ctrl"
-              @@ GROUP = BswFpgaIf
-              @@ END
- */
-
-      uint16 Ctrl;
-\t     /*
-     @@ SUB_STRUCTURE = PWMControl
-     @@ STRUCTURE = BswFpgaIf_IpduTxSSignalType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalPWMControlType
-     @@ END
-   */
-
-      BswFpgaIf_IpduSignalPWMControlType PWMControl;
-\t     /*
-               @@ ELEMENT = PWM_Wr_LSB8
-               @@ STRUCTURE = BswFpgaIf_IpduTxSSignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = UBYTE 0xFF
-               @@ DESCRIPTION = "PWM_Wr_LSB8"
-               @@ GROUP = BswFpgaIf
-               @@ END
-  */
-      uint8 PWM_Wr_LSB8:8;
-
-     }BswFpgaIf_IpduTxSSignalType;
-
-typedef struct
-{
-\t        /*
-                   @@ ELEMENT = SVM_V2_MSB2
-                   @@ STRUCTURE = BswFpgaIf_IpduTxSSignalSVMType
-                   @@ A2L_TYPE = MEASURE
-                   @@ DATA_TYPE = ULONG 0x03
-                   @@ DESCRIPTION = "SVM_V2_MSB2"
-                   @@ GROUP = BswFpgaIf
-                   @@ END
-      */
-      uint32 SVM_V2_MSB2:2;
-\t       /*
-                   @@ ELEMENT = SVM_V1
-                   @@ STRUCTURE = BswFpgaIf_IpduTxSSignalSVMType
-                   @@ A2L_TYPE = MEASURE
-                   @@ DATA_TYPE = ULONG 0xFC
-                   @@ DESCRIPTION = "SVM_V1"
-                   @@ GROUP = BswFpgaIf
-                   @@ END
-      */
-      uint32 SVM_V1:6;
-\t       /*
-                   @@ ELEMENT = SVM_V3_MSB4
-                   @@ STRUCTURE = BswFpgaIf_IpduTxSSignalSVMType
-                   @@ A2L_TYPE = MEASURE
-                   @@ DATA_TYPE = ULONG 0xF
-                   @@ DESCRIPTION = "SVM_V3_MSB4"
-                   @@ GROUP = BswFpgaIf
-                   @@ END
-      */
-
-      uint32 SVM_V3_MSB4:4;
-\t       /*
-                   @@ ELEMENT = SVM_V2_LSB4
-                   @@ STRUCTURE = BswFpgaIf_IpduTxSSignalSVMType
-                   @@ A2L_TYPE = MEASURE
-                   @@ DATA_TYPE = ULONG 0xF0
-                   @@ DESCRIPTION = "SVM_V2_LSB4"
-                   @@ GROUP = BswFpgaIf
-                   @@ END
-      */
-      uint32 SVM_V2_LSB4:4;
-\t       /*
-                   @@ ELEMENT = SVM_V4
-                   @@ STRUCTURE = BswFpgaIf_IpduTxSSignalSVMType
-                   @@ A2L_TYPE = MEASURE
-                   @@ DATA_TYPE = ULONG 0x3F
-                   @@ DESCRIPTION = "SVM_V4"
-                   @@ GROUP = BswFpgaIf
-                   @@ END
-      */
-
-      uint32 SVM_V4:6;
-\t       /*
-                   @@ ELEMENT = SVM_V3_LSB2
-                   @@ STRUCTURE = BswFpgaIf_IpduTxSSignalSVMType
-                   @@ A2L_TYPE = MEASURE
-                   @@ DATA_TYPE = ULONG 0x0C0
-                   @@ DESCRIPTION = "SVM_V3_LSB2"
-                   @@ GROUP = BswFpgaIf
-                   @@ END
-      */
-
-      uint32 SVM_V3_LSB2:2;
-\t       /*
-                   @@ ELEMENT = SVM_AT1_MSB8
-                   @@ STRUCTURE = BswFpgaIf_IpduTxSSignalSVMType
-                   @@ A2L_TYPE = MEASURE
-                   @@ DATA_TYPE = ULONG 0xFF
-                   @@ DESCRIPTION = "SVM_AT1_MSB8"
-                   @@ GROUP = BswFpgaIf
-                   @@ END
-      */
-
-      uint32 SVM_AT1_MSB8:8;
-\t       /*
-                   @@ ELEMENT = SVM_AT2_MSB4
-                   @@ STRUCTURE = BswFpgaIf_IpduTxSSignalSVMType
-                   @@ A2L_TYPE = MEASURE
-                   @@ DATA_TYPE = ULONG 0xF
-                   @@ DESCRIPTION = "SVM_AT2_MSB4"
-                   @@ GROUP = BswFpgaIf
-                   @@ END
-      */
-
-
-      uint32 SVM_AT2_MSB4:4;
-\t       /*
-                   @@ ELEMENT = SVM_AT1_LSB4
-                   @@ STRUCTURE = BswFpgaIf_IpduTxSSignalSVMType
-                   @@ A2L_TYPE = MEASURE
-                   @@ DATA_TYPE = ULONG 0xF0
-                   @@ DESCRIPTION = "SVM_AT1_LSB4"
-                   @@ GROUP = BswFpgaIf
-                   @@ END
-      */
-
-      uint32 SVM_AT1_LSB4:4;
-\t       /*
-                   @@ ELEMENT = SVM_AT2_LSB8
-                   @@ STRUCTURE = BswFpgaIf_IpduTxSSignalSVMType
-                   @@ A2L_TYPE = MEASURE
-                   @@ DATA_TYPE = ULONG 0xFF
-                   @@ DESCRIPTION = "SVM_AT2_LSB8"
-                   @@ GROUP = BswFpgaIf
-                   @@ END
-      */
-
-      uint32 SVM_AT2_LSB8:8;
-\t       /*
-                   @@ ELEMENT = SVM_AT3_MSB8
-                   @@ STRUCTURE = BswFpgaIf_IpduTxSSignalSVMType
-                   @@ A2L_TYPE = MEASURE
-                   @@ DATA_TYPE = ULONG 0x00FF
-                   @@ DESCRIPTION = "SVM_AT3_MSB8"
-                   @@ GROUP = BswFpgaIf
-                   @@ END
-      */
-
-      uint32 SVM_AT3_MSB8:8;
-\t       /*
-                   @@ ELEMENT = SVM_AT4_MSB4
-                   @@ STRUCTURE = BswFpgaIf_IpduTxSSignalSVMType
-                   @@ A2L_TYPE = MEASURE
-                   @@ DATA_TYPE = ULONG 0x0F
-                   @@ DESCRIPTION = "SVM_AT4_MSB4"
-                   @@ GROUP = BswFpgaIf
-                   @@ END
-      */
-
-      uint32 SVM_AT4_MSB4:4;
-\t       /*
-                   @@ ELEMENT = SVM_AT3_LSB4
-                   @@ STRUCTURE = BswFpgaIf_IpduTxSSignalSVMType
-                   @@ A2L_TYPE = MEASURE
-                   @@ DATA_TYPE = ULONG 0xF0
-                   @@ DESCRIPTION = "SVM_AT3_LSB4"
-                   @@ GROUP = BswFpgaIf
-                   @@ END
-      */
-
-      uint32 SVM_AT3_LSB4:4;
-\t       /*
-                   @@ ELEMENT = SVM_AT4_LSB8
-                   @@ STRUCTURE = BswFpgaIf_IpduTxSSignalSVMType
-                   @@ A2L_TYPE = MEASURE
-                   @@ DATA_TYPE = UBYTE 0xFF
-                   @@ DESCRIPTION = "SVM_AT4_LSB8"
-                   @@ GROUP = BswFpgaIf
-                   @@ END
-      */
-
-      uint8 SVM_AT4_LSB8:8;
-\t     /*
-     @@ SUB_STRUCTURE = PWMControl
-     @@ STRUCTURE = BswFpgaIf_IpduTxSSignalSVMType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalPWMControlType
-     @@ END
-   */
-
-      BswFpgaIf_IpduSignalPWMControlType PWMControl;
-\t     /*
-                 @@ ELEMENT = Ctrl
-                 @@ STRUCTURE = BswFpgaIf_IpduTxSSignalSVMType
-                 @@ A2L_TYPE = MEASURE
-                 @@ DATA_TYPE = UWORD
-                 @@ DESCRIPTION = "Ctrl"
-                 @@ GROUP = BswFpgaIf
-                 @@ END
-    */
-
-      uint16 Ctrl;
-\t  
-   }BswFpgaIf_IpduTxSSignalSVMType;
-   
-typedef union
-{
-\t   /*
-            @@ ELEMENT = Data32
-            @@ STRUCTURE = BswFpgaIf_IpduTxSType
-            @@ A2L_TYPE = MEASURE
-            @@ DATA_TYPE = ULONG
-            @@ DIMENSION = 3
-            @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-            @@ GROUP = BswFpgaIf
-            @@ END
-             */
-
-   uint32 Data32[3];
-      /*
-            @@ ELEMENT = Data16
-            @@ STRUCTURE = BswFpgaIf_IpduTxSType
-            @@ A2L_TYPE = MEASURE
-            @@ DATA_TYPE = UWORD
-            @@ DIMENSION = 6
-            @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-            @@ GROUP = BswFpgaIf
-            @@ END
-             */
-
-   uint16 Data16[6];
-      /*
-            @@ ELEMENT = Data8
-            @@ STRUCTURE = BswFpgaIf_IpduTxSType
-            @@ A2L_TYPE = MEASURE
-            @@ DATA_TYPE = UBYTE
-            @@ DIMENSION = 12
-            @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-            @@ GROUP = BswFpgaIf
-            @@ END
-             */
-
-   uint8  Data8[12];
-      /*
-     @@ SUB_STRUCTURE = Signal
-     @@ STRUCTURE = BswFpgaIf_IpduTxSType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduTxSSignalType
-     @@ END
-   */
-
-   BswFpgaIf_IpduTxSSignalType Signal;
-   /*
-     @@ SUB_STRUCTURE = SignalSVM
-     @@ STRUCTURE = BswFpgaIf_IpduTxSType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduTxSSignalSVMType
-     @@ END
-   */
-
-   BswFpgaIf_IpduTxSSignalSVMType SignalSVM;
-
-   
-}BswFpgaIf_IpduTxSType;
-
-/*------------------------------------*/
-/* BswFpgaIf IPDU TxA structure      */
-/*------------------------------------*/
-typedef struct
-{
-\t      /*
-     @@ SUB_STRUCTURE = FaultA
-     @@ STRUCTURE = BswFpgaIf_IpduTxASignalType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultAType
-     @@ END
-   */
-
-\t   BswFpgaIf_IpduSignalFaultAType FaultA;
-\t   /*
-     @@ SUB_STRUCTURE = StateReq
-     @@ STRUCTURE = BswFpgaIf_IpduTxASignalType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalStateReqType
-     @@ END
-   */
-
-      BswFpgaIf_IpduSignalStateReqType StateReq;
-\t  /*
-               @@ ELEMENT = Id
-               @@ STRUCTURE = BswFpgaIf_IpduTxASignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = UBYTE
-               @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-               @@ GROUP = BswFpgaIf
-               @@ END
-                */
-      uint8 Id;
-/*
-               @@ ELEMENT = M1_MSB4
-               @@ STRUCTURE = BswFpgaIf_IpduTxASignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = UWORD 0x000F
-               @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-               @@ GROUP = BswFpgaIf
-               @@ END
-                */
-      uint16 M1_MSB4:4;
-\t  /*
-                  @@ ELEMENT = M0_LSB4
-                  @@ STRUCTURE = BswFpgaIf_IpduTxASignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = UWORD 0x00F0
-                  @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-                   */
-      uint16 M0_LSB4:4;
-\t  /*
-               @@ ELEMENT = M0_MSB8
-               @@ STRUCTURE = BswFpgaIf_IpduTxASignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = UWORD 0xFF00
-               @@ DESCRIPTION = "M0_MSB8"
-               @@ GROUP = BswFpgaIf
-               @@ END
-                */
-      uint16 M0_MSB8:8;
-\t  /*
-     @@ SUB_STRUCTURE = FaultB
-     @@ STRUCTURE = BswFpgaIf_IpduTxASignalType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultBType
-     @@ END
-   */
-      BswFpgaIf_IpduSignalFaultBType FaultB;
-/*
-               @@ ELEMENT = M3_LSB8
-               @@ STRUCTURE = BswFpgaIf_IpduTxASignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = ULONG 0x0FF
-               @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-               @@ GROUP = BswFpgaIf
-               @@ END
-                */
-      uint32 M3_LSB8:8;
-\t  /*
-               @@ ELEMENT = M3_MSB4
-               @@ STRUCTURE = BswFpgaIf_IpduTxASignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = ULONG 0xF
-               @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-               @@ GROUP = BswFpgaIf
-               @@ END
-                */
-      uint32 M3_MSB4:4;
-\t  /*
-                  @@ ELEMENT = M2_LSB4
-                  @@ STRUCTURE = BswFpgaIf_IpduTxASignalType
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = ULONG 0xF0
-                  @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-                   */
-      uint32 M2_LSB4:4;
-\t  /*
-                     @@ ELEMENT = M2_MSB8
-                     @@ STRUCTURE = BswFpgaIf_IpduTxASignalType
-                     @@ A2L_TYPE = MEASURE
-                     @@ DATA_TYPE = ULONG 0x00FF
-                     @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                     @@ GROUP = BswFpgaIf
-                     @@ END
-                      */
-      uint32 M2_MSB8:8;
-\t  /*
-                        @@ ELEMENT = M1_LSB8
-                        @@ STRUCTURE = BswFpgaIf_IpduTxASignalType
-                        @@ A2L_TYPE = MEASURE
-                        @@ DATA_TYPE = ULONG 0xFF
-                        @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                        @@ GROUP = BswFpgaIf
-                        @@ END
-                         */
-      uint32 M1_LSB8:8;
-/*
-               @@ ELEMENT = M6_MSB8
-               @@ STRUCTURE = BswFpgaIf_IpduTxASignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = ULONG 0x00FF
-               @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-               @@ GROUP = BswFpgaIf
-               @@ END
-                */
-      uint32 M6_MSB8:8;
-\t  /*
-               @@ ELEMENT = M5_LSB8
-               @@ STRUCTURE = BswFpgaIf_IpduTxASignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = ULONG 0x0FF
-               @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-               @@ GROUP = BswFpgaIf
-               @@ END
-                */
-      uint32 M5_LSB8:8;
-\t  /*
-               @@ ELEMENT = M5_MSB4
-               @@ STRUCTURE = BswFpgaIf_IpduTxASignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = ULONG 0x00F
-               @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-               @@ GROUP = BswFpgaIf
-               @@ END
-                */
-      uint32 M5_MSB4:4;
-\t  /*
-               @@ ELEMENT = M4_LSB4
-               @@ STRUCTURE = BswFpgaIf_IpduTxASignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = ULONG 0x00F0
-               @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-               @@ GROUP = BswFpgaIf
-               @@ END
-                */
-      uint32 M4_LSB4:4;
-\t  /*
-               @@ ELEMENT = M4_MSB8
-               @@ STRUCTURE = BswFpgaIf_IpduTxASignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = ULONG 0xFF
-               @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-               @@ GROUP = BswFpgaIf
-               @@ END
-                */
-      uint32 M4_MSB8:8;
-   /*
-               @@ ELEMENT = Ctrl
-               @@ STRUCTURE = BswFpgaIf_IpduTxASignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = ULONG
-               @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-               @@ GROUP = BswFpgaIf
-               @@ END
-                */
-      uint16 Ctrl;
-\t     /*
-               @@ ELEMENT = Debug_LSB8
-               @@ STRUCTURE = BswFpgaIf_IpduTxASignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = UWORD 0x00FF
-               @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-               @@ GROUP = BswFpgaIf
-               @@ END
-                */
-
-      uint16 Debug_LSB8:8;
-\t     /*
-               @@ ELEMENT = Debug_MSB4
-               @@ STRUCTURE = BswFpgaIf_IpduTxASignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = UWORD 0x0F00
-               @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-               @@ GROUP = BswFpgaIf
-               @@ END
-                */
-
-      uint16 Debug_MSB4:4;
-\t     /*
-               @@ ELEMENT = M6_LSB4
-               @@ STRUCTURE = BswFpgaIf_IpduTxASignalType
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = UWORD 0xF0
-               @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-               @@ GROUP = BswFpgaIf
-               @@ END
-                */
-      uint16 M6_LSB4:4;
-
-   }BswFpgaIf_IpduTxASignalType;
-   
-typedef union
-{
-\t   /*
-            @@ ELEMENT = Data32
-            @@ STRUCTURE = BswFpgaIf_IpduTxAType
-            @@ A2L_TYPE = MEASURE
-            @@ DATA_TYPE = ULONG
-            @@ DIMENSION = 5
-            @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-            @@ GROUP = BswFpgaIf
-            @@ END
-    */
-
-   uint32 Data32[5];
-      /*
-            @@ ELEMENT = Data16
-            @@ STRUCTURE = BswFpgaIf_IpduTxAType
-            @@ A2L_TYPE = MEASURE
-            @@ DATA_TYPE = UWORD
-            @@ DIMENSION = 10
-            @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-            @@ GROUP = BswFpgaIf
-            @@ END
-   */
-
-   uint16 Data16[10];
-      /*
-            @@ ELEMENT = Data8
-            @@ STRUCTURE = BswFpgaIf_IpduTxAType
-            @@ A2L_TYPE = MEASURE
-            @@ DATA_TYPE = UBYTE
-            @@ DIMENSION = 20
-            @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-            @@ GROUP = BswFpgaIf
-            @@ END
-             */
-
-   uint8  Data8[20];
-   
-      /*
-        @@ SUB_STRUCTURE = Signal
-        @@ STRUCTURE = BswFpgaIf_IpduTxAType
-        @@ DATA_TYPE = STRUCTURE    BswFpgaIf_IpduTxASignalType
-        @@ END
-      */
-   BswFpgaIf_IpduTxASignalType Signal;
-
-}BswFpgaIf_IpduTxAType;
-
-/*----------------------------------------------------------------------------*/
-
-/*------------------------------------*/
-/* BswFpgaIf IPDU TxA ID 0 structure        */
-/*------------------------------------*/
- typedef struct
-   {
-\t         /*
-        @@ SUB_STRUCTURE = FaultA
-        @@ STRUCTURE = BswFpgaIf_IpduTxAId0SignalType
-        @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultAType
-        @@ END
-      */
-
-     BswFpgaIf_IpduSignalFaultAType FaultA;
-\t       /*
-        @@ SUB_STRUCTURE = StateReq
-        @@ STRUCTURE = BswFpgaIf_IpduTxAId0SignalType
-        @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalStateReqType
-        @@ END
-      */
-
-     BswFpgaIf_IpduSignalStateReqType StateReq;
-\t       /*
-                     @@ ELEMENT = Id
-                     @@ STRUCTURE = BswFpgaIf_IpduTxAId0SignalType
-                     @@ A2L_TYPE = MEASURE
-                     @@ DATA_TYPE = UBYTE
-                     @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                     @@ GROUP = BswFpgaIf
-                     @@ END
-                      */
-
-     uint8 Id;
-
-    /*
-                    @@ ELEMENT = M1Id0Spare_MSB4
-                    @@ STRUCTURE = BswFpgaIf_IpduTxAId0SignalType
-                    @@ A2L_TYPE = MEASURE
-                    @@ DATA_TYPE = UWORD 0x000F
-                    @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                    @@ GROUP = BswFpgaIf
-                    @@ END
-                     */
-
-     uint16 M1Id0Spare_MSB4:4;
-\t      /*
-                    @@ ELEMENT = M0PwmMinDutyCycle_LSB4
-                    @@ STRUCTURE = BswFpgaIf_IpduTxAId0SignalType
-                    @@ A2L_TYPE = MEASURE
-                    @@ DATA_TYPE = UWORD 0x00F0
-                    @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                    @@ GROUP = BswFpgaIf
-                    @@ END
-                     */
-
-     uint16 M0PwmMinDutyCycle_LSB4:4;
-\t      /*
-                    @@ ELEMENT = M0PwmMinDutyCycle_MSB8
-                    @@ STRUCTURE = BswFpgaIf_IpduTxAId0SignalType
-                    @@ A2L_TYPE = MEASURE
-                    @@ DATA_TYPE = UWORD 0xFF00
-                    @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                    @@ GROUP = BswFpgaIf
-                    @@ END
-                     */
-
-     uint16 M0PwmMinDutyCycle_MSB8:8;
-\t      /*
-       @@ SUB_STRUCTURE = FaultB
-       @@ STRUCTURE = BswFpgaIf_IpduTxAId0SignalType
-       @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultBType
-       @@ END
-     */
-
-     BswFpgaIf_IpduSignalFaultBType FaultB;
-     /*
-                    @@ ELEMENT = M3PwmDeadtime_LSB8
-                    @@ STRUCTURE = BswFpgaIf_IpduTxAId0SignalType
-                    @@ A2L_TYPE = MEASURE
-                    @@ DATA_TYPE = ULONG 0xFF
-                    @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                    @@ GROUP = BswFpgaIf
-                    @@ END
-                     */
-
-     uint32 M3PwmDeadtime_LSB8:8;
-\t      /*
-                    @@ ELEMENT = M3PwmDeadtime_MSB4
-                    @@ STRUCTURE = BswFpgaIf_IpduTxAId0SignalType
-                    @@ A2L_TYPE = MEASURE
-                    @@ DATA_TYPE = ULONG 0xF
-                    @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                    @@ GROUP = BswFpgaIf
-                    @@ END
-                     */
-
-     uint32 M3PwmDeadtime_MSB4:4;
-\t      /*
-                    @@ ELEMENT = M2PwmFreq_LSB4
-                    @@ STRUCTURE = BswFpgaIf_IpduTxAId0SignalType
-                    @@ A2L_TYPE = MEASURE
-                    @@ DATA_TYPE = ULONG 0x0F0
-                    @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                    @@ GROUP = BswFpgaIf
-                    @@ END
-                     */
-
-     uint32 M2PwmFreq_LSB4:4;
-\t      /*
-                    @@ ELEMENT = M2PwmFreq_MSB8
-                    @@ STRUCTURE = BswFpgaIf_IpduTxAId0SignalType
-                    @@ A2L_TYPE = MEASURE
-                    @@ DATA_TYPE = ULONG 0x00FF
-                    @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                    @@ GROUP = BswFpgaIf
-                    @@ END
-                     */
-
-     uint32 M2PwmFreq_MSB8:8;
-\t      /*
-                    @@ ELEMENT = M1Id0Spare_LSB8
-                    @@ STRUCTURE = BswFpgaIf_IpduTxAId0SignalType
-                    @@ A2L_TYPE = MEASURE
-                    @@ DATA_TYPE = ULONG 0xFF
-                    @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                    @@ GROUP = BswFpgaIf
-                    @@ END
-                     */
-     uint32 M1Id0Spare_LSB8:8;
-
-
-     /*
-                    @@ ELEMENT = M6PwmInitValUr_MSB8
-                    @@ STRUCTURE = BswFpgaIf_IpduTxAId0SignalType
-                    @@ A2L_TYPE = MEASURE
-                    @@ DATA_TYPE = ULONG 0x0FF
-                    @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                    @@ GROUP = BswFpgaIf
-                    @@ END
-      */
-
-     uint32 M6PwmInitValUr_MSB8:8;
-\t      /*
-                    @@ ELEMENT = M5PwmInitValUl_LSB8
-                    @@ STRUCTURE = BswFpgaIf_IpduTxAId0SignalType
-                    @@ A2L_TYPE = MEASURE
-                    @@ DATA_TYPE = ULONG 0xFF
-                    @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                    @@ GROUP = BswFpgaIf
-                    @@ END
-                     */
-
-     uint32 M5PwmInitValUl_LSB8:8;
-\t      /*
-                    @@ ELEMENT = M5PwmInitValUl_MSB4
-                    @@ STRUCTURE = BswFpgaIf_IpduTxAId0SignalType
-                    @@ A2L_TYPE = MEASURE
-                    @@ DATA_TYPE = ULONG 0x000F
-                    @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                    @@ GROUP = BswFpgaIf
-                    @@ END
-                     */
-
-     uint32 M5PwmInitValUl_MSB4:4;
-\t      /*
-                    @@ ELEMENT = M4Id0Spare_LSB4
-                    @@ STRUCTURE = BswFpgaIf_IpduTxAId0SignalType
-                    @@ A2L_TYPE = MEASURE
-                    @@ DATA_TYPE = ULONG 0x00F0
-                    @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                    @@ GROUP = BswFpgaIf
-                    @@ END
-                     */
-
-     uint32 M4Id0Spare_LSB4:4;
-\t      /*
-                    @@ ELEMENT = M4Id0Spare_MSB8
-                    @@ STRUCTURE = BswFpgaIf_IpduTxAId0SignalType
-                    @@ A2L_TYPE = MEASURE
-                    @@ DATA_TYPE = UWORD 0xFF
-                    @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                    @@ GROUP = BswFpgaIf
-                    @@ END
-                     */
-     uint32 M4Id0Spare_MSB8:8;
-
-     /*
-                    @@ ELEMENT = Ctrl
-                    @@ STRUCTURE = BswFpgaIf_IpduTxAId0SignalType
-                    @@ A2L_TYPE = MEASURE
-                    @@ DATA_TYPE = UWORD 0xFFFF
-                    @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                    @@ GROUP = BswFpgaIf
-                    @@ END
-                     */
-
-     uint16 Ctrl:16;
-\t      /*
-                    @@ ELEMENT = Debug_LSB8
-                    @@ STRUCTURE = BswFpgaIf_IpduTxAId0SignalType
-                    @@ A2L_TYPE = MEASURE
-                    @@ DATA_TYPE = UWORD 0x00FF
-                    @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                    @@ GROUP = BswFpgaIf
-                    @@ END
-                     */
-
-     uint16 Debug_LSB8:8;
-\t      /*
-                    @@ ELEMENT = Debug_MSB4
-                    @@ STRUCTURE = BswFpgaIf_IpduTxAId0SignalType
-                    @@ A2L_TYPE = MEASURE
-                    @@ DATA_TYPE = UWORD 0x0F00
-                    @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                    @@ GROUP = BswFpgaIf
-                    @@ END
-                     */
-
-     uint16 Debug_MSB4:4;
-\t      /*
-                    @@ ELEMENT = M6PwmInitValUr_LSB4
-                    @@ STRUCTURE = BswFpgaIf_IpduTxAId0SignalType
-                    @@ A2L_TYPE = MEASURE
-                    @@ DATA_TYPE = UWORD 0xF000
-                    @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                    @@ GROUP = BswFpgaIf
-                    @@ END
-                     */
-     uint16 M6PwmInitValUr_LSB4:4;
-
-   }BswFpgaIf_IpduTxAId0SignalType;
-   
-typedef union
-{
-\t   /*
-               @@ ELEMENT = Data32
-               @@ STRUCTURE = BswFpgaIf_IpduTxAId0Type
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = ULONG
-               @@ DIMENSION = 5
-               @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-               @@ GROUP = BswFpgaIf
-               @@ END
-                */
-   uint32 Data32[5];
-      /*
-               @@ ELEMENT = Data16
-               @@ STRUCTURE = BswFpgaIf_IpduTxAId0Type
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = UWORD
-               @@ DIMENSION = 10
-               @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-               @@ GROUP = BswFpgaIf
-               @@ END
-                */
-   uint16 Data16[10];
-      /*
-               @@ ELEMENT = Data8
-               @@ STRUCTURE = BswFpgaIf_IpduTxAId0Type
-               @@ A2L_TYPE = MEASURE
-               @@ DATA_TYPE = UBYTE
-               @@ DIMENSION = 20
-               @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-               @@ GROUP = BswFpgaIf
-               @@ END
-                */
-   uint8  Data8[20];
-   
-      /*
-     @@ SUB_STRUCTURE = Signal
-     @@ STRUCTURE = BswFpgaIf_IpduTxAId0Type
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduTxAId0SignalType
-     @@ END
-   */
-
-   BswFpgaIf_IpduTxAId0SignalType Signal;
-
-
-}BswFpgaIf_IpduTxAId0Type;
-
-/*------------------------------------*/
-/* BswFpgaIf IPDU TxA ID 1 structure        */
-/*------------------------------------*/
-typedef struct
-{
-   /*
-     @@ SUB_STRUCTURE = FaultA
-     @@ STRUCTURE = BswFpgaIf_IpduTxAId1SignalType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultAType
-     @@ END
-   */
-
-\t  BswFpgaIf_IpduSignalFaultAType FaultA;
-\t     /*
-     @@ SUB_STRUCTURE = StateReq
-     @@ STRUCTURE = BswFpgaIf_IpduTxAId1SignalType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalStateReqType
-     @@ END
-   */
-
-\t  BswFpgaIf_IpduSignalStateReqType StateReq;
-\t    /*
-                 @@ ELEMENT = Id
-                 @@ STRUCTURE = BswFpgaIf_IpduTxAId1SignalType
-                 @@ A2L_TYPE = MEASURE
-                 @@ DATA_TYPE = UBYTE
-                 @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                 @@ GROUP = BswFpgaIf
-                 @@ END
-                  */
-\t  uint8 Id;
-  /*
-                 @@ ELEMENT = M1Id1Spare_MSB4
-                 @@ STRUCTURE = BswFpgaIf_IpduTxAId1SignalType
-                 @@ A2L_TYPE = MEASURE
-                 @@ DATA_TYPE = UWORD 0x000F
-                 @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                 @@ GROUP = BswFpgaIf
-                 @@ END
-                  */
-\t  uint16 M1Id1Spare_MSB4:4;
-\t  /*
-                 @@ ELEMENT = M0PwmMaxDutyCycle_LSB4
-                 @@ STRUCTURE = BswFpgaIf_IpduTxAId1SignalType
-                 @@ A2L_TYPE = MEASURE
-                 @@ DATA_TYPE = UWORD 0x00F0
-                 @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                 @@ GROUP = BswFpgaIf
-                 @@ END
-                  */
-\t  uint16 M0PwmMaxDutyCycle_LSB4:4;
-\t  /*
-                 @@ ELEMENT = M0PwmMaxDutyCycle_MSB8
-                 @@ STRUCTURE = BswFpgaIf_IpduTxAId1SignalType
-                 @@ A2L_TYPE = MEASURE
-                 @@ DATA_TYPE = UWORD 0xFF
-                 @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                 @@ GROUP = BswFpgaIf
-                 @@ END
-                  */
-\t  uint16 M0PwmMaxDutyCycle_MSB8:8;
-\t     /*
-     @@ SUB_STRUCTURE = FaultB
-     @@ STRUCTURE = BswFpgaIf_IpduTxAId1SignalType
-     @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultBType
-     @@ END
-   */
-\t  BswFpgaIf_IpduSignalFaultBType FaultB;
-  /*
-                 @@ ELEMENT = M3PwmInitValVr_LSB8
-                 @@ STRUCTURE = BswFpgaIf_IpduTxAId1SignalType
-                 @@ A2L_TYPE = MEASURE
-                 @@ DATA_TYPE = ULONG 0xFF
-                 @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                 @@ GROUP = BswFpgaIf
-                 @@ END
-                  */
-\t  uint32 M3PwmInitValVr_LSB8:8;
-\t    /*
-                 @@ ELEMENT = M3PwmInitValVr_MSB4
-                 @@ STRUCTURE = BswFpgaIf_IpduTxAId1SignalType
-                 @@ A2L_TYPE = MEASURE
-                 @@ DATA_TYPE = ULONG 0xF
-                 @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                 @@ GROUP = BswFpgaIf
-                 @@ END
-                  */
-\t  uint32 M3PwmInitValVr_MSB4:4;
-\t    /*
-                 @@ ELEMENT = M2PwmInitValVl_LSB4
-                 @@ STRUCTURE = BswFpgaIf_IpduTxAId1SignalType
-                 @@ A2L_TYPE = MEASURE
-                 @@ DATA_TYPE = ULONG 0x0F0
-                 @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                 @@ GROUP = BswFpgaIf
-                 @@ END
-                  */
-\t  uint32 M2PwmInitValVl_LSB4:4;
-\t    /*
-                 @@ ELEMENT = M2PwmInitValVl_MSB8
-                 @@ STRUCTURE = BswFpgaIf_IpduTxAId1SignalType
-                 @@ A2L_TYPE = MEASURE
-                 @@ DATA_TYPE = ULONG 0x00FF
-                 @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                 @@ GROUP = BswFpgaIf
-                 @@ END
-                  */
-\t  uint32 M2PwmInitValVl_MSB8:8;
-\t    /*
-                 @@ ELEMENT = M1Id1Spare_LSB8
-                 @@ STRUCTURE = BswFpgaIf_IpduTxAId1SignalType
-                 @@ A2L_TYPE = MEASURE
-                 @@ DATA_TYPE = ULONG 0xFF
-                 @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                 @@ GROUP = BswFpgaIf
-                 @@ END
-                  */
-     uint32 M1Id1Spare_LSB8:8;
-  /*
-                 @@ ELEMENT = M6Id1Spare_MSB8
-                 @@ STRUCTURE = BswFpgaIf_IpduTxAId1SignalType
-                 @@ A2L_TYPE = MEASURE
-                 @@ DATA_TYPE = ULONG 0x0FF
-                 @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                 @@ GROUP = BswFpgaIf
-                 @@ END
-                  */
-     uint32 M6Id1Spare_MSB8:8;
-\t   /*
-                 @@ ELEMENT = M5PwmInitValWr_LSB8
-                 @@ STRUCTURE = BswFpgaIf_IpduTxAId1SignalType
-                 @@ A2L_TYPE = MEASURE
-                 @@ DATA_TYPE = ULONG 0xFF
-                 @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                 @@ GROUP = BswFpgaIf
-                 @@ END
-                  */
-     uint32 M5PwmInitValWr_LSB8:8;
-\t   /*
-                 @@ ELEMENT = M5PwmInitValWr_MSB4
-                 @@ STRUCTURE = BswFpgaIf_IpduTxAId1SignalType
-                 @@ A2L_TYPE = MEASURE
-                 @@ DATA_TYPE = ULONG 0x000F
-                 @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                 @@ GROUP = BswFpgaIf
-                 @@ END
-                  */
-     uint32 M5PwmInitValWr_MSB4:4;
-\t   /*
-                 @@ ELEMENT = M4PwmInitValWl_LSB4
-                 @@ STRUCTURE = BswFpgaIf_IpduTxAId1SignalType
-                 @@ A2L_TYPE = MEASURE
-                 @@ DATA_TYPE = ULONG 0x0F0
-                 @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                 @@ GROUP = BswFpgaIf
-                 @@ END
-                  */
-     uint32 M4PwmInitValWl_LSB4:4;
-\t   /*
-                 @@ ELEMENT = M4PwmInitValWl_MSB8
-                 @@ STRUCTURE = BswFpgaIf_IpduTxAId1SignalType
-                 @@ A2L_TYPE = MEASURE
-                 @@ DATA_TYPE = ULONG 0xFF
-                 @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                 @@ GROUP = BswFpgaIf
-                 @@ END
-                  */
-     uint32 M4PwmInitValWl_MSB8:8;
-/*
-                 @@ ELEMENT = Ctrl
-                 @@ STRUCTURE = BswFpgaIf_IpduTxAId1SignalType
-                 @@ A2L_TYPE = MEASURE
-                 @@ DATA_TYPE = UWORD
-                 @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                 @@ GROUP = BswFpgaIf
-                 @@ END
-                  */
-     uint16 Ctrl;
-\t /*
-                 @@ ELEMENT = Debug_LSB8
-                 @@ STRUCTURE = BswFpgaIf_IpduTxAId1SignalType
-                 @@ A2L_TYPE = MEASURE
-                 @@ DATA_TYPE = UWORD 0x00FF
-                 @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                 @@ GROUP = BswFpgaIf
-                 @@ END
-                  */
-     uint16 Debug_LSB8:8;
-\t /*
-                 @@ ELEMENT = Debug_MSB4
-                 @@ STRUCTURE = BswFpgaIf_IpduTxAId1SignalType
-                 @@ A2L_TYPE = MEASURE
-                 @@ DATA_TYPE = UWORD 0x0F00
-                 @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                 @@ GROUP = BswFpgaIf
-                 @@ END
-                  */
-     uint16 Debug_MSB4:4;
-\t /*
-                 @@ ELEMENT = M6Id1Spare_LSB4
-                 @@ STRUCTURE = BswFpgaIf_IpduTxAId1SignalType
-                 @@ A2L_TYPE = MEASURE
-                 @@ DATA_TYPE = UWORD 0xF000
-                 @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                 @@ GROUP = BswFpgaIf
-                 @@ END
-                  */
-     uint16 M6Id1Spare_LSB4:4;
-
-}BswFpgaIf_IpduTxAId1SignalType;
-   
-typedef union
-{
-\t   /*
-                  @@ ELEMENT = Data32
-                  @@ STRUCTURE = BswFpgaIf_IpduTxAId1Type
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = UBYTE
-                  @@ DIMENSION = 5
-                  @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-                   */
-   uint32 Data32[5];
-      /*
-                  @@ ELEMENT = Data16
-                  @@ STRUCTURE = BswFpgaIf_IpduTxAId1Type
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = UBYTE
-                  @@ DIMENSION = 10
-                  @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-                   */
-   uint16 Data16[10];
-   /*
-                  @@ ELEMENT = Data8
-                  @@ STRUCTURE = BswFpgaIf_IpduTxAId1Type
-                  @@ A2L_TYPE = MEASURE
-                  @@ DATA_TYPE = UBYTE
-                  @@ DIMENSION = 20
-                  @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-                  @@ GROUP = BswFpgaIf
-                  @@ END
-                   */
-   uint8  Data8[20];
-
-/*
-      @@ SUB_STRUCTURE = Signal
-      @@ STRUCTURE = BswFpgaIf_IpduTxAId1Type
-      @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduTxAId1SignalType
-      @@ END
-      */
-   BswFpgaIf_IpduTxAId1SignalType Signal;
-   
-}BswFpgaIf_IpduTxAId1Type;
-
-/*------------------------------------*/
-/* BswFpgaIf IPDU TxA ID 2 structure        */
-/*------------------------------------*/
-typedef struct
-{
-\t   /*
-   @@ SUB_STRUCTURE = FaultA
-   @@ STRUCTURE = BswFpgaIf_IpduTxAId2SignalType
-   @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultAType
-   @@ END
-   */
-\t  BswFpgaIf_IpduSignalFaultAType FaultA;
-\t  /*
-  @@ SUB_STRUCTURE = StateReq
-  @@ STRUCTURE = BswFpgaIf_IpduTxAId2SignalType
-  @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalStateReqType
-  @@ END
-  */
-\t  BswFpgaIf_IpduSignalStateReqType StateReq;
-\t  /*
-    @@ ELEMENT = Id
-    @@ STRUCTURE = BswFpgaIf_IpduTxAId2SignalType
-    @@ A2L_TYPE = MEASURE
-    @@ DATA_TYPE = UBYTE
-    @@ DESCRIPTION = "Secure fault reset request ack counter"
-    @@ GROUP = BswFpgaIf
-    @@ END
-    */
-\t  uint8 Id;
-/*
-  @@ ELEMENT = M1Id2Spare_MSB4
-  @@ STRUCTURE = BswFpgaIf_IpduTxAId2SignalType
-  @@ A2L_TYPE = MEASURE
-  @@ DATA_TYPE = UWORD 0x000F
-  @@ DESCRIPTION = "HVDC overvoltage"
-  @@ GROUP = BswFpgaIf
-  @@ END
-  */
-\t  uint16 M1Id2Spare_MSB4:4;
-\t    /*
-    @@ ELEMENT = M0VFilAverage
-    @@ STRUCTURE = BswFpgaIf_IpduTxAId2SignalType
-    @@ A2L_TYPE = MEASURE
-    @@ DATA_TYPE = UWORD 0x0030
-    @@ DESCRIPTION = "V Filter average"
-    @@ GROUP = BswFpgaIf
-    @@ END
-    */
-
-\t  uint16 M0VFilAverage:2;
-\t    /*
-      @@ ELEMENT = M0IFilAverage
-      @@ STRUCTURE = BswFpgaIf_IpduTxAId2SignalType
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = UWORD 0x00C0
-      @@ DESCRIPTION = "I Filter average"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-
-\t  uint16 M0IFilAverage:2;
-\t    /*
-        @@ ELEMENT = FyBPwrSupCtrl
-        @@ STRUCTURE = BswFpgaIf_IpduTxAId2SignalType
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD 0x0100
-        @@ DESCRIPTION = "Flyback power supply control"
-        @@ GROUP = BswFpgaIf
-        @@ END
-        */
-
-\t  uint16 FyBPwrSupCtrl:1;
-\t  /*
-            @@ ELEMENT = M0Id2Spare05To07
-            @@ STRUCTURE = BswFpgaIf_IpduTxAId2SignalType
-            @@ A2L_TYPE = MEASURE
-            @@ DATA_TYPE = UWORD 0x0E00
-            @@ DESCRIPTION = "M0 Id2 Spare bits 5 to 7"
-            @@ GROUP = BswFpgaIf
-            @@ END
-            */
-\t  uint16 M0Id2Spare05To07:3;
-\t  /*
-            @@ ELEMENT = ActDisch_Req
-            @@ STRUCTURE = BswFpgaIf_IpduTxAId2SignalType
-            @@ A2L_TYPE = MEASURE
-            @@ DATA_TYPE = UWORD 0x1000
-            @@ DESCRIPTION = "Active discharge request"
-            @@ GROUP = BswFpgaIf
-            @@ END
-            */
-      uint16 ActDisch_Req:1;
-\t    /*
-            @@ ELEMENT = M0Id2Spare09To11
-            @@ STRUCTURE = BswFpgaIf_IpduTxAId2SignalType
-            @@ A2L_TYPE = MEASURE
-            @@ DATA_TYPE = UWORD 0xE000
-            @@ DESCRIPTION = "M0 Id2 Spare bits 9 to 11"
-            @@ GROUP = BswFpgaIf
-            @@ END
-            */
-\t  
-\t  uint16 M0Id2Spare09To11:3;
-\t    /*
-  @@ SUB_STRUCTURE = FaultB
-  @@ STRUCTURE = BswFpgaIf_IpduTxAId2SignalType
-  @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultBType
-  @@ END
-  */
-\t  BswFpgaIf_IpduSignalFaultBType FaultB;
-  /*
-              @@ ELEMENT = M3OverVoltVbatTh_LSB8
-              @@ STRUCTURE = BswFpgaIf_IpduTxAId2SignalType
-              @@ A2L_TYPE = MEASURE
-              @@ DATA_TYPE = ULONG 0xFF
-              @@ DESCRIPTION = "HVDC overvoltage"
-              @@ GROUP = BswFpgaIf
-              @@ END
-              */
-\t  uint32 M3OverVoltVbatTh_LSB8:8;
-\t    /*
-              @@ ELEMENT = M3OverVoltVbatTh_MSB4
-              @@ STRUCTURE = BswFpgaIf_IpduTxAId2SignalType
-              @@ A2L_TYPE = MEASURE
-              @@ DATA_TYPE = ULONG 0x00F
-              @@ DESCRIPTION = "M3OverVoltVbatTh_MSB4"
-              @@ GROUP = BswFpgaIf
-              @@ END
-              */
-
-\t  uint32 M3OverVoltVbatTh_MSB4:4;
-\t    /*
-              @@ ELEMENT = M2OverCurThBat_LSB4
-              @@ STRUCTURE = BswFpgaIf_IpduTxAId2SignalType
-              @@ A2L_TYPE = MEASURE
-              @@ DATA_TYPE = ULONG 0x00F0
-              @@ DESCRIPTION = "M2OverCurThBat_LSB4"
-              @@ GROUP = BswFpgaIf
-              @@ END
-              */
-
-\t  uint32 M2OverCurThBat_LSB4:4;
-\t    /*
-              @@ ELEMENT = M2OverCurThBat_MSB8
-              @@ STRUCTURE = BswFpgaIf_IpduTxAId2SignalType
-              @@ A2L_TYPE = MEASURE
-              @@ DATA_TYPE = ULONG 0x00FF
-              @@ DESCRIPTION = "HVDC overvoltage"
-              @@ GROUP = BswFpgaIf
-              @@ END
-              */
-
-\t  uint32 M2OverCurThBat_MSB8:8;
-\t    /*
-              @@ ELEMENT = M1Id2Spare_LSB8
-              @@ STRUCTURE = BswFpgaIf_IpduTxAId2SignalType
-              @@ A2L_TYPE = MEASURE
-              @@ DATA_TYPE = ULONG 0xFF
-              @@ DESCRIPTION = "M1Id2Spare_LSB8"
-              @@ GROUP = BswFpgaIf
-              @@ END
-              */
-\t  uint32 M1Id2Spare_LSB8:8;
-  /*
-              @@ ELEMENT = M6Id2Spare_MSB8
-              @@ STRUCTURE = BswFpgaIf_IpduTxAId2SignalType
-              @@ A2L_TYPE = MEASURE
-              @@ DATA_TYPE = ULONG 0x00FF
-              @@ DESCRIPTION = "M6Id2Spare_MSB8"
-              @@ GROUP = BswFpgaIf
-              @@ END
-              */
-\t  uint32 M6Id2Spare_MSB8:8;
-\t    /*
-              @@ ELEMENT = M5Id2Spare_LSB8
-              @@ STRUCTURE = BswFpgaIf_IpduTxAId2SignalType
-              @@ A2L_TYPE = MEASURE
-              @@ DATA_TYPE = ULONG 0x00FF
-              @@ DESCRIPTION = "HVDC overvoltage"
-              @@ GROUP = BswFpgaIf
-              @@ END
-              */
-
-\t  uint32 M5Id2Spare_LSB8:8;
-\t    /*
-              @@ ELEMENT = M5Id2Spare_MSB4
-              @@ STRUCTURE = BswFpgaIf_IpduTxAId2SignalType
-              @@ A2L_TYPE = MEASURE
-              @@ DATA_TYPE = ULONG 0x000F
-              @@ DESCRIPTION = "HVDC overvoltage"
-              @@ GROUP = BswFpgaIf
-              @@ END
-              */
-\t  uint32 M5Id2Spare_MSB4:4;
-\t  /*
-              @@ ELEMENT = M4Id2Spare_LSB4
-              @@ STRUCTURE = BswFpgaIf_IpduTxAId2SignalType
-              @@ A2L_TYPE = MEASURE
-              @@ DATA_TYPE = ULONG 0x00F0
-              @@ DESCRIPTION = "M4Id2Spare_LSB4"
-              @@ GROUP = BswFpgaIf
-              @@ END
-              */
-     uint32 M4Id2Spare_LSB4:4;
-\t   /*
-              @@ ELEMENT = M4Id2Spare_MSB8
-              @@ STRUCTURE = BswFpgaIf_IpduTxAId2SignalType
-              @@ A2L_TYPE = MEASURE
-              @@ DATA_TYPE = ULONG 0xFF
-              @@ DESCRIPTION = "M4Id2Spare_MSB8"
-              @@ GROUP = BswFpgaIf
-              @@ END
-              */
-     uint32 M4Id2Spare_MSB8:8;
-  /*
-              @@ ELEMENT = Ctrl
-              @@ STRUCTURE = BswFpgaIf_IpduTxAId2SignalType
-              @@ A2L_TYPE = MEASURE
-              @@ DATA_TYPE = UWORD
-              @@ DESCRIPTION = "Ctrl"
-              @@ GROUP = BswFpgaIf
-              @@ END
-              */
-     uint16 Ctrl;
-\t   /*
-              @@ ELEMENT = Debug_LSB8
-              @@ STRUCTURE = BswFpgaIf_IpduTxAId2SignalType
-              @@ A2L_TYPE = MEASURE
-              @@ DATA_TYPE = UWORD 0x00FF
-              @@ DESCRIPTION = "Debug_LSB8"
-              @@ GROUP = BswFpgaIf
-              @@ END
-              */
-     uint16 Debug_LSB8:8;
-\t   /*
-              @@ ELEMENT = Debug_MSB4
-              @@ STRUCTURE = BswFpgaIf_IpduTxAId2SignalType
-              @@ A2L_TYPE = MEASURE
-              @@ DATA_TYPE = UWORD 0x0F00
-              @@ DESCRIPTION = "HVDC overvoltage"
-              @@ GROUP = BswFpgaIf
-              @@ END
-              */
-     uint16 Debug_MSB4:4;
-\t /*
-              @@ ELEMENT = M6Id2Spare_LSB4
-              @@ STRUCTURE = BswFpgaIf_IpduTxAId2SignalType
-              @@ A2L_TYPE = MEASURE
-              @@ DATA_TYPE = UWORD 0xF000
-              @@ DESCRIPTION = "M6Id2Spare_LSB4"
-              @@ GROUP = BswFpgaIf
-              @@ END
-              */
-     uint16 M6Id2Spare_LSB4:4;
-
-   }BswFpgaIf_IpduTxAId2SignalType;
-   
-typedef union
-{
-\t/*
-        @@ ELEMENT = Data32
-        @@ STRUCTURE = BswFpgaIf_IpduTxAId2Type
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = ULONG
-        @@ DIMENSION = 5
-        @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-        @@ GROUP = BswFpgaIf
-        @@ END
-        */
-   uint32 Data32[5];
-   /*
-        @@ ELEMENT = Data16
-        @@ STRUCTURE = BswFpgaIf_IpduTxAId2Type
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UWORD
-        @@ DIMENSION = 10
-        @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-        @@ GROUP = BswFpgaIf
-        @@ END
-        */
-   uint16 Data16[10];
-   /*
-        @@ ELEMENT = Data8
-        @@ STRUCTURE = BswFpgaIf_IpduTxAId2Type
-        @@ A2L_TYPE = MEASURE
-        @@ DATA_TYPE = UBYTE
-        @@ DIMENSION = 20
-        @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-        @@ GROUP = BswFpgaIf
-        @@ END
-        */
-   uint8  Data8[20];
-   /*
-   @@ SUB_STRUCTURE = Signal
-   @@ STRUCTURE = BswFpgaIf_IpduTxAId2Type
-   @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduTxAId2SignalType
-   @@ END
-   */
-  BswFpgaIf_IpduTxAId2SignalType Signal;
-
-}BswFpgaIf_IpduTxAId2Type;
-
-/*------------------------------------*/
-/* BswFpgaIf IPDU TxA ID 3 structure        */
-/*------------------------------------*/
-typedef struct
-   {
-\t      /*
-       @@ SUB_STRUCTURE = FaultA
-       @@ STRUCTURE = BswFpgaIf_IpduTxAId3SignalType
-       @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultAType
-       @@ END
-   */
-
-\t  BswFpgaIf_IpduSignalFaultAType FaultA;
-\t    /*
-      @@ SUB_STRUCTURE = StateReq
-      @@ STRUCTURE = BswFpgaIf_IpduTxAId3SignalType
-      @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalStateReqType
-      @@ END
-  */
-\t  BswFpgaIf_IpduSignalStateReqType StateReq;
-\t  /*
-    @@ ELEMENT = Id
-    @@ STRUCTURE = BswFpgaIf_IpduTxAId3SignalType
-    @@ A2L_TYPE = MEASURE
-    @@ DATA_TYPE = UBYTE
-    @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-    @@ GROUP = BswFpgaIf
-    @@ END
-    */
-\t  uint8 Id;
-/*
-    @@ ELEMENT = M1DebugH_MSB4
-    @@ STRUCTURE = BswFpgaIf_IpduTxAId3SignalType
-    @@ A2L_TYPE = MEASURE
-    @@ DATA_TYPE = UWORD 0x000F
-    @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-    @@ GROUP = BswFpgaIf
-    @@ END
-    */
-\t  uint16 M1DebugH_MSB4:4;
-\t  /*
-    @@ ELEMENT = M0DebugL_LSB4
-    @@ STRUCTURE = BswFpgaIf_IpduTxAId3SignalType
-    @@ A2L_TYPE = MEASURE
-    @@ DATA_TYPE = UWORD 0x00F0
-    @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-    @@ GROUP = BswFpgaIf
-    @@ END
-    */
-\t  uint16 M0DebugL_LSB4:4;
-\t    /*
-      @@ ELEMENT = M0DebugL_MSB8
-      @@ STRUCTURE = BswFpgaIf_IpduTxAId3SignalType
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = UWORD 0xFF
-      @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-
-\t  uint16 M0DebugL_MSB8:8;
-\t    /*
-         @@ SUB_STRUCTURE = FaultB
-         @@ STRUCTURE = BswFpgaIf_IpduTxAId3SignalType
-         @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduSignalFaultBType
-         @@ END
-     */
-\t  BswFpgaIf_IpduSignalFaultBType FaultB;
-
-/*
-      @@ ELEMENT = M3ActiveDisDur_LSB8
-      @@ STRUCTURE = BswFpgaIf_IpduTxAId3SignalType
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = ULONG 0x00FF
-      @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-\t  uint32 M3ActiveDisDur_LSB8:8;
-\t  /*
-      @@ ELEMENT = M3ActiveDisDur_MSB4
-      @@ STRUCTURE = BswFpgaIf_IpduTxAId3SignalType
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = ULONG 0x00F
-      @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-\t  uint32 M3ActiveDisDur_MSB4:4;
-\t  /*
-      @@ ELEMENT = M2OverCurThMot_LSB4
-      @@ STRUCTURE = BswFpgaIf_IpduTxAId3SignalType
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = ULONG 0x00F0
-      @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-\t  uint32 M2OverCurThMot_LSB4:4;
-\t  /*
-      @@ ELEMENT = M2OverCurThMot_MSB8
-      @@ STRUCTURE = BswFpgaIf_IpduTxAId3SignalType
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = ULONG 0x00FF
-      @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-\t  uint32 M2OverCurThMot_MSB8:8;
-\t  /*
-      @@ ELEMENT = M1DebugH_LSB8
-      @@ STRUCTURE = BswFpgaIf_IpduTxAId3SignalType
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = ULONG 0xFF
-      @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-\t  uint32 M1DebugH_LSB8:8;
-
-/*
-      @@ ELEMENT = M6Id3Spare_MSB8
-      @@ STRUCTURE = BswFpgaIf_IpduTxAId3SignalType
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = ULONG 0x0FF
-      @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-\t  uint32 M6Id3Spare_MSB8:8;
-\t  /*
-      @@ ELEMENT = M5Id3Spare_LSB8
-      @@ STRUCTURE = BswFpgaIf_IpduTxAId3SignalType
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = ULONG 0x00FF
-      @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-\t  uint32 M5Id3Spare_LSB8:8;
-\t  /*
-      @@ ELEMENT = M5Id3Spare_MSB4
-      @@ STRUCTURE = BswFpgaIf_IpduTxAId3SignalType
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = ULONG 0x000F
-      @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-\t  uint32 M5Id3Spare_MSB4:4;
-\t  /*
-      @@ ELEMENT = M4SynchroDelay_LSB4
-      @@ STRUCTURE = BswFpgaIf_IpduTxAId3SignalType
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = ULONG 0x00F0
-      @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-\t  uint32 M4SynchroDelay_LSB4:4;
-\t    /*
-      @@ ELEMENT = M4SynchroDelay_MSB8
-      @@ STRUCTURE = BswFpgaIf_IpduTxAId3SignalType
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = ULONG 0xFF
-      @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-
-\t  uint32 M4SynchroDelay_MSB8:8;
-
-  /*
-      @@ ELEMENT = Ctrl
-      @@ STRUCTURE = BswFpgaIf_IpduTxAId3SignalType
-      @@ A2L_TYPE = MEASURE
-      @@ DATA_TYPE = UWORD
-      @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-      @@ GROUP = BswFpgaIf
-      @@ END
-      */
-      uint16 Ctrl;
-\t     /*
-       @@ ELEMENT = Debug_LSB8
-       @@ STRUCTURE = BswFpgaIf_IpduTxAId3SignalType
-       @@ A2L_TYPE = MEASURE
-       @@ DATA_TYPE = UWORD 0x00FF
-       @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-       @@ GROUP = BswFpgaIf
-       @@ END
-       */
-      uint16 Debug_LSB8:8;
-\t     /*
-       @@ ELEMENT = Debug_MSB4
-       @@ STRUCTURE = BswFpgaIf_IpduTxAId3SignalType
-       @@ A2L_TYPE = MEASURE
-       @@ DATA_TYPE = UWORD 0x0F00
-       @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-       @@ GROUP = BswFpgaIf
-       @@ END
-       */
-
-      uint16 Debug_MSB4:4;
-\t     /*
-       @@ ELEMENT = M6Id3Spare_LSB4
-       @@ STRUCTURE = BswFpgaIf_IpduTxAId3SignalType
-       @@ A2L_TYPE = MEASURE
-       @@ DATA_TYPE = UWORD 0xF000
-       @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-       @@ GROUP = BswFpgaIf
-       @@ END
-       */
-      uint16 M6Id3Spare_LSB4:4;
-
-   }BswFpgaIf_IpduTxAId3SignalType;
-   
-typedef union
-{
-\t/*
-     @@ ELEMENT = Data32
-     @@ STRUCTURE = BswFpgaIf_IpduTxAId3Type
-     @@ A2L_TYPE = MEASURE
-     @@ DATA_TYPE = ULONG
-     @@ DIMENSION = 5
-     @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-     @@ GROUP = BswFpgaIf
-     @@ END
-     */
-   uint32 Data32[5];
-   /*
-     @@ ELEMENT = Data16
-     @@ STRUCTURE = BswFpgaIf_IpduTxAId3Type
-     @@ A2L_TYPE = MEASURE
-     @@ DATA_TYPE = UWORD
-     @@ DIMENSION = 10
-     @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-     @@ GROUP = BswFpgaIf
-     @@ END
-     */
-   uint16 Data16[10];
-   /*
-     @@ ELEMENT = Data8
-     @@ STRUCTURE = BswFpgaIf_IpduTxAId3Type
-     @@ A2L_TYPE = MEASURE
-     @@ DATA_TYPE = UBYTE
-     @@ DIMENSION = 20
-     @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-     @@ GROUP = BswFpgaIf
-     @@ END
-     */
-   uint8  Data8[20];
-   /*
-    @@ SUB_STRUCTURE = Signal
-    @@ STRUCTURE = BswFpgaIf_IpduTxAId3Type
-    @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduTxAId3SignalType
-    @@ END
-   */
-   BswFpgaIf_IpduTxAId3SignalType Signal;
-
-}BswFpgaIf_IpduTxAId3Type;
-
-/*----------------------------------------------------------------------------*/
-/* BswFpgaIf IPDU Tx structure                                               */
-/*----------------------------------------------------------------------------*/
-typedef struct
-{
-\t/*
-          @@ SUB_STRUCTURE = Mx0
-          @@ STRUCTURE = BswFpgaIf_IpduTxAIdType
-          @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduTxAId0Type
-          @@ END
-         */
-    BswFpgaIf_IpduTxAId0Type Mx0;
-\t   /*
-             @@ SUB_STRUCTURE = Mx1
-             @@ STRUCTURE = BswFpgaIf_IpduTxAIdType
-             @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduTxAId1Type
-             @@ END
-            */
-    BswFpgaIf_IpduTxAId1Type Mx1;
-\t/*
-             @@ SUB_STRUCTURE = Mx2
-             @@ STRUCTURE = BswFpgaIf_IpduTxAIdType
-             @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduTxAId2Type
-             @@ END
-            */
-    BswFpgaIf_IpduTxAId2Type Mx2;
-\t/*
-             @@ SUB_STRUCTURE = Mx3
-             @@ STRUCTURE = BswFpgaIf_IpduTxAIdType
-             @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduTxAId3Type
-             @@ END
-            */
-    BswFpgaIf_IpduTxAId3Type Mx3;
-\t
-}BswFpgaIf_IpduTxAIdType;
-
-typedef union
-{
-\t/*
-          @@ SUB_STRUCTURE = IdMx
-          @@ STRUCTURE = BswFpgaIf_IpduTxADataType
-          @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduTxAType
-          @@ END
-   */
-   BswFpgaIf_IpduTxAType IdMx[4];
-   /*
-          @@ SUB_STRUCTURE = Id
-          @@ STRUCTURE = BswFpgaIf_IpduTxADataType
-          @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduTxAIdType
-          @@ END
-   */
-   BswFpgaIf_IpduTxAIdType Id;
-
-   
-}BswFpgaIf_IpduTxADataType;
-
-typedef struct
-{
-  /*
-    @@ SUB_STRUCTURE = TxS
-    @@ STRUCTURE = BswFpgaIf_IpduTxSTxADataType
-    @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduTxSType
-    @@ END
- */
-  BswFpgaIf_IpduTxSType TxS;
-  
-  /*
-    @@ SUB_STRUCTURE = TxA
-    @@ STRUCTURE = BswFpgaIf_IpduTxSTxADataType
-    @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduTxADataType
-    @@ END
-  */
-  BswFpgaIf_IpduTxADataType TxA;
-  
-}BswFpgaIf_IpduTxSTxADataType;
-   
-typedef union
-{
-\t   /*
-     @@ ELEMENT = Data32
-     @@ STRUCTURE = BswFpgaIf_IpduTxType
-     @@ A2L_TYPE = MEASURE
-     @@ DATA_TYPE = UBYTE
-     @@ DIMENSION = 23
-     @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-     @@ GROUP = BswFpgaIf
-     @@ END
-     */
-   uint32 Data32[23]; /* (TxS = 3) + (TxA[4] = 5 * 4) */
-      /*
-     @@ ELEMENT = Data16
-     @@ STRUCTURE = BswFpgaIf_IpduTxType
-     @@ A2L_TYPE = MEASURE
-     @@ DATA_TYPE = UBYTE
-     @@ DIMENSION = 46
-     @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-     @@ GROUP = BswFpgaIf
-     @@ END
-     */
-   uint16 Data16[46];
-      /*
-     @@ ELEMENT = Data8
-     @@ STRUCTURE = BswFpgaIf_IpduTxType
-     @@ A2L_TYPE = MEASURE
-     @@ DATA_TYPE = UBYTE
-     @@ DIMENSION = 92
-     @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-     @@ GROUP = BswFpgaIf
-     @@ END
-     */
-   uint8  Data8[92];
-   
-      /*
-       @@ SUB_STRUCTURE = Data
-       @@ STRUCTURE = BswFpgaIf_IpduTxType
-       @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduTxSTxADataType
-       @@ END
-      */
-   BswFpgaIf_IpduTxSTxADataType Data;
-
-}BswFpgaIf_IpduTxType;
-
-/*----------------------------------------------------------------------------*/
-/* BswFpgaIf IPDU Rx structure                                               */
-/*----------------------------------------------------------------------------*/
-typedef struct
-{
-   /*
-            @@ SUB_STRUCTURE = Mx0
-            @@ STRUCTURE = BswFpgaIfRxAIdType
-            @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduRxAId0Type
-            @@ END
-      */
-   BswFpgaIf_IpduRxAId0Type Mx0;
-   /*
-            @@ SUB_STRUCTURE = Mx1
-            @@ STRUCTURE = BswFpgaIfRxAIdType
-            @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduRxAId1Type
-            @@ END
-      */
-   BswFpgaIf_IpduRxAId1Type Mx1;
-   /*
-            @@ SUB_STRUCTURE = Mx2
-            @@ STRUCTURE = BswFpgaIfRxAIdType
-            @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduRxAId2Type
-            @@ END
-      */
-   BswFpgaIf_IpduRxAId2Type Mx2;
-   /*
-            @@ SUB_STRUCTURE = Mx3
-            @@ STRUCTURE = BswFpgaIfRxAIdType
-            @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduRxAId3Type
-            @@ END
-      */
-   BswFpgaIf_IpduRxAId3Type Mx3;
-   /*
-            @@ SUB_STRUCTURE = MxA
-            @@ STRUCTURE = BswFpgaIfRxAIdType
-            @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduRxAType
-            @@ END
-      */
-   BswFpgaIf_IpduRxAType    MxA;
-
-}BswFpgaIfRxAIdType;
-
-typedef union
-{
-   /*
-         @@ SUB_STRUCTURE =IdMx
-         @@ STRUCTURE = BswFpgaIf_RxAType
-         @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduRxAType
-         @@ END
-   */
- BswFpgaIf_IpduRxAType IdMx[5];
-
- /*
-       @@ SUB_STRUCTURE = Id
-       @@ STRUCTURE = BswFpgaIf_RxAType
-       @@ DATA_TYPE = STRUCTURE BswFpgaIfRxAIdType
-       @@ END
- */
-  BswFpgaIfRxAIdType Id;
-
-}BswFpgaIf_RxAType;
-
-typedef struct
-{
-   /*
-         @@ SUB_STRUCTURE = RxA
-         @@ STRUCTURE = BswFpgaIf_IpduRxARxSType
-         @@ DATA_TYPE = STRUCTURE BswFpgaIf_RxAType
-         @@ END
-    */
-   BswFpgaIf_RxAType RxA;
-
-   /*
-         @@ SUB_STRUCTURE = RxS
-         @@ STRUCTURE = BswFpgaIf_IpduRxARxSType
-         @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduRxSType
-         @@ END
-   */
-
-   BswFpgaIf_IpduRxSType RxS;
-
-}BswFpgaIf_IpduRxARxSType;
-   
-typedef union
-{
-\t   /*
-     @@ ELEMENT = Data32
-     @@ STRUCTURE = BswFpgaIf_IpduRxType
-     @@ A2L_TYPE = MEASURE
-     @@ DATA_TYPE = ULONG
-     @@ DIMENSION = 24
-     @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-     @@ GROUP = BswFpgaIf
-     @@ END
-     */
-   uint32 Data32[24]; 
-      /*
-     @@ ELEMENT = Data16
-     @@ STRUCTURE = BswFpgaIf_IpduRxType
-     @@ A2L_TYPE = MEASURE
-     @@ DATA_TYPE = UWORD
-     @@ DIMENSION = 48
-     @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-     @@ GROUP = BswFpgaIf
-     @@ END
-     */
-
-   uint16 Data16[48];
-      /*
-     @@ ELEMENT = Data8
-     @@ STRUCTURE = BswFpgaIf_IpduRxType
-     @@ A2L_TYPE = MEASURE
-     @@ DATA_TYPE = UBYTE
-     @@ DIMENSION = 96
-     @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
-     @@ GROUP = BswFpgaIf
-     @@ END
-     */
-
-   uint8  Data8[96];
-
-   /*
-      @@ SUB_STRUCTURE = Data
-      @@ STRUCTURE = BswFpgaIf_IpduRxType
-      @@ DATA_TYPE = STRUCTURE BswFpgaIf_IpduRxARxSType
-      @@ END
-      */
-   
-   BswFpgaIf_IpduRxARxSType Data;
-   
-}BswFpgaIf_IpduRxType;
-
-#endif /* BswFpgaIf_TYPE_H*/
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/include/VsiSrv.h b/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/include/VsiSrv.h
new file mode 100644
index 000000000..d4fa3d7cb
--- /dev/null
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/include/VsiSrv.h
@@ -0,0 +1,87 @@
+/***************************** <AUTO_FILE_HEADER> *****************************/
+/*                                                                            */
+/* !Layer           : APPLI                                                   */
+/*                                                                            */
+/* !Component       : VSISRV                                                  */
+/* !Description     :                                                         */
+/*                                                                            */
+/* !Module          : VSISRV                                                  */
+/* !Description     : API of the Component                                    */
+/*                                                                            */
+/* !File            : VSISRV.H                                                */
+/*                                                                            */
+/* !Scope           : Public                                                  */
+/*                                                                            */
+/* !Target          : All                                                     */
+/*                                                                            */
+/* !Vendor          : Valeo                                                   */
+/*                                                                            */
+/* Coding language  : C                                                       */
+/*                                                                            */
+/* COPYRIGHT 2008 VALEO                                                       */
+/* all rights reserved                                                        */
+/*                                                                            */
+/**************************** </AUTO_FILE_HEADER> *****************************/
+/* PVCS Information                                                           */
+/* $Archive::                                                                $*/
+/* $Revision::                                                               $*/
+/* $Author::                                          $$Date::               $*/
+/******************************************************************************/
+/* !VnrOff  : Names imposed by the customer                                   */
+/* !CompReq :                                                                 */
+/******************************************************************************/
+
+#ifndef VSISRV_H
+#define VSISRV_H
+
+#include "Std_Types.h"
+#include "VsiSrv_typ.h"
+#include "VsiSrv_i.h"
+
+#include "Std_Types.h"
+#include "C2cComSftyData.h"
+#include "AddEnumTypes.h"
+#include "PwmSpMux_WrprData.h"
+
+#include "HvAcIMeas_data.h"
+#include "HvDcUMeas_WrprData.h"
+/* Core 2 core communication */
+#include "C2cComBswData.h"
+#include "BswFpgaIf.h"
+
+/******************************************************************************/
+/* TYPES                                                                      */
+/******************************************************************************/
+
+/******************************************************************************/
+/* CALIBRATIONS DECLARATION                                                   */
+/******************************************************************************/
+
+/******************************************************************************/
+/* DATA DECLARATION                                                           */
+/******************************************************************************/
+#define ISWIF_START_SEC_VAR_FAST_CLEARED
+#include "MemMap.h"
+extern VAR(uint32, VSISRV_VAR) VSISRV_u32CheckModeReqResCnt;
+extern VAR(uint32, VSISRV_VAR) VSISRV_u32CounterChkNokModeReqRes;
+extern VAR(uint32, VSISRV_VAR) VSISRV_u32CounterChkNokParamDl;
+extern volatile uint8 txMuxIdCnt;
+extern volatile VsisrvFrameRxType VsisrvFrameRx;
+extern volatile VsisrvFrameTxType VsisrvFrameTx;
+extern volatile VsisrvFrameRxType FpgaFrameRx;
+extern volatile VsisrvFrameTxType FpgaFrameTx;
+#define ISWIF_STOP_SEC_VAR_FAST_CLEARED
+#include "MemMap.h"
+
+
+/******************************************************************************/
+/* FUNCTION DECLARATION                                                       */
+/******************************************************************************/
+
+extern void VSISRV_vidSetFrameTx(void);
+extern void VSISRV_vidGetFrameRx(void);
+extern void VSISRV_vidInit(void);
+
+#endif /* VSISRV_H */
+
+/*-------------------------------- end of file -------------------------------*/
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/include/VsiSrv_Chk.h b/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/include/VsiSrv_Chk.h
new file mode 100644
index 000000000..fe4fbd3d2
--- /dev/null
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/include/VsiSrv_Chk.h
@@ -0,0 +1,758 @@
+/******************************************************************************/
+/*                                                                            */
+/* !Layer           : BSW                                                     */
+/*                                                                            */
+/* !Component       : VSI                                                     */
+/* !Description     : VSI control                                             */
+/*                                                                            */
+/* !Module          : VSISRV                                                  */
+/* !Description     : API\'s services                                          */
+/*                                                                            */
+/* !File            : VSISRV_CHK.H                                            */
+/*                                                                            */
+/* !Scope           : Public                                                  */
+/*                                                                            */
+/* !Target          : All                                                     */
+/*                                                                            */
+/* !Vendor          : Valeo                                                   */
+/*                                                                            */
+/* Coding language  : C                                                       */
+/*                                                                            */
+/* COPYRIGHT 2011 VALEO                                                       */
+/* all rights reserved                                                        */
+/*                                                                            */
+/******************************************************************************/
+/* PVCS Information                                                           */
+/* $Archive::   P:/VE_Onduleur_Gen2_Sofraci/LOG/60_ComponentArchive/Archives/COMP_SWC_BSWSH72/vsisrv_chk.h_v  $ */
+/* $Revision::   1.3       $$Author::   ogarot        $$Date::   28 Nov 2011 $*/
+/******************************************************************************/
+/* VSISRV.CHK.1  / VSISRV_vidCalcCRCData11B                                   */
+/* VSISRV.CHK.1  / VSISRV_vidCalcCRCData10B                                   */
+/* VSISRV.CHK.2  / VSISRV_vidCalcCRCData14B                                   */
+/* VSISRV.CHK.3  / VSISRV_vidCalcCRCData18B                                   */
+/* VSISRV.CHK.4  / VSISRV_vidCalcXORCplData11B                                */
+/* VSISRV.CHK.4  / VSISRV_vidCalcXORCplData10B                                */
+/* VSISRV.CHK.5  / VSISRV_vidCalcXORCplData14B                                */
+/* VSISRV.CHK.6  / VSISRV_vidCalcXORCplData18B                                */
+/* VSISRV.CHK.11 / VSISRV_vidVerifyDataCheck14B                               */
+/* VSISRV.CHK.21 / VSISRV_vidWriteDataCheck11B                                */
+/* VSISRV.CHK.21 / VSISRV_vidWriteDataCheck10B                                */
+/* VSISRV.CHK.22 / VSISRV_vidWriteDataCheck14B                                */
+/* VSISRV.CHK.23 / VSISRV_vidWriteDataCheck18B                                */
+/******************************************************************************/
+
+#ifndef VSISRV_CHK_H
+#define VSISRV_CHK_H
+
+#include "Std_Types.h"
+#include "vsisrv_e.h"
+
+/******************************************************************************/
+/* LOCAL FUNCTION DEFINITION                                                  */
+/******************************************************************************/
+
+/*----------------------------------------------------------------------------*/
+/* Check Endianness                                                           */
+/*----------------------------------------------------------------------------*/
+#define _VSISRV_CHK_MOTOROLA  0
+#define _VSISRV_CHK_INTEL     1
+
+#define _VSISRV_CHK_ENDIANNESS _VSISRV_CHK_INTEL
+
+#define VSISRV_u16SwapMsbLsb(val)                                             \\
+   (uint16)((uint16)(val >> 8) | (uint16)(val << 8))
+
+/*----------------------------------------------------------------------------*/
+/* Check calculation CRC                                                      */
+/*----------------------------------------------------------------------------*/
+
+/******************************************************************************/
+/*                                                                            */
+/* !Function    : VSISRV_vidCalcCRCData11B                                    */
+/* !Description : Check calculation, TxS, 10 bytes data                       */
+/*              : CRC 16 bits, Polynomial 0x4825                              */
+/* !Number      : VSISRV.CHK.1                                                */
+/* !Reference   : V01NT1001945.002                                            */
+/*                                                                            */
+/******************************************************************************/
+/* !LastAuthor  : O. Garot                                                    */
+/******************************************************************************/
+/*----------------------------------------------------------------------------*/
+/* Tests function VSISRV_vidCalcCRCData11B:                                   */
+/*----------------------------------------------------------------------------*/
+/* Test1 : u8DataTab             = 0x31 32 33 34 35 36 37 38 39 3A 3B         */
+/*       : Data len              = 11                                         */
+/*       : Chk CRC polynom       = 0x2F                                       */
+/*       : Chk init              = 0xFF                                       */
+/*       : Chk xor final value   = 0x00                                       */
+/*       = u8DataChk             = 0xA6                                       */
+/*----------------------------------------------------------------------------*/
+LOCAL_INLINE void VSISRV_vidCalcCRCData11B(
+   volatile uint8 *u8DataTab,
+   volatile uint8 *u8DataChk
+);
+LOCAL_INLINE void VSISRV_vidCalcCRCData11B(
+   volatile uint8 *u8DataTab,    /* !Comment : Data table                     */
+                                 /* !Type    : *uint8                         */
+                                 /* !Range   : 0 - 0xFF                       */
+                                 /*                                           */
+   volatile uint8 *u8DataChk     /* !Comment : CRC8 calculated                */
+                                 /* !Type    : uint8*                         */
+                                 /* !Range   : 0 - 0xFF                       */
+                                 /*                                           */
+)
+{
+   uint8 u8LocalChk;
+
+   u8LocalChk = 0xFF;
+
+   u8LocalChk = VSISRV_u8Crc8LkpTab2F[u8LocalChk ^ u8DataTab[3]];
+   u8LocalChk = VSISRV_u8Crc8LkpTab2F[u8LocalChk ^ u8DataTab[2]];
+   u8LocalChk = VSISRV_u8Crc8LkpTab2F[u8LocalChk ^ u8DataTab[1]];
+   u8LocalChk = VSISRV_u8Crc8LkpTab2F[u8LocalChk ^ u8DataTab[0]];
+   u8LocalChk = VSISRV_u8Crc8LkpTab2F[u8LocalChk ^ u8DataTab[7]];
+   u8LocalChk = VSISRV_u8Crc8LkpTab2F[u8LocalChk ^ u8DataTab[6]];
+   u8LocalChk = VSISRV_u8Crc8LkpTab2F[u8LocalChk ^ u8DataTab[5]];
+   u8LocalChk = VSISRV_u8Crc8LkpTab2F[u8LocalChk ^ u8DataTab[4]];
+   u8LocalChk = VSISRV_u8Crc8LkpTab2F[u8LocalChk ^ u8DataTab[11]];
+   u8LocalChk = VSISRV_u8Crc8LkpTab2F[u8LocalChk ^ u8DataTab[10]];
+   u8LocalChk = VSISRV_u8Crc8LkpTab2F[u8LocalChk ^ u8DataTab[9]];
+
+   *u8DataChk = u8LocalChk;
+}
+
+/*----------------------------------------------------------------------------*/
+/* Tests function VSISRV_vidCalcCRCData10B:                                   */
+/*----------------------------------------------------------------------------*/
+/* Test1 : u8DataTab             = 0x31 32 33 34 35 36 37 38 39 3A            */
+/*       : Data len              = 10                                         */
+/*       : Chk CRC polynom       = 0x4825                                     */
+/*       : Chk init              = 0xFFFF                                     */
+/*       : Chk xor final value   = 0x0000                                     */
+/*       = u16DataChk            = 0xAD3A                                     */
+/*----------------------------------------------------------------------------*/
+LOCAL_INLINE void VSISRV_vidCalcCRCData10B(
+   volatile uint8 *u8DataTab,
+   volatile uint16 *u16DataChk
+);
+LOCAL_INLINE void VSISRV_vidCalcCRCData10B(
+   volatile uint8 *u8DataTab,    /* !Comment : Data table                     */
+                                 /* !Type    : *uint8                         */
+                                 /* !Range   : 0 - 0xFF                       */
+                                 /*                                           */
+   volatile uint16 *u16DataChk   /* !Comment : CRC16 calculated               */
+                                 /* !Type    : uint16*                        */
+                                 /* !Range   : 0 - 0xFFFF                     */
+                                 /*                                           */
+)
+{
+   uint16 u16LocalChk;
+
+   u16LocalChk = 0xFFFF;
+
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab4825[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[0])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab4825[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[1])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab4825[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[2])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab4825[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[3])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab4825[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[4])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab4825[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[5])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab4825[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[6])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab4825[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[7])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab4825[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[8])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab4825[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[9])]);
+
+#if (_VSISRV_CHK_ENDIANNESS == _VSISRV_CHK_INTEL)
+   *u16DataChk = u16LocalChk;
+#elif (_VSISRV_CHK_ENDIANNESS == _VSISRV_CHK_MOTOROLA)
+   *u16DataChk = VSISRV_u16SwapMsbLsb(u16LocalChk);
+#endif
+}
+
+/******************************************************************************/
+/*                                                                            */
+/* !Function    : VSISRV_vidCalcCRCData14B                                    */
+/* !Description : Check calculation, RxA, RxS, 14 bytes data                  */
+/*              : CRC 16 bits, Polynomial 0x5643                              */
+/* !Number      : VSISRV.CHK.2                                                */
+/* !Reference   : V01NT1001945.002                                            */
+/*                                                                            */
+/******************************************************************************/
+/* !LastAuthor  : O. Garot                                                    */
+/******************************************************************************/
+/*----------------------------------------------------------------------------*/
+/* Tests function VSISRV_vidCalcCRCData14B:                                   */
+/*----------------------------------------------------------------------------*/
+/* Test1 : u8DataTab             = 0x31 32 33 34 35 36 37 38 39 3A 3B 3C 3D   */
+/*       :                       =   3E                                       */
+/*       : Data len              = 14                                         */
+/*       : Chk CRC polynom       = 0x5643                                     */
+/*       : Chk init              = 0xFFFF                                     */
+/*       : Chk xor final value   = 0x0000                                     */
+/*       = u16DataChk            = 0xE8DE                                     */
+/*----------------------------------------------------------------------------*/
+LOCAL_INLINE void VSISRV_vidCalcCRCData14B(
+   volatile uint8 *u8DataTab,
+   volatile uint16 *u16DataChk
+);
+LOCAL_INLINE void VSISRV_vidCalcCRCData14B(
+   volatile uint8 *u8DataTab,    /* !Comment : Data table                     */
+                                 /* !Type    : *uint8                         */
+                                 /* !Range   : 0 - 0xFF                       */
+                                 /*                                           */
+   volatile uint16 *u16DataChk   /* !Comment : CRC16 calculated               */
+                                 /* !Type    : uint16*                        */
+                                 /* !Range   : 0 - 0xFFFF                     */
+                                 /*                                           */
+)
+{
+   uint16 u16LocalChk;
+
+   u16LocalChk = 0xFFFF;
+
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab5643[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[3])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab5643[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[2])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab5643[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[1])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab5643[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[0])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab5643[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[7])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab5643[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[6])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab5643[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[5])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab5643[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[4])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab5643[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[11])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab5643[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[10])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab5643[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[9])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab5643[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[8])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab5643[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[15])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab5643[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[14])]);
+
+#if (_VSISRV_CHK_ENDIANNESS == _VSISRV_CHK_INTEL)
+   *u16DataChk = u16LocalChk;
+#elif (_VSISRV_CHK_ENDIANNESS == _VSISRV_CHK_MOTOROLA)
+   *u16DataChk = VSISRV_u16SwapMsbLsb(u16LocalChk);
+#endif
+}
+
+/******************************************************************************/
+/*                                                                            */
+/* !Function    : VSISRV_vidCalcCRCData18B                                    */
+/* !Description : Check calculation, TxA, 18 bytes data                       */
+/*              : CRC 16 bits, Polynomial 0x333F                              */
+/* !Number      : VSISRV.CHK.3                                                */
+/* !Reference   : V01NT1001945.002                                            */
+/*                                                                            */
+/******************************************************************************/
+/* !LastAuthor  : O. Garot                                                    */
+/******************************************************************************/
+/*----------------------------------------------------------------------------*/
+/* Tests function VSISRV_vidCalcCRCData18B:                                   */
+/*----------------------------------------------------------------------------*/
+/* Test1 : u8DataTab             = 0x31 32 33 34 35 36 37 38 39 3A 3B 3C 3D   */
+/*       :                       =   3E 3F 40 41 42                           */
+/*       : Data len              = 18                                         */
+/*       : Chk CRC polynom       = 0x333F                                     */
+/*       : Chk init              = 0xFFFF                                     */
+/*       : Chk xor final value   = 0x0000                                     */
+/*       = u16DataChk            = 0x58FD                                     */
+/*----------------------------------------------------------------------------*/
+LOCAL_INLINE void VSISRV_vidCalcCRCData18B(
+   volatile uint8 *u8DataTab,
+   volatile uint16 *u16DataChk
+);
+LOCAL_INLINE void VSISRV_vidCalcCRCData18B(
+   volatile uint8 *u8DataTab,    /* !Comment : Data table                     */
+                                 /* !Type    : *uint8                         */
+                                 /* !Range   : 0 - 0xFF                       */
+                                 /*                                           */
+   volatile uint16 *u16DataChk   /* !Comment : CRC16 calculated               */
+                                 /* !Type    : uint16*                        */
+                                 /* !Range   : 0 - 0xFFFF                     */
+                                 /*                                           */
+)
+{
+   uint16 u16LocalChk;
+
+   u16LocalChk = 0xFFFF;
+
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab333F[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[3])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab333F[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[2])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab333F[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[1])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab333F[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[0])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab333F[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[7])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab333F[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[6])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab333F[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[5])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab333F[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[4])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab333F[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[11])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab333F[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[10])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab333F[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[9])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab333F[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[8])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab333F[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[15])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab333F[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[14])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab333F[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[13])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab333F[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[12])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab333F[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[19])]);
+   u16LocalChk = (uint16)((u16LocalChk << 8) ^ VSISRV_u16Crc16LkpTab333F[(u16LocalChk >> 8) ^ (uint16)(u8DataTab[18])]);
+
+#if (_VSISRV_CHK_ENDIANNESS == _VSISRV_CHK_INTEL)
+   *u16DataChk = u16LocalChk;
+#elif (_VSISRV_CHK_ENDIANNESS == _VSISRV_CHK_MOTOROLA)
+   *u16DataChk = VSISRV_u16SwapMsbLsb(u16LocalChk);
+#endif
+}
+
+/*----------------------------------------------------------------------------*/
+/* Check calculation XOR CPL                                                  */
+/*----------------------------------------------------------------------------*/
+
+/******************************************************************************/
+/*                                                                            */
+/* !Function    : VSISRV_vidCalcXORCplData11B                                 */
+/* !Description : Check calculation, TxS, 11 bytes data                       */
+/*              : XOR 8 bits checksum                                         */
+/* !Number      : VSISRV.CHK.4                                                */
+/* !Reference   : V01NT1001945.002                                            */
+/*                                                                            */
+/******************************************************************************/
+/* !LastAuthor  : O. Garot                                                    */
+/******************************************************************************/
+/*----------------------------------------------------------------------------*/
+/* Tests function VSISRV_vidCalcXORCplData11B                                 */
+/*----------------------------------------------------------------------------*/
+/* Test1 : u8DataTab             = 0x31 32 33 34 35 36 37 38 39 3A 3B         */
+/*       : Data len              = 11                                         */
+/*       : Chk init              = 0x00                                       */
+/*       : Chk xor final value   = 0xFF                                       */
+/*       = u8DataChk             = 0xCF                                       */
+/*----------------------------------------------------------------------------*/
+LOCAL_INLINE void VSISRV_vidCalcXORCplData11B(
+   volatile uint8 *u8DataTab,
+   volatile uint8 *u8DataChk
+);
+LOCAL_INLINE void VSISRV_vidCalcXORCplData11B(
+   volatile uint8 *u8DataTab,    /* !Comment : Data table                     */
+                                 /* !Type    : *uint8                         */
+                                 /* !Range   : 0 - 0xFF                       */
+                                 /*                                           */
+   volatile uint8 *u8DataChk     /* !Comment : XOR8 calculated                */
+                                 /* !Type    : uint8*                         */
+                                 /* !Range   : 0 - 0xFF                       */
+                                 /*                                           */
+)
+{
+   uint8 u8LocalChk;
+
+   u8LocalChk = 0x00;
+
+   u8LocalChk ^= u8DataTab[0];
+   u8LocalChk ^= u8DataTab[1];
+   u8LocalChk ^= u8DataTab[2];
+   u8LocalChk ^= u8DataTab[3];
+   u8LocalChk ^= u8DataTab[4];
+   u8LocalChk ^= u8DataTab[5];
+   u8LocalChk ^= u8DataTab[6];
+   u8LocalChk ^= u8DataTab[7];
+   u8LocalChk ^= u8DataTab[8];
+   u8LocalChk ^= u8DataTab[9];
+   u8LocalChk ^= u8DataTab[10];
+
+   u8LocalChk ^= 0xFF;
+
+   *u8DataChk = u8LocalChk;
+}
+
+/******************************************************************************/
+/*                                                                            */
+/* !Function    : VSISRV_vidCalcXORCplData10B                                 */
+/* !Description : Check calculation, TxS, 10 bytes data                       */
+/*              : XOR 16 bits checksum and complement                         */
+/* !Number      : VSISRV.CHK.4                                                */
+/* !Reference   : V01NT1001945.002                                            */
+/*                                                                            */
+/******************************************************************************/
+/* !LastAuthor  : O. Garot                                                    */
+/******************************************************************************/
+/*----------------------------------------------------------------------------*/
+/* Tests function VSISRV_vidCalcXORCplData10B                                 */
+/*----------------------------------------------------------------------------*/
+/* Test1 : u8DataTab             = 0x31 32 33 34 35 36 37 38 39 3A            */
+/*       : Data len              = 10                                         */
+/*       : Chk init              = 0x0000                                     */
+/*       : Chk xor final value   = 0xFFFF                                     */
+/*       = u16DataChk            = 0xCDC6                                     */
+/*----------------------------------------------------------------------------*/
+LOCAL_INLINE void VSISRV_vidCalcXORCplData10B(
+   volatile uint8 *u8DataTab,
+   volatile uint16 *u16DataChk
+);
+LOCAL_INLINE void VSISRV_vidCalcXORCplData10B(
+   volatile uint8 *u8DataTab,    /* !Comment : Data table                     */
+                                 /* !Type    : *uint8                         */
+                                 /* !Range   : 0 - 0xFF                       */
+                                 /*                                           */
+   volatile uint16 *u16DataChk   /* !Comment : CRC16 calculated               */
+                                 /* !Type    : uint16*                        */
+                                 /* !Range   : 0 - 0xFFFF                     */
+                                 /*                                           */
+)
+{
+   uint16 u16LocalChk;
+
+   u16LocalChk = 0x0000;
+
+   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[1]) << 8) | (uint16)(u8DataTab[0]));
+   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[3]) << 8) | (uint16)(u8DataTab[2]));
+   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[5]) << 8) | (uint16)(u8DataTab[4]));
+   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[7]) << 8) | (uint16)(u8DataTab[6]));
+   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[9]) << 8) | (uint16)(u8DataTab[8]));
+
+   u16LocalChk ^= 0xFFFF;
+
+#if (_VSISRV_CHK_ENDIANNESS == _VSISRV_CHK_INTEL)
+   *u16DataChk = u16LocalChk;
+#elif (_VSISRV_CHK_ENDIANNESS == _VSISRV_CHK_MOTOROLA)
+   *u16DataChk = VSISRV_u16SwapMsbLsb(u16LocalChk);
+#endif
+}
+
+/******************************************************************************/
+/*                                                                            */
+/* !Function    : VSISRV_vidCalcXORCplData14B                                 */
+/* !Description : Check calculation, RxA, RxS, 14 bytes data                  */
+/*              : XOR 16 bits checksum and complement                         */
+/* !Number      : VSISRV.CHK.5                                                */
+/* !Reference   : V01NT1001945.002                                            */
+/*                                                                            */
+/******************************************************************************/
+/* !LastAuthor  : O. Garot                                                    */
+/******************************************************************************/
+/*----------------------------------------------------------------------------*/
+/* Tests function VSISRV_vidCalcXORCplData14B:                                */
+/*----------------------------------------------------------------------------*/
+/* Test1 : u8DataTab             = 0x31 32 33 34 35 36 37 38 39 3A 3B 3C 3D   */
+/*       :                       =   3E                                       */
+/*       : Data len              = 14                                         */
+/*       : Chk init              = 0x0000                                     */
+/*       : Chk xor final value   = 0xFFFF                                     */
+/*       = u16DataChk            = 0xCFC0                                     */
+/*----------------------------------------------------------------------------*/
+LOCAL_INLINE void VSISRV_vidCalcXORCplData14B(
+   volatile uint8 *u8DataTab,
+   volatile uint16 *u16DataChk
+);
+LOCAL_INLINE void VSISRV_vidCalcXORCplData14B(
+   volatile uint8 *u8DataTab,    /* !Comment : Data table                     */
+                                 /* !Type    : *uint8                         */
+                                 /* !Range   : 0 - 0xFF                       */
+                                 /*                                           */
+   volatile uint16 *u16DataChk   /* !Comment : CRC16 calculated               */
+                                 /* !Type    : uint16*                        */
+                                 /* !Range   : 0 - 0xFFFF                     */
+                                 /*                                           */
+)
+{
+   uint16 u16LocalChk;
+
+   u16LocalChk = 0x0000;
+
+   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[1])  << 8) | (uint16)(u8DataTab[0]));
+   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[3])  << 8) | (uint16)(u8DataTab[2]));
+   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[5])  << 8) | (uint16)(u8DataTab[4]));
+   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[7])  << 8) | (uint16)(u8DataTab[6]));
+   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[9])  << 8) | (uint16)(u8DataTab[8]));
+   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[11]) << 8) | (uint16)(u8DataTab[10]));
+   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[13]) << 8) | (uint16)(u8DataTab[12]));
+
+   u16LocalChk ^= 0xFFFF;
+
+#if (_VSISRV_CHK_ENDIANNESS == _VSISRV_CHK_INTEL)
+   *u16DataChk = u16LocalChk;
+#elif (_VSISRV_CHK_ENDIANNESS == _VSISRV_CHK_MOTOROLA)
+   *u16DataChk = VSISRV_u16SwapMsbLsb(u16LocalChk);
+#endif
+}
+
+/******************************************************************************/
+/*                                                                            */
+/* !Function    : VSISRV_vidCalcXORCplData18B                                 */
+/* !Description : Check calculation, TxA, 18 bytes data                       */
+/*              : XOR 16 bits checksum and complement                         */
+/* !Number      : VSISRV.CHK.6                                                */
+/* !Reference   : V01NT1001945.002                                            */
+/*                                                                            */
+/******************************************************************************/
+/* !LastAuthor  : O. Garot                                                    */
+/******************************************************************************/
+/*----------------------------------------------------------------------------*/
+/* Tests function VSISRV_vidCalcXORCplData18B:                                */
+/*----------------------------------------------------------------------------*/
+/* Test1 : u8DataTab             = 0x31 32 33 34 35 36 37 38 39 3A 3B 3C 3D   */
+/*       :                       =   3E 3F 40 41 42                           */
+/*       : Data len              = 18                                         */
+/*       : Chk init              = 0x0000                                     */
+/*       : Chk xor final value   = 0xFFFF                                     */
+/*       = u16DataChk            = 0xCDBE                                     */
+/*----------------------------------------------------------------------------*/
+LOCAL_INLINE void VSISRV_vidCalcXORCplData18B(
+   volatile uint8 *u8DataTab,
+   volatile uint16 *u16DataChk
+);
+LOCAL_INLINE void VSISRV_vidCalcXORCplData18B(
+   volatile uint8 *u8DataTab,    /* !Comment : Data table                     */
+                                 /* !Type    : *uint8                         */
+                                 /* !Range   : 0 - 0xFF                       */
+                                 /*                                           */
+   volatile uint16 *u16DataChk   /* !Comment : CRC16 calculated               */
+                                 /* !Type    : uint16*                        */
+                                 /* !Range   : 0 - 0xFFFF                     */
+                                 /*                                           */
+)
+{
+   uint16 u16LocalChk;
+
+   u16LocalChk = 0x0000;
+
+   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[1])  << 8) | (uint16)(u8DataTab[0]));
+   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[3])  << 8) | (uint16)(u8DataTab[2]));
+   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[5])  << 8) | (uint16)(u8DataTab[4]));
+   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[7])  << 8) | (uint16)(u8DataTab[6]));
+   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[9])  << 8) | (uint16)(u8DataTab[8]));
+   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[11]) << 8) | (uint16)(u8DataTab[10]));
+   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[13]) << 8) | (uint16)(u8DataTab[12]));
+   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[15]) << 8) | (uint16)(u8DataTab[14]));
+   u16LocalChk ^= (uint16)(((uint16)(u8DataTab[17]) << 8) | (uint16)(u8DataTab[16]));
+
+   u16LocalChk ^= 0xFFFF;
+
+#if (_VSISRV_CHK_ENDIANNESS == _VSISRV_CHK_INTEL)
+   *u16DataChk = u16LocalChk;
+#elif (_VSISRV_CHK_ENDIANNESS == _VSISRV_CHK_MOTOROLA)
+   *u16DataChk = VSISRV_u16SwapMsbLsb(u16LocalChk);
+#endif
+}
+
+/******************************************************************************/
+/* GLOBAL FUNCTION DEFINITION                                                 */
+/******************************************************************************/
+
+/*----------------------------------------------------------------------------*/
+/* Check control                                                              */
+/*----------------------------------------------------------------------------*/
+
+/******************************************************************************/
+/*                                                                            */
+/* !Function    : VSISRV_vidVerifyDataCheck14B                                */
+/* !Description : Check control, 14 bytes data                                */
+/* !Number      : VSISRV.CHK.11                                               */
+/* !Reference   : V01NT1001945.002                                            */
+/*                                                                            */
+/******************************************************************************/
+/* !LastAuthor  : O. Garot                                                    */
+/******************************************************************************/
+LOCAL_INLINE void VSISRV_vidVerifyDataCheck14B(
+   volatile uint8 *u8DataTab,
+   uint16         u16DataChk,
+   boolean        *bChkStatus
+);
+LOCAL_INLINE void VSISRV_vidVerifyDataCheck14B(
+   volatile uint8 *u8DataTab,    /* !Comment : Data table                     */
+                                 /* !Type    : *uint8                         */
+                                 /* !Range   : 0 - 0xFF                       */
+                                 /*                                           */
+   uint16         u16DataChk,    /* !Comment : CRC16 calculated               */
+                                 /* !Type    : uint16*                        */
+                                 /* !Range   : 0 - 0xFFFF                     */
+                                 /*                                           */
+   boolean        *bChkStatus    /* !Comment : Chek OK calculation            */
+                                 /* !Type    : boolean*                       */
+                                 /* !Range   : VSISRV_STATUS_OK/ NOK          */
+                                 /*                                           */
+)
+{
+   uint16 u16LocalDataChk;
+   
+   if (VSISRV_bChkCRCOffXOROnC == 0)
+   {
+      VSISRV_vidCalcCRCData14B(u8DataTab, &u16LocalDataChk);
+   }
+   else
+   {
+      VSISRV_vidCalcXORCplData14B(u8DataTab, &u16LocalDataChk);
+   }
+
+   u16DataChk = (((uint16)(u16DataChk >> 8) & 0xFF) |  ((uint16)(u16DataChk << 8) & 0xFF00));
+
+   if (u16DataChk == u16LocalDataChk)
+   {
+      *bChkStatus = VSISRV_STATUS_OK;
+   }
+   else
+   {
+      *bChkStatus = VSISRV_STATUS_NOK;
+   }
+}
+
+/*----------------------------------------------------------------------------*/
+/* Write control                                                              */
+/*----------------------------------------------------------------------------*/
+
+/******************************************************************************/
+/*                                                                            */
+/* !Function    : VSISRV_vidWriteDataCheck11B                                 */
+/* !Description : Write control, 11 bytes data                                */
+/* !Number      : VSISRV.CHK.21                                               */
+/* !Reference   : V01NT1001945.002                                            */
+/*                                                                            */
+/******************************************************************************/
+/* !LastAuthor  : O. Garot                                                    */
+/******************************************************************************/
+LOCAL_INLINE void VSISRV_vidWriteDataCheck11B(
+   volatile uint8  *u8DataTab,
+   volatile uint8  *u8DataChk
+);
+LOCAL_INLINE void VSISRV_vidWriteDataCheck11B(
+   volatile uint8  *u8DataTab,   /* !Comment : Data table                     */
+                                 /* !Type    : *uint8                         */
+                                 /* !Range   : 0 - 0xFF                       */
+                                 /*                                           */
+   volatile uint8  *u8DataChk    /* !Comment : CRC8 calculated                */
+                                 /* !Type    : uint8*                         */
+                                 /* !Range   : 0 - 0xFF                       */
+                                 /*                                           */
+)
+{                           
+   uint8 u8LocalDataChk;
+
+
+   if (VSISRV_bChkCRCOffXOROnC == 0)
+   {
+      VSISRV_vidCalcCRCData11B(u8DataTab, &u8LocalDataChk);
+   }
+   else
+   {
+      VSISRV_vidCalcXORCplData11B(u8DataTab, &u8LocalDataChk);
+   }
+
+   *u8DataChk = u8LocalDataChk;
+}
+
+/******************************************************************************/
+/*                                                                            */
+/* !Function    : VSISRV_vidWriteDataCheck10B                                 */
+/* !Description : Write control, 10 bytes data                                */
+/* !Number      : VSISRV.CHK.21                                               */
+/* !Reference   : V01NT1001945.002                                            */
+/*                                                                            */
+/******************************************************************************/
+/* !LastAuthor  : O. Garot                                                    */
+/******************************************************************************/
+LOCAL_INLINE void VSISRV_vidWriteDataCheck10B(
+   volatile uint8  *u8DataTab,
+   volatile uint16 *u16DataChk
+);
+LOCAL_INLINE void VSISRV_vidWriteDataCheck10B(
+   volatile uint8  *u8DataTab,   /* !Comment : Data table                     */
+                                 /* !Type    : *uint8                         */
+                                 /* !Range   : 0 - 0xFF                       */
+                                 /*                                           */
+   volatile uint16 *u16DataChk   /* !Comment : CRC16 calculated               */
+                                 /* !Type    : uint16*                        */
+                                 /* !Range   : 0 - 0xFFFF                     */
+                                 /*                                           */
+)
+{                           
+   uint16 u16LocalDataChk;
+
+
+   if (VSISRV_bChkCRCOffXOROnC == 0)
+   {
+      VSISRV_vidCalcCRCData10B(u8DataTab, &u16LocalDataChk);
+   }
+   else
+   {
+      VSISRV_vidCalcXORCplData10B(u8DataTab, &u16LocalDataChk);
+   }
+
+   *u16DataChk = u16LocalDataChk;
+}
+
+/******************************************************************************/
+/*                                                                            */
+/* !Function    : VSISRV_vidWriteDataCheck14B                                 */
+/* !Description : Write control, 14 bytes data                                */
+/* !Number      : VSISRV.CHK.22                                               */
+/* !Reference   : V01NT1001945.002                                            */
+/*                                                                            */
+/******************************************************************************/
+/* !LastAuthor  : O. Garot                                                    */
+/******************************************************************************/
+LOCAL_INLINE void VSISRV_vidWriteDataCheck14B(
+   volatile uint8  *u8DataTab,
+   volatile uint16 *u16DataChk
+);
+LOCAL_INLINE void VSISRV_vidWriteDataCheck14B(
+   volatile uint8  *u8DataTab,   /* !Comment : Data table                     */
+                                 /* !Type    : *uint8                         */
+                                 /* !Range   : 0 - 0xFF                       */
+                                 /*                                           */
+   volatile uint16 *u16DataChk   /* !Comment : CRC16 calculated               */
+                                 /* !Type    : uint16*                        */
+                                 /* !Range   : 0 - 0xFFFF                     */
+                                 /*                                           */
+)
+{                           
+   uint16 u16LocalDataChk;
+
+   if (VSISRV_bChkCRCOffXOROnC == 0)
+   {
+      VSISRV_vidCalcCRCData14B(u8DataTab, &u16LocalDataChk);
+   }
+   else
+   {
+      VSISRV_vidCalcXORCplData14B(u8DataTab, &u16LocalDataChk);
+   }
+
+   *u16DataChk = u16LocalDataChk;
+}
+
+/******************************************************************************/
+/*                                                                            */
+/* !Function    : VSISRV_vidWriteDataCheck18B                                 */
+/* !Description : Write control, 18 bytes data                                */
+/* !Number      : VSISRV.CHK.23                                               */
+/* !Reference   : V01NT1001945.002                                            */
+/*                                                                            */
+/******************************************************************************/
+/* !LastAuthor  : O. Garot                                                    */
+/******************************************************************************/
+LOCAL_INLINE void VSISRV_vidWriteDataCheck18B(
+   volatile uint8  *u8DataTab,
+   volatile uint16 *u16DataChk
+);
+LOCAL_INLINE void VSISRV_vidWriteDataCheck18B(
+   volatile uint8  *u8DataTab,   /* !Comment : Data table                     */
+                                 /* !Type    : *uint8                         */
+                                 /* !Range   : 0 - 0xFF                       */
+                                 /*                                           */
+   volatile uint16 *u16DataChk   /* !Comment : CRC16 calculated               */
+                                 /* !Type    : uint16*                        */
+                                 /* !Range   : 0 - 0xFFFF                     */
+                                 /*                                           */
+)
+{                           
+   uint16 u16LocalDataChk;
+
+   if (VSISRV_bChkCRCOffXOROnC == 0)
+   {
+      VSISRV_vidCalcCRCData18B(u8DataTab, &u16LocalDataChk);
+   }
+   else
+   {
+      VSISRV_vidCalcXORCplData18B(u8DataTab, &u16LocalDataChk);
+   }
+
+   u16LocalDataChk = (((uint16)(u16LocalDataChk >> 8) & 0xFF) |  ((uint16)(u16LocalDataChk << 8) & 0xFF00));
+
+   *u16DataChk = u16LocalDataChk;
+}
+
+#endif /* VSISRV_CHK_H */
+
+/*-------------------------------- end of file -------------------------------*/
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/include/VsiSrv_L.h b/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/include/VsiSrv_L.h
new file mode 100644
index 000000000..b9ba04eab
--- /dev/null
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/include/VsiSrv_L.h
@@ -0,0 +1,138 @@
+/***************************** <AUTO_FILE_HEADER> *****************************/
+/*                                                                            */
+/* !Layer           : APPLI                                                   */
+/*                                                                            */
+/* !Component       : VSISRV                                                  */
+/* !Description     :                                                         */
+/*                                                                            */
+/* !Module          : VSISRV                                                  */
+/* !Description     : API of the Component                                    */
+/*                                                                            */
+/* !File            : VSISRV_L.H                                              */
+/*                                                                            */
+/* !Scope           : Private                                                 */
+/*                                                                            */
+/* !Target          : All                                                     */
+/*                                                                            */
+/* !Vendor          : Valeo                                                   */
+/*                                                                            */
+/* Coding language  : C                                                       */
+/*                                                                            */
+/* COPYRIGHT 2008 VALEO                                                       */
+/* all rights reserved                                                        */
+/*                                                                            */
+/**************************** </AUTO_FILE_HEADER> *****************************/
+/* PVCS Information                                                           */
+/* $Archive::                                                                $*/
+/* $Revision::                                                               $*/
+/* $Author::                                          $$Date::               $*/
+/******************************************************************************/
+/* !VnrOff  : Names imposed by the customer                                   */
+/* !CompReq :                                                                 */
+/******************************************************************************/
+
+#ifndef VSISRV_L_H
+#define VSISRV_L_H
+
+#include "Std_Types.h"
+
+/******************************************************************************/
+/* DEFINES                                                                    */
+/******************************************************************************/
+
+/******************************************************************************/
+/* TYPES                                                                      */
+/******************************************************************************/
+
+/******************************************************************************/
+/* CALIBRATIONS DECLARATION                                                   */
+/******************************************************************************/
+#define START_SEC_CALIB
+/*lint -e(537,451) Repeated inclusion is needed. */
+#include "MemMap.h"
+
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1ActiveDisDurC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1M4Id0SpareC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1M4Id2SpareC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1M5Id2SpareC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1M5Id3SpareC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1M6Id1SpareC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1M6Id2SpareC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1M6Id3SpareC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1OverCurThBatC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1OverCurThMotC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1OverVoltVbatThC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1PwmDeadtimeC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1PwmFreqC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1PwmInitValUlC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1PwmInitValUrC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1PwmInitValVlC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1PwmInitValVrC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1PwmInitValWlC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1PwmInitValWrC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1SynchroDelayC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1TxaPwmExcFreqC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2ActiveDisDurC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2M4Id0SpareC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2M4Id2SpareC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2M5Id2SpareC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2M5Id3SpareC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2M6Id1SpareC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2M6Id2SpareC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2M6Id3SpareC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2OverCurThBatC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2OverCurThMotC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2OverVoltVbatThC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2PwmDeadtimeC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2PwmFreqC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2PwmInitValUlC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2PwmInitValUrC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2PwmInitValVlC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2PwmInitValVrC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2PwmInitValWlC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2PwmInitValWrC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2SynchroDelayC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2TxaPwmExcFreqC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3ActiveDisDurC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3M4Id0SpareC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3M4Id2SpareC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3M5Id2SpareC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3M5Id3SpareC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3M6Id1SpareC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3M6Id2SpareC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3M6Id3SpareC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3OverCurThBatC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3OverCurThMotC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3OverVoltVbatThC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3PwmDeadtimeC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3PwmFreqC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3PwmInitValUlC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3PwmInitValUrC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3PwmInitValVlC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3PwmInitValVrC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3PwmInitValWlC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3PwmInitValWrC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3SynchroDelayC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3TxaPwmExcFreqC;
+
+#define STOP_SEC_CALIB
+/*lint -e(537,451) Repeated inclusion is needed. */
+#include "MemMap.h"
+
+/******************************************************************************/
+/* DATA DECLARATION                                                           */
+/******************************************************************************/
+#define ISWIF_START_SEC_VAR_FAST_CLEARED
+#include "MemMap.h"
+extern VAR(uint8, VSISRV_VAR) VSISRV_u8IdTx;
+
+#define ISWIF_STOP_SEC_VAR_FAST_CLEARED
+#include "MemMap.h"
+/******************************************************************************/
+/* FUNCTIONS DECLARATION                                                      */
+/******************************************************************************/
+FUNC(void, VSISRV_CODE) VSISRV_vidInit(void);
+
+#endif /* VSISRV_L_H */
+
+/*-------------------------------- end of file -------------------------------*/
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/include/VsiSrv_e.h b/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/include/VsiSrv_e.h
new file mode 100644
index 000000000..1de1575da
--- /dev/null
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/include/VsiSrv_e.h
@@ -0,0 +1,2721 @@
+/******************************************************************************/
+/*                                                                            */
+/* !Layer           : BSW                                                     */
+/*                                                                            */
+/* !Component       : VSI                                                     */
+/* !Description     : VSI control                                             */
+/*                                                                            */
+/* !Module          : VSISRV                                                  */
+/* !Description     : API\'s services                                          */
+/*                                                                            */
+/* !File            : VSISRV_E.H                                              */
+/*                                                                            */
+/* !Scope           : Public                                                  */
+/*                                                                            */
+/* !Target          : All                                                     */
+/*                                                                            */
+/* !Vendor          : Valeo                                                   */
+/*                                                                            */
+/* Coding language  : C                                                       */
+/*                                                                            */
+/* COPYRIGHT 2010 VALEO                                                       */
+/* all rights reserved                                                        */
+/*                                                                            */
+/******************************************************************************/
+/* PVCS Information                                                           */
+/* $Archive::                                                                $*/
+/* $Revision::             $$Author::   ogarot        $$Date::               $*/
+/******************************************************************************/
+/* Dimension Informations
+ * %PCMS_HEADER_SUBSTITUTION_START:%
+ * The PID has this format: <Product ID>:<Item ID>.<Variant>-<Item Type>;<Revision>
+ * %PID:%
+ * %PCMS_HEADER_SUBSTITUTION_END:%
+ ******************************************************************************/
+
+#ifndef VSISRV_E_H
+#define VSISRV_E_H
+
+#include "Std_Types.h"
+#include "VsiSrv_typ.h"
+#include "VsiSrv_i.h"
+
+#define START_SEC_CALIB
+/*lint -e(537,451) Repeated inclusion is needed. */
+#include "MemMap.h"
+extern CONST(boolean, VSISRV_CALIB) VSISRV_bBenchFrameRxChkOffC;
+extern CONST(boolean, VSISRV_CALIB) VSISRV_bBenchFrameTxIdOffC;
+extern CONST(boolean, VSISRV_CALIB) VSISRV_bChkCRCOffXOROnC;
+extern CONST(uint32, VSISRV_CALIB) VSISRV_u32CheckModeReqResCntC;
+extern CONST(uint16, VSISRV_CALIB) VSISRV_u16AutSigEmergencySwDelayC;
+#define STOP_SEC_CALIB
+/*lint -e(537,451) Repeated inclusion is needed. */
+#include "MemMap.h"
+
+
+/******************************************************************************/
+/* DEFINES                                                                    */
+/******************************************************************************/
+
+/*----------------------------------------------------------------------------*/
+/* DEFINES associated to signals                                              */
+/*----------------------------------------------------------------------------*/
+/*------------------------------------*/
+/* Pwm Ratio Freq                     */
+/*------------------------------------*/
+#define VSISRV_SIGNAL_PWM_RATIO_NONE      (uint8)0x00 /* b00 */
+#define VSISRV_SIGNAL_PWM_RATIO_DIV2      (uint8)0x01 /* b01 */
+
+/*------------------------------------*/
+/* Operation                          */
+/*------------------------------------*/
+#define VSISRV_SIGNAL_OPERATION_CCU       (uint8)0x00 /* b0 */
+#define VSISRV_SIGNAL_OPERATION_MCU       (uint8)0x01 /* b1 */
+
+/*------------------------------------*/
+/* SwitchType                         */
+/*------------------------------------*/
+#define VSISRV_SIGNAL_SWITCHTYPE_NONE     (uint8)0x00 /* b000 */
+#define VSISRV_SIGNAL_SWITCHTYPE_MLI_T    (uint8)0x01 /* b001 */
+#define VSISRV_SIGNAL_SWITCHTYPE_MLI_CM   (uint8)0x02 /* b010 */
+#define VSISRV_SIGNAL_SWITCHTYPE_MLI_CT   (uint8)0x03 /* b011 */
+#define VSISRV_SIGNAL_SWITCHTYPE_SVM_0    (uint8)0x04 /* b100 */
+#define VSISRV_SIGNAL_SWITCHTYPE_SVM_1    (uint8)0x05 /* b101 */
+#define VSISRV_SIGNAL_SWITCHTYPE_SVM_2    (uint8)0x06 /* b110 */
+#define VSISRV_SIGNAL_SWITCHTYPE_SVM_3    (uint8)0x07 /* b111 */
+
+/*------------------------------------*/
+/* Mode                               */
+/*------------------------------------*/
+#define VSISRV_SIGNAL_MODE_REQ_OFF        (uint8)0x00 /* b00 */
+#define VSISRV_SIGNAL_MODE_REQ_INIT       (uint8)0x02 /* b10 */
+#define VSISRV_SIGNAL_MODE_REQ_PWM_DIRECT (uint8)0x01 /* b01 */
+#define VSISRV_SIGNAL_MODE_REQ_PWM_HARD   (uint8)0x03 /* b11 */
+
+/*----------------------------------------------------------------------------*/
+/* DEFINES associated to VSISRV_vidSetModeReq function                        */
+/*----------------------------------------------------------------------------*/
+#define VSISRV_VSI_MODE_REQ_OFF           (uint8)0x00 /* b000 */
+#define VSISRV_VSI_MODE_REQ_INIT_CAL1     (uint8)0x05 /* b101 */
+#define VSISRV_VSI_MODE_REQ_INIT_CAL2     (uint8)0x06 /* b110 */
+#define VSISRV_VSI_MODE_REQ_INIT_CAL3     (uint8)0x07 /* b111 */
+#define VSISRV_VSI_MODE_REQ_PWM_DIRECT    (uint8)0x01 /* b001 */
+#define VSISRV_VSI_MODE_REQ_PWM_HARD      (uint8)0x03 /* b011 */
+
+/*----------------------------------------------------------------------------*/
+/* DEFINES associated to Status datas and function                            */
+/*----------------------------------------------------------------------------*/
+#define VSISRV_STATUS_NOK                 (boolean)0
+#define VSISRV_STATUS_OK                  (boolean)1
+
+/******************************************************************************/
+/* MACRO FUNCTIONS                                                            */
+/******************************************************************************/
+
+/*----------------------------------------------------------------------------*/
+/* MACRO FUNCTIONS Frame Status                                               */
+/*----------------------------------------------------------------------------*/
+/*------------------------------------*/
+/* Frame Status Tx                    */
+/*------------------------------------*/
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_FrameStatusTxCtrlA(void);
+LOCAL_INLINE boolean VSISRV_FrameStatusTxCtrlA(void)
+{
+   if (VSISRV_GetFrameFS_TXA() == 1)
+   {
+      return(VSISRV_STATUS_OK);
+   }
+   else
+   {
+      return(VSISRV_STATUS_NOK);
+   }
+}
+
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_FrameStatusTxCtrlS(void);
+LOCAL_INLINE boolean VSISRV_FrameStatusTxCtrlS(void)
+{
+   if (VSISRV_GetFrameFS_TXS() == 1)
+   {
+      return(VSISRV_STATUS_OK);
+   }
+   else
+   {
+      return(VSISRV_STATUS_NOK);
+   }
+}
+
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_FrameStatusTxSOL(void);
+LOCAL_INLINE boolean VSISRV_FrameStatusTxSOL(void)
+{
+   if (VSISRV_GetFrameFS_SOL() == 1)
+   {
+      return(VSISRV_STATUS_OK);
+   }
+   else
+   {
+      return(VSISRV_STATUS_NOK);
+   }
+}
+
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_FrameStatusTxSOE(void);
+LOCAL_INLINE boolean VSISRV_FrameStatusTxSOE(void)
+{
+   if (VSISRV_GetFrameFS_SOE() == 1)
+   {
+      return(VSISRV_STATUS_OK);
+   }
+   else
+   {
+      return(VSISRV_STATUS_NOK);
+   }
+}
+
+/*------------------------------------*/
+/* Frame Status Rx                    */
+/*------------------------------------*/
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_FrameStatusRxCtrlA(void);
+LOCAL_INLINE boolean VSISRV_FrameStatusRxCtrlA(void)
+{
+   return(VSISRV_GetFrameFS_RXA());
+}
+
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_FrameStatusRxCtrlS(void);
+LOCAL_INLINE boolean VSISRV_FrameStatusRxCtrlS(void)
+{
+   return(VSISRV_GetFrameFS_RXS());
+}
+
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_FrameStatusIdRx(void);
+LOCAL_INLINE boolean VSISRV_FrameStatusIdRx(void)
+{
+   return(VSISRV_GetFrameFS_IdRX());
+}
+
+/*----------------------------------------------------------------------------*/
+/* MACRO FUNCTIONS Set Ipdu                                                   */
+/*----------------------------------------------------------------------------*/
+/*------------------------------------*/
+/* Set Ipdu Tx                        */
+/*------------------------------------*/
+/*----------------*/
+/* Set Ipdu TxS   */
+/*----------------*/
+/*--------*/
+/* MLI    */
+/*--------*/
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalPWM_Ul(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalPWM_Ul(uint16 value)
+{
+   uint16 valueScal;
+   /* VSISRV_SecAtomicStart0(); */
+
+   valueScal = VSISRV_ScalingGroup1(value);
+
+   /* VSISRV_SecAtomicStart1(); */
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Ul_MSB8 = (uint32)(valueScal >> 4);
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Ul_LSB4 = (uint32)(valueScal);
+   /* VSISRV_SecAtomicStop(); */
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalPWM_Ur(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalPWM_Ur(uint16 value)
+{
+   uint16 valueScal;
+   /* VSISRV_SecAtomicStart0(); */
+
+   valueScal = VSISRV_ScalingGroup1(value);
+
+   /* VSISRV_SecAtomicStart1(); */
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Ur_MSB4 = (uint32)(valueScal >> 8);
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Ur_LSB8 = (uint32)(valueScal);
+   /* VSISRV_SecAtomicStop(); */
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalPWM_Vl(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalPWM_Vl(uint16 value)
+{
+   uint16 valueScal;
+   /* VSISRV_SecAtomicStart0(); */
+
+   valueScal = VSISRV_ScalingGroup1(value);
+
+   /* VSISRV_SecAtomicStart1(); */
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Vl_MSB8 = (uint32)(valueScal >> 4);
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Vl_LSB4 = (uint32)(valueScal);
+   /* VSISRV_SecAtomicStop(); */
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalPWM_Vr(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalPWM_Vr(uint16 value)
+{
+   uint16 valueScal;
+   /* VSISRV_SecAtomicStart0(); */
+
+   valueScal = VSISRV_ScalingGroup1(value);
+
+   /* VSISRV_SecAtomicStart1(); */
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Vr_MSB4 = (uint32)(valueScal >> 8);
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Vr_LSB8 = (uint32)(valueScal);
+   /* VSISRV_SecAtomicStop(); */
+}
+
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalPWM_Wl(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalPWM_Wl(uint16 value)
+{
+   uint16 valueScal;
+   /* VSISRV_SecAtomicStart0(); */
+
+   valueScal = VSISRV_ScalingGroup1(value);
+
+   /* VSISRV_SecAtomicStart1(); */
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Wl_MSB8 = (uint32)(valueScal >> 4);
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Wl_LSB4 = (uint32)(valueScal);
+   /* VSISRV_SecAtomicStop(); */
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalPWM_Wr(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalPWM_Wr(uint16 value)
+{
+   uint16 valueScal;
+   /* VSISRV_SecAtomicStart0(); */
+
+   valueScal = VSISRV_ScalingGroup1(value);
+
+   /* VSISRV_SecAtomicStart1(); */
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Wr_MSB4 = (uint32)(valueScal >> 8);
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Wr_LSB8 = (uint8)(valueScal);
+   /* VSISRV_SecAtomicStop(); */
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetAtomicSignalPWM_All(
+                                         uint16 valuePwmUl,
+                                         uint16 valuePwmUr,
+                                         uint16 valuePwmVl,
+                                         uint16 valuePwmVr,
+                                         uint16 valuePwmWl,
+                                         uint16 valuePwmWr
+                                         );
+LOCAL_INLINE void VSISRV_SetAtomicSignalPWM_All(
+                                         uint16 valuePwmUl,
+                                         uint16 valuePwmUr,
+                                         uint16 valuePwmVl,
+                                         uint16 valuePwmVr,
+                                         uint16 valuePwmWl,
+                                         uint16 valuePwmWr
+                                         )
+{
+   uint16 valueScalPwmUl;
+   uint16 valueScalPwmUr;
+   uint16 valueScalPwmVl;
+   uint16 valueScalPwmVr;
+   uint16 valueScalPwmWl;
+   uint16 valueScalPwmWr;
+   VSISRV_SecAtomicStart0();
+
+   valueScalPwmUl = VSISRV_ScalingGroup1(valuePwmUl);
+   valueScalPwmUr = VSISRV_ScalingGroup1(valuePwmUr);
+   valueScalPwmVl = VSISRV_ScalingGroup1(valuePwmVl);
+   valueScalPwmVr = VSISRV_ScalingGroup1(valuePwmVr);
+   valueScalPwmWl = VSISRV_ScalingGroup1(valuePwmWl);
+   valueScalPwmWr = VSISRV_ScalingGroup1(valuePwmWr);
+
+   VSISRV_SecAtomicStart1();
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Ul_MSB8 = (uint32)(valueScalPwmUl >> 4);
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Ul_LSB4 = (uint32)(valueScalPwmUl);
+/*--------*/
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Ur_MSB4 = (uint32)(valueScalPwmUr >> 8);
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Ur_LSB8 = (uint32)(valueScalPwmUr);
+/*--------*/
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Vl_MSB8 = (uint32)(valueScalPwmVl >> 4);
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Vl_LSB4 = (uint32)(valueScalPwmVl);
+/*--------*/
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Vr_MSB4 = (uint32)(valueScalPwmVr >> 8);
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Vr_LSB8 = (uint32)(valueScalPwmVr);
+/*--------*/
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Wl_MSB8 = (uint32)(valueScalPwmWl >> 4);
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Wl_LSB4 = (uint32)(valueScalPwmWl);
+/*--------*/
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Wr_MSB4 = (uint32)(valueScalPwmWr >> 8);
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Wr_LSB8 = (uint8)(valueScalPwmWr);
+/*----------------*/
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+/*--------*/
+/* SVM    */
+/*--------*/
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalSVM_V1(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalSVM_V1(uint16 value)
+{
+   /* VSISRV_SecAtomicStart(); */
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_V1 = (uint32)(value);
+   /* VSISRV_SecAtomicStop(); */
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalSVM_V2(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalSVM_V2(uint16 value)
+{
+   /* VSISRV_SecAtomicStart(); */
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_V2_MSB2 = (uint32)(value >> 4);
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_V2_LSB4 = (uint32)(value);
+   /* VSISRV_SecAtomicStop(); */
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalSVM_V3(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalSVM_V3(uint16 value)
+{
+   /* VSISRV_SecAtomicStart(); */
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_V3_MSB4 = (uint32)(value >> 2);
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_V3_LSB2 = (uint32)(value);
+   /* VSISRV_SecAtomicStop(); */
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalSVM_V4(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalSVM_V4(uint16 value)
+{
+   /* VSISRV_SecAtomicStart(); */
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_V4 = (uint32)(value);
+   /* VSISRV_SecAtomicStop(); */
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalSVM_AT1(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalSVM_AT1(uint16 value)
+{
+   uint16 valueScal;
+   /* VSISRV_SecAtomicStart0(); */
+
+   valueScal = VSISRV_ScalingGroup1(value);
+
+   /* VSISRV_SecAtomicStart1(); */
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_AT1_MSB8 = (uint32)(valueScal >> 4);
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_AT1_LSB4 = (uint32)(valueScal);
+   /* VSISRV_SecAtomicStop(); */
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalSVM_AT2(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalSVM_AT2(uint16 value)
+{
+   uint16 valueScal;
+   /* VSISRV_SecAtomicStart0(); */
+
+   valueScal = VSISRV_ScalingGroup1(value);
+
+   /* VSISRV_SecAtomicStart1(); */
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_AT2_MSB4 = (uint32)(valueScal >> 8);
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_AT2_LSB8 = (uint8)(valueScal);
+   /* VSISRV_SecAtomicStop(); */
+}
+
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalSVM_AT3(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalSVM_AT3(uint16 value)
+{
+   uint16 valueScal;
+   /* VSISRV_SecAtomicStart0(); */
+
+   valueScal = VSISRV_ScalingGroup1(value);
+
+   /* VSISRV_SecAtomicStart1(); */
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_AT3_MSB8 = (uint32)(valueScal >> 4);
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_AT3_LSB4 = (uint32)(valueScal);
+   /* VSISRV_SecAtomicStop(); */
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalSVM_AT4(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalSVM_AT4(uint16 value)
+{
+   uint16 valueScal;
+   /* VSISRV_SecAtomicStart0(); */
+
+   valueScal = VSISRV_ScalingGroup1(value);
+
+   /* VSISRV_SecAtomicStart1(); */
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_AT4_MSB4 = (uint32)(valueScal >> 8);
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_AT4_LSB8 = (uint8)(valueScal);
+   /* VSISRV_SecAtomicStop(); */
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetAtomicSignalSVM_All(
+                                         uint16 valueSvmV1,
+                                         uint16 valueSvmV2,
+                                         uint16 valueSvmV3,
+                                         uint16 valueSvmV4,
+                                         uint16 valueSvmAT1,
+                                         uint16 valueSvmAT2,
+                                         uint16 valueSvmAT3,
+                                         uint16 valueSvmAT4
+                                         );
+LOCAL_INLINE void VSISRV_SetAtomicSignalSVM_All(
+                                         uint16 valueSvmV1,
+                                         uint16 valueSvmV2,
+                                         uint16 valueSvmV3,
+                                         uint16 valueSvmV4,
+                                         uint16 valueSvmAT1,
+                                         uint16 valueSvmAT2,
+                                         uint16 valueSvmAT3,
+                                         uint16 valueSvmAT4
+                                         )
+{
+   uint16 valueScalSvmAT1;
+   uint16 valueScalSvmAT2;
+   uint16 valueScalSvmAT3;
+   uint16 valueScalSvmAT4;
+   VSISRV_SecAtomicStart0();
+
+   valueScalSvmAT1 = VSISRV_ScalingGroup1(valueSvmAT1);
+   valueScalSvmAT2 = VSISRV_ScalingGroup1(valueSvmAT2);
+   valueScalSvmAT3 = VSISRV_ScalingGroup1(valueSvmAT3);
+   valueScalSvmAT4 = VSISRV_ScalingGroup1(valueSvmAT4);
+
+   VSISRV_SecAtomicStart1();
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_V1 = (uint32)(valueSvmV1);
+/*--------*/
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_V2_MSB2 = (uint32)(valueSvmV2 >> 4);
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_V2_LSB4 = (uint32)(valueSvmV2);
+/*--------*/
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_V3_MSB4 = (uint32)(valueSvmV3 >> 2);
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_V3_LSB2 = (uint32)(valueSvmV3);
+/*--------*/
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_V4 = (uint32)(valueSvmV4);
+/*--------*/
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_AT1_MSB8 = (uint32)(valueScalSvmAT1 >> 4);
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_AT1_LSB4 = (uint32)(valueScalSvmAT1);
+/*--------*/
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_AT2_MSB4 = (uint32)(valueScalSvmAT2 >> 8);
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_AT2_LSB8 = (uint8)(valueScalSvmAT2);
+/*--------*/
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_AT3_MSB8 = (uint32)(valueScalSvmAT3 >> 4);
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_AT3_LSB4 = (uint32)(valueScalSvmAT3);
+/*--------*/
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_AT4_MSB4 = (uint32)(valueScalSvmAT4 >> 8);
+   VsisrvIpduTx.Data.TxS.SignalSVM.SVM_AT4_LSB8 = (uint8)(valueScalSvmAT4);
+/*----------------*/
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalPwmFreqDyn(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalPwmFreqDyn(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxS.Signal.PwmFreqDyn_MSB8 = (uint8)(value >> 6);
+   VsisrvIpduTx.Data.TxS.Signal.PwmFreqDyn_LSB6 = (uint8)(value);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalPWM_UVW_ON(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalPWM_UVW_ON(boolean value)
+{
+   /* VSISRV_SecAtomicStart(); */
+   VsisrvIpduTx.Data.TxS.Signal.PWM_UVW_ON = value;
+   /* VSISRV_SecAtomicStop(); */
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalPWM_RatioFreq(uint8 value);
+LOCAL_INLINE void VSISRV_SetSignalPWM_RatioFreq(uint8 value)
+{
+   /* VSISRV_SecAtomicStart(); */
+   VsisrvIpduTx.Data.TxS.Signal.PWM_RatioFreq = value;
+   /* VSISRV_SecAtomicStop(); */
+}
+/*----------------*/
+/* Set Ipdu TxA   */
+/*----------------*/
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalStateReqEmergencySw(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalStateReqEmergencySw(boolean value)
+{
+   boolean localValue;
+   localValue = (boolean)(value | VSISRV_bAutSigEmergencySwMask);
+   /* VSISRV_SecAtomicStart(); */
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.StateReq.Field.EmergencySw = localValue;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.StateReq.Field.EmergencySw = localValue;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.StateReq.Field.EmergencySw = localValue;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.StateReq.Field.EmergencySw = localValue;
+   /* VSISRV_SecAtomicStop(); */
+}
+
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalStateReqSCSpeedReady(uint8 value);
+LOCAL_INLINE void VSISRV_SetSignalStateReqSCSpeedReady(uint8 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.StateReq.Field.SCSpeedReady = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.StateReq.Field.SCSpeedReady = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.StateReq.Field.SCSpeedReady = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.StateReq.Field.SCSpeedReady = value;
+   VSISRV_SecAtomicStop();
+}
+
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalStateReqOperation(uint8 value);
+LOCAL_INLINE void VSISRV_SetSignalStateReqOperation(uint8 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.StateReq.Field.Operation = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.StateReq.Field.Operation = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.StateReq.Field.Operation = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.StateReq.Field.Operation = value;
+   VSISRV_SecAtomicStop();
+}
+
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalStateReqSwitchType(uint8 value);
+LOCAL_INLINE void VSISRV_SetSignalStateReqSwitchType(uint8 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.StateReq.Field.SwitchType = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.StateReq.Field.SwitchType = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.StateReq.Field.SwitchType = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.StateReq.Field.SwitchType = value;
+   VSISRV_SecAtomicStop();
+}
+
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalStateReqModeReq(uint8 value);
+LOCAL_INLINE void VSISRV_SetSignalStateReqModeReq(uint8 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.StateReq.Field.ModeReq = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.StateReq.Field.ModeReq = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.StateReq.Field.ModeReq = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.StateReq.Field.ModeReq = value;
+   VSISRV_SecAtomicStop();
+}
+
+/*----------------*/
+/*--------*/
+/* FaultA */
+/*--------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultA(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalFaultA(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   if (value != 0)
+   {
+      VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, 1);
+   }
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Data16 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Data16 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Data16 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Data16 = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultAEmergencyStop(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultAEmergencyStop(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.EmergencyStop = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.EmergencyStop = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.EmergencyStop = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.EmergencyStop = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultAPwrSupLs(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultAPwrSupLs(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.PwrSupLs = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.PwrSupLs = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.PwrSupLs = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.PwrSupLs = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultAPwrSupHs(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultAPwrSupHs(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.PwrSupHs = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.PwrSupHs = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.PwrSupHs = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.PwrSupHs = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultAPwrSupMul(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultAPwrSupMul(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.PwrSupMul = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.PwrSupMul = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.PwrSupMul = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.PwrSupMul = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultAIgbtL(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultAIgbtL(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.IgbtL = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.IgbtL = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.IgbtL = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.IgbtL = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultAIgbtH(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultAIgbtH(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.IgbtH = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.IgbtH = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.IgbtH = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.IgbtH = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultAActiveDisIn(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultAActiveDisIn(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.ActiveDisIn = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.ActiveDisIn = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.ActiveDisIn = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.ActiveDisIn = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultAActiveDisAc(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultAActiveDisAc(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.ActiveDisAc = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.ActiveDisAc = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.ActiveDisAc = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.ActiveDisAc = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultASpare07(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultASpare07(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.Spare07 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.Spare07 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.Spare07 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.Spare07 = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultASpare06(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultASpare06(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.Spare06 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.Spare06 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.Spare06 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.Spare06 = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultASpare05(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultASpare05(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.Spare05 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.Spare05 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.Spare05 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.Spare05 = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultASpare04(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultASpare04(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.Spare04 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.Spare04 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.Spare04 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.Spare04 = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultASpare03(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultASpare03(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.Spare03 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.Spare03 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.Spare03 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.Spare03 = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultASpare02(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultASpare02(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.Spare02 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.Spare02 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.Spare02 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.Spare02 = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultASpare01(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultASpare01(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.Spare01 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.Spare01 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.Spare01 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.Spare01 = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultALossComSpi(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultALossComSpi(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.LossComSpi = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.LossComSpi = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.LossComSpi = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.LossComSpi = value;
+   VSISRV_SecAtomicStop();
+}
+/*----*/
+LOCAL_INLINE void VSISRV_SetSignalFaultALossComSpiNoSwDelay(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultALossComSpiNoSwDelay(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Field.LossComSpi = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Field.LossComSpi = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Field.LossComSpi = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Field.LossComSpi = value;
+   VSISRV_SecAtomicStop();
+}
+/*--------*/
+/*----------------*/
+/*--------*/
+/* FaultB */
+/*--------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultB(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalFaultB(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   if (value != 0)
+   {
+      VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, 1);
+   }
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Data16 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Data16 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Data16 = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Data16 = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultBOverCurBat(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultBOverCurBat(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.OverCurBat = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.OverCurBat = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.OverCurBat = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.OverCurBat = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultBOverTempCtrlBd(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultBOverTempCtrlBd(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.OverTempCtrlBd = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.OverTempCtrlBd = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.OverTempCtrlBd = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.OverTempCtrlBd = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultBOverTempIgbt(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultBOverTempIgbt(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.OverTempIgbt = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.OverTempIgbt = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.OverTempIgbt = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.OverTempIgbt = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultBOverTempDrvBd(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultBOverTempDrvBd(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.OverTempDrvBd = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.OverTempDrvBd = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.OverTempDrvBd = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.OverTempDrvBd = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultBUnderVoltVBat(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultBUnderVoltVBat(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.UnderVoltVBat = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.UnderVoltVBat = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.UnderVoltVBat = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.UnderVoltVBat = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultBOverVoltVBat(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultBOverVoltVBat(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.OverVoltVBat = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.OverVoltVBat = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.OverVoltVBat = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.OverVoltVBat = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultBIgbtMidPointU(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultBIgbtMidPointU(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.IgbtMidPointU = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.IgbtMidPointU = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.IgbtMidPointU = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.IgbtMidPointU = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultBIgbtMidPointV(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultBIgbtMidPointV(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.IgbtMidPointV = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.IgbtMidPointV = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.IgbtMidPointV = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.IgbtMidPointV = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultBIgbtMidPointW(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultBIgbtMidPointW(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.IgbtMidPointW = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.IgbtMidPointW = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.IgbtMidPointW = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.IgbtMidPointW = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultBWdgCpld(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultBWdgCpld(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.WdgCpld = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.WdgCpld = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.WdgCpld = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.WdgCpld = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultBOverUnderCurWr(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultBOverUnderCurWr(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.OverUnderCurWr = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.OverUnderCurWr = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.OverUnderCurWr = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.OverUnderCurWr = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultBOverUnderCurWl(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultBOverUnderCurWl(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.OverUnderCurWl = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.OverUnderCurWl = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.OverUnderCurWl = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.OverUnderCurWl = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultBOverUnderCurVr(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultBOverUnderCurVr(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.OverUnderCurVr = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.OverUnderCurVr = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.OverUnderCurVr = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.OverUnderCurVr = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultBOverUnderCurVl(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultBOverUnderCurVl(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.OverUnderCurVl = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.OverUnderCurVl = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.OverUnderCurVl = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.OverUnderCurVl = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultBOverUnderCurUr(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultBOverUnderCurUr(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.OverUnderCurUr = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.OverUnderCurUr = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.OverUnderCurUr = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.OverUnderCurUr = value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultBOverUnderCurUl(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultBOverUnderCurUl(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Field.OverUnderCurUl = value;
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Field.OverUnderCurUl = value;
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Field.OverUnderCurUl = value;
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Field.OverUnderCurUl = value;
+   VSISRV_SecAtomicStop();
+}
+/*--------*/
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalFaultABReinit(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalFaultABReinit(boolean value)
+{
+   uint16 valueComp1;
+   uint16 valueComp2;
+
+   VSISRV_SecAtomicStart0();
+   if (value != 0)
+   {
+      VSISRV_SecAtomicStart1();
+      VSISRV_AutSigEmergencySwDelay(VSISRV_u16AutSigEmergencySwDelayC, value);
+      VSISRV_SecAtomicStop();
+      VSISRV_SecAtomicStart1();
+      valueComp1 = (uint16)(~VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Data16);
+      VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Data16 = valueComp1;
+      VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultA.Data16 = valueComp1;
+      VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultA.Data16 = valueComp1;
+      VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultA.Data16 = valueComp1;
+      VSISRV_SecAtomicStop();
+      VSISRV_SecAtomicStart1();
+      valueComp2 = (uint16)(~VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Data16);
+      VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Data16 = valueComp2;
+      VsisrvIpduTx.Data.TxA.IdMx[1].Signal.FaultB.Data16 = valueComp2;
+      VsisrvIpduTx.Data.TxA.IdMx[2].Signal.FaultB.Data16 = valueComp2;
+      VsisrvIpduTx.Data.TxA.IdMx[3].Signal.FaultB.Data16 = valueComp2;
+      VSISRV_SecAtomicStop();
+   }
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalPwmMinDutyCycle(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalPwmMinDutyCycle(uint16 value)
+{
+   uint16 valueScal;
+   VSISRV_SecAtomicStart0();
+
+   valueScal = VSISRV_ScalingGroup1(value);
+
+   VSISRV_SecAtomicStart1();
+   VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M0PwmMinDutyCycle_MSB8 = (uint16)(valueScal >> 4);
+   VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M0PwmMinDutyCycle_LSB4 = (uint16)(valueScal);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalPwmMaxDutyCycle(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalPwmMaxDutyCycle(uint16 value)
+{
+   uint16 valueScal;
+   VSISRV_SecAtomicStart0();
+
+   valueScal = VSISRV_ScalingGroup1(value);
+
+   VSISRV_SecAtomicStart1();
+   VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M0PwmMaxDutyCycle_MSB8 = (uint16)(valueScal >> 4);
+   VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M0PwmMaxDutyCycle_LSB4 = (uint16)(valueScal);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalM0Id2Spare06To11(uint8 value);
+LOCAL_INLINE void VSISRV_SetSignalM0Id2Spare06To11(uint8 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M0Id2Spare06To11 = (uint16)value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalPwrSupDrvInh(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalPwrSupDrvInh(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.PwrSupDrvInh = (uint16)value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalPwrSupHbrInh(boolean value);
+LOCAL_INLINE void VSISRV_SetSignalPwrSupHbrInh(boolean value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.PwrSupHbrInh = (uint16)value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalM0IFilAverage(uint8 value);
+LOCAL_INLINE void VSISRV_SetSignalM0IFilAverage(uint8 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M0IFilAverage = (uint16)value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalM0VFilAverage(uint8 value);
+LOCAL_INLINE void VSISRV_SetSignalM0VFilAverage(uint8 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M0VFilAverage = (uint16)value;
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalDebugL(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalDebugL(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M0DebugL_MSB8 = (uint16)(value >> 4);
+   VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M0DebugL_LSB4 = (uint16)(value);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalM1Id0Spare(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalM1Id0Spare(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M1Id0Spare_MSB4 = (uint16)(value >> 8);
+   VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M1Id0Spare_LSB8 = (uint32)(value);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalM1Id1Spare(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalM1Id1Spare(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M1Id1Spare_MSB4 = (uint16)(value >> 8);
+   VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M1Id1Spare_LSB8 = (uint32)(value);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalM1Id2Spare(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalM1Id2Spare(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M1Id2Spare_MSB4 = (uint16)(value >> 8);
+   VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M1Id2Spare_LSB8 = (uint32)(value);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalDebugH(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalDebugH(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M1DebugH_MSB4 = (uint16)(value >> 8);
+   VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M1DebugH_LSB8 = (uint32)(value);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetAtomicDebugLDebugH(uint16 valueDebugL, uint16 valueDebugH);
+LOCAL_INLINE void VSISRV_SetAtomicDebugLDebugH(uint16 valueDebugL, uint16 valueDebugH)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M0DebugL_MSB8 = (uint16)(valueDebugL >> 4);
+   VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M0DebugL_LSB4 = (uint16)(valueDebugL);
+   VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M1DebugH_MSB4 = (uint16)(valueDebugH >> 8);
+   VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M1DebugH_LSB8 = (uint32)(valueDebugH);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+/*--------*/
+/* Calib  */
+/*--------*/
+LOCAL_INLINE void VSISRV_SetSignalPwmFreq(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalPwmFreq(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M2PwmFreq_MSB8 = (uint16)(value >> 4);
+   VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M2PwmFreq_LSB4 = (uint32)(value);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalPwmInitValVl(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalPwmInitValVl(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M2PwmInitValVl_MSB8 = (uint16)(value >> 4);
+   VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M2PwmInitValVl_LSB4 = (uint32)(value);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalOverCurThBat(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalOverCurThBat(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M2OverCurThBat_MSB8 = (uint16)(value >> 4);
+   VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M2OverCurThBat_LSB4 = (uint32)(value);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalOverCurThMot(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalOverCurThMot(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M2OverCurThMot_MSB8 = (uint16)(value >> 4);
+   VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M2OverCurThMot_LSB4 = (uint32)(value);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalPwmDeadtime(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalPwmDeadtime(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M3PwmDeadtime_MSB4 = (uint16)(value >> 8);
+   VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M3PwmDeadtime_LSB8 = (uint32)(value);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalPwmInitValVr(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalPwmInitValVr(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M3PwmInitValVr_MSB4 = (uint16)(value >> 8);
+   VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M3PwmInitValVr_LSB8 = (uint32)(value);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalOverVoltVbatTh(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalOverVoltVbatTh(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M3OverVoltVbatTh_MSB4 = (uint16)(value >> 8);
+   VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M3OverVoltVbatTh_LSB8 = (uint32)(value);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalActiveDisDur(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalActiveDisDur(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M3ActiveDisDur_MSB4 = (uint16)(value >> 8);
+   VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M3ActiveDisDur_LSB8 = (uint32)(value);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalM4Id0Spare(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalM4Id0Spare(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M4Id0Spare_MSB8 = (uint16)(value >> 4);
+   VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M4Id0Spare_LSB4 = (uint32)(value);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalPwmInitValWl(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalPwmInitValWl(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M4PwmInitValWl_MSB8 = (uint16)(value >> 4);
+   VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M4PwmInitValWl_LSB4 = (uint32)(value);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalM4Id2Spare(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalM4Id2Spare(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M4Id2Spare_MSB8 = (uint16)(value >> 4);
+   VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M4Id2Spare_LSB4 = (uint32)(value);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalSynchroDelay(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalSynchroDelay(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M4SynchroDelay_MSB8 = (uint16)(value >> 4);
+   VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M4SynchroDelay_LSB4 = (uint32)(value);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalPwmInitValUl(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalPwmInitValUl(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M5PwmInitValUl_MSB4 = (uint16)(value >> 8);
+   VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M5PwmInitValUl_LSB8 = (uint32)(value);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalPwmInitValWr(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalPwmInitValWr(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M5PwmInitValWr_MSB4 = (uint16)(value >> 8);
+   VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M5PwmInitValWr_LSB8 = (uint32)(value);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalM5Id2Spare(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalM5Id2Spare(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M5Id2Spare_MSB4 = (uint16)(value >> 8);
+   VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M5Id2Spare_LSB8 = (uint32)(value);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalM5Id3Spare(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalM5Id3Spare(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M5Id3Spare_MSB4 = (uint16)(value >> 8);
+   VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M5Id3Spare_LSB8 = (uint32)(value);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalPwmInitValUr(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalPwmInitValUr(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M6PwmInitValUr_MSB8 = (uint32)(value >> 4);
+   VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M6PwmInitValUr_LSB4 = (uint16)(value);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalM6Id1Spare(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalM6Id1Spare(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M6Id1Spare_MSB8 = (uint32)(value >> 4);
+   VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M6Id1Spare_LSB4 = (uint16)(value);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalM6Id2Spare(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalM6Id2Spare(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M6Id2Spare_MSB8 = (uint32)(value >> 4);
+   VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M6Id2Spare_LSB4 = (uint16)(value);
+   VSISRV_SecAtomicStop();
+}
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalM6Id3Spare(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalM6Id3Spare(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M6Id3Spare_MSB8 = (uint32)(value >> 4);
+   VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M6Id3Spare_LSB4 = (uint16)(value);
+   VSISRV_SecAtomicStop();
+}
+/*--------*/
+/*----------------*/
+LOCAL_INLINE void VSISRV_SetSignalDebug(uint16 value);
+LOCAL_INLINE void VSISRV_SetSignalDebug(uint16 value)
+{
+   VSISRV_SecAtomicStart();
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.Debug_MSB4 = (uint16)(value >> 8);
+   VsisrvIpduTx.Data.TxA.IdMx[0].Signal.Debug_LSB8 = (uint16)(value);
+
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.Debug_MSB4 = (uint16)(value >> 8);
+   VsisrvIpduTx.Data.TxA.IdMx[1].Signal.Debug_LSB8 = (uint16)(value);
+
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.Debug_MSB4 = (uint16)(value >> 8);
+   VsisrvIpduTx.Data.TxA.IdMx[2].Signal.Debug_LSB8 = (uint16)(value);
+
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.Debug_MSB4 = (uint16)(value >> 8);
+   VsisrvIpduTx.Data.TxA.IdMx[3].Signal.Debug_LSB8 = (uint16)(value);
+   VSISRV_SecAtomicStop();
+}
+
+/*------------------------------------*/
+/* Set Ipdu Rx                        */
+/*------------------------------------*/
+/*----------------*/
+/* Set Ipdu RxA   */
+/*----------------*/
+/*----------------*/
+/* Set Ipdu RxS   */
+/*----------------*/
+
+/*----------------------------------------------------------------------------*/
+/* MACRO FUNCTIONS Get Ipdu                                                   */
+/*----------------------------------------------------------------------------*/
+/*------------------------------------*/
+/* Get Ipdu Rx                        */
+/*------------------------------------*/
+/*----------------*/
+/* Get Ipdu RxA   */
+/*----------------*/
+/*----------------*/
+LOCAL_INLINE uint8 VSISRV_GetSignalStateResPWM_RatioFreqRes(void);
+LOCAL_INLINE uint8 VSISRV_GetSignalStateResPWM_RatioFreqRes(void)
+{
+   return(VsisrvIpduRx.Data.RxA.Id.MxA.Signal.StateRes.Field.PWM_RatioFreqRes);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalStateResCurAcq(void);
+LOCAL_INLINE boolean VSISRV_GetSignalStateResCurAcq(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.StateRes.Field.CurAcq);
+}
+/*----------------*/
+LOCAL_INLINE uint8 VSISRV_GetSignalStateResSwitchTypeRes(void);
+LOCAL_INLINE uint8 VSISRV_GetSignalStateResSwitchTypeRes(void)
+{
+   return(VsisrvIpduRx.Data.RxA.Id.MxA.Signal.StateRes.Field.SwitchTypeRes);
+}
+/*----------------*/
+LOCAL_INLINE uint8 VSISRV_GetSignalStateResModeRes(void);
+LOCAL_INLINE uint8 VSISRV_GetSignalStateResModeRes(void)
+{
+   return(VsisrvIpduRx.Data.RxA.Id.MxA.Signal.StateRes.Field.ModeRes);
+}
+/*----------------*/
+/*--------*/
+/* FaultA */
+/*--------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalFaultA(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalFaultA(void)
+{
+   return(VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Data16);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultAEmergencyStop(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultAEmergencyStop(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.EmergencyStop);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultAPwrSupLs(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultAPwrSupLs(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.PwrSupLs);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultAPwrSupHs(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultAPwrSupHs(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.PwrSupHs);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultAPwrSupMul(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultAPwrSupMul(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.PwrSupMul);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultAIgbtL(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultAIgbtL(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.IgbtL);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultAIgbtH(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultAIgbtH(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.IgbtH);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultAActiveDisIn(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultAActiveDisIn(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.ActiveDisIn);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultAActiveDisAc(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultAActiveDisAc(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.ActiveDisAc);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultASpare07(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultASpare07(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare07);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultASpare06(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultASpare06(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare06);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultASpare05(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultASpare05(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare05);       
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultASpare04(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultASpare04(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare04);       
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultASpare03(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultASpare03(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare03);       
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultASpare02(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultASpare02(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare02);       
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultASpare01(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultASpare01(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare01);       
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultALossComSpi(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultALossComSpi(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.LossComSpi);       
+}
+/*--------*/
+/*----------------*/
+/*--------*/
+/* FaultB */
+/*--------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalFaultB(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalFaultB(void)
+{
+   return(VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Data16);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBOverCurBat(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBOverCurBat(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverCurBat);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBOverTempCtrlBd(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBOverTempCtrlBd(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverTempCtrlBd);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBOverTempIgbt(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBOverTempIgbt(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverTempIgbt);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBOverTempDrvBd(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBOverTempDrvBd(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverTempDrvBd);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBUnderVoltVBat(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBUnderVoltVBat(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.UnderVoltVBat);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBOverVoltVBat(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBOverVoltVBat(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverVoltVBat);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBIgbtMidPointU(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBIgbtMidPointU(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.IgbtMidPointU);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBIgbtMidPointV(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBIgbtMidPointV(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.IgbtMidPointV);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBIgbtMidPointW(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBIgbtMidPointW(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.IgbtMidPointW);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBWdgCpld(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBWdgCpld(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.WdgCpld);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBOverUnderCurWr(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBOverUnderCurWr(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurWr);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBOverUnderCurWl(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBOverUnderCurWl(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurWl);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBOverUnderCurVr(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBOverUnderCurVr(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurVr);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBOverUnderCurVl(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBOverUnderCurVl(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurVl);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBOverUnderCurUr(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBOverUnderCurUr(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurUr);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBOverUnderCurUl(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultBOverUnderCurUl(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurUl);
+}
+/*--------*/
+/*----------------*/
+/*--------*/
+/* FaultC */
+/*--------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalFaultC(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalFaultC(void)
+{
+   return(VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Data16);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCSpare15(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCSpare15(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare15);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCSpare14(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCSpare14(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare14);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCSpare13(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCSpare13(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare13);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCSpare12(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCSpare12(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare12);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCSpare11(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCSpare11(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare11);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCSpare10(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCSpare10(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare10);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCSpare09(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCSpare09(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare09);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCSpare08(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCSpare08(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare08);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCSpare07(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCSpare07(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare07);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCSpare06(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCSpare06(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare06);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCSpare05(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCSpare05(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare05);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCLowSpeedReach(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCLowSpeedReach(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.LowSpeedReach);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCSpare03(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCSpare03(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare03);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCPwmClampFlag(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCPwmClampFlag(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.PwmClampFlag);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCPwmParamFlag(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCPwmParamFlag(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.PwmParamFlag);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCSpare00(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFaultCSpare00(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare00);
+}
+/*--------*/
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalDebug64To75(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalDebug64To75(void)
+{
+   uint16 localValue;
+   VSISRV_SecAtomicStart();
+   localValue = 
+   (uint16)(((uint16)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.Debug64To75_MSB8 << 4)
+           | (uint16)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.Debug64To75_LSB4
+           );
+   VSISRV_SecAtomicStop();
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTempIgbt(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTempIgbt(void)
+{
+   uint16 localValue;
+   VSISRV_SecAtomicStart();
+   localValue = 
+   (uint16)(((uint16)VsisrvIpduRx.Data.RxA.Id.Mx0.Signal.TempIgbt_MSB4 << 8)
+           | (uint16)VsisrvIpduRx.Data.RxA.Id.Mx0.Signal.TempIgbt_LSB8
+           );
+   VSISRV_SecAtomicStop();
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalDcLinkCtrlBd(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalDcLinkCtrlBd(void)
+{
+   uint16 localValue;
+   VSISRV_SecAtomicStart();
+   localValue = 
+   (uint16)(((uint16)VsisrvIpduRx.Data.RxA.Id.Mx1.Signal.DcLinkCtrlBd_MSB4 << 8)
+           | (uint16)VsisrvIpduRx.Data.RxA.Id.Mx1.Signal.DcLinkCtrlBd_LSB8
+           );
+   VSISRV_SecAtomicStop();
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTempCtrlBd(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTempCtrlBd(void)
+{
+   uint16 localValue;
+   VSISRV_SecAtomicStart();
+   localValue = 
+   (uint16)(((uint16)VsisrvIpduRx.Data.RxA.Id.Mx2.Signal.TempCtrlBd_MSB4 << 8)
+           | (uint16)VsisrvIpduRx.Data.RxA.Id.Mx2.Signal.TempCtrlBd_LSB8
+           );
+   VSISRV_SecAtomicStop();
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTempDrvBd(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTempDrvBd(void)
+{
+   uint16 localValue;
+   VSISRV_SecAtomicStart();
+   localValue = 
+   (uint16)(((uint16)VsisrvIpduRx.Data.RxA.Id.Mx3.Signal.TempDrvBd_LSB8 << 4)
+           | (uint16)VsisrvIpduRx.Data.RxA.Id.Mx3.Signal.TempDrvBd_MSB4
+           );
+   VSISRV_SecAtomicStop();
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalMeasCurBat(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalMeasCurBat(void)
+{
+   uint16 localValue;
+   VSISRV_SecAtomicStart();
+   localValue = 
+   (uint16)(((uint16)VsisrvIpduRx.Data.RxA.Id.Mx0.Signal.MeasCurBat_MSB8 << 4)
+           | (uint16)VsisrvIpduRx.Data.RxA.Id.Mx0.Signal.MeasCurBat_LSB4
+           );
+   VSISRV_SecAtomicStop();
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalDcLinkDrvBd(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalDcLinkDrvBd(void)
+{
+   uint16 localValue;
+   VSISRV_SecAtomicStart();
+   localValue = 
+   (uint16)(((uint16)VsisrvIpduRx.Data.RxA.Id.Mx1.Signal.DcLinkDrvBd_MSB8 << 4)
+           | (uint16)VsisrvIpduRx.Data.RxA.Id.Mx1.Signal.DcLinkDrvBd_LSB4
+           );
+   VSISRV_SecAtomicStop();
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalM1Id2VFpgaL(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalM1Id2VFpgaL(void)
+{
+   uint16 localValue;
+   VSISRV_SecAtomicStart();
+   localValue = 
+   (uint16)(((uint16)VsisrvIpduRx.Data.RxA.Id.Mx2.Signal.M1VFpgaL_MSB8 << 4)
+           | (uint16)VsisrvIpduRx.Data.RxA.Id.Mx2.Signal.M1VFpgaL_LSB4
+           );
+   VSISRV_SecAtomicStop();
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalM1Id3VFpgaH(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalM1Id3VFpgaH(void)
+{
+   uint16 localValue;
+   VSISRV_SecAtomicStart();
+   localValue = 
+   (uint16)(((uint16)VsisrvIpduRx.Data.RxA.Id.Mx3.Signal.M1VFpgaH_MSB8 << 4)
+           | (uint16)VsisrvIpduRx.Data.RxA.Id.Mx3.Signal.M1VFpgaH_LSB4
+           );
+   VSISRV_SecAtomicStop();
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalDebug100To111(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalDebug100To111(void)
+{
+   uint16 localValue;
+   VSISRV_SecAtomicStart();
+   localValue = 
+   (uint16)(((uint16)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.Debug100To111_MSB4 << 8)
+           | (uint16)VsisrvIpduRx.Data.RxA.Id.MxA.Signal.Debug100To111_LSB8
+           );
+   VSISRV_SecAtomicStop();
+   return(localValue);
+}
+/*----------------*/
+/* Get Ipdu RxS   */
+/*----------------*/
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalHalfCoilCur_Ul(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalHalfCoilCur_Ul(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue = 
+   (uint16)(((uint16)VsisrvIpduRx.Data.RxS.Signal.HalfCoilCur_Vl_LSB4 << 8)
+           | (uint16)VsisrvIpduRx.Data.RxS.Signal.HalfCoilCur_Vr_LSB8
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalHalfCoilCur_Ur(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalHalfCoilCur_Ur(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue = 
+   (uint16)(((uint16)VsisrvIpduRx.Data.RxS.Signal.GridVoltV_MSB4 << 8)
+           | (uint16)VsisrvIpduRx.Data.RxS.Signal.GridVoltU_MSB8
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalHalfCoilCur_Vl(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalHalfCoilCur_Vl(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue = 
+   (uint16)(((uint16)VsisrvIpduRx.Data.RxS.Signal.HalfCoilCur_Wl_MSB8 << 4)
+           | (uint16)VsisrvIpduRx.Data.RxS.Signal.HalfCoilCur_Wr_MSB4
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalHalfCoilCur_Vr(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalHalfCoilCur_Vr(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue = 
+   (uint16)(((uint16)VsisrvIpduRx.Data.RxS.Signal.GridVoltV_LSB8 << 4)
+           | (uint16)VsisrvIpduRx.Data.RxS.Signal.GridVoltU_LSB4
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalHalfCoilCur_Wl(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalHalfCoilCur_Wl(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue = 
+   (uint16)(((uint16)VsisrvIpduRx.Data.RxS.Signal.HalfCoilCur_Wl_LSB4 << 8)
+           | (uint16)VsisrvIpduRx.Data.RxS.Signal.HalfCoilCur_Wr_LSB8
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalHalfCoilCur_Wr(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalHalfCoilCur_Wr(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue = 
+   (uint16)(((uint16)VsisrvIpduRx.Data.RxS.Signal.GridVoltW_MSB8 << 4)
+           | (uint16)VsisrvIpduRx.Data.RxS.Signal.GridVoltW_LSB4
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalGridVoltU(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalGridVoltU(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue = 
+   (uint16)(((uint16)VsisrvIpduRx.Data.RxS.Signal.HalfCoilCur_Ul_MSB8 << 4)
+           | (uint16)VsisrvIpduRx.Data.RxS.Signal.HalfCoilCur_Ur_MSB4
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalGridVoltV(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalGridVoltV(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue = 
+   (uint16)(((uint16)VsisrvIpduRx.Data.RxS.Signal.HalfCoilCur_Ur_LSB8 << 4)
+           | (uint16)VsisrvIpduRx.Data.RxS.Signal.HalfCoilCur_Ul_LSB4
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalGridVoltW(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalGridVoltW(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue = 
+   (uint16)(((uint16)VsisrvIpduRx.Data.RxS.Signal.HalfCoilCur_Vl_MSB8 << 4)
+           | (uint16)VsisrvIpduRx.Data.RxS.Signal.HalfCoilCur_Vr_MSB4
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFS_TXA(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFS_TXA(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxS.Signal.FS_TXA);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFS_TXS(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFS_TXS(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxS.Signal.FS_TXS);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFS_SOL(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFS_SOL(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxS.Signal.FS_SOL);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalFS_SOE(void);
+LOCAL_INLINE boolean VSISRV_GetSignalFS_SOE(void)
+{
+   return((boolean)VsisrvIpduRx.Data.RxS.Signal.FS_SOE);
+}
+
+/*------------------------------------*/
+/* Get Ipdu Tx                        */
+/*------------------------------------*/
+/*----------------*/
+/* Get Ipdu TxS   */
+/*----------------*/
+/*--------*/
+/* Scal   */
+/*--------*/
+/*--------*/
+/* MLI    */
+/*--------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPWM_Ul(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPWM_Ul(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxS.Signal.PWM_Ul_MSB8 << 4)
+           | (uint16)VsisrvIpduTx.Data.TxS.Signal.PWM_Ul_LSB4
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPWM_Ur(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPWM_Ur(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxS.Signal.PWM_Ur_MSB4 << 8)
+           | (uint16)VsisrvIpduTx.Data.TxS.Signal.PWM_Ur_LSB8
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPWM_Vl(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPWM_Vl(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxS.Signal.PWM_Vl_MSB8 << 4)
+           | (uint16)VsisrvIpduTx.Data.TxS.Signal.PWM_Vl_LSB4
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPWM_Vr(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPWM_Vr(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxS.Signal.PWM_Vr_MSB4 << 8)
+           | (uint16)VsisrvIpduTx.Data.TxS.Signal.PWM_Vr_LSB8
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPWM_Wl(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPWM_Wl(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxS.Signal.PWM_Wl_MSB8 << 4)
+           | (uint16)VsisrvIpduTx.Data.TxS.Signal.PWM_Wl_LSB4
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPWM_Wr(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPWM_Wr(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxS.Signal.PWM_Wr_MSB4 << 8)
+           | (uint16)VsisrvIpduTx.Data.TxS.Signal.PWM_Wr_LSB8
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*--------*/
+/* SVM    */
+/*--------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxSVM_V1(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxSVM_V1(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue = (uint16)(VsisrvIpduTx.Data.TxS.SignalSVM.SVM_V1);
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxSVM_V2(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxSVM_V2(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxS.SignalSVM.SVM_V2_MSB2 << 4)
+           | (uint16)VsisrvIpduTx.Data.TxS.SignalSVM.SVM_V2_LSB4
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxSVM_V3(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxSVM_V3(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxS.SignalSVM.SVM_V3_MSB4 << 2)
+           | (uint16)VsisrvIpduTx.Data.TxS.SignalSVM.SVM_V3_LSB2
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxSVM_V4(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxSVM_V4(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue = (uint16)(VsisrvIpduTx.Data.TxS.SignalSVM.SVM_V4);
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxSVM_AT1(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxSVM_AT1(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxS.SignalSVM.SVM_AT1_MSB8 << 4)
+           | (uint16)VsisrvIpduTx.Data.TxS.SignalSVM.SVM_AT1_LSB4
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxSVM_AT2(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxSVM_AT2(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxS.SignalSVM.SVM_AT2_MSB4 << 8)
+           | (uint16)VsisrvIpduTx.Data.TxS.SignalSVM.SVM_AT2_LSB8
+           );
+
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxSVM_AT3(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxSVM_AT3(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxS.SignalSVM.SVM_AT3_MSB8 << 4)
+           | (uint16)VsisrvIpduTx.Data.TxS.SignalSVM.SVM_AT3_LSB4
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxSVM_AT4(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxSVM_AT4(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxS.SignalSVM.SVM_AT4_MSB4 << 8)
+           | (uint16)VsisrvIpduTx.Data.TxS.SignalSVM.SVM_AT4_LSB8
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPwmFreqDyn(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPwmFreqDyn(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxS.Signal.PwmFreqDyn_MSB8 << 6)
+           | (uint16)VsisrvIpduTx.Data.TxS.Signal.PwmFreqDyn_LSB6
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalTxPWM_UVW_ON(void);
+LOCAL_INLINE boolean VSISRV_GetSignalTxPWM_UVW_ON(void)
+{
+   boolean localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue = (boolean)(VsisrvIpduTx.Data.TxS.Signal.PWM_UVW_ON);
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*--------*/
+LOCAL_INLINE uint8 VSISRV_GetSignalTxPWM_RatioFreq(void);
+LOCAL_INLINE uint8 VSISRV_GetSignalTxPWM_RatioFreq(void)
+{
+   uint8 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue = (uint8)(VsisrvIpduTx.Data.TxS.Signal.PWM_RatioFreq);
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+/* Get Ipdu TxA   */
+/*----------------*/
+/*----------------*/
+LOCAL_INLINE boolean VSISRV_GetSignalTxEmergencySw(void);
+LOCAL_INLINE boolean VSISRV_GetSignalTxEmergencySw(void)
+{
+   boolean localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue = (boolean)(VsisrvIpduTx.Data.TxA.IdMx[0].Signal.StateReq.Field.EmergencySw);
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint8 VSISRV_GetSignalTxSCSpeedReady(void);
+LOCAL_INLINE uint8 VSISRV_GetSignalTxSCSpeedReady(void)
+{
+   uint8 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue = (uint8)(VsisrvIpduTx.Data.TxA.IdMx[0].Signal.StateReq.Field.SCSpeedReady);
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint8 VSISRV_GetSignalTxOperation(void);
+LOCAL_INLINE uint8 VSISRV_GetSignalTxOperation(void)
+{
+   uint8 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue = (uint8)(VsisrvIpduTx.Data.TxA.IdMx[0].Signal.StateReq.Field.Operation);
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint8 VSISRV_GetSignalTxSwitchType(void);
+LOCAL_INLINE uint8 VSISRV_GetSignalTxSwitchType(void)
+{
+   uint8 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue = (uint8)(VsisrvIpduTx.Data.TxA.IdMx[0].Signal.StateReq.Field.SwitchType);
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint8 VSISRV_GetSignalTxModeReq(void);
+LOCAL_INLINE uint8 VSISRV_GetSignalTxModeReq(void)
+{
+   uint8 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue = (uint8)(VsisrvIpduTx.Data.TxA.IdMx[0].Signal.StateReq.Field.ModeReq);
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxFaultA(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxFaultA(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue = (uint16)(VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultA.Data16);
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxFaultB(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxFaultB(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue = (uint16)(VsisrvIpduTx.Data.TxA.IdMx[0].Signal.FaultB.Data16);
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+/*--------*/
+/* Scal   */
+/*--------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPwmMinDutyCycle(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPwmMinDutyCycle(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M0PwmMinDutyCycle_MSB8 << 4)
+           | (uint16)VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M0PwmMinDutyCycle_LSB4
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPwmMaxDutyCycle(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPwmMaxDutyCycle(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M0PwmMaxDutyCycle_MSB8 << 4)
+           | (uint16)VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M0PwmMaxDutyCycle_LSB4
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint8 VSISRV_GetSignalTxM0Id2Spare06To11(void);
+LOCAL_INLINE uint8 VSISRV_GetSignalTxM0Id2Spare06To11(void)
+{
+   uint8 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue = (uint8)(VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M0Id2Spare06To11);
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint8 VSISRV_GetSignalTxPwrSupDrvInh(void);
+LOCAL_INLINE uint8 VSISRV_GetSignalTxPwrSupDrvInh(void)
+{
+   boolean localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue = (boolean)(VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.PwrSupDrvInh);
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint8 VSISRV_GetSignalTxPwrSupHbrInh(void);
+LOCAL_INLINE uint8 VSISRV_GetSignalTxPwrSupHbrInh(void)
+{
+   boolean localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue = (boolean)(VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.PwrSupHbrInh);
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint8 VSISRV_GetSignalTxIFilAverage(void);
+LOCAL_INLINE uint8 VSISRV_GetSignalTxIFilAverage(void)
+{
+   uint8 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue = (uint8)(VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M0IFilAverage);
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint8 VSISRV_GetSignalTxVFilAverage(void);
+LOCAL_INLINE uint8 VSISRV_GetSignalTxVFilAverage(void)
+{
+   uint8 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue = (uint8)(VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M0VFilAverage);
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxRegulTarU(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxRegulTarU(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M1Id0Spare_MSB4 << 8)
+           | (uint16)VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M1Id0Spare_LSB8
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxRegulTarIPos(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxRegulTarIPos(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M1Id1Spare_MSB4 << 8)
+           | (uint16)VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M1Id1Spare_LSB8
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxRegulTarINeg(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxRegulTarINeg(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M1Id2Spare_MSB4 << 8)
+           | (uint16)VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M1Id2Spare_LSB8
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*--------*/
+/*----------------*/
+/*--------*/
+/* Calib  */
+/*--------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPwmFreq(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPwmFreq(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M2PwmFreq_MSB8 << 4)
+           | (uint16)VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M2PwmFreq_LSB4
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPwmInitValVl(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPwmInitValVl(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M2PwmInitValVl_MSB8 << 4)
+           | (uint16)VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M2PwmInitValVl_LSB4
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxOverCurThBat(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxOverCurThBat(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M2OverCurThBat_MSB8 << 4)
+           | (uint16)VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M2OverCurThBat_LSB4
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxOverCurThMot(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxOverCurThMot(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M2OverCurThMot_MSB8 << 4)
+           | (uint16)VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M2OverCurThMot_LSB4
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPwmDeadtime(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPwmDeadtime(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M3PwmDeadtime_MSB4 << 8)
+           | (uint16)VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M3PwmDeadtime_LSB8
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPwmInitValVr(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPwmInitValVr(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M3PwmInitValVr_MSB4 << 8)
+           | (uint16)VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M3PwmInitValVr_LSB8
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxOverVoltVbatTh(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxOverVoltVbatTh(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M3OverVoltVbatTh_MSB4 << 8)
+           | (uint16)VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M3OverVoltVbatTh_LSB8
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxActiveDisDur(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxActiveDisDur(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M3ActiveDisDur_MSB4 << 8)
+           | (uint16)VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M3ActiveDisDur_LSB8
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxM4Id0Spare(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxM4Id0Spare(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M4Id0Spare_MSB8 << 4)
+           | (uint16)VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M4Id0Spare_LSB4
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPwmInitValWl(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPwmInitValWl(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M4PwmInitValWl_MSB8 << 4)
+           | (uint16)VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M4PwmInitValWl_LSB4
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxM4Id2Spare(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxM4Id2Spare(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M4Id2Spare_MSB8 << 4)
+           | (uint16)VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M4Id2Spare_LSB4
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxSynchroDelay(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxSynchroDelay(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M4SynchroDelay_MSB8 << 4)
+           | (uint16)VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M4SynchroDelay_LSB4
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPwmInitValUl(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPwmInitValUl(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M5PwmInitValUl_MSB4 << 8)
+           | (uint16)VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M5PwmInitValUl_LSB8
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPwmInitValWr(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPwmInitValWr(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M5PwmInitValWr_MSB4 << 8)
+           | (uint16)VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M5PwmInitValWr_LSB8
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxM5Id2Spare(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxM5Id2Spare(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M5Id2Spare_MSB4 << 8)
+           | (uint16)VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M5Id2Spare_LSB8
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxM5Id3Spare(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxM5Id3Spare(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M5Id3Spare_MSB4 << 8)
+           | (uint16)VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M5Id3Spare_LSB8
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPwmInitValUr(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxPwmInitValUr(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M6PwmInitValUr_MSB8 << 4)
+           | (uint16)VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.M6PwmInitValUr_LSB4
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxM6Id1Spare(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxM6Id1Spare(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M6Id1Spare_MSB8 << 4)
+           | (uint16)VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.M6Id1Spare_LSB4
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxM6Id2Spare(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxM6Id2Spare(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M6Id2Spare_MSB8 << 4)
+           | (uint16)VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.M6Id2Spare_LSB4
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*----------------*/
+LOCAL_INLINE uint16 VSISRV_GetSignalTxM6Id3Spare(void);
+LOCAL_INLINE uint16 VSISRV_GetSignalTxM6Id3Spare(void)
+{
+   uint16 localValue;
+   /* VSISRV_SecAtomicStart(); */
+   localValue =
+   (uint16)(((uint16)VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M6Id3Spare_MSB8 << 4)
+           | (uint16)VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.M6Id3Spare_LSB4
+           );
+   /* VSISRV_SecAtomicStop(); */
+   return(localValue);
+}
+/*--------*/
+/*----------------*/
+
+/******************************************************************************/
+/* FUNCTIONS DECLARATION                                                      */
+/******************************************************************************/
+void VSISRV_vidInit(void);
+void VSISRV_vidSetFrameTx(void);
+void VSISRV_vidGetFrameRx(void);
+
+void VSISRV_vidSetModeReq(uint16 VsiState);
+uint16 VSISRV_u16GetModeReq(void);
+
+boolean VSISRV_bGetStatusParamDl(void);
+boolean VSISRV_bGetStatusModeReqRes(void);
+
+void VSISRV_vidAutSigEmergencySwMgr(void);
+
+#endif  /* VSISRV_E_H */
+
+/*-------------------------------- end of file -------------------------------*/
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/include/VsiSrv_typ.h b/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/include/VsiSrv_typ.h
new file mode 100644
index 000000000..ad8950e63
--- /dev/null
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/include/VsiSrv_typ.h
@@ -0,0 +1,3646 @@
+/******************************************************************************/
+/*                                                                            */
+/* !Layer           : BSW                                                     */
+/*                                                                            */
+/* !Component       : VSI                                                     */
+/* !Description     : VSI control                                             */
+/*                                                                            */
+/* !Module          : VSISRV                                                  */
+/* !Description     : Component API\'s (function declarations and macros)      */
+/*                                                                            */
+/* !File            : VSISRV_TYP.H                                            */
+/*                                                                            */
+/* !Scope           : Public                                                  */
+/*                                                                            */
+/* !Target          : All                                                     */
+/*                                                                            */
+/* !Vendor          : Valeo                                                   */
+/*                                                                            */
+/* Coding language  : C                                                       */
+/*                                                                            */
+/* COPYRIGHT 2010 VALEO                                                       */
+/* all rights reserved                                                        */
+/*                                                                            */
+/******************************************************************************/
+/* PVCS Information                                                           */
+/* $Archive::                                                                $*/
+/* $Revision::             $$Author::   ogarot        $$Date::               $*/
+/******************************************************************************/
+/* Dimension Informations
+ * %PCMS_HEADER_SUBSTITUTION_START:%
+ * The PID has this format: <Product ID>:<Item ID>.<Variant>-<Item Type>;<Revision>
+ * %PID:%
+ * %PCMS_HEADER_SUBSTITUTION_END:%
+ ******************************************************************************/
+
+#ifndef VSISRV_TYP_H
+#define VSISRV_TYP_H
+
+#include "Std_Types.h"
+
+/******************************************************************************/
+/* TYPES                                                                      */
+/******************************************************************************/
+
+/******************************************************************************/
+/* VSI Frames structures                                                      */
+/******************************************************************************/
+
+/*------------------------------------*/
+/* VSI Frame TxS structure            */
+/*------------------------------------*/
+typedef union
+{
+   uint32 Data32[3];
+   uint16 Data16[6];
+   uint8  Data8[12];
+   struct
+   {
+      uint8 Data8[8];
+      uint8 Ctrl;
+      uint8 dummy[3];
+   }Signal;
+}VsisrvFrameTxSType;
+
+/*------------------------------------*/
+/* VSI Frame TxA structure            */
+/*------------------------------------*/
+typedef union
+{
+   uint32 Data32[5];
+   uint16 Data16[10];
+   uint8  Data8[20];
+   struct
+   {
+      uint8 Data8[16];
+      uint16 Ctrl;
+      uint16 Id;
+   }Signal;
+}VsisrvFrameTxAType;
+
+/*------------------------------------*/
+/* VSI Frame RxA structure            */
+/*------------------------------------*/
+typedef union
+{
+   uint32 Data32[4];
+   uint16 Data16[8];
+   uint8  Data8[16];
+   struct
+   {
+      uint8 Data8[12];//96 bit
+      uint16 Ctrl;
+      uint16 Id;//dummy
+
+#if 0
+      uint8 Id;
+      uint8 Data8[13];
+      uint16 Ctrl;
+
+#endif
+
+   }Signal;
+}VsisrvFrameRxAType;
+
+/*------------------------------------*/
+/* VSI Frame RxS structure            */
+/*------------------------------------*/
+typedef union
+{
+   uint32 Data32[4];
+   uint16 Data16[8];
+   uint8  Data8[16];
+   struct
+   {
+      uint8 Data8[12];
+      uint16 Ctrl;
+      uint16 FS_SOE:1;
+      uint16 FS_SOL:1;
+      uint16 FS_TXS:1;
+      uint16 FS_TXA:1;
+      uint16 Align1_LSB4:4;
+      uint16 Align1_MSB8:8;//dummy
+#if 0
+
+      uint16 Align1_MSB8:8;
+      uint16 FS_SOE:1;
+      uint16 FS_SOL:1;
+      uint16 FS_TXS:1;
+      uint16 FS_TXA:1;
+      uint16 Align1_LSB4:4;
+      uint16 Ctrl;
+#endif
+   }Signal;
+}VsisrvFrameRxSType;
+
+/*----------------------------------------------------------------------------*/
+/* VSI Frame Tx structure                                                     */
+/*----------------------------------------------------------------------------*/
+typedef union
+{
+   uint32 Data32[8];
+   uint16 Data16[16];
+   uint8  Data8[32];
+   struct
+   {
+      VsisrvFrameTxSType TxS;
+      VsisrvFrameTxAType TxA;
+   }Data;
+}VsisrvFrameTxType;
+
+typedef struct
+{
+   uint32 Bacon;
+   VsisrvFrameTxType FrameTx;
+}VsisrvBaconFrameTxType;
+
+/*----------------------------------------------------------------------------*/
+/* VSI Frame Rx structure                                                     */
+/*----------------------------------------------------------------------------*/
+typedef union
+{
+   uint32 Data32[8];
+   uint16 Data16[16];
+   uint8  Data8[32];
+   struct
+   {
+      VsisrvFrameRxAType RxA;
+      VsisrvFrameRxSType RxS;
+   }Data;
+}VsisrvFrameRxType;
+
+/******************************************************************************/
+/* VSI IPDU structures                                                        */
+/******************************************************************************/
+
+/*----------------------------------------------------------------------------*/
+/*------------------------------------*/
+/* VSI IPDU common structures         */
+/*------------------------------------*/
+typedef struct
+   {
+   /*
+         @@ ELEMENT = LossComSpi
+         @@ STRUCTURE = VsisrvIpduFaultAFieldType
+         @@ A2L_TYPE = MEASURE
+         @@ DATA_TYPE = UWORD 0x0001
+         @@ DESCRIPTION = "LossComSpi"
+         @@ GROUP = VsiSrv
+         @@ END
+       */
+      uint16 LossComSpi:1;
+      /*
+             @@ ELEMENT = Spare01
+             @@ STRUCTURE = VsisrvIpduFaultAFieldType
+             @@ A2L_TYPE = MEASURE
+             @@ DATA_TYPE = UWORD 0x0002
+             @@ DESCRIPTION = "Spare01"
+             @@ GROUP = VsiSrv
+             @@ END
+           */
+      uint16 Spare01:1;
+      /*
+             @@ ELEMENT = Spare02
+             @@ STRUCTURE = VsisrvIpduFaultAFieldType
+             @@ A2L_TYPE = MEASURE
+             @@ DATA_TYPE = UWORD 0x0004
+             @@ DESCRIPTION = "Spare02"
+             @@ GROUP = VsiSrv
+             @@ END
+           */
+      uint16 Spare02:1;
+      /*
+             @@ ELEMENT = Spare03
+             @@ STRUCTURE = VsisrvIpduFaultAFieldType
+             @@ A2L_TYPE = MEASURE
+             @@ DATA_TYPE = UWORD 0x0008
+             @@ DESCRIPTION = "Spare03"
+             @@ GROUP = VsiSrv
+             @@ END
+        */
+      uint16 Spare03:1;
+      /*
+             @@ ELEMENT = Spare04
+             @@ STRUCTURE = VsisrvIpduFaultAFieldType
+             @@ A2L_TYPE = MEASURE
+             @@ DATA_TYPE = UWORD 0x0010
+             @@ DESCRIPTION = "Spare04"
+             @@ GROUP = VsiSrv
+             @@ END
+           */
+      uint16 Spare04:1;
+      /*
+             @@ ELEMENT = Spare05
+             @@ STRUCTURE = VsisrvIpduFaultAFieldType
+             @@ A2L_TYPE = MEASURE
+             @@ DATA_TYPE = UWORD 0x0020
+             @@ DESCRIPTION = "Spare05"
+             @@ GROUP = VsiSrv
+             @@ END
+           */
+      uint16 Spare05:1;
+      /*
+             @@ ELEMENT = Spare06
+             @@ STRUCTURE = VsisrvIpduFaultAFieldType
+             @@ A2L_TYPE = MEASURE
+             @@ DATA_TYPE = UWORD 0x0040
+             @@ DESCRIPTION = "Spare06"
+             @@ GROUP = VsiSrv
+             @@ END
+           */
+      uint16 Spare06:1;
+      /*
+             @@ ELEMENT = Spare07
+             @@ STRUCTURE = VsisrvIpduFaultAFieldType
+             @@ A2L_TYPE = MEASURE
+             @@ DATA_TYPE = UWORD 0x0080
+             @@ DESCRIPTION = "Spare07"
+             @@ GROUP = VsiSrv
+             @@ END
+           */
+      uint16 Spare07:1;
+      /*
+             @@ ELEMENT = ActiveDisAc
+             @@ STRUCTURE = VsisrvIpduFaultAFieldType
+             @@ A2L_TYPE = MEASURE
+             @@ DATA_TYPE = UWORD 0x01
+             @@ DESCRIPTION = "ActiveDisAc"
+             @@ GROUP = VsiSrv
+             @@ END
+           */
+
+      uint16 ActiveDisAc:1;
+      /*
+             @@ ELEMENT = ActiveDisIn
+             @@ STRUCTURE = VsisrvIpduFaultAFieldType
+             @@ A2L_TYPE = MEASURE
+             @@ DATA_TYPE = UWORD 0x02
+             @@ DESCRIPTION = "ActiveDisIn"
+             @@ GROUP = VsiSrv
+             @@ END
+           */
+
+      uint16 ActiveDisIn:1;
+      /*
+             @@ ELEMENT = IgbtH
+             @@ STRUCTURE = VsisrvIpduFaultAFieldType
+             @@ A2L_TYPE = MEASURE
+             @@ DATA_TYPE = UWORD 0x04
+             @@ DESCRIPTION = "IgbtH"
+             @@ GROUP = VsiSrv
+             @@ END
+           */
+      uint16 IgbtH:1;
+      /*
+             @@ ELEMENT = IgbtL
+             @@ STRUCTURE = VsisrvIpduFaultAFieldType
+             @@ A2L_TYPE = MEASURE
+             @@ DATA_TYPE = UWORD 0x08
+             @@ DESCRIPTION = "IgbtL"
+             @@ GROUP = VsiSrv
+             @@ END
+           */
+      uint16 IgbtL:1;
+      /*
+             @@ ELEMENT = PwrSupMul
+             @@ STRUCTURE = VsisrvIpduFaultAFieldType
+             @@ A2L_TYPE = MEASURE
+             @@ DATA_TYPE = UWORD 0x10
+             @@ DESCRIPTION = "PwrSupMul"
+             @@ GROUP = VsiSrv
+             @@ END
+           */
+      uint16 PwrSupMul:1;
+      /*
+             @@ ELEMENT = PwrSupHs
+             @@ STRUCTURE = VsisrvIpduFaultAFieldType
+             @@ A2L_TYPE = MEASURE
+             @@ DATA_TYPE = UWORD 0x20
+             @@ DESCRIPTION = "PwrSupHs"
+             @@ GROUP = VsiSrv
+             @@ END
+           */
+
+      uint16 PwrSupHs:1;
+      /*
+             @@ ELEMENT = PwrSupLs
+             @@ STRUCTURE = VsisrvIpduFaultAFieldType
+             @@ A2L_TYPE = MEASURE
+             @@ DATA_TYPE = UWORD 0x40
+             @@ DESCRIPTION = "PwrSupLs"
+             @@ GROUP = VsiSrv
+             @@ END
+           */
+      uint16 PwrSupLs:1;
+      /*
+             @@ ELEMENT = EmergencyStop
+             @@ STRUCTURE = VsisrvIpduFaultAFieldType
+             @@ A2L_TYPE = MEASURE
+             @@ DATA_TYPE = UWORD 0x80
+             @@ DESCRIPTION = "EmergencyStop"
+             @@ GROUP = VsiSrv
+             @@ END
+           */
+      uint16 EmergencyStop:1;
+
+   }VsisrvIpduFaultAFieldType;
+
+/*------------------------------------*/
+/* VSI IPDU FaultA structure          */
+/*------------------------------------*/
+typedef union
+{
+   /*
+    @@ ELEMENT = Data16
+    @@ STRUCTURE = VsisrvIpduSignalFaultAType
+    @@ A2L_TYPE = MEASURE
+    @@ DATA_TYPE = UWORD
+    @@ DESCRIPTION = "Data16"
+    @@ GROUP = VsiSrv
+    @@ END
+      */
+   uint16 Data16;
+   /*
+     @@ SUB_STRUCTURE = Field
+     @@ STRUCTURE = VsisrvIpduSignalFaultAType
+     @@ DATA_TYPE = STRUCTURE VsisrvIpduFaultAFieldType
+     @@ END
+      */
+   VsisrvIpduFaultAFieldType Field;
+
+}VsisrvIpduSignalFaultAType;
+
+/*------------------------------------*/
+/* VSI IPDU FaultB structure          */
+/*------------------------------------*/
+typedef struct
+{
+   /*
+      @@ ELEMENT = OverUnderCurUr
+      @@ STRUCTURE = VsisrvIpduFaultBFieldType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = UWORD 0x01 [0 ... 1]
+      @@ DESCRIPTION = "OverUnderCurUr"
+      @@ GROUP = VsiSrv
+      @@ END
+      */
+   uint16 OverUnderCurUr:1;
+   /*
+       @@ ELEMENT = OverUnderCurUl
+       @@ STRUCTURE = VsisrvIpduFaultBFieldType
+       @@ A2L_TYPE = MEASURE
+       @@ DATA_TYPE = UWORD 0x02 [0 ... 1]
+       @@ DESCRIPTION = "OverUnderCurUl"
+       @@ GROUP = VsiSrv
+       @@ END
+       */
+   uint16 OverUnderCurUl:1;
+   /*
+   @@ ELEMENT = OverUnderCurVr
+   @@ STRUCTURE = VsisrvIpduFaultBFieldType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = UWORD 0x04 [0 ... 1]
+   @@ DESCRIPTION = "OverUnderCurVr"
+   @@ GROUP = VsiSrv
+   @@ END
+   */
+   uint16 OverUnderCurVr:1;
+   /*
+   @@ ELEMENT = OverUnderCurVl
+   @@ STRUCTURE = VsisrvIpduFaultBFieldType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = UWORD 0x08 [0 ... 1]
+   @@ DESCRIPTION = "OverUnderCurVl"
+   @@ GROUP = VsiSrv
+   @@ END
+   */
+   uint16 OverUnderCurVl:1;
+   /*
+    @@ ELEMENT = OverUnderCurWr
+    @@ STRUCTURE = VsisrvIpduFaultBFieldType
+    @@ A2L_TYPE = MEASURE
+    @@ DATA_TYPE = UWORD 0x10 [0 ... 1]
+    @@ DESCRIPTION = "OverUnderCurWr"
+    @@ GROUP = VsiSrv
+    @@ END
+    */
+   uint16 OverUnderCurWr:1;
+   /*
+    @@ ELEMENT = OverUnderCurWl
+    @@ STRUCTURE = VsisrvIpduFaultBFieldType
+    @@ A2L_TYPE = MEASURE
+    @@ DATA_TYPE = UWORD 0x20 [0 ... 1]
+    @@ DESCRIPTION = "OverUnderCurWl"
+    @@ GROUP = VsiSrv
+    @@ END
+    */
+   uint16 OverUnderCurWl:1;
+   /*
+   @@ ELEMENT = WdgCpld
+   @@ STRUCTURE = VsisrvIpduFaultBFieldType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = UWORD 0x40 [0 ... 1]
+   @@ DESCRIPTION = "WdgCpld"
+   @@ GROUP = VsiSrv
+   @@ END
+   */
+   uint16 WdgCpld:1;
+   /*
+    @@ ELEMENT = IgbtMidPointW
+    @@ STRUCTURE = VsisrvIpduFaultBFieldType
+    @@ A2L_TYPE = MEASURE
+    @@ DATA_TYPE = UWORD 0x80 [0 ... 1]
+    @@ DESCRIPTION = "IgbtMidPointW"
+    @@ GROUP = VsiSrv
+    @@ END
+    */
+   uint16 IgbtMidPointW:1;
+   /*
+   @@ ELEMENT = IgbtMidPointV
+   @@ STRUCTURE = VsisrvIpduFaultBFieldType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = UWORD 0x01 [0 ... 1]
+   @@ DESCRIPTION = "IgbtMidPointV"
+   @@ GROUP = VsiSrv
+   @@ END
+   */
+   uint16 IgbtMidPointV:1;
+   /*
+     @@ ELEMENT = IgbtMidPointU
+     @@ STRUCTURE = VsisrvIpduFaultBFieldType
+     @@ A2L_TYPE = MEASURE
+     @@ DATA_TYPE = UWORD 0x02 [0 ... 1]
+     @@ DESCRIPTION = "IgbtMidPointU"
+     @@ GROUP = VsiSrv
+     @@ END
+     */
+   uint16 IgbtMidPointU:1;
+   /*
+     @@ ELEMENT = OverVoltVBat
+     @@ STRUCTURE = VsisrvIpduFaultBFieldType
+     @@ A2L_TYPE = MEASURE
+     @@ DATA_TYPE = UWORD 0x04 [0 ... 1]
+     @@ DESCRIPTION = "OverVoltVBat"
+     @@ GROUP = VsiSrv
+     @@ END
+     */
+   uint16 OverVoltVBat:1;
+   /*
+  @@ ELEMENT = UnderVoltVBat
+  @@ STRUCTURE = VsisrvIpduFaultBFieldType
+  @@ A2L_TYPE = MEASURE
+  @@ DATA_TYPE = UWORD 0x08 [0 ... 1]
+  @@ DESCRIPTION = "UnderVoltVBat"
+  @@ GROUP = VsiSrv
+  @@ END
+  */
+   uint16 UnderVoltVBat:1;
+   /*
+  @@ ELEMENT = OverTempDrvBd
+  @@ STRUCTURE = VsisrvIpduFaultBFieldType
+  @@ A2L_TYPE = MEASURE
+  @@ DATA_TYPE = UWORD 0x10 [0 ... 1]
+  @@ DESCRIPTION = "OverTempDrvBd"
+  @@ GROUP = VsiSrv
+  @@ END
+  */
+   uint16 OverTempDrvBd:1;
+   /*
+  @@ ELEMENT = OverTempIgbt
+  @@ STRUCTURE = VsisrvIpduFaultBFieldType
+  @@ A2L_TYPE = MEASURE
+  @@ DATA_TYPE = UWORD 0x20 [0 ... 1]
+  @@ DESCRIPTION = "OverTempIgbt"
+  @@ GROUP = VsiSrv
+  @@ END
+  */
+   uint16 OverTempIgbt:1;
+   /*
+ @@ ELEMENT = OverTempCtrlBd
+ @@ STRUCTURE = VsisrvIpduFaultBFieldType
+ @@ A2L_TYPE = MEASURE
+ @@ DATA_TYPE = UWORD 0x40 [0 ... 1]
+ @@ DESCRIPTION = "OverTempCtrlBd"
+ @@ GROUP = VsiSrv
+ @@ END
+ */
+   uint16 OverTempCtrlBd:1;
+   /*
+      @@ ELEMENT = OverCurBat
+      @@ STRUCTURE = VsisrvIpduFaultBFieldType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = UWORD 0x80 [0 ... 1]
+      @@ DESCRIPTION = "OverCurBat"
+      @@ GROUP = VsiSrv
+      @@ END
+      */
+   uint16 OverCurBat:1;
+
+}VsisrvIpduFaultBFieldType;
+
+typedef union
+{
+   /*
+   @@ ELEMENT = Data16
+   @@ STRUCTURE = VsisrvIpduSignalFaultBType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = UWORD
+   @@ DESCRIPTION = "Data16"
+   @@ GROUP = VsiSrv
+   @@ END
+   */
+
+   uint16 Data16;
+   /*
+        @@ SUB_STRUCTURE = Field
+        @@ STRUCTURE = VsisrvIpduSignalFaultBType
+        @@ DATA_TYPE = STRUCTURE VsisrvIpduFaultBFieldType
+        @@ END
+      */
+   VsisrvIpduFaultBFieldType Field;
+
+}VsisrvIpduSignalFaultBType;
+
+/*------------------------------------*/
+/* VSI IPDU FaultC structure          */
+/*------------------------------------*/
+typedef struct
+{
+   /*
+@@ ELEMENT = Spare08
+@@ STRUCTURE = VsiSrvIpduSignalFaultCFieldType
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UWORD 0x01
+@@ DESCRIPTION = "Spare08"
+@@ GROUP = VsiSrv
+@@ END
+*/
+  uint16 Spare08:1;
+   /*
+    @@ ELEMENT = Spare09
+    @@ STRUCTURE = VsiSrvIpduSignalFaultCFieldType
+    @@ A2L_TYPE = MEASURE
+    @@ DATA_TYPE = UWORD 0x02
+    @@ DESCRIPTION = "Spare09"
+    @@ GROUP = VsiSrv
+    @@ END
+    */
+   uint16 Spare09:1;
+   /*
+    @@ ELEMENT = Spare10
+    @@ STRUCTURE = VsiSrvIpduSignalFaultCFieldType
+    @@ A2L_TYPE = MEASURE
+    @@ DATA_TYPE = UWORD 0x04
+    @@ DESCRIPTION = "Spare10"
+    @@ GROUP = VsiSrv
+    @@ END
+    */
+
+   uint16 Spare10:1;
+   /*
+    @@ ELEMENT = Spare11
+    @@ STRUCTURE = VsiSrvIpduSignalFaultCFieldType
+    @@ A2L_TYPE = MEASURE
+    @@ DATA_TYPE = UWORD 0x08
+    @@ DESCRIPTION = "Spare11"
+    @@ GROUP = VsiSrv
+    @@ END
+    */
+
+   uint16 Spare11:1;
+   /*
+    @@ ELEMENT = Spare12
+    @@ STRUCTURE = VsiSrvIpduSignalFaultCFieldType
+    @@ A2L_TYPE = MEASURE
+    @@ DATA_TYPE = UWORD 0x10
+    @@ DESCRIPTION = "Spare12"
+    @@ GROUP = VsiSrv
+    @@ END
+    */
+
+   uint16 Spare12:1;
+   /*
+       @@ ELEMENT = Spare13
+       @@ STRUCTURE = VsiSrvIpduSignalFaultCFieldType
+       @@ A2L_TYPE = MEASURE
+       @@ DATA_TYPE = UWORD 0x20
+       @@ DESCRIPTION = "Spare13"
+       @@ GROUP = VsiSrv
+       @@ END
+       */
+
+   uint16 Spare13:1;
+   /*
+       @@ ELEMENT = Spare14
+       @@ STRUCTURE = VsiSrvIpduSignalFaultCFieldType
+       @@ A2L_TYPE = MEASURE
+       @@ DATA_TYPE = UWORD 0x40
+       @@ DESCRIPTION = "Spare14"
+       @@ GROUP = VsiSrv
+       @@ END
+       */
+
+   uint16 Spare14:1;
+   /*
+       @@ ELEMENT = Spare15
+       @@ STRUCTURE = VsiSrvIpduSignalFaultCFieldType
+       @@ A2L_TYPE = MEASURE
+       @@ DATA_TYPE = UWORD 0x80
+       @@ DESCRIPTION = "Spare15"
+       @@ GROUP = VsiSrv
+       @@ END
+       */
+
+   uint16 Spare15:1;
+   /*
+         @@ ELEMENT = Spare00
+         @@ STRUCTURE = VsiSrvIpduSignalFaultCFieldType
+         @@ A2L_TYPE = MEASURE
+         @@ DATA_TYPE = UWORD 0x01
+         @@ DESCRIPTION = "Spare00"
+         @@ GROUP = VsiSrv
+         @@ END
+         */
+
+   uint16 Spare00:1;
+   /*
+    @@ ELEMENT = PwmParamFlag
+    @@ STRUCTURE = VsiSrvIpduSignalFaultCFieldType
+    @@ A2L_TYPE = MEASURE
+    @@ DATA_TYPE = UWORD 0x02
+    @@ DESCRIPTION = "PwmParamFlag"
+    @@ GROUP = VsiSrv
+    @@ END
+    */
+
+   uint16 PwmParamFlag:1;
+   /*
+    @@ ELEMENT = PwmClampFlag
+    @@ STRUCTURE = VsiSrvIpduSignalFaultCFieldType
+    @@ A2L_TYPE = MEASURE
+    @@ DATA_TYPE = UWORD 0x04
+    @@ DESCRIPTION = "PwmClampFlag"
+    @@ GROUP = VsiSrv
+    @@ END
+    */
+
+   uint16 PwmClampFlag:1;
+   /*
+   @@ ELEMENT = Spare03
+   @@ STRUCTURE = VsiSrvIpduSignalFaultCFieldType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = UWORD 0x08
+   @@ DESCRIPTION = "Spare03"
+   @@ GROUP = VsiSrv
+   @@ END
+               */
+   uint16 Spare03:1;
+   /*
+   @@ ELEMENT = LowSpeedReach
+   @@ STRUCTURE = VsiSrvIpduSignalFaultCFieldType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = UWORD 0x10
+   @@ DESCRIPTION = "LowSpeedReach"
+   @@ GROUP = VsiSrv
+   @@ END
+     */
+
+   uint16 LowSpeedReach:1;
+   /*
+   @@ ELEMENT = Spare05
+   @@ STRUCTURE = VsiSrvIpduSignalFaultCFieldType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = UWORD 0x20
+   @@ DESCRIPTION = "Spare05"
+   @@ GROUP = VsiSrv
+   @@ END
+         */
+   uint16 Spare05:1;
+   /*
+   @@ ELEMENT = Spare06
+   @@ STRUCTURE = VsiSrvIpduSignalFaultCFieldType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = UWORD 0x40
+   @@ DESCRIPTION = "Spare06"
+   @@ GROUP = VsiSrv
+   @@ END
+         */
+   uint16 Spare06:1;
+   /*
+   @@ ELEMENT = Spare07
+   @@ STRUCTURE = VsiSrvIpduSignalFaultCFieldType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = UWORD 0x80
+   @@ DESCRIPTION = "Spare07"
+   @@ GROUP = VsiSrv
+   @@ END
+         */
+   uint16 Spare07:1;
+}VsiSrvIpduSignalFaultCFieldType;
+
+typedef union
+{
+   /*
+   @@ ELEMENT = Data16
+   @@ STRUCTURE = VsisrvIpduSignalFaultCType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = UWORD
+   @@ DESCRIPTION = "Data16"
+   @@ GROUP = VsiSrv
+   @@ END
+         */
+   uint16 Data16;
+   /*
+  @@ SUB_STRUCTURE = Field
+  @@ STRUCTURE = VsisrvIpduSignalFaultCType
+  @@ DATA_TYPE = STRUCTURE VsiSrvIpduSignalFaultCFieldType
+  @@ END
+         */
+   VsiSrvIpduSignalFaultCFieldType Field;
+
+}VsisrvIpduSignalFaultCType;
+
+/*------------------------------------*/
+/* VSI IPDU StateReq structure        */
+/*------------------------------------*/
+typedef struct
+  {
+   /*
+        @@ ELEMENT = ModeReq
+        @@ STRUCTURE = VsisrvIpduSignalStateReqFieldType
+        @@ A2L_TYPE = MEASURE
+        @@ DATA_TYPE = UBYTE 0x03
+        @@ DESCRIPTION = "ModeReq"
+        @@ GROUP = VsiSrv
+        @@ END
+        */
+     uint8 ModeReq:2;
+     /*
+                @@ ELEMENT = SwitchType
+                @@ STRUCTURE = VsisrvIpduSignalStateReqFieldType
+                @@ A2L_TYPE = MEASURE
+                @@ DATA_TYPE = UBYTE 0x1C
+                @@ DESCRIPTION = "SwitchType"
+                @@ GROUP = VsiSrv
+                @@ END
+                */
+     uint8 SwitchType:3;
+     /*
+           @@ ELEMENT = Operation
+           @@ STRUCTURE = VsisrvIpduSignalStateReqFieldType
+           @@ A2L_TYPE = MEASURE
+           @@ DATA_TYPE = UBYTE 0x20
+           @@ DESCRIPTION = "Operation"
+           @@ GROUP = VsiSrvIf
+           @@ END
+           */
+     uint8 Operation:1;
+     /*
+          @@ ELEMENT = SCSpeedReady
+          @@ STRUCTURE = VsisrvIpduSignalStateReqFieldType
+          @@ A2L_TYPE = MEASURE
+          @@ DATA_TYPE = UBYTE 0x40
+          @@ DESCRIPTION = "SCSpeedReady"
+          @@ GROUP = VsiSrv
+          @@ END
+          */
+
+     uint8 SCSpeedReady:1;
+     /*
+             @@ ELEMENT = EmergencySw
+             @@ STRUCTURE = VsisrvIpduSignalStateReqFieldType
+             @@ A2L_TYPE = MEASURE
+             @@ DATA_TYPE = UBYTE 0x80
+             @@ DESCRIPTION = "EmergencySw"
+             @@ GROUP = VsiSrv
+             @@ END
+             */
+     uint8 EmergencySw:1;
+  }VsisrvIpduSignalStateReqFieldType;
+
+typedef union
+{
+   /*
+      @@ ELEMENT = Data8
+      @@ STRUCTURE = VsisrvIpduSignalStateReqType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = UBYTE
+      @@ DESCRIPTION = "Data8"
+      @@ GROUP = VsiSrv
+      @@ END
+      */
+
+   uint8 Data8;
+   /*
+     @@ SUB_STRUCTURE = Field
+     @@ STRUCTURE = VsisrvIpduSignalStateReqType
+     @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalStateReqFieldType
+     @@ END
+   */
+   VsisrvIpduSignalStateReqFieldType Field;
+
+}VsisrvIpduSignalStateReqType;
+
+/*------------------------------------*/
+/* VSI IPDU StateRes structure        */
+/*------------------------------------*/
+typedef struct
+ {
+   /*
+            @@ ELEMENT = ModeRes
+            @@ STRUCTURE = VsisrvIpduSignalStateResFieldType
+            @@ A2L_TYPE = MEASURE
+            @@ DATA_TYPE = UBYTE 0x03
+            @@ DESCRIPTION = "ModeRes"
+            @@ GROUP = VsiSrv
+            @@ END
+            */
+    uint8 ModeRes:2;
+    /*
+               @@ ELEMENT = SwitchTypeRes
+               @@ STRUCTURE = VsisrvIpduSignalStateResFieldType
+               @@ A2L_TYPE = MEASURE
+               @@ DATA_TYPE = UBYTE 0x1C
+               @@ DESCRIPTION = "SwitchTypeRes"
+               @@ GROUP = VsiSrv
+               @@ END
+               */
+    uint8 SwitchTypeRes:3;
+    /*
+            @@ ELEMENT = CurAcq
+            @@ STRUCTURE = VsisrvIpduSignalStateResFieldType
+            @@ A2L_TYPE = MEASURE
+            @@ DATA_TYPE = UBYTE 0x20
+            @@ DESCRIPTION = "CurAcq"
+            @@ GROUP = VsiSrv
+            @@ END
+            */
+    uint8 CurAcq:1;
+    /*
+            @@ ELEMENT = PWM_RatioFreqRes
+            @@ STRUCTURE = VsisrvIpduSignalStateResFieldType
+            @@ A2L_TYPE = MEASURE
+            @@ DATA_TYPE = UBYTE 0xC0
+            @@ DESCRIPTION = "PWM_RatioFreqRes"
+            @@ GROUP = VsiSrv
+            @@ END
+            */
+    uint8 PWM_RatioFreqRes:2;
+ }VsisrvIpduSignalStateResFieldType;
+
+typedef union
+{
+   /*
+   @@ ELEMENT = Data8
+   @@ STRUCTURE = VsisrvIpduSignalStateResType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = UBYTE
+   @@ DESCRIPTION = "Data8"
+   @@ GROUP = VsiSrv
+   @@ END
+   */
+   uint8 Data8;
+   /*
+     @@ SUB_STRUCTURE = Field
+     @@ STRUCTURE = VsisrvIpduSignalStateResType
+     @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalStateResFieldType
+     @@ END
+   */
+
+   VsisrvIpduSignalStateResFieldType Field;
+
+}VsisrvIpduSignalStateResType;
+
+/*----------------------------------------------------------------------------*/
+/*------------------------------------*/
+/* VSI IPDU Tx structures             */
+/*------------------------------------*/
+
+/*------------------------------------*/
+/* VSI IPDU TxS structure             */
+/*------------------------------------*/
+typedef union
+{
+   uint32 Data32[3];
+   uint16 Data16[6];
+   uint8  Data8[12];
+   struct
+   {
+      uint32 PWM_Vl_MSB8:8;
+      uint32 PWM_Ur_LSB8:8;
+      uint32 PWM_Ur_MSB4:4;
+      uint32 PWM_Ul_LSB4:4;
+      uint32 PWM_Ul_MSB8:8;
+
+      uint32 PWM_Wr_MSB4:4;
+      uint32 PWM_Wl_LSB4:4;
+      uint32 PWM_Wl_MSB8:8;
+      uint32 PWM_Vr_LSB8:8;
+      uint32 PWM_Vr_MSB4:4;
+      uint32 PWM_Vl_LSB4:4;
+
+      uint8 Ctrl;
+      uint8 PWM_RatioFreq:1;
+      uint8 PWM_UVW_ON:1;
+      uint8 PwmFreqDyn_LSB6:6;
+      uint8 PwmFreqDyn_MSB8:8;
+      uint8 PWM_Wr_LSB8:8;
+
+#if 0
+      uint32 PWM_Ul_MSB8:8;
+     uint32 PWM_Ul_LSB4:4;
+     uint32 PWM_Ur_MSB4:4;
+      uint32 PWM_Ur_LSB8:8;
+      uint32 PWM_Vl_MSB8:8;
+
+      uint32 PWM_Wr_MSB4:4;
+      uint32 PWM_Wl_LSB4:4;
+      uint32 PWM_Wl_MSB8:8;
+      uint32 PWM_Vr_LSB8:8;
+      uint32 PWM_Vr_MSB4:4;
+
+      uint32 PWM_Vl_LSB4:4;
+
+      uint8 Ctrl;
+      uint8 PwmFreqDyn_MSB8:8;
+      uint8 PWM_Wr_LSB8;
+
+#endif
+
+   }Signal;
+
+   struct
+   {
+      uint32 SVM_V2_MSB2:2;
+      uint32 SVM_V1:6;
+      uint32 SVM_V3_MSB4:4;
+      uint32 SVM_V2_LSB4:4;
+      uint32 SVM_V4:6;
+      uint32 SVM_V3_LSB2:2;
+      uint32 SVM_AT1_MSB8:8;
+      uint32 SVM_AT2_MSB4:4;
+      uint32 SVM_AT1_LSB4:4;
+      uint32 SVM_AT2_LSB8:8;
+      uint32 SVM_AT3_MSB8:8;
+      uint32 SVM_AT4_MSB4:4;
+      uint32 SVM_AT3_LSB4:4;
+
+      uint8 Ctrl;
+      uint8 PWM_RatioFreq:1;
+      uint8 PWM_UVW_ON:1;
+      uint8 PwmFreqDyn_LSB6:6;
+      uint8 PwmFreqDyn_MSB8:8;
+      uint8 SVM_AT4_LSB8;
+
+   }SignalSVM;
+}VsisrvIpduTxSType;
+
+/*------------------------------------*/
+/* VSI IPDU TxA structure             */
+/*------------------------------------*/
+typedef union
+{
+   uint32 Data32[5];
+   uint16 Data16[10];
+   uint8  Data8[20];
+   struct
+   {
+      VsisrvIpduSignalFaultAType FaultA;
+      VsisrvIpduSignalStateReqType StateReq;
+      uint8 Id;
+
+      uint16 M1_MSB4:4;
+      uint16 M0_LSB4:4;
+      uint16 M0_MSB8:8;
+      VsisrvIpduSignalFaultBType FaultB;
+
+      uint32 M3_LSB8:8;
+      uint32 M3_LSB4:4;
+      uint32 M2_MSB4:4;
+      uint32 M2_MSB8:8;
+      uint32 M1_LSB8:8;
+
+      uint32 M6_MSB8:8;
+      uint32 M5_LSB8:8;
+      uint32 M5_LSB4:4;
+      uint32 M4_MSB4:4;
+      uint32 M4_MSB8:8;
+
+      uint16 Ctrl;
+      uint16 Debug_LSB8:8;
+      uint16 Debug_MSB4:4;
+      uint16 M6_LSB4:4;
+   }Signal;
+}VsisrvIpduTxAType;
+
+/*------------------------------------*/
+/* VSI IPDU TxA ID 0 structure        */
+/*------------------------------------*/
+typedef struct
+{
+   /*
+         @@ SUB_STRUCTURE = FaultA
+         @@ STRUCTURE = VsisrvIpduTxAId0SignalType
+         @@ DATA_TYPE = STRUCTURE    VsisrvIpduSignalFaultAType
+         @@ END
+       */
+
+   VsisrvIpduSignalFaultAType FaultA;
+   /*
+           @@ SUB_STRUCTURE = StateReq
+           @@ STRUCTURE = VsisrvIpduTxAId0SignalType
+           @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalStateReqType
+           @@ END
+         */
+
+   VsisrvIpduSignalStateReqType StateReq;
+   /*
+                        @@ ELEMENT = Id
+                        @@ STRUCTURE = VsisrvIpduTxAId0SignalType
+                        @@ A2L_TYPE = MEASURE
+                        @@ DATA_TYPE = UBYTE
+                        @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                        @@ GROUP = VsiSrv
+                        @@ END
+                         */
+
+   uint8 Id;
+   /*
+                   @@ ELEMENT = M1Id0Spare_MSB4
+                   @@ STRUCTURE = VsisrvIpduTxAId0SignalType
+                   @@ A2L_TYPE = MEASURE
+                   @@ DATA_TYPE = UWORD 0x000F
+                   @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                   @@ GROUP = VsiSrv
+                   @@ END
+                    */
+
+   uint16 M1Id0Spare_MSB4:4;
+   /*
+                       @@ ELEMENT = M0PwmMinDutyCycle_LSB4
+                       @@ STRUCTURE = VsisrvIpduTxAId0SignalType
+                       @@ A2L_TYPE = MEASURE
+                       @@ DATA_TYPE = UWORD 0x00F0
+                       @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                       @@ GROUP = VsiSrv
+                       @@ END
+                        */
+   uint16 M0PwmMinDutyCycle_LSB4:4;
+   /*
+                      @@ ELEMENT = M0PwmMinDutyCycle_MSB8
+                      @@ STRUCTURE = VsisrvIpduTxAId0SignalType
+                      @@ A2L_TYPE = MEASURE
+                      @@ DATA_TYPE = UWORD 0xFF00
+                      @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                      @@ GROUP = VsiSrv
+                      @@ END
+                       */
+   uint16 M0PwmMinDutyCycle_MSB8:8;
+   /*
+         @@ SUB_STRUCTURE = FaultB
+         @@ STRUCTURE = VsisrvIpduTxAId0SignalType
+         @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalFaultBType
+         @@ END
+       */
+   VsisrvIpduSignalFaultBType FaultB;
+   /*
+                       @@ ELEMENT = M3PwmDeadtime_LSB8
+                       @@ STRUCTURE = VsisrvIpduTxAId0SignalType
+                       @@ A2L_TYPE = MEASURE
+                       @@ DATA_TYPE = ULONG 0xFF
+                       @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                       @@ GROUP = VsiSrv
+                       @@ END
+                        */
+   uint32 M3PwmDeadtime_LSB8:8;
+   /*
+                    @@ ELEMENT = M3PwmDeadtime_MSB4
+                    @@ STRUCTURE = VsisrvIpduTxAId0SignalType
+                    @@ A2L_TYPE = MEASURE
+                    @@ DATA_TYPE = ULONG 0xF
+                    @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                    @@ GROUP = VsiSrv
+                    @@ END
+                     */
+
+   uint32 M3PwmDeadtime_MSB4:4;
+   /*
+              @@ ELEMENT = M2PwmFreq_MSB8
+              @@ STRUCTURE = VsisrvIpduTxAId0SignalType
+              @@ A2L_TYPE = MEASURE
+              @@ DATA_TYPE = ULONG 0x00FF
+              @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+              @@ GROUP = VsiSrv
+              @@ END
+               */
+
+   uint32 M2PwmFreq_MSB8:8;
+   /*
+                    @@ ELEMENT = M2PwmFreq_LSB4
+                    @@ STRUCTURE = VsisrvIpduTxAId0SignalType
+                    @@ A2L_TYPE = MEASURE
+                    @@ DATA_TYPE = ULONG 0x0F0
+                    @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                    @@ GROUP = VsiSrv
+                    @@ END
+                     */
+
+   uint32 M2PwmFreq_LSB4:4;
+   /*
+                  @@ ELEMENT = M1Id0Spare_LSB8
+                  @@ STRUCTURE = VsisrvIpduTxAId0SignalType
+                  @@ A2L_TYPE = MEASURE
+                  @@ DATA_TYPE = ULONG 0xFF
+                  @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                  @@ GROUP = VsiSrv
+                  @@ END
+                   */
+
+   uint32 M1Id0Spare_LSB8:8;
+   /*
+                       @@ ELEMENT = M6PwmInitValUr_MSB8
+                       @@ STRUCTURE = VsisrvIpduTxAId0SignalType
+                       @@ A2L_TYPE = MEASURE
+                       @@ DATA_TYPE = ULONG 0x0FF
+                       @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                       @@ GROUP = VsiSrv
+                       @@ END
+         */
+
+   uint32 M6PwmInitValUr_MSB8:8;
+   /*
+                       @@ ELEMENT = M5PwmInitValUl_LSB8
+                       @@ STRUCTURE = VsisrvIpduTxAId0SignalType
+                       @@ A2L_TYPE = MEASURE
+                       @@ DATA_TYPE = ULONG 0xFF
+                       @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                       @@ GROUP = VsiSrv
+                       @@ END
+                        */
+
+   uint32 M5PwmInitValUl_LSB8:8;
+   /*
+                       @@ ELEMENT = M5PwmInitValUl_MSB4
+                       @@ STRUCTURE = VsisrvIpduTxAId0SignalType
+                       @@ A2L_TYPE = MEASURE
+                       @@ DATA_TYPE = ULONG 0x000F
+                       @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                       @@ GROUP = VsiSrv
+                       @@ END
+                        */
+
+   uint32 M5PwmInitValUl_MSB4:4;
+   /*
+                       @@ ELEMENT = M4Id0Spare_LSB4
+                       @@ STRUCTURE = VsisrvIpduTxAId0SignalType
+                       @@ A2L_TYPE = MEASURE
+                       @@ DATA_TYPE = ULONG 0x00F0
+                       @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                       @@ GROUP = VsiSrv
+                       @@ END
+                        */
+
+   uint32 M4Id0Spare_LSB4:4;
+   /*
+                  @@ ELEMENT = M4Id0Spare_MSB8
+                  @@ STRUCTURE = VsisrvIpduTxAId0SignalType
+                  @@ A2L_TYPE = MEASURE
+                  @@ DATA_TYPE = UWORD 0xFF
+                  @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                  @@ GROUP = VsiSrv
+                  @@ END
+                   */
+   uint32 M4Id0Spare_MSB8:8;
+   /*
+                       @@ ELEMENT = Ctrl
+                       @@ STRUCTURE = VsisrvIpduTxAId0SignalType
+                       @@ A2L_TYPE = MEASURE
+                       @@ DATA_TYPE = UWORD 0xFFFF
+                       @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                       @@ GROUP = VsiSrv
+                       @@ END
+                        */
+
+   uint16 Ctrl;
+   /*
+                       @@ ELEMENT = Debug_LSB8
+                       @@ STRUCTURE = VsisrvIpduTxAId0SignalType
+                       @@ A2L_TYPE = MEASURE
+                       @@ DATA_TYPE = UWORD 0x00FF
+                       @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                       @@ GROUP = VsiSrv
+                       @@ END
+                        */
+   uint16 Debug_LSB8:8;
+   /*
+     @@ ELEMENT = Debug_MSB4
+     @@ STRUCTURE = VsisrvIpduTxAId0SignalType
+     @@ A2L_TYPE = MEASURE
+     @@ DATA_TYPE = UWORD 0x0F00
+     @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+     @@ GROUP = VsiSrv
+     @@ END
+                        */
+   uint16 Debug_MSB4:4;
+   /*
+     @@ ELEMENT = M6PwmInitValUr_LSB4
+     @@ STRUCTURE = VsisrvIpduTxAId0SignalType
+     @@ A2L_TYPE = MEASURE
+     @@ DATA_TYPE = UWORD 0xF000
+     @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+     @@ GROUP = VsiSrv
+     @@ END
+                        */
+   uint16 M6PwmInitValUr_LSB4:4;
+
+}VsisrvIpduTxAId0SignalType;
+
+typedef union
+{
+   /*
+                  @@ ELEMENT = Data32
+                  @@ STRUCTURE = VsisrvIpduTxAId0Type
+                  @@ A2L_TYPE = MEASURE
+                  @@ DATA_TYPE = ULONG
+                  @@ DIMENSION = 5
+                  @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                  @@ GROUP = VsiSrv
+                  @@ END
+                   */
+   uint32 Data32[5];
+   /*
+                  @@ ELEMENT = Data16
+                  @@ STRUCTURE = VsisrvIpduTxAId0Type
+                  @@ A2L_TYPE = MEASURE
+                  @@ DATA_TYPE = UWORD
+                  @@ DIMENSION = 10
+                  @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                  @@ GROUP = VsiSrv
+                  @@ END
+                   */
+   uint16 Data16[10];
+   /*
+                  @@ ELEMENT = Data8
+                  @@ STRUCTURE = VsisrvIpduTxAId0Type
+                  @@ A2L_TYPE = MEASURE
+                  @@ DATA_TYPE = UBYTE
+                  @@ DIMENSION = 20
+                  @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                  @@ GROUP = VsiSrv
+                  @@ END
+                   */
+   uint8  Data8[20];
+   /*
+        @@ SUB_STRUCTURE = Signal
+        @@ STRUCTURE = VsisrvIpduTxAId0Type
+        @@ DATA_TYPE = STRUCTURE VsisrvIpduTxAId0SignalType
+        @@ END
+      */
+
+   VsisrvIpduTxAId0SignalType Signal;
+
+}VsisrvIpduTxAId0Type;
+
+/*------------------------------------*/
+/* VSI IPDU TxA ID 1 structure        */
+/*------------------------------------*/
+typedef struct
+ {
+   /*
+     @@ SUB_STRUCTURE = FaultA
+     @@ STRUCTURE = VsisrvIpduTxAId1SignalType
+     @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalFaultAType
+     @@ END
+   */
+
+   VsisrvIpduSignalFaultAType FaultA;
+    /*
+  @@ SUB_STRUCTURE = StateReq
+  @@ STRUCTURE = VsisrvIpduTxAId1SignalType
+  @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalStateReqType
+  @@ END
+*/
+
+    VsisrvIpduSignalStateReqType StateReq;
+    /*
+              @@ ELEMENT = Id
+              @@ STRUCTURE = VsisrvIpduTxAId1SignalType
+              @@ A2L_TYPE = MEASURE
+              @@ DATA_TYPE = UBYTE
+              @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+              @@ GROUP = VsiSrv
+              @@ END
+               */
+
+    uint8 Id;
+    /*
+                   @@ ELEMENT = M1Id1Spare_MSB4
+                   @@ STRUCTURE = VsisrvIpduTxAId1SignalType
+                   @@ A2L_TYPE = MEASURE
+                   @@ DATA_TYPE = UWORD 0x000F
+                   @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                   @@ GROUP = VsiSrv
+                   @@ END
+                    */
+
+    uint16 M1Id1Spare_MSB4:4;
+    /*
+                 @@ ELEMENT = M0PwmMaxDutyCycle_LSB4
+                 @@ STRUCTURE = VsisrvIpduTxAId1SignalType
+                 @@ A2L_TYPE = MEASURE
+                 @@ DATA_TYPE = UWORD 0x00F0
+                 @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                 @@ GROUP = VsiSrv
+                 @@ END
+                  */
+    uint16 M0PwmMaxDutyCycle_LSB4:4;
+    /*
+                 @@ ELEMENT = M0PwmMaxDutyCycle_MSB8
+                 @@ STRUCTURE = VsisrvIpduTxAId1SignalType
+                 @@ A2L_TYPE = MEASURE
+                 @@ DATA_TYPE = UWORD 0xFF
+                 @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                 @@ GROUP = VsiSrv
+                 @@ END
+                  */
+
+    uint16 M0PwmMaxDutyCycle_MSB8:8;
+    /*
+  @@ SUB_STRUCTURE = FaultB
+  @@ STRUCTURE = VsisrvIpduTxAId1SignalType
+  @@ DATA_TYPE = STRUCTURE VsiSrv_IpduSignalFaultBType
+  @@ END
+*/
+
+    VsisrvIpduSignalFaultBType FaultB;
+    /*
+                   @@ ELEMENT = M3PwmInitValVr_LSB8
+                   @@ STRUCTURE = VsisrvIpduTxAId1SignalType
+                   @@ A2L_TYPE = MEASURE
+                   @@ DATA_TYPE = ULONG 0xFF
+                   @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                   @@ GROUP = VsiSrv
+                   @@ END
+                    */
+
+    uint32 M3PwmInitValVr_LSB8:8;
+    /*
+               @@ ELEMENT = M3PwmInitValVr_MSB4
+               @@ STRUCTURE = VsisrvIpduTxAId1SignalType
+               @@ A2L_TYPE = MEASURE
+               @@ DATA_TYPE = ULONG 0xF
+               @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+               @@ GROUP = VsiSrv
+               @@ END
+                */
+
+    uint32 M3PwmInitValVr_MSB4:4;
+    /*
+               @@ ELEMENT = M2PwmInitValVl_LSB4
+               @@ STRUCTURE = VsisrvIpduTxAId1SignalType
+               @@ A2L_TYPE = MEASURE
+               @@ DATA_TYPE = ULONG 0x0F0
+               @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+               @@ GROUP = VsiSrv
+               @@ END
+                */
+
+    uint32 M2PwmInitValVl_LSB4:4;
+    /*
+               @@ ELEMENT = M2PwmInitValVl_MSB8
+               @@ STRUCTURE = VsisrvIpduTxAId1SignalType
+               @@ A2L_TYPE = MEASURE
+               @@ DATA_TYPE = ULONG 0x00FF
+               @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+               @@ GROUP = VsiSrv
+               @@ END
+                */
+
+    uint32 M2PwmInitValVl_MSB8:8;
+    /*
+               @@ ELEMENT = M1Id1Spare_LSB8
+               @@ STRUCTURE = VsisrvIpduTxAId1SignalType
+               @@ A2L_TYPE = MEASURE
+               @@ DATA_TYPE = ULONG 0xFF
+               @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+               @@ GROUP = VsiSrv
+               @@ END
+                */
+
+    uint32 M1Id1Spare_LSB8:8;
+    /*
+                   @@ ELEMENT = M6Id1Spare_MSB8
+                   @@ STRUCTURE = VsisrvIpduTxAId1SignalType
+                   @@ A2L_TYPE = MEASURE
+                   @@ DATA_TYPE = ULONG 0x0FF
+                   @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                   @@ GROUP = VsiSrv
+                   @@ END
+                    */
+
+    uint32 M6Id1Spare_MSB8:8;
+    /*
+                @@ ELEMENT = M5PwmInitValWr_LSB8
+                @@ STRUCTURE = VsisrvIpduTxAId1SignalType
+                @@ A2L_TYPE = MEASURE
+                @@ DATA_TYPE = ULONG 0xFF
+                @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                @@ GROUP = VsiSrv
+                @@ END
+                 */
+
+    uint32 M5PwmInitValWr_LSB8:8;
+    /*
+                @@ ELEMENT = M5PwmInitValWr_MSB4
+                @@ STRUCTURE = VsisrvIpduTxAId1SignalType
+                @@ A2L_TYPE = MEASURE
+                @@ DATA_TYPE = ULONG 0x000F
+                @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                @@ GROUP = VsiSrv
+                @@ END
+                 */
+
+    uint32 M5PwmInitValWr_MSB4:4;
+    /*
+                @@ ELEMENT = M4PwmInitValWl_LSB4
+                @@ STRUCTURE = VsisrvIpduTxAId1SignalType
+                @@ A2L_TYPE = MEASURE
+                @@ DATA_TYPE = ULONG 0x0F0
+                @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                @@ GROUP = VsiSrv
+                @@ END
+                 */
+
+    uint32 M4PwmInitValWl_LSB4:4;
+    /*
+                @@ ELEMENT = M4PwmInitValWl_MSB8
+                @@ STRUCTURE = VsisrvIpduTxAId1SignalType
+                @@ A2L_TYPE = MEASURE
+                @@ DATA_TYPE = ULONG 0xFF
+                @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                @@ GROUP = VsiSrv
+                @@ END
+                 */
+
+    uint32 M4PwmInitValWl_MSB8:8;
+    /*
+                     @@ ELEMENT = Ctrl
+                     @@ STRUCTURE = VsisrvIpduTxAId1SignalType
+                     @@ A2L_TYPE = MEASURE
+                     @@ DATA_TYPE = UWORD
+                     @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                     @@ GROUP = VsiSrv
+                     @@ END
+                      */
+    uint16 Ctrl;
+    /*
+                     @@ ELEMENT = Debug_LSB8
+                     @@ STRUCTURE = VsisrvIpduTxAId1SignalType
+                     @@ A2L_TYPE = MEASURE
+                     @@ DATA_TYPE = UWORD 0x00FF
+                     @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                     @@ GROUP = VsiSrv
+                     @@ END
+                      */
+    uint16 Debug_LSB8:8;
+    /*
+                    @@ ELEMENT = Debug_MSB4
+                    @@ STRUCTURE = VsisrvIpduTxAId1SignalType
+                    @@ A2L_TYPE = MEASURE
+                    @@ DATA_TYPE = UWORD 0x0F00
+                    @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                    @@ GROUP = VsiSrv
+                    @@ END
+                     */
+    uint16 Debug_MSB4:4;
+    /*
+                     @@ ELEMENT = M6Id1Spare_LSB4
+                     @@ STRUCTURE = VsisrvIpduTxAId1SignalType
+                     @@ A2L_TYPE = MEASURE
+                     @@ DATA_TYPE = UWORD 0xF000
+                     @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+                     @@ GROUP = VsiSrv
+                     @@ END
+                      */
+    uint16 M6Id1Spare_LSB4:4;
+
+ }VsisrvIpduTxAId1SignalType;
+
+typedef union
+{
+   /*
+     @@ ELEMENT = Data32
+     @@ STRUCTURE = VsisrvIpduTxAId1Type
+     @@ A2L_TYPE = MEASURE
+     @@ DATA_TYPE = UBYTE
+     @@ DIMENSION = 5
+     @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+     @@ GROUP = VsiSrv
+     @@ END
+                     */
+   uint32 Data32[5];
+   /*
+      @@ ELEMENT = Data16
+      @@ STRUCTURE = VsisrvIpduTxAId1Type
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = UBYTE
+      @@ DIMENSION = 10
+      @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+      @@ GROUP = VsiSrv
+      @@ END
+                      */
+   uint16 Data16[10];
+   /*
+      @@ ELEMENT = Data8
+      @@ STRUCTURE = VsisrvIpduTxAId1Type
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = UBYTE
+      @@ DIMENSION = 20
+      @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+      @@ GROUP = VsiSrv
+      @@ END
+                      */
+   uint8  Data8[20];
+   /*
+         @@ SUB_STRUCTURE = Signal
+         @@ STRUCTURE = VsisrvIpduTxAId1Type
+         @@ DATA_TYPE = STRUCTURE VsisrvIpduTxAId1SignalType
+         @@ END
+         */
+   VsisrvIpduTxAId1SignalType Signal;
+
+}VsisrvIpduTxAId1Type;
+
+typedef struct
+{
+   /*
+      @@ SUB_STRUCTURE = FaultA
+      @@ STRUCTURE = VsisrvIpduTxAId2SignalType
+      @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalFaultAType
+      @@ END
+      */
+   VsisrvIpduSignalFaultAType FaultA;
+   /*
+     @@ SUB_STRUCTURE = StateReq
+     @@ STRUCTURE = VsisrvIpduTxAId2SignalType
+     @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalStateReqType
+     @@ END
+     */
+   VsisrvIpduSignalStateReqType StateReq;
+   /*
+       @@ ELEMENT = Id
+       @@ STRUCTURE = VsisrvIpduTxAId2SignalType
+       @@ A2L_TYPE = MEASURE
+       @@ DATA_TYPE = UBYTE
+       @@ DESCRIPTION = "Secure fault reset request ack counter"
+       @@ GROUP = VsiSrv
+       @@ END
+       */
+   uint8 Id;
+   /*
+     @@ ELEMENT = M1Id2Spare_MSB4
+     @@ STRUCTURE = VsisrvIpduTxAId2SignalType
+     @@ A2L_TYPE = MEASURE
+     @@ DATA_TYPE = UWORD 0x000F
+     @@ DESCRIPTION = "HVDC overvoltage"
+     @@ GROUP = VsiSrv
+     @@ END
+     */
+
+   uint16 M1Id2Spare_MSB4:4;
+   /*
+@@ ELEMENT = M0VFilAverage
+@@ STRUCTURE = VsisrvIpduTxAId2SignalType
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UWORD 0x0030
+@@ DESCRIPTION = "V Filter average"
+@@ GROUP = VsiSrv
+@@ END
+*/
+
+   uint16 M0VFilAverage:2;
+   /*
+  @@ ELEMENT = M0IFilAverage
+  @@ STRUCTURE = VsisrvIpduTxAId2SignalType
+  @@ A2L_TYPE = MEASURE
+  @@ DATA_TYPE = UWORD 0x00C0
+  @@ DESCRIPTION = "I Filter average"
+  @@ GROUP = VsiSrv
+  @@ END
+  */
+
+   uint16 M0IFilAverage:2;
+   /*
+    @@ ELEMENT = PwrSupHbrInh
+    @@ STRUCTURE = VsisrvIpduTxAId2SignalType
+    @@ A2L_TYPE = MEASURE
+    @@ DATA_TYPE = UWORD 0x0100
+    @@ DESCRIPTION = "Flyback power supply control"
+    @@ GROUP = VsiSrv
+    @@ END
+    */
+
+   uint16 PwrSupHbrInh:1;
+   /*
+    @@ ELEMENT = PwrSupDrvInh
+    @@ STRUCTURE = VsisrvIpduTxAId2SignalType
+    @@ A2L_TYPE = MEASURE
+    @@ DATA_TYPE = UWORD 0x0E00
+    @@ DESCRIPTION = "M0 Id2 Spare bits 5 to 7"
+    @@ GROUP = VsiSrv
+    @@ END
+          */
+
+   uint16 PwrSupDrvInh:1;
+   /*
+   @@ ELEMENT = M0Id2Spare06To11
+   @@ STRUCTURE = VsisrvIpduTxAId2SignalType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = UWORD 0xFC00
+   @@ DESCRIPTION = "M0 Id2 Spare bits 9 to 11"
+   @@ GROUP = VsiSrv
+   @@ END
+               */
+   uint16 M0Id2Spare06To11:6;
+   /*
+     @@ SUB_STRUCTURE = FaultB
+     @@ STRUCTURE = VsisrvIpduTxAId2SignalType
+     @@ DATA_TYPE = STRUCTURE VsiSrv_IpduSignalFaultBType
+     @@ END
+     */
+   VsisrvIpduSignalFaultBType FaultB;
+   /*
+     @@ ELEMENT = M3OverVoltVbatTh_LSB8
+     @@ STRUCTURE = VsisrvIpduTxAId2SignalType
+     @@ A2L_TYPE = MEASURE
+     @@ DATA_TYPE = ULONG 0xFF
+     @@ DESCRIPTION = "HVDC overvoltage"
+     @@ GROUP = VsiSrv
+     @@ END
+                 */
+   uint32 M3OverVoltVbatTh_LSB8:8;
+   /*
+     @@ ELEMENT = M3OverVoltVbatTh_MSB4
+     @@ STRUCTURE = VsisrvIpduTxAId2SignalType
+     @@ A2L_TYPE = MEASURE
+     @@ DATA_TYPE = ULONG 0x00F
+     @@ DESCRIPTION = "M3OverVoltVbatTh_MSB4"
+     @@ GROUP = VsiSrv
+     @@ END
+                 */
+   uint32 M3OverVoltVbatTh_MSB4:4;
+   /*
+     @@ ELEMENT = M2OverCurThBat_LSB4
+     @@ STRUCTURE = VsisrvIpduTxAId2SignalType
+     @@ A2L_TYPE = MEASURE
+     @@ DATA_TYPE = ULONG 0x00F0
+     @@ DESCRIPTION = "M2OverCurThBat_LSB4"
+     @@ GROUP = VsiSrv
+     @@ END
+                 */
+
+   uint32 M2OverCurThBat_LSB4:4;
+   /*
+     @@ ELEMENT = M2OverCurThBat_MSB8
+     @@ STRUCTURE = VsisrvIpduTxAId2SignalType
+     @@ A2L_TYPE = MEASURE
+     @@ DATA_TYPE = ULONG 0x00FF
+     @@ DESCRIPTION = "HVDC overvoltage"
+     @@ GROUP = VsiSrv
+     @@ END
+                 */
+   uint32 M2OverCurThBat_MSB8:8;
+   /*
+     @@ ELEMENT = M1Id2Spare_LSB8
+     @@ STRUCTURE = VsisrvIpduTxAId2SignalType
+     @@ A2L_TYPE = MEASURE
+     @@ DATA_TYPE = ULONG 0xFF
+     @@ DESCRIPTION = "M1Id2Spare_LSB8"
+     @@ GROUP = VsiSrv
+     @@ END
+                 */
+   uint32 M1Id2Spare_LSB8:8;
+   /*
+     @@ ELEMENT = M6Id2Spare_MSB8
+     @@ STRUCTURE = VsisrvIpduTxAId2SignalType
+     @@ A2L_TYPE = MEASURE
+     @@ DATA_TYPE = ULONG 0x00FF
+     @@ DESCRIPTION = "M6Id2Spare_MSB8"
+     @@ GROUP = VsiSrv
+     @@ END
+                 */
+   uint32 M6Id2Spare_MSB8:8;
+   /*
+     @@ ELEMENT = M5Id2Spare_LSB8
+     @@ STRUCTURE = VsisrvIpduTxAId2SignalType
+     @@ A2L_TYPE = MEASURE
+     @@ DATA_TYPE = ULONG 0x00FF
+     @@ DESCRIPTION = "HVDC overvoltage"
+     @@ GROUP = VsiSrv
+     @@ END
+                 */
+   uint32 M5Id2Spare_LSB8:8;
+   /*
+     @@ ELEMENT = M5Id2Spare_MSB4
+     @@ STRUCTURE = VsisrvIpduTxAId2SignalType
+     @@ A2L_TYPE = MEASURE
+     @@ DATA_TYPE = ULONG 0x000F
+     @@ DESCRIPTION = "HVDC overvoltage"
+     @@ GROUP = VsiSrv
+     @@ END
+                 */
+   uint32 M5Id2Spare_MSB4:4;
+   /*
+     @@ ELEMENT = M4Id2Spare_LSB4
+     @@ STRUCTURE = VsisrvIpduTxAId2SignalType
+     @@ A2L_TYPE = MEASURE
+     @@ DATA_TYPE = ULONG 0x00F0
+     @@ DESCRIPTION = "M4Id2Spare_LSB4"
+     @@ GROUP = VsiSrv
+     @@ END
+                 */
+   uint32 M4Id2Spare_LSB4:4;
+   /*
+     @@ ELEMENT = M4Id2Spare_MSB8
+     @@ STRUCTURE = VsisrvIpduTxAId2SignalType
+     @@ A2L_TYPE = MEASURE
+     @@ DATA_TYPE = ULONG 0xFF
+     @@ DESCRIPTION = "M4Id2Spare_MSB8"
+     @@ GROUP = VsiSrv
+     @@ END
+                 */
+   uint32 M4Id2Spare_MSB8:8;
+   /*
+  @@ ELEMENT = Ctrl
+  @@ STRUCTURE = VsisrvIpduTxAId2SignalType
+  @@ A2L_TYPE = MEASURE
+  @@ DATA_TYPE = UWORD
+  @@ DESCRIPTION = "Ctrl"
+  @@ GROUP = VsiSrv
+  @@ END
+                 */
+   uint16 Ctrl;
+   /*
+  @@ ELEMENT = Debug_LSB8
+  @@ STRUCTURE = VsisrvIpduTxAId2SignalType
+  @@ A2L_TYPE = MEASURE
+  @@ DATA_TYPE = UWORD 0x00FF
+  @@ DESCRIPTION = "Debug_LSB8"
+  @@ GROUP = VsiSrv
+  @@ END
+                 */
+   uint16 Debug_LSB8:8;
+   /*
+   @@ ELEMENT = Debug_MSB4
+   @@ STRUCTURE = VsisrvIpduTxAId2SignalType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = UWORD 0x0F00
+   @@ DESCRIPTION = "HVDC overvoltage"
+   @@ GROUP = VsiSrv
+   @@ END
+               */
+   uint16 Debug_MSB4:4;
+   /*
+  @@ ELEMENT = M6Id2Spare_LSB4
+  @@ STRUCTURE = VsisrvIpduTxAId2SignalType
+  @@ A2L_TYPE = MEASURE
+  @@ DATA_TYPE = UWORD 0xF000
+  @@ DESCRIPTION = "M6Id2Spare_LSB4"
+  @@ GROUP = VsiSrv
+  @@ END
+                 */
+   uint16 M6Id2Spare_LSB4:4;
+
+}VsisrvIpduTxAId2SignalType;
+
+/*------------------------------------*/
+/* VSI IPDU TxA ID 2 structure        */
+/*------------------------------------*/
+typedef union
+{
+   /*
+           @@ ELEMENT = Data32
+           @@ STRUCTURE = VsisrvIpduTxAId2Type
+           @@ A2L_TYPE = MEASURE
+           @@ DATA_TYPE = ULONG
+           @@ DIMENSION = 5
+           @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+           @@ GROUP = VsiSrv
+           @@ END
+           */
+   uint32 Data32[5];
+   /*
+           @@ ELEMENT = Data16
+           @@ STRUCTURE = VsisrvIpduTxAId2Type
+           @@ A2L_TYPE = MEASURE
+           @@ DATA_TYPE = UWORD
+           @@ DIMENSION = 10
+           @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+           @@ GROUP = VsiSrv
+           @@ END
+           */
+   uint16 Data16[10];
+   /*
+           @@ ELEMENT = Data8
+           @@ STRUCTURE = VsisrvIpduTxAId2Type
+           @@ A2L_TYPE = MEASURE
+           @@ DATA_TYPE = UBYTE
+           @@ DIMENSION = 20
+           @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+           @@ GROUP = VsiSrv
+           @@ END
+           */
+   uint8  Data8[20];
+   /*
+      @@ SUB_STRUCTURE = Signal
+      @@ STRUCTURE = VsisrvIpduTxAId2Type
+      @@ DATA_TYPE = STRUCTURE VsisrvIpduTxAId2SignalType
+      @@ END
+      */
+   VsisrvIpduTxAId2SignalType Signal;
+
+}VsisrvIpduTxAId2Type;
+
+typedef struct
+   {
+      /*
+   @@ SUB_STRUCTURE = FaultA
+   @@ STRUCTURE = VsisrvIpduTxAId3Type
+   @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalFaultAType
+   @@ END
+   */
+
+      VsisrvIpduSignalFaultAType FaultA;
+      /*
+     @@ SUB_STRUCTURE = StateRes
+     @@ STRUCTURE = VsisrvIpduTxAId3Type
+     @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalStateResType
+     @@ END
+   */
+      VsisrvIpduSignalStateReqType StateReq;
+      /*
+              @@ ELEMENT = Id
+              @@ STRUCTURE = VsisrvIpduTxAId3Type
+              @@ A2L_TYPE = MEASURE
+              @@ DATA_TYPE = UBYTE
+              @@ DESCRIPTION = "Id"
+              @@ GROUP = VsiSrv
+              @@ END
+               */
+      uint8 Id;
+      /*
+          @@ ELEMENT = M1DebugH_MSB4
+          @@ STRUCTURE = VsisrvIpduTxAId3Type
+          @@ A2L_TYPE = MEASURE
+          @@ DATA_TYPE = UWORD 0x000F
+          @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+          @@ GROUP = VsiSrv
+          @@ END
+          */
+      uint16 M1DebugH_MSB4:4;
+      /*
+          @@ ELEMENT = M0DebugL_LSB4
+          @@ STRUCTURE = VsisrvIpduTxAId3Type
+          @@ A2L_TYPE = MEASURE
+          @@ DATA_TYPE = UWORD 0x00F0
+          @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+          @@ GROUP = VsiSrv
+          @@ END
+          */
+      uint16 M0DebugL_LSB4:4;
+      /*
+            @@ ELEMENT = M0DebugL_MSB8
+            @@ STRUCTURE = VsisrvIpduTxAId3Type
+            @@ A2L_TYPE = MEASURE
+            @@ DATA_TYPE = UWORD 0xFF
+            @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+            @@ GROUP = VsiSrv
+            @@ END
+            */
+
+      uint16 M0DebugL_MSB8:8;
+      /*
+              @@ SUB_STRUCTURE = FaultB
+              @@ STRUCTURE = VsisrvIpduTxAId3Type
+              @@ DATA_TYPE = STRUCTURE FpgaIfAppl_IpduSignalFaultBType
+              @@ END
+          */
+      VsisrvIpduSignalFaultBType FaultB;
+
+      /*
+            @@ ELEMENT = M3ActiveDisDur_LSB8
+            @@ STRUCTURE = VsisrvIpduTxAId3Type
+            @@ A2L_TYPE = MEASURE
+            @@ DATA_TYPE = ULONG 0x00FF
+            @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+            @@ GROUP = VsiSrv
+            @@ END
+            */
+      uint32 M3ActiveDisDur_LSB8:8;
+      /*
+            @@ ELEMENT = M3ActiveDisDur_MSB4
+            @@ STRUCTURE = VsisrvIpduTxAId3Type
+            @@ A2L_TYPE = MEASURE
+            @@ DATA_TYPE = ULONG 0x00F
+            @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+            @@ GROUP = VsiSrv
+            @@ END
+            */
+      uint32 M3ActiveDisDur_MSB4:4;
+      /*
+            @@ ELEMENT = M2OverCurThMot_LSB4
+            @@ STRUCTURE = VsisrvIpduTxAId3Type
+            @@ A2L_TYPE = MEASURE
+            @@ DATA_TYPE = ULONG 0x00F0
+            @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+            @@ GROUP = VsiSrv
+            @@ END
+            */
+      uint32 M2OverCurThMot_LSB4:4;
+      /*
+            @@ ELEMENT = M2OverCurThMot_MSB8
+            @@ STRUCTURE = VsisrvIpduTxAId3Type
+            @@ A2L_TYPE = MEASURE
+            @@ DATA_TYPE = ULONG 0x00FF
+            @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+            @@ GROUP = VsiSrv
+            @@ END
+            */
+      uint32 M2OverCurThMot_MSB8:8;
+      /*
+            @@ ELEMENT = M1DebugH_LSB8
+            @@ STRUCTURE = VsisrvIpduTxAId3Type
+            @@ A2L_TYPE = MEASURE
+            @@ DATA_TYPE = ULONG 0xFF
+            @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+            @@ GROUP = VsiSrv
+            @@ END
+            */
+      uint32 M1DebugH_LSB8:8;
+
+      /*
+            @@ ELEMENT = M6Id3Spare_MSB8
+            @@ STRUCTURE = VsisrvIpduTxAId3Type
+            @@ A2L_TYPE = MEASURE
+            @@ DATA_TYPE = ULONG 0x0FF
+            @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+            @@ GROUP = VsiSrv
+            @@ END
+            */
+      uint32 M6Id3Spare_MSB8:8;
+      /*
+       @@ ELEMENT = M5Id3Spare_LSB8
+       @@ STRUCTURE = VsisrvIpduTxAId3Type
+       @@ A2L_TYPE = MEASURE
+       @@ DATA_TYPE = ULONG 0x00FF
+       @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+       @@ GROUP = VsiSrv
+       @@ END
+       */
+      uint32 M5Id3Spare_LSB8:8;
+      /*
+       @@ ELEMENT = M5Id3Spare_MSB4
+       @@ STRUCTURE = VsisrvIpduTxAId3Type
+       @@ A2L_TYPE = MEASURE
+       @@ DATA_TYPE = ULONG 0x000F
+       @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+       @@ GROUP = VsiSrv
+       @@ END
+       */
+      uint32 M5Id3Spare_MSB4:4;
+      /*
+       @@ ELEMENT = M4SynchroDelay_LSB4
+       @@ STRUCTURE = VsisrvIpduTxAId3Type
+       @@ A2L_TYPE = MEASURE
+       @@ DATA_TYPE = ULONG 0x00F0
+       @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+       @@ GROUP = VsiSrv
+       @@ END
+       */
+      uint32 M4SynchroDelay_LSB4:4;
+      /*
+           @@ ELEMENT = M4SynchroDelay_MSB8
+           @@ STRUCTURE = VsisrvIpduTxAId3Type
+           @@ A2L_TYPE = MEASURE
+           @@ DATA_TYPE = ULONG 0xFF
+           @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+           @@ GROUP = VsiSrv
+           @@ END
+           */
+      uint32 M4SynchroDelay_MSB8:8;
+      /*
+          @@ ELEMENT = Ctrl
+          @@ STRUCTURE = VsisrvIpduTxAId3Type
+          @@ A2L_TYPE = MEASURE
+          @@ DATA_TYPE = UWORD
+          @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+          @@ GROUP = VsiSrv
+          @@ END
+          */
+      uint16 Ctrl;
+      /*
+         @@ ELEMENT = Debug_LSB8
+         @@ STRUCTURE = VsisrvIpduTxAId3Type
+         @@ A2L_TYPE = MEASURE
+         @@ DATA_TYPE = UWORD 0x00FF
+         @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+         @@ GROUP = VsiSrv
+         @@ END
+         */
+      uint16 Debug_LSB8:8;
+      /*
+         @@ ELEMENT = Debug_MSB4
+         @@ STRUCTURE = VsisrvIpduTxAId3Type
+         @@ A2L_TYPE = MEASURE
+         @@ DATA_TYPE = UWORD 0x0F00
+         @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+         @@ GROUP = VsiSrv
+         @@ END
+         */
+
+      uint16 Debug_MSB4:4;
+      /*
+         @@ ELEMENT = M6Id3Spare_LSB4
+         @@ STRUCTURE = VsisrvIpduTxAId3Type
+         @@ A2L_TYPE = MEASURE
+         @@ DATA_TYPE = UWORD 0xF000
+         @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+         @@ GROUP = VsiSrv
+         @@ END
+         */
+
+      uint16 M6Id3Spare_LSB4:4;
+
+
+   }VsisrvIpduTxAId3SignalType;
+
+/*------------------------------------*/
+/* VSI IPDU TxA ID 3 structure        */
+/*------------------------------------*/
+typedef union
+{
+   /*
+        @@ ELEMENT = Data32
+        @@ STRUCTURE = VsisrvIpduTxAId3Type
+        @@ A2L_TYPE = MEASURE
+        @@ DATA_TYPE = ULONG
+        @@ DIMENSION = 5
+        @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+        @@ GROUP = VsiSrv
+        @@ END
+        */
+   uint32 Data32[5];
+   /*
+        @@ ELEMENT = Data16
+        @@ STRUCTURE = VsisrvIpduTxAId3Type
+        @@ A2L_TYPE = MEASURE
+        @@ DATA_TYPE = UWORD
+        @@ DIMENSION = 10
+        @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+        @@ GROUP = VsiSrv
+        @@ END
+        */
+   uint16 Data16[10];
+   /*
+        @@ ELEMENT = Data8
+        @@ STRUCTURE = VsisrvIpduTxAId3Type
+        @@ A2L_TYPE = MEASURE
+        @@ DATA_TYPE = UBYTE
+        @@ DIMENSION = 20
+        @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+        @@ GROUP = VsiSrv
+        @@ END
+        */
+   uint8  Data8[20];
+   /*
+    @@ SUB_STRUCTURE = Signal
+    @@ STRUCTURE = VsisrvIpduTxAId3Type
+    @@ DATA_TYPE = STRUCTURE VsisrvIpduTxAId3SignalType
+    @@ END
+   */
+   VsisrvIpduTxAId3SignalType Signal;
+
+}VsisrvIpduTxAId3Type;
+
+/*----------------------------------------------------------------------------*/
+/*------------------------------------*/
+/* VSI IPDU Rx structures             */
+/*------------------------------------*/
+
+typedef struct
+{
+   /*
+@@ SUB_STRUCTURE = FaultA
+@@ STRUCTURE = VsiSrv_IpduRxASignalType
+@@ DATA_TYPE = STRUCTURE VsisrvIpduSignalFaultAType
+@@ END
+*/
+
+   VsisrvIpduSignalFaultAType FaultA;
+   /*
+  @@ SUB_STRUCTURE = StateRes
+  @@ STRUCTURE = VsiSrv_IpduRxASignalType
+  @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalStateResType
+  @@ END
+*/
+   VsisrvIpduSignalStateResType StateRes;
+   /*
+           @@ ELEMENT = Id
+           @@ STRUCTURE = VsiSrv_IpduRxASignalType
+           @@ A2L_TYPE = MEASURE
+           @@ DATA_TYPE = UBYTE
+           @@ DESCRIPTION = "Id"
+           @@ GROUP = VsiSrv
+           @@ END
+            */
+   uint8 Id;
+   /*
+          @@ SUB_STRUCTURE = FaultC
+          @@ STRUCTURE = VsiSrv_IpduRxASignalType
+          @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalFaultCType
+          @@ END
+        */
+   VsisrvIpduSignalFaultCType FaultC;
+   /*
+       @@ SUB_STRUCTURE = FaultB
+       @@ STRUCTURE = VsiSrv_IpduRxASignalType
+       @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalFaultBType
+       @@ END
+     */
+   VsisrvIpduSignalFaultBType FaultB;
+   /*
+     @@ ELEMENT = M1_MSB8
+     @@ STRUCTURE = VsiSrv_IpduRxASignalType
+     @@ A2L_TYPE = MEASURE
+     @@ DATA_TYPE = ULONG 0xFF
+     @@ DESCRIPTION = "M1_MSB8"
+     @@ GROUP = VsiSrv
+     @@ END
+   */
+   uint32 M1_MSB8:8;
+   /*
+       @@ ELEMENT = M0_LSB8
+       @@ STRUCTURE = VsiSrv_IpduRxASignalType
+       @@ A2L_TYPE = MEASURE
+       @@ DATA_TYPE = ULONG 0xFF
+       @@ DESCRIPTION = "M0_LSB8"
+       @@ GROUP = VsiSrv
+       @@ END
+     */
+   uint32 M0_LSB8:8;
+   /*
+          @@ ELEMENT = M0_MSB4
+          @@ STRUCTURE = VsiSrv_IpduRxASignalType
+          @@ A2L_TYPE = MEASURE
+          @@ DATA_TYPE = ULONG 0xFF
+          @@ DESCRIPTION = "M0_MSB4"
+          @@ GROUP = VsiSrv
+          @@ END
+        */
+   uint32 M0_MSB4:4;
+   /*
+          @@ ELEMENT = Debug64To75_LSB4
+          @@ STRUCTURE = VsiSrv_IpduRxASignalType
+          @@ A2L_TYPE = MEASURE
+          @@ DATA_TYPE = ULONG 0xFF
+          @@ DESCRIPTION = "Debug64To75_LSB4"
+          @@ GROUP = VsiSrv
+          @@ END
+        */
+   uint32 Debug64To75_LSB4:4;
+   /*
+          @@ ELEMENT = Debug64To75_MSB8
+          @@ STRUCTURE = VsiSrv_IpduRxASignalType
+          @@ A2L_TYPE = MEASURE
+          @@ DATA_TYPE = ULONG 0xFF
+          @@ DESCRIPTION = "Debug64To75_MSB8"
+          @@ GROUP = VsiSrv
+          @@ END
+        */
+   uint32 Debug64To75_MSB8:8;
+   /*
+            @@ ELEMENT = Ctrl
+            @@ STRUCTURE = VsiSrv_IpduRxASignalType
+            @@ A2L_TYPE = MEASURE
+            @@ DATA_TYPE = UWORD
+            @@ DESCRIPTION = "Ctrl"
+            @@ GROUP = VsiSrv
+            @@ END
+          */
+   uint16 Ctrl;
+
+   /*
+          @@ ELEMENT = Debug100To111_LSB8
+          @@ STRUCTURE = VsiSrv_IpduRxASignalType
+          @@ A2L_TYPE = MEASURE
+          @@ DATA_TYPE = ULONG 0xFF
+          @@ DESCRIPTION = "Debug100To111_LSB8"
+          @@ GROUP = VsiSrv
+          @@ END
+        */
+   uint16 Debug100To111_LSB8:8;
+   /*
+          @@ ELEMENT = Debug100To111_MSB4
+          @@ STRUCTURE = VsiSrv_IpduRxASignalType
+          @@ A2L_TYPE = MEASURE
+          @@ DATA_TYPE = ULONG 0xFF
+          @@ DESCRIPTION = "Debug100To111_MSB4"
+          @@ GROUP = VsiSrv
+          @@ END
+        */
+   uint16 Debug100To111_MSB4:4;
+   /*
+          @@ ELEMENT = M1_LSB4
+          @@ STRUCTURE = VsiSrv_IpduRxASignalType
+          @@ A2L_TYPE = MEASURE
+          @@ DATA_TYPE = ULONG 0xFF
+          @@ DESCRIPTION = "M1_LSB4"
+          @@ GROUP = VsiSrv
+          @@ END
+        */
+   uint16 M1_LSB4:4;
+
+}VsiSrv_IpduRxASignalType;
+
+/*------------------------------------*/
+/* VSI IPDU RxA structure             */
+/*------------------------------------*/
+typedef union
+{
+   /*
+            @@ ELEMENT = Data32
+            @@ STRUCTURE = VsisrvIpduRxAType
+            @@ A2L_TYPE = MEASURE
+            @@ DATA_TYPE = ULONG
+            @@ DIMENSION = 4
+            @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+            @@ GROUP = VsiSrv
+            @@ END
+             */
+   uint32 Data32[4];
+   /*
+      @@ ELEMENT = Data16
+      @@ STRUCTURE = VsisrvIpduRxAType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = UWORD
+      @@ DIMENSION = 8
+      @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+      @@ GROUP = VsiSrv
+      @@ END
+       */
+   uint16 Data16[8];
+   /*
+      @@ ELEMENT = Data8
+      @@ STRUCTURE = VsisrvIpduRxAType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = UBYTE
+      @@ DIMENSION = 16
+      @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+      @@ GROUP = VsiSrv
+      @@ END
+       */
+
+   uint8  Data8[16];
+
+   /*
+   @@ SUB_STRUCTURE = Signal
+   @@ STRUCTURE = VsisrvIpduRxAType
+   @@ DATA_TYPE = STRUCTURE VsiSrv_IpduRxASignalType
+   @@ END
+ */
+   VsiSrv_IpduRxASignalType Signal;
+
+}VsisrvIpduRxAType;
+
+typedef struct
+  {
+   /*
+@@ SUB_STRUCTURE = FaultA
+@@ STRUCTURE = VsiSrv_IpduRxAId0SignalType
+@@ DATA_TYPE = STRUCTURE VsisrvIpduSignalFaultAType
+@@ END
+*/
+     VsisrvIpduSignalFaultAType FaultA;
+     /*
+    @@ SUB_STRUCTURE = StateRes
+    @@ STRUCTURE = VsiSrv_IpduRxAId0SignalType
+    @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalStateResType
+    @@ END
+  */
+     VsisrvIpduSignalStateResType StateRes;
+     /*
+        @@ ELEMENT = Id
+        @@ STRUCTURE = VsiSrv_IpduRxAId0SignalType
+        @@ A2L_TYPE = MEASURE
+        @@ DATA_TYPE = UBYTE
+        @@ DESCRIPTION = "Id"
+        @@ GROUP = VsiSrv
+        @@ END
+         */
+     uint8 Id;
+     /*
+       @@ SUB_STRUCTURE = FaultC
+       @@ STRUCTURE = VsiSrv_IpduRxAId0SignalType
+       @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalFaultCType
+       @@ END
+     */
+
+     VsisrvIpduSignalFaultCType FaultC;
+     /*
+    @@ SUB_STRUCTURE = FaultB
+    @@ STRUCTURE = VsiSrv_IpduRxAId0SignalType
+    @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalFaultBType
+    @@ END
+  */
+
+     VsisrvIpduSignalFaultBType FaultB;
+     /*
+           @@ ELEMENT = MeasCurBat_MSB8
+           @@ STRUCTURE = VsiSrv_IpduRxAId0SignalType
+           @@ A2L_TYPE = MEASURE
+           @@ DATA_TYPE = ULONG 0xFF
+           @@ DESCRIPTION = "MeasCurBat_MSB8"
+           @@ GROUP = VsiSrv
+           @@ END
+       */
+     uint32 MeasCurBat_MSB8:8;
+     /*
+          @@ ELEMENT = TempIgbt_LSB8
+          @@ STRUCTURE = VsiSrv_IpduRxAId0SignalType
+          @@ A2L_TYPE = MEASURE
+          @@ DATA_TYPE = ULONG 0xFF
+          @@ DESCRIPTION = "TempIgbt_LSB8"
+          @@ GROUP = VsiSrv
+          @@ END
+            */
+     uint32 TempIgbt_LSB8:8;
+     /*
+          @@ ELEMENT = TempIgbt_MSB4
+          @@ STRUCTURE = VsiSrv_IpduRxAId0SignalType
+          @@ A2L_TYPE = MEASURE
+          @@ DATA_TYPE = ULONG 0xFF
+          @@ DESCRIPTION = "TempIgbt_MSB4"
+          @@ GROUP = VsiSrv
+          @@ END
+            */
+     uint32 TempIgbt_MSB4:4;
+     /*
+              @@ ELEMENT = Debug64To75_LSB4
+              @@ STRUCTURE = VsiSrv_IpduRxAId0SignalType
+              @@ A2L_TYPE = MEASURE
+              @@ DATA_TYPE = ULONG 0xF
+              @@ DESCRIPTION = "Debug64To75_LSB4"
+              @@ GROUP = VsiSrv
+              @@ END
+ */
+
+     uint32 Debug64To75_LSB4:4;
+     /*
+              @@ ELEMENT = Debug64To75_MSB8
+              @@ STRUCTURE = VsiSrv_IpduRxAId0SignalType
+              @@ A2L_TYPE = MEASURE
+              @@ DATA_TYPE = ULONG 0xFF0
+              @@ DESCRIPTION = "Debug64To75_MSB8"
+              @@ GROUP = VsiSrv
+              @@ END
+ */
+
+     uint32 Debug64To75_MSB8:8;
+     /*
+                 @@ ELEMENT = Ctrl
+                 @@ STRUCTURE = VsiSrv_IpduRxAId0SignalType
+                 @@ A2L_TYPE = MEASURE
+                 @@ DATA_TYPE = UWORD
+                 @@ DESCRIPTION = "Ctrl"
+                 @@ GROUP = VsiSrv
+                 @@ END
+    */
+
+     uint16 Ctrl;
+     /*
+                  @@ ELEMENT = Debug100To111_MSB4
+                  @@ STRUCTURE = VsiSrv_IpduRxAId0SignalType
+                  @@ A2L_TYPE = MEASURE
+                  @@ DATA_TYPE = UWORD 0x000F
+                  @@ DESCRIPTION = "Debug100To111_MSB4"
+                  @@ GROUP = VsiSrv
+                  @@ END
+     */
+
+     uint16 Debug100To111_MSB4:4;
+     /*
+            @@ ELEMENT = Debug100To111_LSB8
+            @@ STRUCTURE = VsiSrv_IpduRxAId0SignalType
+            @@ A2L_TYPE = MEASURE
+            @@ DATA_TYPE = UWORD 0x0FF0
+            @@ DESCRIPTION = "Debug100To111_LSB8"
+            @@ GROUP = VsiSrv
+            @@ END
+*/
+
+     uint16 Debug100To111_LSB8:8;
+     /*
+              @@ ELEMENT = MeasCurBat_LSB4
+              @@ STRUCTURE = VsiSrv_IpduRxAId0SignalType
+              @@ A2L_TYPE = MEASURE
+              @@ DATA_TYPE = UWORD
+              @@ DESCRIPTION = "MeasCurBat_LSB4"
+              @@ GROUP = VsiSrv
+              @@ END
+ */
+     uint16 MeasCurBat_LSB4:4;
+
+  }VsiSrv_IpduRxAId0SignalType;
+
+/*------------------------------------*/
+/* VSI IPDU RxA ID 0 structure        */
+/*------------------------------------*/
+typedef union
+{
+   /*
+         @@ ELEMENT = Data32
+         @@ STRUCTURE = VsiSrv_IpduRxAId0Type
+         @@ A2L_TYPE = MEASURE
+         @@ DATA_TYPE = ULONG
+         @@ DIMENSION = 4
+         @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+         @@ GROUP = VsiSrv
+         @@ END
+          */
+   uint32 Data32[4];
+   /*
+         @@ ELEMENT = Data16
+         @@ STRUCTURE = VsiSrv_IpduRxAId0Type
+         @@ A2L_TYPE = MEASURE
+         @@ DATA_TYPE = UWORD
+         @@ DIMENSION = 8
+         @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+         @@ GROUP = VsiSrv
+         @@ END
+          */
+   uint16 Data16[8];
+   /*
+         @@ ELEMENT = Data8
+         @@ STRUCTURE = VsiSrv_IpduRxAId0Type
+         @@ A2L_TYPE = MEASURE
+         @@ DATA_TYPE = UBYTE
+         @@ DIMENSION = 16
+         @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+         @@ GROUP = VsiSrv
+         @@ END
+          */
+   uint8  Data8[16];
+   /*
+     @@ SUB_STRUCTURE = Signal
+     @@ STRUCTURE = VsisrvIpduRxAId0Type
+     @@ DATA_TYPE = STRUCTURE VsiSrv_IpduRxAId0SignalType
+     @@ END
+   */
+   VsiSrv_IpduRxAId0SignalType Signal;
+
+}VsisrvIpduRxAId0Type;
+
+typedef struct
+{
+   /*
+ @@ SUB_STRUCTURE = FaultA
+ @@ STRUCTURE = VsisrvIpduRxAId1SignalType
+ @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalFaultAType
+ @@ END
+*/
+
+   VsisrvIpduSignalFaultAType FaultA;
+   /*
+     @@ SUB_STRUCTURE = StateRes
+     @@ STRUCTURE = VsisrvIpduRxAId1SignalType
+     @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalStateResType
+     @@ END
+   */
+
+   VsisrvIpduSignalStateResType StateRes;
+   /*
+    @@ ELEMENT = Id
+    @@ STRUCTURE = VsisrvIpduRxAId1SignalType
+    @@ A2L_TYPE = MEASURE
+    @@ DATA_TYPE = UBYTE
+    @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+    @@ GROUP = VsiSrv
+    @@ END
+     */
+
+   uint8 Id;
+   /*
+     @@ SUB_STRUCTURE = FaultC
+     @@ STRUCTURE = VsisrvIpduRxAId1SignalType
+     @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalFaultCType
+     @@ END
+         */
+   VsisrvIpduSignalFaultCType FaultC;
+   /*
+      @@ SUB_STRUCTURE = FaultB
+      @@ STRUCTURE = VsisrvIpduRxAId1SignalType
+      @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalFaultBType
+      @@ END
+    */
+
+   VsisrvIpduSignalFaultBType FaultB;
+   /*
+   @@ ELEMENT = DcLinkDrvBd_MSB8
+   @@ STRUCTURE = VsisrvIpduRxAId1SignalType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = ULONG 0xFF
+   @@ DESCRIPTION = "DcLinkDrvBd_MSB8"
+   @@ GROUP = VsiSrv
+   @@ END
+   */
+
+   uint32 DcLinkDrvBd_MSB8:8;
+   /*
+   @@ ELEMENT = DcLinkCtrlBd_LSB8
+   @@ STRUCTURE = VsisrvIpduRxAId1SignalType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = ULONG 0xFF
+   @@ DESCRIPTION = "DcLinkCtrlBd_LSB8"
+   @@ GROUP = VsiSrv
+   @@ END
+        */
+   uint32 DcLinkCtrlBd_LSB8:8;
+   /*
+    @@ ELEMENT = DcLinkCtrlBd_MSB4
+    @@ STRUCTURE = VsisrvIpduRxAId1SignalType
+    @@ A2L_TYPE = MEASURE
+    @@ DATA_TYPE = ULONG 0xF
+    @@ DESCRIPTION = "DcLinkCtrlBd_MSB4"
+    @@ GROUP = VsiSrv
+    @@ END
+   */
+   uint32 DcLinkCtrlBd_MSB4:4;
+   /*
+    @@ ELEMENT = Debug64To75_LSB4
+    @@ STRUCTURE = VsisrvIpduRxAId1SignalType
+    @@ A2L_TYPE = MEASURE
+    @@ DATA_TYPE = ULONG 0xF0
+    @@ DESCRIPTION = "Debug64To75_LSB4"
+    @@ GROUP = VsiSrv
+    @@ END
+   */
+   uint32 Debug64To75_LSB4:4;
+   /*
+   @@ ELEMENT = Debug64To75_MSB8
+   @@ STRUCTURE = VsisrvIpduRxAId1SignalType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = ULONG 0xFF
+   @@ DESCRIPTION = "Debug64To75_MSB8"
+   @@ GROUP = VsiSrv
+   @@ END
+  */
+   uint32 Debug64To75_MSB8:8;
+   /*
+   @@ ELEMENT = Ctrl
+   @@ STRUCTURE = VsisrvIpduRxAId1SignalType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = UWORD
+   @@ DESCRIPTION = "Ctrl"
+   @@ GROUP = VsiSrv
+   @@ END
+        */
+   uint16 Ctrl;
+   /*
+   @@ ELEMENT = Debug100To111_MSB4
+   @@ STRUCTURE = VsisrvIpduRxAId1SignalType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = UWORD 0x000F
+   @@ DESCRIPTION = "Debug100To111_MSB4"
+   @@ GROUP = VsiSrv
+   @@ END
+    */
+   uint16 Debug100To111_MSB4:4;
+   /*
+   @@ ELEMENT = Debug100To111_LSB8
+   @@ STRUCTURE = VsisrvIpduRxAId1SignalType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = UWORD 0x0FF0
+   @@ DESCRIPTION = "Debug100To111_LSB8"
+   @@ GROUP = VsiSrv
+   @@ END
+        */
+
+   uint16 Debug100To111_LSB8:8;
+   /*
+   @@ ELEMENT = DcLinkDrvBd_LSB4
+   @@ STRUCTURE = VsisrvIpduRxAId1SignalType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = UWORD 0xF0
+   @@ DESCRIPTION = "DcLinkDrvBd_LSB4"
+   @@ GROUP = VsiSrv
+   @@ END
+        */
+   uint16 DcLinkDrvBd_LSB4:4;
+
+}VsisrvIpduRxAId1SignalType;
+
+/*------------------------------------*/
+/* VSI IPDU RxA ID 1 structure        */
+/*------------------------------------*/
+typedef union
+{
+   /*
+    @@ ELEMENT = Data32
+    @@ STRUCTURE = VsisrvIpduRxAId1Type
+    @@ A2L_TYPE = MEASURE
+    @@ DATA_TYPE = ULONG
+    @@ DIMENSION = 4
+    @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+    @@ GROUP = VsiSrv
+    @@ END
+           */
+   uint32 Data32[4];
+   /*
+       @@ ELEMENT = Data16
+       @@ STRUCTURE = VsisrvIpduRxAId1Type
+       @@ A2L_TYPE = MEASURE
+       @@ DATA_TYPE = UWORD
+       @@ DIMENSION = 8
+       @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+       @@ GROUP = VsiSrv
+       @@ END
+        */
+
+   uint16 Data16[8];
+   /*
+       @@ ELEMENT = Data8
+       @@ STRUCTURE = VsisrvIpduRxAId1Type
+       @@ A2L_TYPE = MEASURE
+       @@ DATA_TYPE = UBYTE
+       @@ DIMENSION = 16
+       @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+       @@ GROUP = VsiSrv
+       @@ END
+        */
+   uint8  Data8[16];
+   /*
+        @@ SUB_STRUCTURE = Signal
+        @@ STRUCTURE = VsisrvIpduRxAId1Type
+        @@ DATA_TYPE = STRUCTURE VsisrvIpduRxAId1SignalType
+        @@ END
+      */
+
+   VsisrvIpduRxAId1SignalType Signal;
+
+}VsisrvIpduRxAId1Type;
+
+typedef struct
+   {
+   /*
+        @@ SUB_STRUCTURE = FaultA
+        @@ STRUCTURE = VsisrvIpduRxAId2SignalType
+        @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalFaultAType
+        @@ END
+      */
+      VsisrvIpduSignalFaultAType FaultA;
+      /*
+        @@ SUB_STRUCTURE = StateRes
+        @@ STRUCTURE = VsisrvIpduRxAId2SignalType
+        @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalStateResType
+        @@ END
+            */
+      VsisrvIpduSignalStateResType StateRes;
+      /*
+         @@ ELEMENT = Id
+         @@ STRUCTURE = VsisrvIpduRxAId2SignalType
+         @@ A2L_TYPE = MEASURE
+         @@ DATA_TYPE = UBYTE
+         @@ DESCRIPTION = "Id"
+         @@ GROUP = VsiSrv
+         @@ END
+           */
+      uint8 Id;
+      /*
+        @@ SUB_STRUCTURE = FaultC
+        @@ STRUCTURE = VsisrvIpduRxAId2SignalType
+        @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalFaultCType
+        @@ END
+            */
+      VsisrvIpduSignalFaultCType FaultC;
+      /*
+       @@ SUB_STRUCTURE = FaultB
+       @@ STRUCTURE = VsisrvIpduRxAId2SignalType
+       @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalFaultBType
+       @@ END
+           */
+      VsisrvIpduSignalFaultBType FaultB;
+      /*
+      @@ ELEMENT = M1VFpgaL_MSB8
+      @@ STRUCTURE = VsisrvIpduRxAId2SignalType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = ULONG 0xFF
+      @@ DESCRIPTION = "M1VFpgaL_MSB8"
+      @@ GROUP = VsiSrv
+      @@ END
+           */
+      uint32 M1VFpgaL_MSB8:8;
+      /*
+     @@ ELEMENT = TempCtrlBd_LSB8
+     @@ STRUCTURE = VsisrvIpduRxAId2SignalType
+     @@ A2L_TYPE = MEASURE
+     @@ DATA_TYPE = ULONG 0xFF
+     @@ DESCRIPTION = "TempCtrlBd_LSB8"
+     @@ GROUP = VsiSrv
+     @@ END
+          */
+      uint32 TempCtrlBd_LSB8:8;
+      /*
+    @@ ELEMENT = TempCtrlBd_MSB4
+    @@ STRUCTURE = VsisrvIpduRxAId2SignalType
+    @@ A2L_TYPE = MEASURE
+    @@ DATA_TYPE = ULONG 0x0F
+    @@ DESCRIPTION = "TempCtrlBd_MSB4"
+    @@ GROUP = VsiSrv
+    @@ END
+         */
+      uint32 TempCtrlBd_MSB4:4;
+      /*
+   @@ ELEMENT = Debug64To75_LSB4
+   @@ STRUCTURE = VsisrvIpduRxAId2SignalType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = ULONG 0xF0
+   @@ DESCRIPTION = "Debug64To75_LSB4"
+   @@ GROUP = VsiSrv
+   @@ END
+           */
+      uint32 Debug64To75_LSB4:4;
+      /*
+      @@ ELEMENT = Debug64To75_MSB8
+      @@ STRUCTURE = VsisrvIpduRxAId2SignalType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = ULONG 0xFF
+      @@ DESCRIPTION = "Debug64To75_MSB8"
+      @@ GROUP = VsiSrv
+      @@ END
+           */
+      uint32 Debug64To75_MSB8:8;
+      /*
+      @@ ELEMENT = Ctrl
+      @@ STRUCTURE = VsisrvIpduRxAId2SignalType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = UWORD
+      @@ DESCRIPTION = "Ctrl"
+      @@ GROUP = VsiSrv
+      @@ END
+           */
+      uint16 Ctrl;
+      /*
+      @@ ELEMENT = Debug100To111_MSB4
+      @@ STRUCTURE = VsisrvIpduRxAId2SignalType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = UWORD 0x000F
+      @@ DESCRIPTION = "Debug100To111_MSB4"
+      @@ GROUP = VsiSrv
+      @@ END
+           */
+      uint16 Debug100To111_MSB4:4;
+      /*
+      @@ ELEMENT = Debug100To111_LSB8
+      @@ STRUCTURE = VsisrvIpduRxAId2SignalType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = UWORD 0x0FF0
+      @@ DESCRIPTION = "Debug100To111_LSB8"
+      @@ GROUP = VsiSrv
+      @@ END
+           */
+      uint16 Debug100To111_LSB8:8;
+      /*
+      @@ ELEMENT = M1VFpgaL_LSB4
+      @@ STRUCTURE = VsisrvIpduRxAId2SignalType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = UWORD 0xF0
+      @@ DESCRIPTION = "M1VFpgaL_LSB4"
+      @@ GROUP = VsiSrv
+      @@ END
+           */
+      uint16 M1VFpgaL_LSB4:4;
+
+   }VsisrvIpduRxAId2SignalType;
+
+/*------------------------------------*/
+/* VSI IPDU RxA ID 2 structure        */
+/*------------------------------------*/
+typedef union
+{
+   /*
+      @@ ELEMENT = Data32
+      @@ STRUCTURE = VsisrvIpduRxAId2Type
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = ULONG
+      @@ DIMENSION = 4
+      @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+      @@ GROUP = VsiSrv
+      @@ END
+             */
+   uint32 Data32[4];
+   /*
+      @@ ELEMENT = Data16
+      @@ STRUCTURE = VsisrvIpduRxAId2Type
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = UWORD
+      @@ DIMENSION = 8
+      @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+      @@ GROUP = VsiSrv
+      @@ END
+             */
+   uint16 Data16[8];
+   /*
+      @@ ELEMENT = Data8
+      @@ STRUCTURE = VsisrvIpduRxAId2Type
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = UBYTE
+      @@ DIMENSION = 4
+      @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+      @@ GROUP = VsiSrv
+      @@ END
+             */
+   uint8  Data8[16];
+
+   /*
+     @@ SUB_STRUCTURE = Signal
+     @@ STRUCTURE = VsisrvIpduRxAId2Type
+     @@ DATA_TYPE = STRUCTURE VsisrvIpduRxAId2SignalType
+     @@ END
+      */
+   VsisrvIpduRxAId2SignalType Signal;
+
+}VsisrvIpduRxAId2Type;
+
+typedef struct
+{
+
+   /*
+        @@ SUB_STRUCTURE = FaultA
+        @@ STRUCTURE = VsisrvIpduRxAId3SignalType
+        @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalFaultAType
+        @@ END
+      */
+   VsisrvIpduSignalFaultAType FaultA;
+   /*
+        @@ SUB_STRUCTURE = StateRes
+        @@ STRUCTURE = VsisrvIpduRxAId3SignalType
+        @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalStateResType
+        @@ END
+      */
+   VsisrvIpduSignalStateResType StateRes;
+   /*
+         @@ ELEMENT = Id
+         @@ STRUCTURE = VsisrvIpduRxAId3SignalType
+         @@ A2L_TYPE = MEASURE
+         @@ DATA_TYPE = UBYTE
+         @@ DESCRIPTION = "Id"
+         @@ GROUP = VsiSrv
+         @@ END
+     */
+   uint8 Id;
+   /*
+        @@ SUB_STRUCTURE = FaultC
+        @@ STRUCTURE = VsisrvIpduRxAId3SignalType
+        @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalFaultCType
+        @@ END
+      */
+   VsisrvIpduSignalFaultCType FaultC;
+   /*
+        @@ SUB_STRUCTURE = FaultB
+        @@ STRUCTURE = VsisrvIpduRxAId3SignalType
+        @@ DATA_TYPE = STRUCTURE VsisrvIpduSignalFaultBType
+        @@ END
+      */
+   VsisrvIpduSignalFaultBType FaultB;
+   /*
+      @@ ELEMENT = M1VFpgaH_MSB8
+      @@ STRUCTURE = VsisrvIpduRxAId3SignalType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = ULONG 0xFF
+      @@ DESCRIPTION = "M1VFpgaH_MSB8"
+      @@ GROUP = VsiSrv
+      @@ END
+     */
+   uint32 M1VFpgaH_MSB8:8;
+   /*
+      @@ ELEMENT = TempDrvBd_MSB4
+      @@ STRUCTURE = VsisrvIpduRxAId3SignalType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = ULONG 0xF00
+      @@ DESCRIPTION = "TempDrvBd_MSB4"
+      @@ GROUP = VsiSrv
+      @@ END
+     */
+uint32 TempDrvBd_MSB4:4;
+/*
+      @@ ELEMENT = TempDrvBd_LSB8
+      @@ STRUCTURE = VsisrvIpduRxAId3SignalType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = ULONG 0xFF
+      @@ DESCRIPTION = "TempDrvBd_LSB8"
+      @@ GROUP = VsiSrv
+      @@ END
+  */
+uint32 TempDrvBd_LSB8:8;
+/*
+       @@ ELEMENT = Debug64To75_MSB8
+       @@ STRUCTURE = VsisrvIpduRxAId3SignalType
+       @@ A2L_TYPE = MEASURE
+       @@ DATA_TYPE = ULONG 0xFF0
+       @@ DESCRIPTION = "Debug64To75_MSB8"
+       @@ GROUP = VsiSrv
+       @@ END
+*/
+
+uint32 Debug64To75_MSB8:8;
+/*
+      @@ ELEMENT = Debug64To75_LSB4
+      @@ STRUCTURE = VsisrvIpduRxAId3SignalType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = ULONG 0xF
+      @@ DESCRIPTION = "Debug64To75_LSB4"
+      @@ GROUP = VsiSrv
+      @@ END
+  */
+
+uint32 Debug64To75_LSB4:4;
+/*
+      @@ ELEMENT = Ctrl
+      @@ STRUCTURE = VsisrvIpduRxAId3SignalType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = UWORD
+      @@ DESCRIPTION = "Ctrl"
+      @@ GROUP = VsiSrv
+      @@ END
+  */
+uint16 Ctrl;
+/*
+      @@ ELEMENT = Debug100To111_MSB4
+      @@ STRUCTURE = VsisrvIpduRxAId3SignalType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = UWORD 0x000F
+      @@ DESCRIPTION = "Debug100To111_MSB4"
+      @@ GROUP = VsiSrv
+      @@ END
+  */
+
+uint16 Debug100To111_MSB4:4;
+/*
+      @@ ELEMENT = Debug100To111_LSB8
+      @@ STRUCTURE = VsisrvIpduRxAId3SignalType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = UWORD 0x0FF0
+      @@ DESCRIPTION = "Debug100To111_LSB8"
+      @@ GROUP = VsiSrv
+      @@ END
+  */
+uint16 Debug100To111_LSB8:8;
+/*
+       @@ ELEMENT = M1VFpgaH_LSB4
+       @@ STRUCTURE = VsisrvIpduRxAId3SignalType
+       @@ A2L_TYPE = MEASURE
+       @@ DATA_TYPE = UWORD 0xF0
+       @@ DESCRIPTION = "M1VFpgaH_LSB4"
+       @@ GROUP = VsiSrv
+       @@ END
+*/
+uint16 M1VFpgaH_LSB4:4;
+
+#if 0
+   uint8 Id;
+   VsisrvIpduSignalStateResType StateRes;
+   VsisrvIpduSignalFaultAType FaultA;
+   VsisrvIpduSignalFaultBType FaultB;
+   VsisrvIpduSignalFaultCType FaultC;
+   uint32 Debug64To75_MSB8:8;
+   uint32 TempDrvBd_MSB4:4;
+   uint32 Debug64To75_LSB4:4;
+   uint32 TempDrvBd_LSB8:8;
+   uint32 M1VFpgaH_MSB8:8;
+   uint16 Debug100To111_MSB4:4;
+   uint16 M1VFpgaH_LSB4:4;
+   uint16 Debug100To111_LSB8:8;
+   uint16 Ctrl;
+#endif
+}VsisrvIpduRxAId3SignalType;
+
+/*------------------------------------*/
+/* VSI IPDU RxA ID 3 structure        */
+/*------------------------------------*/
+typedef union
+{
+   /*
+   @@ ELEMENT = Data32
+   @@ STRUCTURE = VsisrvIpduRxAId3Type
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = ULONG
+   @@ DIMENSION = 4
+   @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+   @@ GROUP = VsiSrv
+   @@ END
+    */
+
+   uint32 Data32[4];
+   /*
+   @@ ELEMENT = Data16
+   @@ STRUCTURE = VsisrvIpduRxAId3Type
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = UWORD
+   @@ DIMENSION = 8
+   @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+   @@ GROUP = VsiSrv
+   @@ END
+                */
+   uint16 Data16[8];
+   /*
+   @@ ELEMENT = Data8
+   @@ STRUCTURE = VsisrvIpduRxAId3Type
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = UBYTE
+   @@ DIMENSION = 16
+   @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+   @@ GROUP = VsiSrv
+   @@ END
+    */
+   uint8  Data8[16];
+   /*
+     @@ SUB_STRUCTURE = Signal
+     @@ STRUCTURE = VsisrvIpduRxAId3Type
+     @@ DATA_TYPE = STRUCTURE VsisrvIpduRxAId3SignalType
+     @@ END
+   */
+   VsisrvIpduRxAId3SignalType Signal;
+
+}VsisrvIpduRxAId3Type;
+
+typedef struct
+   {
+
+#if 0
+
+      uint32 HalfCoilCur_Ul_MSB8:8;//128-135
+      uint32 HalfCoilCur_Ur_MSB4:4;//136-139
+      uint32 HalfCoilCur_Ul_LSB4:4;//140-143
+      uint32 HalfCoilCur_Ur_LSB8:8;//144-151
+      uint32 HalfCoilCur_Vl_MSB8:8;//152-159
+
+      uint32 HalfCoilCur_Vr_MSB4:4;//160-163
+      uint32 HalfCoilCur_Vl_LSB4:4;//164-167
+      uint32 HalfCoilCur_Vr_LSB8:8;//168-175
+      uint32 HalfCoilCur_Wl_MSB8:8;//176-183
+      uint32 HalfCoilCur_Wr_MSB4:4;//184-187
+      uint32 HalfCoilCur_Wl_LSB4:4;//188-191
+
+      uint32 HalfCoilCur_Wr_LSB8:8;//192-199
+      uint32 GridVoltU_MSB8:8;//200-207
+      uint32 GridVoltV_MSB4:4;//208-211
+      uint32 GridVoltU_LSB4:4;//212-215
+      uint32 GridVoltV_LSB8:8;//216-223
+
+      uint16 GridVoltW_MSB8:8;//224-231
+      uint16 FS_SOE:1;//232
+      uint16 FS_SOL:1;//233
+      uint16 FS_TXS:1;//234
+      uint16 FS_TXA:1;//235
+      uint16 GridVoltW_LSB4:4;//236-239
+      uint16 Ctrl;//240-255
+#endif
+
+         /*
+       @@ ELEMENT = HalfCoilCur_Vl_MSB8
+       @@ STRUCTURE = VsiSrvRxSSignalType
+       @@ A2L_TYPE = MEASURE
+       @@ DATA_TYPE = ULONG 0xFF0
+       @@ DESCRIPTION = "HalfCoilCur_Vl_MSB8"
+       @@ GROUP = VsiSrv
+       @@ END
+        */
+      uint32 HalfCoilCur_Vl_MSB8:8;//152-159
+      /*
+       @@ ELEMENT = HalfCoilCur_Ul_LSB4
+       @@ STRUCTURE = VsiSrvRxSSignalType
+       @@ A2L_TYPE = MEASURE
+       @@ DATA_TYPE = ULONG 0x0F
+       @@ DESCRIPTION = "PWM_Wr_ON"
+       @@ GROUP = VsiSrv
+       @@ END
+       */
+      uint32 HalfCoilCur_Ul_LSB4:4;//140-143
+      /*
+      @@ ELEMENT = HalfCoilCur_Ur_LSB8
+      @@ STRUCTURE = VsiSrvRxSSignalType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = ULONG 0xFF0
+      @@ DESCRIPTION = "HalfCoilCur_Ur_LSB8"
+      @@ GROUP = VsiSrv
+      @@ END
+             */
+      uint32 HalfCoilCur_Ur_LSB8:8;//144-151
+      /*
+      @@ ELEMENT = HalfCoilCur_Ur_MSB4
+      @@ STRUCTURE = VsiSrvRxSSignalType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = ULONG 0x0F
+      @@ DESCRIPTION = "HalfCoilCur_Ur_MSB4"
+      @@ GROUP = VsiSrv
+      @@ END
+             */
+      uint32 HalfCoilCur_Ur_MSB4:4;//136-139
+      /*
+      @@ ELEMENT = HalfCoilCur_Ul_MSB8
+      @@ STRUCTURE = VsiSrvRxSSignalType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = ULONG 0xFF0
+      @@ DESCRIPTION = "HalfCoilCur_Ul_MSB8"
+      @@ GROUP = VsiSrv
+      @@ END
+             */
+      uint32 HalfCoilCur_Ul_MSB8:8;//128-135
+      /*
+      @@ ELEMENT = HalfCoilCur_Wl_LSB4
+      @@ STRUCTURE = VsiSrvRxSSignalType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = ULONG 0xF00
+      @@ DESCRIPTION = "HalfCoilCur_Wl_LSB4"
+      @@ GROUP = VsiSrv
+      @@ END
+                   */
+      uint32 HalfCoilCur_Wl_LSB4:4;// 188-191
+      /*
+      @@ ELEMENT = HalfCoilCur_Wr_MSB4
+      @@ STRUCTURE = VsiSrvRxSSignalType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = ULONG 0x00F
+      @@ DESCRIPTION = "HalfCoilCur_Wr_MSB4"
+      @@ GROUP = VsiSrv
+      @@ END
+      */
+      uint32 HalfCoilCur_Wr_MSB4:4;// 184-187
+      /*
+      @@ ELEMENT = HalfCoilCur_Wl_MSB8
+      @@ STRUCTURE = VsiSrvRxSSignalType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = ULONG 0xFF0
+      @@ DESCRIPTION = "HalfCoilCur_Wl_MSB8"
+      @@ GROUP = VsiSrv
+      @@ END
+      */
+      uint32 HalfCoilCur_Wl_MSB8:8;// 176-183
+      /*
+      @@ ELEMENT = HalfCoilCur_Vr_LSB8
+      @@ STRUCTURE = VsiSrvRxSSignalType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = ULONG 0xFF
+      @@ DESCRIPTION = "HalfCoilCur_Vr_LSB8"
+      @@ GROUP = VsiSrv
+      @@ END
+      */
+      uint32 HalfCoilCur_Vr_LSB8:8;// 168-175
+      /*
+      @@ ELEMENT = HalfCoilCur_Vl_LSB4
+      @@ STRUCTURE = VsiSrvRxSSignalType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = ULONG 0xF00
+      @@ DESCRIPTION = "HalfCoilCur_Vl_LSB4"
+      @@ GROUP = VsiSrv
+      @@ END
+            */
+      uint32 HalfCoilCur_Vl_LSB4:4;// 164-167
+    /*
+      @@ ELEMENT = HalfCoilCur_Vr_MSB4
+      @@ STRUCTURE = VsiSrvRxSSignalType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = ULONG 0x0F
+      @@ DESCRIPTION = "HalfCoilCur_Vr_MSB4"
+      @@ GROUP = VsiSrv
+      @@ END
+    */
+      uint32 HalfCoilCur_Vr_MSB4:4;// 160-163
+      /*
+      @@ ELEMENT = GridVoltU_LSB4
+      @@ STRUCTURE = VsiSrvRxSSignalType
+      @@ A2L_TYPE = MEASURE
+      @@ DATA_TYPE = ULONG 0x0F
+      @@ DESCRIPTION = "GridVoltU_LSB4"
+      @@ GROUP = VsiSrv
+      @@ END
+      */
+      uint32 GridVoltU_LSB4:4;// 212-215
+      /*
+            @@ ELEMENT = GridVoltV_LSB8
+            @@ STRUCTURE = VsiSrvRxSSignalType
+            @@ A2L_TYPE = MEASURE
+            @@ DATA_TYPE = ULONG 0xFF0
+            @@ DESCRIPTION = "GridVoltV_LSB8"
+            @@ GROUP = VsiSrv
+            @@ END
+            */
+      uint32 GridVoltV_LSB8:8;// 216-223
+      /*
+            @@ ELEMENT = GridVoltU_MSB8
+            @@ STRUCTURE = VsiSrvRxSSignalType
+            @@ A2L_TYPE = MEASURE
+            @@ DATA_TYPE = ULONG 0x0F
+            @@ DESCRIPTION = "GridVoltU_MSB8"
+            @@ GROUP = VsiSrv
+            @@ END
+            */
+      uint32 GridVoltU_MSB8:8;// 200-207
+      /*
+            @@ ELEMENT = GridVoltV_MSB4
+            @@ STRUCTURE = VsiSrvRxSSignalType
+            @@ A2L_TYPE = MEASURE
+            @@ DATA_TYPE = ULONG 0x0F
+            @@ DESCRIPTION = "GridVoltV_MSB4"
+            @@ GROUP = VsiSrv
+            @@ END
+            */
+      uint32 GridVoltV_MSB4:4;// 208-211
+      /*
+            @@ ELEMENT = HalfCoilCur_Wr_LSB8
+            @@ STRUCTURE = VsiSrvRxSSignalType
+            @@ A2L_TYPE = MEASURE
+            @@ DATA_TYPE = ULONG 0xFF
+            @@ DESCRIPTION = "HalfCoilCur_Wr_LSB8"
+            @@ GROUP = VsiSrv
+            @@ END
+     */
+      uint32 HalfCoilCur_Wr_LSB8:8;// 192-199
+      /*
+            @@ ELEMENT = Crc
+            @@ STRUCTURE = VsiSrvRxSSignalType
+            @@ A2L_TYPE = MEASURE
+            @@ DATA_TYPE = UWORD
+            @@ DESCRIPTION = "CRC value of RxS"
+            @@ GROUP = VsiSrv
+            @@ END
+            */
+      uint16 Ctrl;//240-255
+      /*
+            @@ ELEMENT = FS_SOE
+            @@ STRUCTURE = VsiSrvRxSSignalType
+            @@ A2L_TYPE = MEASURE
+            @@ DATA_TYPE = UWORD 0x01
+            @@ DESCRIPTION = "FS_SOE"
+            @@ GROUP = VsiSrv
+            @@ END
+            */
+      uint16 FS_SOE:1;//232
+      /*
+            @@ ELEMENT = FS_SOL
+            @@ STRUCTURE = VsiSrvRxSSignalType
+            @@ A2L_TYPE = MEASURE
+            @@ DATA_TYPE = UWORD 0x02
+            @@ DESCRIPTION = "FS_SOL"
+            @@ GROUP = VsiSrv
+            @@ END
+            */
+
+      uint16 FS_SOL:1;//233
+      /*
+            @@ ELEMENT = FS_TXS
+            @@ STRUCTURE = VsiSrvRxSSignalType
+            @@ A2L_TYPE = MEASURE
+            @@ DATA_TYPE = UWORD 0x04
+            @@ DESCRIPTION = "FS_TXS"
+            @@ GROUP = VsiSrv
+            @@ END
+            */
+      uint16 FS_TXS:1;//234
+      /*
+            @@ ELEMENT = FS_TXA
+            @@ STRUCTURE = VsiSrvRxSSignalType
+            @@ A2L_TYPE = MEASURE
+            @@ DATA_TYPE = UWORD 0x08
+            @@ DESCRIPTION = "FS_TXA"
+            @@ GROUP = VsiSrv
+            @@ END
+            */
+      uint16 FS_TXA:1;//235
+      /*
+           @@ ELEMENT = GridVoltW_LSB4
+           @@ STRUCTURE = VsiSrvRxSSignalType
+           @@ A2L_TYPE = MEASURE
+           @@ DATA_TYPE = UWORD 0x0F
+           @@ DESCRIPTION = "GridVoltW_LSB4"
+           @@ GROUP = VsiSrv
+           @@ END
+           */
+      uint16 GridVoltW_LSB4:4;//236-239
+      /*
+        @@ ELEMENT = GridVoltW_MSB8
+        @@ STRUCTURE = VsiSrvRxSSignalType
+        @@ A2L_TYPE = MEASURE
+        @@ DATA_TYPE = UWORD 0xFF0
+        @@ DESCRIPTION = "GridVoltW_MSB8"
+        @@ GROUP = VsiSrv
+        @@ END
+       */
+      uint16 GridVoltW_MSB8:8; //224-231
+
+   }VsiSrvRxSSignalType;
+
+/*------------------------------------*/
+/* VSI IPDU RxS structure             */
+/*------------------------------------*/
+typedef union
+{
+   /*
+         @@ ELEMENT = Data32
+         @@ STRUCTURE = VsisrvIpduRxSType
+         @@ A2L_TYPE = MEASURE
+         @@ DATA_TYPE = ULONG
+         @@ DIMENSION = 4
+         @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+         @@ GROUP = VsiSrv
+         @@ END
+          */
+   uint32 Data32[4];
+   /*
+            @@ ELEMENT = Data16
+            @@ STRUCTURE = VsisrvIpduRxSType
+            @@ A2L_TYPE = MEASURE
+            @@ DATA_TYPE = UWORD
+            @@ DIMENSION = 8
+            @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+            @@ GROUP = VsiSrv
+            @@ END
+             */
+   uint16 Data16[8];
+   /*
+            @@ ELEMENT = Data8
+            @@ STRUCTURE = VsisrvIpduRxSType
+            @@ A2L_TYPE = MEASURE
+            @@ DATA_TYPE = UBYTE
+            @@ DIMENSION = 16
+            @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+            @@ GROUP = VsiSrv
+            @@ END
+             */
+   uint8  Data8[16];
+   /*
+  @@ SUB_STRUCTURE = Signal
+  @@ STRUCTURE = VsisrvIpduRxSType
+  @@ DATA_TYPE = STRUCTURE VsiSrvRxSSignalType
+  @@ END
+*/
+   VsiSrvRxSSignalType Signal;
+
+}VsisrvIpduRxSType;
+
+/*----------------------------------------------------------------------------*/
+/* VSI IPDU Tx structure                                                      */
+/*----------------------------------------------------------------------------*/
+typedef struct
+{
+   /*
+          @@ SUB_STRUCTURE = Mx0
+          @@ STRUCTURE = VsiSrvIpduTxAIdType
+          @@ DATA_TYPE = STRUCTURE VsisrvIpduTxAId0Type
+          @@ END
+         */
+   VsisrvIpduTxAId0Type Mx0;
+   /*
+             @@ SUB_STRUCTURE = Mx1
+             @@ STRUCTURE = VsiSrvIpduTxAIdType
+             @@ DATA_TYPE = STRUCTURE VsisrvIpduTxAId1Type
+             @@ END
+            */
+   VsisrvIpduTxAId1Type Mx1;
+   /*
+             @@ SUB_STRUCTURE = Mx2
+             @@ STRUCTURE = VsiSrvIpduTxAIdType
+             @@ DATA_TYPE = STRUCTURE VsisrvIpduTxAId2Type
+             @@ END
+            */
+   VsisrvIpduTxAId2Type Mx2;
+   /*
+             @@ SUB_STRUCTURE = Mx3
+             @@ STRUCTURE = VsiSrvIpduTxAIdType
+             @@ DATA_TYPE = STRUCTURE VsisrvIpduTxAId3Type
+             @@ END
+            */
+   VsisrvIpduTxAId3Type Mx3;
+
+}VsiSrvIpduTxAIdType;
+
+typedef union
+{
+   /*
+          @@ SUB_STRUCTURE = IdMx
+          @@ STRUCTURE = VsiSrvIpduTxADataType
+          @@ DATA_TYPE = STRUCTURE VsisrvIpduTxAType
+          @@ END
+   */
+   VsisrvIpduTxAType IdMx[4];
+   /*
+          @@ SUB_STRUCTURE = Id
+          @@ STRUCTURE = VsiSrvIpduTxADataType
+          @@ DATA_TYPE = STRUCTURE VsiSrvIpduTxAIdType
+          @@ END
+   */
+   VsiSrvIpduTxAIdType Id;
+
+}VsiSrvIpduTxADataType;
+
+typedef struct
+{
+   /*
+     @@ SUB_STRUCTURE = TxS
+     @@ STRUCTURE = VsisrvIpduTxSTxADataType
+     @@ DATA_TYPE = STRUCTURE VsisrvIpduTxSType
+     @@ END
+  */
+   VsisrvIpduTxSType TxS;
+   /*
+     @@ SUB_STRUCTURE = TxA
+     @@ STRUCTURE = VsisrvIpduTxSTxADataType
+     @@ DATA_TYPE = STRUCTURE VsiSrvIpduTxADataType
+     @@ END
+   */
+   VsiSrvIpduTxADataType TxA;
+
+}VsisrvIpduTxSTxADataType;
+
+typedef union
+{
+   /*
+  @@ ELEMENT = Data32
+  @@ STRUCTURE = VsisrvIpduTxType
+  @@ A2L_TYPE = MEASURE
+  @@ DATA_TYPE = UBYTE
+  @@ DIMENSION = 23
+  @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+  @@ GROUP = VsiSrv
+  @@ END
+  */
+   uint32 Data32[23]; /* (TxS = 3) + (TxA[4] = 5 * 4) */
+   /*
+  @@ ELEMENT = Data16
+  @@ STRUCTURE = VsisrvIpduTxType
+  @@ A2L_TYPE = MEASURE
+  @@ DATA_TYPE = UBYTE
+  @@ DIMENSION = 46
+  @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+  @@ GROUP = VsiSrv
+  @@ END
+  */
+   uint16 Data16[46];
+   /*
+  @@ ELEMENT = Data8
+  @@ STRUCTURE = VsisrvIpduTxType
+  @@ A2L_TYPE = MEASURE
+  @@ DATA_TYPE = UBYTE
+  @@ DIMENSION = 92
+  @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+  @@ GROUP = VsiSrv
+  @@ END
+  */
+   uint8  Data8[92];
+   /*
+    @@ SUB_STRUCTURE = Data
+    @@ STRUCTURE = VsisrvIpduTxType
+    @@ DATA_TYPE = STRUCTURE VsisrvIpduTxSTxADataType
+    @@ END
+   */
+   VsisrvIpduTxSTxADataType Data;
+
+}VsisrvIpduTxType;
+
+/*----------------------------------------------------------------------------*/
+/* VSI IPDU Rx structure                                                      */
+/*----------------------------------------------------------------------------*/
+typedef struct
+{
+   /*
+            @@ SUB_STRUCTURE = Mx0
+            @@ STRUCTURE = VsiSrvRxAIdType
+            @@ DATA_TYPE = STRUCTURE VsisrvIpduRxAId0Type
+            @@ END
+      */
+            VsisrvIpduRxAId0Type Mx0;
+            /*
+                     @@ SUB_STRUCTURE = Mx1
+                     @@ STRUCTURE = VsiSrvRxAIdType
+                     @@ DATA_TYPE = STRUCTURE VsisrvIpduRxAId1Type
+                     @@ END
+               */
+
+            VsisrvIpduRxAId1Type Mx1;
+            /*
+                     @@ SUB_STRUCTURE = Mx2
+                     @@ STRUCTURE = VsiSrvRxAIdType
+                     @@ DATA_TYPE = STRUCTURE VsisrvIpduRxAId2Type
+                     @@ END
+               */
+
+            VsisrvIpduRxAId2Type Mx2;
+            /*
+                     @@ SUB_STRUCTURE = Mx3
+                     @@ STRUCTURE = VsiSrvRxAIdType
+                     @@ DATA_TYPE = STRUCTURE VsisrvIpduRxAId3Type
+                     @@ END
+               */
+
+            VsisrvIpduRxAId3Type Mx3;
+            /*
+                     @@ SUB_STRUCTURE = MxA
+                     @@ STRUCTURE = VsiSrvRxAIdType
+                     @@ DATA_TYPE = STRUCTURE VsisrvIpduRxAType
+                     @@ END
+               */
+
+            VsisrvIpduRxAType  MxA;
+
+}VsiSrvRxAIdType;
+
+typedef union
+{
+         /*
+               @@ SUB_STRUCTURE =IdMx
+               @@ STRUCTURE = VsiSrv_RxAType
+               @@ DATA_TYPE = STRUCTURE VsisrvIpduRxAType
+               @@ END
+         */
+ VsisrvIpduRxAType IdMx[5];
+         /*
+               @@ SUB_STRUCTURE = Id
+               @@ STRUCTURE = VsiSrv_RxAType
+               @@ DATA_TYPE = STRUCTURE VsiSrvRxAIdType
+               @@ END
+         */
+ VsiSrvRxAIdType Id;
+
+}VsiSrv_RxAType;
+
+typedef struct
+{
+   /*
+         @@ SUB_STRUCTURE = RxA
+         @@ STRUCTURE = VsiSrv_IpduRxARxSType
+         @@ DATA_TYPE = STRUCTURE VsiSrv_RxAType
+         @@ END
+    */
+   VsiSrv_RxAType RxA;
+    /*
+          @@ SUB_STRUCTURE = RxS
+          @@ STRUCTURE = VsiSrv_IpduRxARxSType
+          @@ DATA_TYPE = STRUCTURE VsisrvIpduRxSType
+          @@ END
+    */
+   VsisrvIpduRxSType RxS;
+
+}VsiSrv_IpduRxARxSType;
+
+typedef union
+{
+   /*
+  @@ ELEMENT = Data32
+  @@ STRUCTURE = VsisrvIpduRxType
+  @@ A2L_TYPE = MEASURE
+  @@ DATA_TYPE = ULONG
+  @@ DIMENSION = 24
+  @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+  @@ GROUP = VsiSrv
+  @@ END
+  */
+
+   uint32 Data32[24]; /* (RxA[4 + 1] = (4 + 1) * 4) + (RxS = 4) */
+   /*
+  @@ ELEMENT = Data16
+  @@ STRUCTURE = VsisrvIpduRxType
+  @@ A2L_TYPE = MEASURE
+  @@ DATA_TYPE = UWORD
+  @@ DIMENSION = 48
+  @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+  @@ GROUP = VsiSrv
+  @@ END
+  */
+
+   uint16 Data16[48];
+   /*
+  @@ ELEMENT = Data8
+  @@ STRUCTURE = VsisrvIpduRxType
+  @@ A2L_TYPE = MEASURE
+  @@ DATA_TYPE = UBYTE
+  @@ DIMENSION = 96
+  @@ DESCRIPTION = "This variable hold the FPGA Frame Data"
+  @@ GROUP = VsiSrv
+  @@ END
+  */
+   uint8  Data8[96];
+
+   /*
+      @@ SUB_STRUCTURE = Data
+      @@ STRUCTURE = VsisrvIpduRxType
+      @@ DATA_TYPE = STRUCTURE VsiSrv_IpduRxARxSType
+      @@ END
+      */
+
+   VsiSrv_IpduRxARxSType Data;
+
+}VsisrvIpduRxType;
+
+#endif /* VSISRV_TYP_H */
+
+/*-------------------------------- end of file -------------------------------*/
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/src/BswFpgaIf.c b/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/src/BswFpgaIf.c
index 30620f68c..4ef4bd641 100644
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/src/BswFpgaIf.c
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/src/BswFpgaIf.c
@@ -1,21 +1,18 @@
-/**
- * \\file        BswFpgaIf.c
- * \\brief       Function:                                           \

- *              Purpose:                                            \

- *
- * History:
- *  Name:       \tSapthagiri G                                    \

- *  Date:       \t2020.05.15                                      \

- *  Reason:     \tNew implementation                              \

- *  Details:    \tNew requirement                                 \

- *  Specification :                                                 \

- *
- *              All Rights Reserved.  Confidential                  \

- */
-
-/*******************************************************************************
-**                      Revision Control History                              **
-*******************************************************************************/
+/* ********************************************************************** */
+/* Sourcefile:    BswFpgaIf.c                                             */
+/*                                                                        */
+/* Project:       P2 100Kw                                                */
+/* TriCore        Aurix Tc37x                                             */
+/*                                                                        */
+/* Department:    Valeo Siemens eAutomotive GmbH                          */
+/*                R&D INV                                                 */
+/*                                                                        */
+/* First author:                                                          */
+/* Other authors: -                                                       */
+/* ********************************************************************** */
+/* Copyright (C) Valeo Siemens eAutomotive 2019                           */
+/* All Rights Reserved. Confidential                                      */
+/* ********************************************************************** */
 
 #define MASTER_BswFpgaIf_
 
@@ -24,15 +21,20 @@
 *******************************************************************************/
 
 #include "BswFpgaIf.h"
+
 #include "ErrDeb.h"
 #include "DrvCtrlSdl.h"
 #include "emm.h"
 #include "emm_common.h"
+
 #include "RotorAgSpdCalcn_data.h"
 #include "C2cComDrvCtrlData.h"
 #ifdef SWIT_Active
 #include "SWIT_Sfty.h"
 #endif
+#include "VsiSrv_e.h"
+
+
 /*******************************************************************************
 **                            General Notes                                   **
 *******************************************************************************/
@@ -44,54 +46,40 @@
 /*******************************************************************************
 **                      Global Variable Definitions                           **
 *******************************************************************************/
+
 #define ISWIF_START_SEC_VAR_FAST_CLEARED
 #include "MemMap.h"
-/*
-@@ INSTANCE = BswFpgaIfFrameTx
-@@ STRUCTURE = BswFpgaIf_FrameTxType
-@@ END
-*/__align(0x20) volatile BswFpgaIf_FrameTxType BswFpgaIfFrameTx;
-/*
-@@ INSTANCE = BswFpgaIfFrameRx
-@@ STRUCTURE = BswFpgaIf_FrameRxType
-@@ END
-*/
-__align(0x20) volatile BswFpgaIf_FrameRxType BswFpgaIfFrameRx;
+
+__align(0x20) volatile VsisrvFrameTxType BswFpgaIfFrameTx;
+
+__align(0x20) volatile VsisrvFrameRxType BswFpgaIfFrameRx;
+
 #define ISWIF_STOP_SEC_VAR_FAST_CLEARED
 #include "MemMap.h"
 
 #define ISWIF_START_SEC_VAR_FAST_CLEARED
 #include "MemMap.h"
-
-/* volatile BswFpgaIf_BaconFrameTxType BswFpgaIfBaconFrameTx;
-volatile BswFpgaIf_BaconFrameTxType BswFpgaIfTstBaconFrameTx; */
 /*
 @@ INSTANCE = BswFpgaIfIpduTx
-@@ STRUCTURE = BswFpgaIf_IpduTxType
+@@ STRUCTURE = VsisrvIpduTxType
 @@ END
 */
-volatile BswFpgaIf_IpduTxType BswFpgaIfIpduTx;
+volatile VsisrvIpduTxType BswFpgaIfIpduTx;
 /*
 @@ INSTANCE = BswFpgaIfIpduRx
-@@ STRUCTURE = BswFpgaIf_IpduRxType
+@@ STRUCTURE = VsisrvIpduRxType
 @@ END
 */
-volatile BswFpgaIf_IpduRxType BswFpgaIfIpduRx;
-
-volatile BswFpgaIf_IpduTxType BswFpgaIfIpduTxDef;
-volatile BswFpgaIf_IpduRxType BswFpgaIfIpduRxDef;
+volatile VsisrvIpduRxType BswFpgaIfIpduRx;
 
-volatile uint8 txMuxIdCnt;
+volatile VsisrvIpduTxType BswFpgaIfIpduTxDef;
+volatile VsisrvIpduRxType BswFpgaIfIpduRxDef;
 
 #define ISWIF_STOP_SEC_VAR_FAST_CLEARED
 #include "MemMap.h"
 
-/* volatile const float32 BswFpgaIf_invA_pwm_MIN_PULSE_WIDTH=2.5E-6f; */
-const volatile float32 BswFpgaIf_invA_pwm_DEADTIME=2.5E-6f;            /* = 2.5us */
-
 #define ISWIF_START_SEC_VAR_FAST_CLEARED
 #include "MemMap.h"
-
 /*
 @@ SYMBOL = BswFpgaIfRx_PwrSupply_5V_HS
 @@ A2L_TYPE = MEASURE
@@ -101,6 +89,7 @@ const volatile float32 BswFpgaIf_invA_pwm_DEADTIME=2.5E-6f;            /* = 2.5u
 @@ END
 */
 static uint16 BswFpgaIfRx_PwrSupply_5V_HS = 0u;
+
 /*
 @@ SYMBOL = BswFpgaIfRx_PwrSupply_5V_LS
 @@ A2L_TYPE = MEASURE
@@ -110,6 +99,7 @@ static uint16 BswFpgaIfRx_PwrSupply_5V_HS = 0u;
 @@ END
 */
 static uint16 BswFpgaIfRx_PwrSupply_5V_LS = 0u;
+
 /*
 @@ SYMBOL = BswFpgaIfRx_PwrSupply_16V_Multi
 @@ A2L_TYPE = MEASURE
@@ -119,6 +109,7 @@ static uint16 BswFpgaIfRx_PwrSupply_5V_LS = 0u;
 @@ END
 */
 static uint16 BswFpgaIfRx_PwrSupply_16V_Multi = 0u;
+
 /*
 @@ SYMBOL = BswFpgaIfRx_FpgaVer_LSW
 @@ A2L_TYPE = MEASURE
@@ -138,42 +129,6 @@ static uint16 BswFpgaIfRx_FpgaVer_LSW = 0u;
 */
 static uint16 BswFpgaIfRx_FpgaVer_MSW = 0u;
 /*
-@@ SYMBOL = BswFpgaIfRx_DebugMux_64To75
-@@ A2L_TYPE = MEASURE
-@@ DATA_TYPE = UWORD
-@@ DESCRIPTION = "BswFpgaIfRx_DebugMux_64To75"
-@@ GROUP = BswFpgaIf
-@@ END
-*/
-static uint16 BswFpgaIfRx_DebugMux_64To75 = 0u;
-/*
-@@ SYMBOL = BswFpgaIfRx_CurMeasPh_U
-@@ A2L_TYPE = MEASURE
-@@ DATA_TYPE = UWORD
-@@ DESCRIPTION = "BswFpgaIfRx_CurMeasPh_U"
-@@ GROUP = BswFpgaIf
-@@ END
-*/
-static uint16 BswFpgaIfRx_CurMeasPh_U = 0u;
-/*
-@@ SYMBOL = BswFpgaIfRx_CurMeasPh_V
-@@ A2L_TYPE = MEASURE
-@@ DATA_TYPE = UWORD
-@@ DESCRIPTION = "BswFpgaIfRx_CurMeasPh_V"
-@@ GROUP = BswFpgaIf
-@@ END
-*/
-static uint16 BswFpgaIfRx_CurMeasPh_V = 0u;
-/*
-@@ SYMBOL = BswFpgaIfRx_CurMeasPh_W
-@@ A2L_TYPE = MEASURE
-@@ DATA_TYPE = UWORD
-@@ DESCRIPTION = "BswFpgaIfRx_CurMeasPh_W"
-@@ GROUP = BswFpgaIf
-@@ END
-*/
-static uint16 BswFpgaIfRx_CurMeasPh_W = 0u;
-/*
 @@ SYMBOL = BswFpgaIfRx_CtrlBd_Temp
 @@ A2L_TYPE = MEASURE
 @@ DATA_TYPE = UWORD
@@ -191,24 +146,7 @@ static uint16 BswFpgaIfRx_CtrlBd_Temp = 0u;
 @@ END
 */
 static uint16 BswFpgaIfRx_DrvBd_Temp = 0u;
-/*
-@@ SYMBOL = BswFpgaIfRx_DcLinkVol_DrvBd
-@@ A2L_TYPE = MEASURE
-@@ DATA_TYPE = UWORD
-@@ DESCRIPTION = "BswFpgaIfRx_DcLinkVol_DrvBd"
-@@ GROUP = BswFpgaIf
-@@ END
-*/
-static uint16 BswFpgaIfRx_DcLinkVol_DrvBd = 0u;
-/*
-@@ SYMBOL = BswFpgaIfRx_DcLinkVol_CtrlBd
-@@ A2L_TYPE = MEASURE
-@@ DATA_TYPE = UWORD
-@@ DESCRIPTION = "BswFpgaIfRx_DcLinkVol_CtrlBd"
-@@ GROUP = BswFpgaIf
-@@ END
-*/
-static uint16 BswFpgaIfRx_DcLinkVol_CtrlBd = 0u;
+
 /*
 @@ SYMBOL = BswFpgaIfRx_IgbtTemp_U
 @@ A2L_TYPE = MEASURE
@@ -237,19 +175,38 @@ static uint16 BswFpgaIfRx_IgbtTemp_V = 0u;
 */
 static uint16 BswFpgaIfRx_IgbtTemp_W = 0u;
 
-uint8 BswFpgaIf_u8IdTxNm1;
-uint8 BswFpgaIf_u8IdRxNm1;
+/*
+ @@ SYMBOL = BswFpgaIf_IPhaRawVal
+ @@ A2L_TYPE = MEASURE
+ @@ DATA_TYPE = UWORD
+ @@ DESCRIPTION = "This variable hold phase current Raw values"
+ @@ DIMENSION = 3
+ @@ GROUP = BswFpgaIf
+ @@ END
+*/
+uint16 BswFpgaIf_IPhaRawVal[SYSDEF_EM_PHA_CNT_MAX];
 
-boolean BswFpgaIf_bCheckStatusRxA;
-boolean BswFpgaIf_bCheckStatusRxS;
-boolean BswFpgaIf_bCheckStatusIdRx;
-boolean BswFpgaIf_bCheckStatusParamDl;
-boolean BswFpgaIf_bCheckStatusModeReqRes;
-boolean BswFpgaIf_bComInit;
+/*
+ @@ SYMBOL = BswFpgaIf_IPhaRawVal_1
+ @@ A2L_TYPE = MEASURE
+ @@ DATA_TYPE = UWORD
+ @@ DESCRIPTION = "This variable hold phase current Raw values"
+ @@ DIMENSION = 3
+ @@ GROUP = BswFpgaIf
+ @@ END
+*/
+uint16 BswFpgaIf_IPhaRawVal_1[SYSDEF_EM_PHA_CNT_MAX];
 
-uint16 CrcReceived;
-uint16 CrcCalc;
-uint16 BswFpgaIf_IPhaRawVal[SYSDEF_EM_PHA_CNT_MAX];
+/*
+ @@ SYMBOL = BswFpgaIf_IPhaRawVal_2
+ @@ A2L_TYPE = MEASURE
+ @@ DATA_TYPE = UWORD
+ @@ DESCRIPTION = "This variable hold phase current Raw values"
+ @@ DIMENSION = 3
+ @@ GROUP = BswFpgaIf
+ @@ END
+*/
+uint16 BswFpgaIf_IPhaRawVal_2[SYSDEF_EM_PHA_CNT_MAX];
 /*
 @@ SYMBOL = BswFpgaIf_UdcRawVal
 @@ A2L_TYPE = MEASURE
@@ -283,9 +240,8 @@ static uint32 BswFpgaIfFltRstAckClrDtc;
 #define ISWIF_STOP_SEC_VAR_FAST_CLEARED
 #include "MemMap.h"
 
-uint32 ModeReqTemp = 0xF1E6FFFFu;
-uint32 ModeReqTemp1 = 0x007D0064u;
-EMM_ModeType EmmMode_Temp = EMM_STANDBY_MODE;
+/* volatile const float32 BswFpgaIf_invA_pwm_MIN_PULSE_WIDTH=2.5E-6f; */
+const volatile float32 BswFpgaIf_invA_pwm_DEADTIME=2.5E-6f;            /* = 2.5us */
 
 #define START_SEC_CALIB
 /*lint -e(537,451) Repeated inclusion is needed. */
@@ -342,7 +298,7 @@ const uint16 BswFpgaIfPhaOcThd = 0xEE7u;
 @@ GROUP = BswFpgaIf
 @@ END
 */
-const boolean BswFpgaIfTxModReqOvrdEna = BSWFPGAIF_FALSE; 
+const boolean BswFpgaIfTxModReqOvrdEna = BSWFPGAIF_FALSE;
 /*
 @@ SYMBOL = BswFpgaIfTxPwmCtrlStgOnOffOvrdEna
 @@ A2L_TYPE = PARAMETER
@@ -717,144 +673,55 @@ const boolean BswFpgaIfTxEmergencySwOvrdVal = BSWFPGAIF_FALSE;
 @@ END
 */
 const uint8 BswFpgaIfTxSCSpeedReadyOvrdVal = BSWFPGAIF_FALSE;
+/*
+@@ SYMBOL = BswFpgaIfPhaISelEna
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = "Reset the fault"
+@@ GROUP = BswFpgaIf
+@@ END
+*/
+/* Permission to inject safetyLib fault by Tester in Run Time */
+const uint8 BswFpgaIfPhaISelEna = 0u;
+
+/*
+@@ SYMBOL = BswFpgaIfTxPwmSwtFreqOvrdEna
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE [0 ... 1]
+@@ DESCRIPTION = "Pwm override enable flag"
+@@ GROUP = BswFpgaIf
+@@ END
+*/
+const boolean BswFpgaIfTxPwmSwtFreqOvrdEna = BSWFPGAIF_FALSE;
+
+/*
+@@ SYMBOL = BswFpgaIfTxPwmSwtFreqOvrdVal
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UWORD
+@@ DESCRIPTION = "Pwm override Frequency value"
+@@ GROUP = BswFpgaIf
+@@ END
+*/
+const uint16 BswFpgaIfTxPwmSwtFreqOvrdVal = 2000u;
+
+/*
+@@ SYMBOL = BswFpgaIfTxISamplOffs
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UWORD
+@@ DESCRIPTION = "Pwm override Frequency value"
+@@ GROUP = BswFpgaIf
+@@ END
+*/
+const uint16 BswFpgaIfTxISamplOffs = 0u;
+
 #define STOP_SEC_CALIB
 /*lint -e(537,451) Repeated inclusion is needed. */
 #include "MemMap.h"
 
-#define BSWFPGAIF_START_SEC_CONST
-#include "NextGen_MemMap.h"
-
-/*----------------------------------------------------------------------------*/
-/* CRC Polynomial lookup table, for TxS, 10 bytes data: 0x4825                */
-/*----------------------------------------------------------------------------*/
-const uint16 BswFpgaIf_u16Crc16LkpTab_4825[256] =
-{
-   0x0000u, 0x4825u, 0x904Au, 0xD86Fu, 0x68B1u, 0x2094u, 0xF8FBu, 0xB0DEu,
-   0xD162u, 0x9947u, 0x4128u, 0x090Du, 0xB9D3u, 0xF1F6u, 0x2999u, 0x61BCu,
-   0xEAE1u, 0xA2C4u, 0x7AABu, 0x328Eu, 0x8250u, 0xCA75u, 0x121Au, 0x5A3Fu,
-   0x3B83u, 0x73A6u, 0xABC9u, 0xE3ECu, 0x5332u, 0x1B17u, 0xC378u, 0x8B5Du,
-   0x9DE7u, 0xD5C2u, 0x0DADu, 0x4588u, 0xF556u, 0xBD73u, 0x651Cu, 0x2D39u,
-   0x4C85u, 0x04A0u, 0xDCCFu, 0x94EAu, 0x2434u, 0x6C11u, 0xB47Eu, 0xFC5Bu,
-   0x7706u, 0x3F23u, 0xE74Cu, 0xAF69u, 0x1FB7u, 0x5792u, 0x8FFDu, 0xC7D8u,
-   0xA664u, 0xEE41u, 0x362Eu, 0x7E0Bu, 0xCED5u, 0x86F0u, 0x5E9Fu, 0x16BAu,
-   0x73EBu, 0x3BCEu, 0xE3A1u, 0xAB84u, 0x1B5Au, 0x537Fu, 0x8B10u, 0xC335u,
-   0xA289u, 0xEAACu, 0x32C3u, 0x7AE6u, 0xCA38u, 0x821Du, 0x5A72u, 0x1257u,
-   0x990Au, 0xD12Fu, 0x0940u, 0x4165u, 0xF1BBu, 0xB99Eu, 0x61F1u, 0x29D4u,
-   0x4868u, 0x004Du, 0xD822u, 0x9007u, 0x20D9u, 0x68FCu, 0xB093u, 0xF8B6u,
-   0xEE0Cu, 0xA629u, 0x7E46u, 0x3663u, 0x86BDu, 0xCE98u, 0x16F7u, 0x5ED2u,
-   0x3F6Eu, 0x774Bu, 0xAF24u, 0xE701u, 0x57DFu, 0x1FFAu, 0xC795u, 0x8FB0u,
-   0x04EDu, 0x4CC8u, 0x94A7u, 0xDC82u, 0x6C5Cu, 0x2479u, 0xFC16u, 0xB433u,
-   0xD58Fu, 0x9DAAu, 0x45C5u, 0x0DE0u, 0xBD3Eu, 0xF51Bu, 0x2D74u, 0x6551u,
-   0xE7D6u, 0xAFF3u, 0x779Cu, 0x3FB9u, 0x8F67u, 0xC742u, 0x1F2Du, 0x5708u,
-   0x36B4u, 0x7E91u, 0xA6FEu, 0xEEDBu, 0x5E05u, 0x1620u, 0xCE4Fu, 0x866Au,
-   0x0D37u, 0x4512u, 0x9D7Du, 0xD558u, 0x6586u, 0x2DA3u, 0xF5CCu, 0xBDE9u,
-   0xDC55u, 0x9470u, 0x4C1Fu, 0x043Au, 0xB4E4u, 0xFCC1u, 0x24AEu, 0x6C8Bu,
-   0x7A31u, 0x3214u, 0xEA7Bu, 0xA25Eu, 0x1280u, 0x5AA5u, 0x82CAu, 0xCAEFu,
-   0xAB53u, 0xE376u, 0x3B19u, 0x733Cu, 0xC3E2u, 0x8BC7u, 0x53A8u, 0x1B8Du,
-   0x90D0u, 0xD8F5u, 0x009Au, 0x48BFu, 0xF861u, 0xB044u, 0x682Bu, 0x200Eu,
-   0x41B2u, 0x0997u, 0xD1F8u, 0x99DDu, 0x2903u, 0x6126u, 0xB949u, 0xF16Cu,
-   0x943Du, 0xDC18u, 0x0477u, 0x4C52u, 0xFC8Cu, 0xB4A9u, 0x6CC6u, 0x24E3u,
-   0x455Fu, 0x0D7Au, 0xD515u, 0x9D30u, 0x2DEEu, 0x65CBu, 0xBDA4u, 0xF581u,
-   0x7EDCu, 0x36F9u, 0xEE96u, 0xA6B3u, 0x166Du, 0x5E48u, 0x8627u, 0xCE02u,
-   0xAFBEu, 0xE79Bu, 0x3FF4u, 0x77D1u, 0xC70Fu, 0x8F2Au, 0x5745u, 0x1F60u,
-   0x09DAu, 0x41FFu, 0x9990u, 0xD1B5u, 0x616Bu, 0x294Eu, 0xF121u, 0xB904u,
-   0xD8B8u, 0x909Du, 0x48F2u, 0x00D7u, 0xB009u, 0xF82Cu, 0x2043u, 0x6866u,
-   0xE33Bu, 0xAB1Eu, 0x7371u, 0x3B54u, 0x8B8Au, 0xC3AFu, 0x1BC0u, 0x53E5u,
-   0x3259u, 0x7A7Cu, 0xA213u, 0xEA36u, 0x5AE8u, 0x12CDu, 0xCAA2u, 0x8287u
-};
-
-
-/*----------------------------------------------------------------------------*/
-/* CRC Polynomial lookup table, for TxA, 18 bytes data: 0x333F                */
-/*----------------------------------------------------------------------------*/
-const uint16 BswFpgaIf_u16Crc16LkpTab_333F[256] =
-{
-   0x0000u, 0x333Fu, 0x667Eu, 0x5541u, 0xCCFCu, 0xFFC3u, 0xAA82u, 0x99BDu,
-   0xAAC7u, 0x99F8u, 0xCCB9u, 0xFF86u, 0x663Bu, 0x5504u, 0x0045u, 0x337Au,
-   0x66B1u, 0x558Eu, 0x00CFu, 0x33F0u, 0xAA4Du, 0x9972u, 0xCC33u, 0xFF0Cu,
-   0xCC76u, 0xFF49u, 0xAA08u, 0x9937u, 0x008Au, 0x33B5u, 0x66F4u, 0x55CBu,
-   0xCD62u, 0xFE5Du, 0xAB1Cu, 0x9823u, 0x019Eu, 0x32A1u, 0x67E0u, 0x54DFu,
-   0x67A5u, 0x549Au, 0x01DBu, 0x32E4u, 0xAB59u, 0x9866u, 0xCD27u, 0xFE18u,
-   0xABD3u, 0x98ECu, 0xCDADu, 0xFE92u, 0x672Fu, 0x5410u, 0x0151u, 0x326Eu,
-   0x0114u, 0x322Bu, 0x676Au, 0x5455u, 0xCDE8u, 0xFED7u, 0xAB96u, 0x98A9u,
-   0xA9FBu, 0x9AC4u, 0xCF85u, 0xFCBAu, 0x6507u, 0x5638u, 0x0379u, 0x3046u,
-   0x033Cu, 0x3003u, 0x6542u, 0x567Du, 0xCFC0u, 0xFCFFu, 0xA9BEu, 0x9A81u,
-   0xCF4Au, 0xFC75u, 0xA934u, 0x9A0Bu, 0x03B6u, 0x3089u, 0x65C8u, 0x56F7u,
-   0x658Du, 0x56B2u, 0x03F3u, 0x30CCu, 0xA971u, 0x9A4Eu, 0xCF0Fu, 0xFC30u,
-   0x6499u, 0x57A6u, 0x02E7u, 0x31D8u, 0xA865u, 0x9B5Au, 0xCE1Bu, 0xFD24u,
-   0xCE5Eu, 0xFD61u, 0xA820u, 0x9B1Fu, 0x02A2u, 0x319Du, 0x64DCu, 0x57E3u,
-   0x0228u, 0x3117u, 0x6456u, 0x5769u, 0xCED4u, 0xFDEBu, 0xA8AAu, 0x9B95u,
-   0xA8EFu, 0x9BD0u, 0xCE91u, 0xFDAEu, 0x6413u, 0x572Cu, 0x026Du, 0x3152u,
-   0x60C9u, 0x53F6u, 0x06B7u, 0x3588u, 0xAC35u, 0x9F0Au, 0xCA4Bu, 0xF974u,
-   0xCA0Eu, 0xF931u, 0xAC70u, 0x9F4Fu, 0x06F2u, 0x35CDu, 0x608Cu, 0x53B3u,
-   0x0678u, 0x3547u, 0x6006u, 0x5339u, 0xCA84u, 0xF9BBu, 0xACFAu, 0x9FC5u,
-   0xACBFu, 0x9F80u, 0xCAC1u, 0xF9FEu, 0x6043u, 0x537Cu, 0x063Du, 0x3502u,
-   0xADABu, 0x9E94u, 0xCBD5u, 0xF8EAu, 0x6157u, 0x5268u, 0x0729u, 0x3416u,
-   0x076Cu, 0x3453u, 0x6112u, 0x522Du, 0xCB90u, 0xF8AFu, 0xADEEu, 0x9ED1u,
-   0xCB1Au, 0xF825u, 0xAD64u, 0x9E5Bu, 0x07E6u, 0x34D9u, 0x6198u, 0x52A7u,
-   0x61DDu, 0x52E2u, 0x07A3u, 0x349Cu, 0xAD21u, 0x9E1Eu, 0xCB5Fu, 0xF860u,
-   0xC932u, 0xFA0Du, 0xAF4Cu, 0x9C73u, 0x05CEu, 0x36F1u, 0x63B0u, 0x508Fu,
-   0x63F5u, 0x50CAu, 0x058Bu, 0x36B4u, 0xAF09u, 0x9C36u, 0xC977u, 0xFA48u,
-   0xAF83u, 0x9CBCu, 0xC9FDu, 0xFAC2u, 0x637Fu, 0x5040u, 0x0501u, 0x363Eu,
-   0x0544u, 0x367Bu, 0x633Au, 0x5005u, 0xC9B8u, 0xFA87u, 0xAFC6u, 0x9CF9u,
-   0x0450u, 0x376Fu, 0x622Eu, 0x5111u, 0xC8ACu, 0xFB93u, 0xAED2u, 0x9DEDu,
-   0xAE97u, 0x9DA8u, 0xC8E9u, 0xFBD6u, 0x626Bu, 0x5154u, 0x0415u, 0x372Au,
-   0x62E1u, 0x51DEu, 0x049Fu, 0x37A0u, 0xAE1Du, 0x9D22u, 0xC863u, 0xFB5Cu,
-   0xC826u, 0xFB19u, 0xAE58u, 0x9D67u, 0x04DAu, 0x37E5u, 0x62A4u, 0x519Bu
-};
-
-/*----------------------------------------------------------------------------*/
-/* CRC Polynomial lookup table, for RxA + RxS, 14 bytes data: 0x5643          */
-/*----------------------------------------------------------------------------*/
-const uint16 BswFpgaIf_u16Crc16LkpTab_5643[256] =
-{
-   0x0000u, 0x5643u, 0xAC86u, 0xFAC5u, 0x0F4Fu, 0x590Cu, 0xA3C9u, 0xF58Au,
-   0x1E9Eu, 0x48DDu, 0xB218u, 0xE45Bu, 0x11D1u, 0x4792u, 0xBD57u, 0xEB14u,
-   0x3D3Cu, 0x6B7Fu, 0x91BAu, 0xC7F9u, 0x3273u, 0x6430u, 0x9EF5u, 0xC8B6u,
-   0x23A2u, 0x75E1u, 0x8F24u, 0xD967u, 0x2CEDu, 0x7AAEu, 0x806Bu, 0xD628u,
-   0x7A78u, 0x2C3Bu, 0xD6FEu, 0x80BDu, 0x7537u, 0x2374u, 0xD9B1u, 0x8FF2u,
-   0x64E6u, 0x32A5u, 0xC860u, 0x9E23u, 0x6BA9u, 0x3DEAu, 0xC72Fu, 0x916Cu,
-   0x4744u, 0x1107u, 0xEBC2u, 0xBD81u, 0x480Bu, 0x1E48u, 0xE48Du, 0xB2CEu,
-   0x59DAu, 0x0F99u, 0xF55Cu, 0xA31Fu, 0x5695u, 0x00D6u, 0xFA13u, 0xAC50u,
-   0xF4F0u, 0xA2B3u, 0x5876u, 0x0E35u, 0xFBBFu, 0xADFCu, 0x5739u, 0x017Au,
-   0xEA6Eu, 0xBC2Du, 0x46E8u, 0x10ABu, 0xE521u, 0xB362u, 0x49A7u, 0x1FE4u,
-   0xC9CCu, 0x9F8Fu, 0x654Au, 0x3309u, 0xC683u, 0x90C0u, 0x6A05u, 0x3C46u,
-   0xD752u, 0x8111u, 0x7BD4u, 0x2D97u, 0xD81Du, 0x8E5Eu, 0x749Bu, 0x22D8u,
-   0x8E88u, 0xD8CBu, 0x220Eu, 0x744Du, 0x81C7u, 0xD784u, 0x2D41u, 0x7B02u,
-   0x9016u, 0xC655u, 0x3C90u, 0x6AD3u, 0x9F59u, 0xC91Au, 0x33DFu, 0x659Cu,
-   0xB3B4u, 0xE5F7u, 0x1F32u, 0x4971u, 0xBCFBu, 0xEAB8u, 0x107Du, 0x463Eu,
-   0xAD2Au, 0xFB69u, 0x01ACu, 0x57EFu, 0xA265u, 0xF426u, 0x0EE3u, 0x58A0u,
-   0xBFA3u, 0xE9E0u, 0x1325u, 0x4566u, 0xB0ECu, 0xE6AFu, 0x1C6Au, 0x4A29u,
-   0xA13Du, 0xF77Eu, 0x0DBBu, 0x5BF8u, 0xAE72u, 0xF831u, 0x02F4u, 0x54B7u,
-   0x829Fu, 0xD4DCu, 0x2E19u, 0x785Au, 0x8DD0u, 0xDB93u, 0x2156u, 0x7715u,
-   0x9C01u, 0xCA42u, 0x3087u, 0x66C4u, 0x934Eu, 0xC50Du, 0x3FC8u, 0x698Bu,
-   0xC5DBu, 0x9398u, 0x695Du, 0x3F1Eu, 0xCA94u, 0x9CD7u, 0x6612u, 0x3051u,
-   0xDB45u, 0x8D06u, 0x77C3u, 0x2180u, 0xD40Au, 0x8249u, 0x788Cu, 0x2ECFu,
-   0xF8E7u, 0xAEA4u, 0x5461u, 0x0222u, 0xF7A8u, 0xA1EBu, 0x5B2Eu, 0x0D6Du,
-   0xE679u, 0xB03Au, 0x4AFFu, 0x1CBCu, 0xE936u, 0xBF75u, 0x45B0u, 0x13F3u,
-   0x4B53u, 0x1D10u, 0xE7D5u, 0xB196u, 0x441Cu, 0x125Fu, 0xE89Au, 0xBED9u,
-   0x55CDu, 0x038Eu, 0xF94Bu, 0xAF08u, 0x5A82u, 0x0CC1u, 0xF604u, 0xA047u,
-   0x766Fu, 0x202Cu, 0xDAE9u, 0x8CAAu, 0x7920u, 0x2F63u, 0xD5A6u, 0x83E5u,
-   0x68F1u, 0x3EB2u, 0xC477u, 0x9234u, 0x67BEu, 0x31FDu, 0xCB38u, 0x9D7Bu,
-   0x312Bu, 0x6768u, 0x9DADu, 0xCBEEu, 0x3E64u, 0x6827u, 0x92E2u, 0xC4A1u,
-   0x2FB5u, 0x79F6u, 0x8333u, 0xD570u, 0x20FAu, 0x76B9u, 0x8C7Cu, 0xDA3Fu,
-   0x0C17u, 0x5A54u, 0xA091u, 0xF6D2u, 0x0358u, 0x551Bu, 0xAFDEu, 0xF99Du,
-   0x1289u, 0x44CAu, 0xBE0Fu, 0xE84Cu, 0x1DC6u, 0x4B85u, 0xB140u, 0xE703u
-};
-
-#define BSWFPGAIF_STOP_SEC_CONST
-#include "NextGen_MemMap.h"
-
 /*******************************************************************************
 **                      Static Function Definitions                           **
 *******************************************************************************/
-#define BSWFPGAIF_START_SEC_CODE_SLOW
-#include "NextGen_MemMap.h"
-
-static void BswFpgaIf_ReadIgbtTemp(void);
 static void BswFpgaIf_MeasDataCopy(void);
-#define BSWFPGAIF_STOP_SEC_CODE_SLOW
-#include "NextGen_MemMap.h"
 /*******************************************************************************
 **                      Global Function Definitions                           **
 *******************************************************************************/
@@ -864,754 +731,766 @@ static void BswFpgaIf_MeasDataCopy(void);
 
 /******************************************************************/
 /*!
- * \\fn      BswFpgaIf
- * \\brief   -.This function shall initialize the Fpfa Interface Appl function
- * \\param
- * \\param
- * \\return
- * \\retval
- * \\retval
+ * \\fn      void BswFpgaIf_Init(void)
+ * \\brief   This function shall initialize the BswFpga Tx variables.
  */
 /******************************************************************/
 
 void BswFpgaIf_Init(void)
 {
-/*----------------------------------------------------------------------------*/
-/* BswFpgaIf IPDU Tx Default value                                                  */
-/*----------------------------------------------------------------------------*/
-/*------------------------------------*/
-/* BswFpgaIf IPDU TxS                       */
-/*------------------------------------*/
-
-/*--------------------*/
-/* BswFpgaIf IPDU TxS MLI   */
-/*--------------------*/
-   BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Ul_MSB8                             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Ul_LSB4                             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Ur_MSB4                             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Ur_LSB8                             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Vl_MSB8                             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Vl_LSB4                             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Vr_MSB4                             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Vr_LSB8                             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Wl_MSB8                             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Wl_LSB4                             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Wr_MSB4                             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Wr_LSB8                             = 0u;
-
-   BswFpgaIfIpduTxDef.Data.TxS.Signal.PWMControl.Field.PWM_Ul_ON              = 1u;
-   BswFpgaIfIpduTxDef.Data.TxS.Signal.PWMControl.Field.PWM_Ur_ON              = 1u;
-   BswFpgaIfIpduTxDef.Data.TxS.Signal.PWMControl.Field.PWM_Vl_ON              = 1u;
-   BswFpgaIfIpduTxDef.Data.TxS.Signal.PWMControl.Field.PWM_Vr_ON              = 1u;
-   BswFpgaIfIpduTxDef.Data.TxS.Signal.PWMControl.Field.PWM_Wl_ON              = 1u;
-   BswFpgaIfIpduTxDef.Data.TxS.Signal.PWMControl.Field.PWM_Wr_ON              = 1u;
-   BswFpgaIfIpduTxDef.Data.TxS.Signal.PWMControl.Field.PWM_RatioFreq          = 0u;
-   BswFpgaIfIpduTxDef.Data.TxS.Signal.Ctrl                                    = 0u;
-
-/*------------------------------------*/
-/* BswFpgaIf IPDU TxA                       */
-/*------------------------------------*/
-/*--------------------*/
-/* BswFpgaIf IPDU TxA Id0   */
-/*--------------------*/
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.Id                               = 0x00u;  /* Field updated in Frame */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.StateReq.Field.EmergencySw       = 1u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.StateReq.Field.SCSpeedReady      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.StateReq.Field.Operation         = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.StateReq.Field.SwitchType        = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.StateReq.Field.ModeReq           = 0u;
-
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.EmergencyStop       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.PwrSupLs            = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.PwrSupHs            = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.PwrSupMul           = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.IgbtL               = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.IgbtH               = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.ActiveDisIn         = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.ActiveDisAc         = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.Spare07             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.Spare06             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.Spare05             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.Spare04             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.Spare03             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.Spare02             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.MeasCoherence       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.LossComSpi          = 0u;
-
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverCurBat          = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverTempCtrlBd      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverTempIgbt        = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverTempDrvBd       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.UnderVoltVBat       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverVoltVBat        = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.IgbtMidPointU       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.IgbtMidPointV       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.IgbtMidPointW       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.WdgCpld             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurWr      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurWl      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurVr      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurVl      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurUr      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurUl      = 0u;
-
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M0PwmMinDutyCycle_MSB8           = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M0PwmMinDutyCycle_LSB4           = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M1Id0Spare_MSB4                  = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M1Id0Spare_LSB8                  = 0u;
-/*--------------------*/
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M2PwmFreq_MSB8                   = 0u;   /* Param Val = 2000 :10 KHz  */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M2PwmFreq_LSB4                   = 0u;   /* Param Val = 2000 :10 KHz  */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M3PwmDeadtime_MSB4               = 0u;   /* Param Val = 48   :1.2 us  */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M3PwmDeadtime_LSB8               = 0u;   /* Param Val = 48   :1.2 us  */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M4Id0Spare_MSB8                  = 0u;                 /* Param Val = 0             */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M4Id0Spare_LSB4                  = 0u;                 /* Param Val = 0             */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M5PwmInitValUl_MSB4              = 0u;                 /* Param Val = 0             */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M5PwmInitValUl_LSB8              = 0u;                 /* Param Val = 0             */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M6PwmInitValUr_MSB8              = 0u;                 /* Param Val = 0             */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M6PwmInitValUr_LSB4              = 0u;                 /* Param Val = 0             */
-/*--------------------*/
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.Debug_MSB4                       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.Debug_LSB8                       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.Ctrl                             = 0u;
-/*--------------------*/
-/* BswFpgaIf IPDU TxA Id1   */
-/*--------------------*/
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.Id                               = 0x00u;  /* Field updated in Frame */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.StateReq.Field.EmergencySw       = 1u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.StateReq.Field.SCSpeedReady      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.StateReq.Field.Operation         = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.StateReq.Field.SwitchType        = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.StateReq.Field.ModeReq           = 0u;
-
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.EmergencyStop       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.PwrSupLs            = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.PwrSupHs            = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.PwrSupMul           = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.IgbtL               = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.IgbtH               = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.ActiveDisIn         = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.ActiveDisAc         = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.Spare07             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.Spare06             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.Spare05             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.Spare04             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.Spare03             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.Spare02             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.MeasCoherence       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.LossComSpi          = 0u;
-
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverCurBat          = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverTempCtrlBd      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverTempIgbt        = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverTempDrvBd       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.UnderVoltVBat       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverVoltVBat        = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.IgbtMidPointU       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.IgbtMidPointV       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.IgbtMidPointW       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.WdgCpld             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurWr      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurWl      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurVr      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurVl      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurUr      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurUl      = 0u;
-
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M0PwmMaxDutyCycle_MSB8           = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M0PwmMaxDutyCycle_LSB4           = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M1Id1Spare_MSB4                  = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M1Id1Spare_LSB8                  = 0u;
-/*--------------------*/
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M2PwmInitValVl_MSB8              = 0u;     /* Param Val = 0             */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M2PwmInitValVl_LSB4              = 0u;     /* Param Val = 0             */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M3PwmInitValVr_MSB4              = 0u;     /* Param Val = 0             */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M3PwmInitValVr_LSB8              = 0u;     /* Param Val = 0             */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M4PwmInitValWl_MSB8              = 0u;     /* Param Val = 0             */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M4PwmInitValWl_LSB4              = 0u;     /* Param Val = 0             */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M5PwmInitValWr_MSB4              = 0u;     /* Param Val = 0             */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M5PwmInitValWr_LSB8              = 0u;     /* Param Val = 0             */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M6Id1Spare_MSB8                  = 0u;     /* Param Val = 0             */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M6Id1Spare_LSB4                  = 0u;     /* Param Val = 0             */
-/*--------------------*/
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.Debug_MSB4                       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.Debug_LSB8                       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.Ctrl                             = 0u;
-/*--------------------*/
-/* BswFpgaIf IPDU TxA Id2   */
-/*--------------------*/
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.Id                               = 0x00u;  /* Field updated in Frame */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.StateReq.Field.EmergencySw       = 1u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.StateReq.Field.SCSpeedReady      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.StateReq.Field.Operation         = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.StateReq.Field.SwitchType        = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.StateReq.Field.ModeReq           = 0u;
-
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.EmergencyStop       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.PwrSupLs            = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.PwrSupHs            = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.PwrSupMul           = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.IgbtL               = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.IgbtH               = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.ActiveDisIn         = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.ActiveDisAc         = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.Spare07             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.Spare06             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.Spare05             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.Spare04             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.Spare03             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.Spare02             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.MeasCoherence       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.LossComSpi          = 0u;
-
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverCurBat          = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverTempCtrlBd      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverTempIgbt        = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverTempDrvBd       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.UnderVoltVBat       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverVoltVBat        = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.IgbtMidPointU       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.IgbtMidPointV       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.IgbtMidPointW       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.WdgCpld             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurWr      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurWl      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurVr      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurVl      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurUr      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurUl      = 0u;
-
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M0Id2Spare09To11                 = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.ActDisch_Req                     = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M0Id2Spare05To07                 = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FyBPwrSupCtrl                    = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M0IFilAverage                    = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M0VFilAverage                    = 0u;
-
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M1Id2Spare_MSB4                  = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M1Id2Spare_LSB8                  = 0u;
-/*--------------------*/
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M2OverCurThBat_MSB8              = 0u;     /* Param Val = ???  :50A     */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M2OverCurThBat_LSB4              = 0u;     /* Param Val = ???  :50A     */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M3OverVoltVbatTh_MSB4            = 0u;     /* Param Val = ???  :850V    */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M3OverVoltVbatTh_LSB8            = 0u;     /* Param Val = ???  :850V    */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M4Id2Spare_MSB8                  = 0u;     /* Param Val = 0             */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M4Id2Spare_LSB4                  = 0u;     /* Param Val = 0             */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M5Id2Spare_MSB4                  = 0u;     /* Param Val = 0             */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M5Id2Spare_LSB8                  = 0u;     /* Param Val = 0             */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M6Id2Spare_MSB8                  = 0u;     /* Param Val = 0             */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M6Id2Spare_LSB4                  = 0u;     /* Param Val = 0             */
-/*--------------------*/
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.Debug_MSB4                       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.Debug_LSB8                       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.Ctrl                             = 0u;
-/*--------------------*/
-/* BswFpgaIf IPDU TxA Id3   */
-/*--------------------*/
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.Id                               = 0x00u;  /* Field updated in Frame */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.StateReq.Field.EmergencySw       = 1u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.StateReq.Field.SCSpeedReady      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.StateReq.Field.Operation         = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.StateReq.Field.SwitchType        = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.StateReq.Field.ModeReq           = 0u;
-
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.EmergencyStop       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.PwrSupLs            = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.PwrSupHs            = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.PwrSupMul           = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.IgbtL               = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.IgbtH               = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.ActiveDisIn         = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.ActiveDisAc         = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.Spare07             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.Spare06             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.Spare05             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.Spare04             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.Spare03             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.Spare02             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.MeasCoherence       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.LossComSpi          = 0u;
-
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverCurBat          = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverTempCtrlBd      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverTempIgbt        = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverTempDrvBd       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.UnderVoltVBat       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverVoltVBat        = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.IgbtMidPointU       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.IgbtMidPointV       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.IgbtMidPointW       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.WdgCpld             = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurWr      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurWl      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurVr      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurVl      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurUr      = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurUl      = 0u;
-
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M0DebugL_MSB8                    = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M0DebugL_LSB4                    = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M1DebugH_MSB4                    = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M1DebugH_LSB8                    = 0u;
-/*--------------------*/
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M2OverCurThMot_MSB8              = 0xFFu;                 /* Param Val = ???  :300A    */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M2OverCurThMot_LSB4              = 0xFu;                 /* Param Val = ???  :300A    */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M3ActiveDisDur_MSB4              = 0xFu;                   /* Param Val = 2442 :4000us  */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M3ActiveDisDur_LSB8              = 0xFFu;                   /* Param Val = 2442 :4000\xc2\xb5s  */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M4SynchroDelay_MSB8              = (436u >> 4u);        /* Param Val = 436  :10.900\xc2\xb5s*/
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M4SynchroDelay_LSB4              = (436u & 0x000Fu);    /* Param Val = 436  :10.900\xc2\xb5s*/
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M5Id3Spare_MSB4                  = 0u;                 /* Param Val = 0             */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M5Id3Spare_LSB8                  = 0u;                 /* Param Val = 0             */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M6Id3Spare_MSB8                  = 0u;                 /* Param Val = 0             */
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M6Id3Spare_LSB4                  = 0u;                 /* Param Val = 0             */
-/*--------------------*/
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.Debug_MSB4                       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.Debug_LSB8                       = 0u;
-   BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.Ctrl                             = 0u;
-
-/*----------------------------------------------------------------------------*/
-/* BswFpgaIf IPDU Rx Default value                                                  */
-/*----------------------------------------------------------------------------*/
-/*------------------------------------*/
-/* BswFpgaIf IPDU RxA                       */
-/*------------------------------------*/
-/*--------------------*/
-/* BswFpgaIf IPDU RxA IdA   */
-/*--------------------*/
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.Id                               = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.StateRes.Field.PWM_RatioFreqRes  = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.StateRes.Field.CurAcq            = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.StateRes.Field.SwitchTypeRes     = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.StateRes.Field.ModeRes           = 0u;
-
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.EmergencyStop       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.PwrSupLs            = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.PwrSupHs            = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.PwrSupMul           = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.IgbtL               = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.IgbtH               = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.ActiveDisIn         = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.ActiveDisAc         = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare07             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare06             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare05             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare04             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare03             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare02             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.MeasCoherence       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.LossComSpi          = 1u;
-
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.OverCurBat          = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.OverTempCtrlBd      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.OverTempIgbt        = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.OverTempDrvBd       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.UnderVoltVBat       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.OverVoltVBat        = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.IgbtMidPointU       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.IgbtMidPointV       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.IgbtMidPointW       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.WdgCpld             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurWr      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurWl      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurVr      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurVl      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurUr      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurUl      = 1u;
-
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare15             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare14             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare13             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare12             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare11             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare10             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare09             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare08             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare07             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare06             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare05             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.LowSpeedReach       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare03             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.PwmClampFlag        = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.PwmParamFlag        = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare00             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.Debug64To75_MSB8                 = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.Debug64To75_LSB4                 = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.M0_MSB4                          = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.M0_LSB8                          = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.M1_MSB8                          = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.M1_LSB4                          = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.Debug100To111_MSB4               = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.Debug100To111_LSB8               = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.Ctrl                             = 0u;
-/*--------------------*/
-/* BswFpgaIf IPDU RxA Id0   */
-/*--------------------*/
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.Id                               = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.StateRes.Field.PWM_RatioFreqRes  = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.StateRes.Field.CurAcq            = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.StateRes.Field.SwitchTypeRes     = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.StateRes.Field.ModeRes           = 0u;
-
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.EmergencyStop       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.PwrSupLs            = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.PwrSupHs            = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.PwrSupMul           = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.IgbtL               = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.IgbtH               = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.ActiveDisIn         = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.ActiveDisAc         = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.Spare07             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.Spare06             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.Spare05             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.Spare04             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.Spare03             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.Spare02             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.MeasCoherence       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.LossComSpi          = 1u;
-
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverCurBat          = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverTempCtrlBd      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverTempIgbt        = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverTempDrvBd       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.UnderVoltVBat       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverVoltVBat        = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.IgbtMidPointU       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.IgbtMidPointV       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.IgbtMidPointW       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.WdgCpld             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurWr      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurWl      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurVr      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurVl      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurUr      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurUl      = 1u;
-
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare15             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare14             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare13             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare12             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare11             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare10             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare09             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare08             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare07             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare06             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare05             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.LowSpeedReach       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare03             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.PwmClampFlag        = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.PwmParamFlag        = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare00             = 1u;
-
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.Debug64To75_MSB8                 = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.Debug64To75_LSB4                 = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.IgbtTempV_MSB4                    = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.IgbtTempV_LSB8                    = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.IgbtTempW_MSB8                  = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.IgbtTempW_LSB4                  = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.IgbtTempU_MSB4                    = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.IgbtTempU_LSB8                     = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.Ctrl                             = 0u;
-
-/*--------------------*/
-/* BswFpgaIf IPDU RxA Id1   */
-/*--------------------*/
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.Id                               = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.StateRes.Field.PWM_RatioFreqRes  = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.StateRes.Field.CurAcq            = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.StateRes.Field.SwitchTypeRes     = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.StateRes.Field.ModeRes           = 0u;
-
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.EmergencyStop       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.PwrSupLs            = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.PwrSupHs            = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.PwrSupMul           = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.IgbtL               = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.IgbtH               = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.ActiveDisIn         = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.ActiveDisAc         = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.Spare07             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.Spare06             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.Spare05             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.Spare04             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.Spare03             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.Spare02             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.MeasCoherence       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.LossComSpi          = 1u;
-
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverCurBat          = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverTempCtrlBd      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverTempIgbt        = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverTempDrvBd       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.UnderVoltVBat       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverVoltVBat        = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.IgbtMidPointU       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.IgbtMidPointV       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.IgbtMidPointW       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.WdgCpld             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurWr      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurWl      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurVr      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurVl      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurUr      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurUl      = 1u;
-
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare15             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare14             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare13             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare12             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare11             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare10             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare09             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare08             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare07             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare06             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare05             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.LowSpeedReach       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare03             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.PwmClampFlag        = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.PwmParamFlag        = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare00             = 1u;
-
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.Debug64To75_MSB8                 = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.Debug64To75_LSB4                 = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.DcLinkCtrlBd_MSB4                = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.DcLinkCtrlBd_LSB8                = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.DcLinkDrvBd_MSB8                 = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.DcLinkDrvBd_LSB4                 = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.Debug100To111_MSB4               = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.Debug100To111_LSB8               = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.Ctrl                             = 0u;
-/*--------------------*/
-/* BswFpgaIf IPDU RxA Id2   */
-/*--------------------*/
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.Id                               = 2u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.StateRes.Field.PWM_RatioFreqRes  = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.StateRes.Field.CurAcq            = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.StateRes.Field.SwitchTypeRes     = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.StateRes.Field.ModeRes           = 0u;
-
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.EmergencyStop       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.PwrSupLs            = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.PwrSupHs            = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.PwrSupMul           = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.IgbtL               = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.IgbtH               = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.ActiveDisIn         = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.ActiveDisAc         = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.Spare07             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.Spare06             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.Spare05             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.Spare04             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.Spare03             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.Spare02             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.MeasCoherence       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.LossComSpi          = 1u;
-
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverCurBat          = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverTempCtrlBd      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverTempIgbt        = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverTempDrvBd       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.UnderVoltVBat       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverVoltVBat        = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.IgbtMidPointU       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.IgbtMidPointV       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.IgbtMidPointW       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.WdgCpld             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurWr      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurWl      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurVr      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurVl      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurUr      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurUl      = 1u;
-
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare15             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare14             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare13             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare12             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare11             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare10             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare09             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare08             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare07             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare06             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare05             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.LowSpeedReach       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare03             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.PwmClampFlag        = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.PwmParamFlag        = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare00             = 1u;
-
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.Debug64To75_MSB8                 = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.Debug64To75_LSB4                 = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.TempCtrlBd_MSB4                  = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.TempCtrlBd_LSB8                  = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.M1VFpgaL_MSB8                    = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.M1VFpgaL_LSB4                    = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.Debug100To111_MSB4               = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.Debug100To111_LSB8               = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.Ctrl                             = 0u;
-/*--------------------*/
-/* BswFpgaIf IPDU RxA Id3   */
-/*--------------------*/
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.Id                               = 3u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.StateRes.Field.PWM_RatioFreqRes  = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.StateRes.Field.CurAcq            = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.StateRes.Field.SwitchTypeRes     = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.StateRes.Field.ModeRes           = 0u;
-
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.EmergencyStop       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.PwrSupLs            = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.PwrSupHs            = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.PwrSupMul           = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.IgbtL               = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.IgbtH               = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.ActiveDisIn         = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.ActiveDisAc         = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.Spare07             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.Spare06             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.Spare05             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.Spare04             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.Spare03             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.Spare02             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.MeasCoherence       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.LossComSpi          = 1u;
-
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverCurBat          = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverTempCtrlBd      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverTempIgbt        = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverTempDrvBd       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.UnderVoltVBat       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverVoltVBat        = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.IgbtMidPointU       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.IgbtMidPointV       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.IgbtMidPointW       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.WdgCpld             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurWr      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurWl      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurVr      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurVl      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurUr      = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurUl      = 1u;
-
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare15             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare14             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare13             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare12             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare11             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare10             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare09             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare08             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare07             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare06             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare05             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.LowSpeedReach       = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare03             = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.PwmClampFlag        = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.PwmParamFlag        = 1u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare00             = 1u;
-
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.Debug64To75_MSB8                 = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.Debug64To75_LSB4                 = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.TempDrvBd_MSB4                   = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.TempDrvBd_LSB8                   = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.M1VFpgaH_MSB8                    = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.M1VFpgaH_LSB4                    = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.Debug100To111_MSB4               = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.Debug100To111_LSB8               = 0u;
-   BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.Ctrl                             = 0u;
-/*------------------------------------*/
-/* BswFpgaIf IPDU RxS                       */
-/*------------------------------------*/
-   BswFpgaIfIpduRxDef.Data.RxS.Signal.CurMeasPh_U_MSB8                        = 0u;
-   BswFpgaIfIpduRxDef.Data.RxS.Signal.CurMeasPh_U_LSB4                        = 0u;
-   BswFpgaIfIpduRxDef.Data.RxS.Signal.HalfCoilCur_Ur_MSB4                     = 0u;
-   BswFpgaIfIpduRxDef.Data.RxS.Signal.HalfCoilCur_Ur_LSB8                     = 0u;
-   BswFpgaIfIpduRxDef.Data.RxS.Signal.CurMeasPh_V_MSB8                        = 0u;
-   BswFpgaIfIpduRxDef.Data.RxS.Signal.CurMeasPh_V_LSB4                        = 0u;
-   BswFpgaIfIpduRxDef.Data.RxS.Signal.HalfCoilCur_Vr_MSB4                     = 0u;
-   BswFpgaIfIpduRxDef.Data.RxS.Signal.HalfCoilCur_Vr_LSB8                     = 0u;
-   BswFpgaIfIpduRxDef.Data.RxS.Signal.CurMeasPh_W_MSB8                        = 0u;
-   BswFpgaIfIpduRxDef.Data.RxS.Signal.CurMeasPh_W_LSB4                        = 0u;
-   BswFpgaIfIpduRxDef.Data.RxS.Signal.HalfCoilCur_Wr_MSB4                     = 0u;
-   BswFpgaIfIpduRxDef.Data.RxS.Signal.HalfCoilCur_Wr_LSB8                     = 0u;
-   BswFpgaIfIpduRxDef.Data.RxS.Signal.PwrSupply_5V_HS_MSB8                    = 0u;
-   BswFpgaIfIpduRxDef.Data.RxS.Signal.PwrSupply_5V_HS_LSB4                    = 0u;
-   BswFpgaIfIpduRxDef.Data.RxS.Signal.PwrSupply_5V_LS_MSB4                    = 0u;
-   BswFpgaIfIpduRxDef.Data.RxS.Signal.PwrSupply_5V_LS_LSB8                    = 0u;
-   BswFpgaIfIpduRxDef.Data.RxS.Signal.PwrSup_16V_MULTI_MSB8                   = 0u;
-   BswFpgaIfIpduRxDef.Data.RxS.Signal.PwrSup_16V_MULTI_LSB4                   = 0u;
-   BswFpgaIfIpduRxDef.Data.RxS.Signal.FS_TXA                                  = 0u;
-   BswFpgaIfIpduRxDef.Data.RxS.Signal.FS_TXS                                  = 0u;
-   BswFpgaIfIpduRxDef.Data.RxS.Signal.FS_SOL                                  = 0u;
-   BswFpgaIfIpduRxDef.Data.RxS.Signal.FS_SOE                                  = 0u;
-   BswFpgaIfIpduRxDef.Data.RxS.Signal.Ctrl                                    = 0u;
-   
-   /***** BswFpgaIf_SetTxSyncData() code movement *****/
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Ur_MSB4    = 0x3u;
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Ur_LSB8    = 0xE8u;
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Vr_MSB4    = 0x3u;
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Vr_LSB8    = 0xE8u;
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Wr_MSB4    = 0x3u;
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Wr_LSB8    = 0xE8u;
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Ul_ON = 1u;
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Ur_ON = 1u;
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Vl_ON = 1u;
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Vr_ON = 1u;
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Wl_ON = 1u;
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Wr_ON = 1u;
-   BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_RatioFreq = 0;
-   
-   
-   /***** BswFpgaIf_SetTxASyncData() code movement *****/
-   BswFpgaIfTxaStateReqOperation = 1u;
-   BswFpgaIfTxaStateReqSwitchType = 1u;
-   
-   BswFpgaIf_SetSignalStateReqOperation(BswFpgaIfTxaStateReqOperation);
-   BswFpgaIf_SetSignalStateReqSwitchType(BswFpgaIfTxaStateReqSwitchType);
-   
-   /**********************************Switch Case*********************************/
-   /* MUX ID0 */
-   BswFpgaIf_SetSignalM1Id0Spare(0u);
-   BswFpgaIf_SetSignalM4Id0Spare(0u);
-   BswFpgaIf_SetSignalPwmInitValUr(0);
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.Debug_MSB4   = 0u;
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.Debug_LSB8   = 0u;
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.Ctrl         = 0u;
-   
-   /* MUX ID1 */
-   BswFpgaIf_SetSignalM1Id1Spare(0u);
-   BswFpgaIf_SetSignalM6Id1Spare(0u);
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.Debug_MSB4   = 0u;
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.Debug_LSB8  = 0u;
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.Ctrl        = 0u;
-   
-   /* MUX ID2 */
-   BswFpgaIf_SetSignalM0Id2Spare09To11(0u);
-   BswFpgaIf_SetSignalM0Id2Spare05To07(0u);
-   BswFpgaIf_SetSignalM0IFilAverage(0);
-   BswFpgaIf_SetSignalM1Id2Spare(0u);
-   BswFpgaIf_SetSignalOverCurThBat(0xE67u);
-   BswFpgaIf_SetSignalOverVoltVbatTh(0xB3B);
-   BswFpgaIf_SetSignalM4Id2Spare(0u);
-   BswFpgaIf_SetSignalM5Id2Spare(0u);
-   BswFpgaIf_SetSignalM6Id2Spare(0u);
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.Debug_MSB4       = 0u;
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.Debug_LSB8       = 0u;
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.Ctrl             = 0u;
-   
-   /* MUX ID3 */
-   BswFpgaIf_SetSignalDebugH(0u);
-   BswFpgaIf_SetSignalOverCurThMot(BswFpgaIfPhaOcThd);
-   BswFpgaIf_SetSignalActiveDisDur(0x98Au);
-   BswFpgaIf_SetSignalSynchroDelay(436);
-   BswFpgaIf_SetSignalM5Id3Spare(0u);
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.Debug_MSB4     = 0u;
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.Debug_LSB8     = 0u;
-   BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.Ctrl           = 0u;
-   
-   BswFpgaIf_ComInitOn();
+   /*----------------------------------------------------------------------------*/
+   /* BswFpgaIf IPDU Tx Default value                                                  */
+   /*----------------------------------------------------------------------------*/
+   /*------------------------------------*/
+   /* BswFpgaIf IPDU TxS                       */
+   /*------------------------------------*/
+   /*--------------------*/
+   /* BswFpgaIf IPDU TxS MLI   */
+   /*--------------------*/
+      BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Ul_MSB8                             = 0;
+      BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Ul_LSB4                             = 0;
+      BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Ur_MSB4                             = 0;
+      BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Ur_LSB8                             = 0;
+      BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Vl_MSB8                             = 0;
+      BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Vl_LSB4                             = 0;
+      BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Vr_MSB4                             = 0;
+      BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Vr_LSB8                             = 0;
+      BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Wl_MSB8                             = 0;
+      BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Wl_LSB4                             = 0;
+      BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Wr_MSB4                             = 0;
+      BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Wr_LSB8                             = 0;
+
+   /*--------------------*/
+   /* BswFpgaIf IPDU TxS SVM   */
+   /*--------------------*/
+   /*   BswFpgaIfIpduTxDef.Data.TxS.SignalSVM.SVM_V1                               = 0; */
+   /*   BswFpgaIfIpduTxDef.Data.TxS.SignalSVM.SVM_V2_MSB2                          = 0; */
+   /*   BswFpgaIfIpduTxDef.Data.TxS.SignalSVM.SVM_V2_LSB4                          = 0; */
+   /*   BswFpgaIfIpduTxDef.Data.TxS.SignalSVM.SVM_V3_MSB4                          = 0; */
+   /*   BswFpgaIfIpduTxDef.Data.TxS.SignalSVM.SVM_V3_LSB2                          = 0; */
+   /*   BswFpgaIfIpduTxDef.Data.TxS.SignalSVM.SVM_V4                               = 0; */
+   /*   BswFpgaIfIpduTxDef.Data.TxS.SignalSVM.SVM_AT1_MSB8                         = 0; */
+   /*   BswFpgaIfIpduTxDef.Data.TxS.SignalSVM.SVM_AT1_LSB4                         = 0; */
+   /*   BswFpgaIfIpduTxDef.Data.TxS.SignalSVM.SVM_AT2_MSB4                         = 0; */
+   /*   BswFpgaIfIpduTxDef.Data.TxS.SignalSVM.SVM_AT2_LSB8                         = 0; */
+   /*   BswFpgaIfIpduTxDef.Data.TxS.SignalSVM.SVM_AT3_MSB8                         = 0; */
+   /*   BswFpgaIfIpduTxDef.Data.TxS.SignalSVM.SVM_AT3_LSB4                         = 0; */
+   /*   BswFpgaIfIpduTxDef.Data.TxS.SignalSVM.SVM_AT4_MSB4                         = 0; */
+   /*   BswFpgaIfIpduTxDef.Data.TxS.SignalSVM.SVM_AT4_LSB8                         = 0; */
+
+      BswFpgaIfIpduTxDef.Data.TxS.Signal.PwmFreqDyn_MSB8                         = (2000 >> 6);       /* Param Val = 2000 :10 KHz  */
+      BswFpgaIfIpduTxDef.Data.TxS.Signal.PwmFreqDyn_LSB6                         = (2000 & 0x003F);   /* Param Val = 2000 :10 KHz  */
+      BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_UVW_ON                              = 0;
+      BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_RatioFreq                           = VSISRV_SIGNAL_PWM_RATIO_NONE;
+      BswFpgaIfIpduTxDef.Data.TxS.Signal.Ctrl                                    = 0;
+   /*------------------------------------*/
+   /* BswFpgaIf IPDU TxA                       */
+   /*------------------------------------*/
+   /*--------------------*/
+   /* BswFpgaIf IPDU TxA Id0   */
+   /*--------------------*/
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.Id                               = 0x00;  /* Field updated in Frame */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.StateReq.Field.EmergencySw       = 1;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.StateReq.Field.SCSpeedReady      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.StateReq.Field.Operation         = VSISRV_SIGNAL_OPERATION_MCU;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.StateReq.Field.SwitchType        = VSISRV_SIGNAL_SWITCHTYPE_MLI_T;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.StateReq.Field.ModeReq           = VSISRV_SIGNAL_MODE_REQ_OFF;
+
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.EmergencyStop       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.PwrSupLs            = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.PwrSupHs            = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.PwrSupMul           = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.IgbtL               = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.IgbtH               = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.ActiveDisIn         = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.ActiveDisAc         = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.Spare07             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.Spare06             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.Spare05             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.Spare04             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.Spare03             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.Spare02             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.Spare01             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultA.Field.LossComSpi          = 0;
+
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverCurBat          = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverTempCtrlBd      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverTempIgbt        = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverTempDrvBd       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.UnderVoltVBat       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverVoltVBat        = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.IgbtMidPointU       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.IgbtMidPointV       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.IgbtMidPointW       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.WdgCpld             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurWr      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurWl      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurVr      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurVl      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurUr      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurUl      = 0;
+
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M0PwmMinDutyCycle_MSB8           = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M0PwmMinDutyCycle_LSB4           = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M1Id0Spare_MSB4                  = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M1Id0Spare_LSB8                  = 0;
+   /*--------------------*/
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M2PwmFreq_MSB8                   = (2000 >> 4);       /* Param Val = 2000 :10 KHz  */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M2PwmFreq_LSB4                   = (2000 & 0x000F);   /* Param Val = 2000 :10 KHz  */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M3PwmDeadtime_MSB4               = (48 >> 8);         /* Param Val = 48   :1.2 \xb5s  */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M3PwmDeadtime_LSB8               = (48 & 0x00FF);     /* Param Val = 48   :1.2 \xb5s  */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M4Id0Spare_MSB8                  = (2000 >> 4);       /* Param Val = 2000 :5 KHz   */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M4Id0Spare_LSB4                  = (2000 & 0x000F);   /* Param Val = 2000 :5 KHz   */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M5PwmInitValUl_MSB4              = 0;                 /* Param Val = 0             */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M5PwmInitValUl_LSB8              = 0;                 /* Param Val = 0             */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M6PwmInitValUr_MSB8              = 0;                 /* Param Val = 0             */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.M6PwmInitValUr_LSB4              = 0;                 /* Param Val = 0             */
+   /*--------------------*/
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.Debug_MSB4                       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.Debug_LSB8                       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx0.Signal.Ctrl                             = 0;
+   /*--------------------*/
+   /* BswFpgaIf IPDU TxA Id1   */
+   /*--------------------*/
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.Id                               = 0x00;  /* Field updated in Frame */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.StateReq.Field.EmergencySw       = 1;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.StateReq.Field.SCSpeedReady      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.StateReq.Field.Operation         = VSISRV_SIGNAL_OPERATION_MCU;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.StateReq.Field.SwitchType        = VSISRV_SIGNAL_SWITCHTYPE_MLI_T;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.StateReq.Field.ModeReq           = VSISRV_SIGNAL_MODE_REQ_OFF;
+
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.EmergencyStop       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.PwrSupLs            = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.PwrSupHs            = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.PwrSupMul           = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.IgbtL               = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.IgbtH               = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.ActiveDisIn         = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.ActiveDisAc         = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.Spare07             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.Spare06             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.Spare05             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.Spare04             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.Spare03             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.Spare02             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.Spare01             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultA.Field.LossComSpi          = 0;
+
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverCurBat          = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverTempCtrlBd      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverTempIgbt        = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverTempDrvBd       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.UnderVoltVBat       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverVoltVBat        = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.IgbtMidPointU       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.IgbtMidPointV       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.IgbtMidPointW       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.WdgCpld             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurWr      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurWl      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurVr      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurVl      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurUr      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurUl      = 0;
+
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M0PwmMaxDutyCycle_MSB8           = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M0PwmMaxDutyCycle_LSB4           = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M1Id1Spare_MSB4                  = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M1Id1Spare_LSB8                  = 0;
+   /*--------------------*/
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M2PwmInitValVl_MSB8              = 0;     /* Param Val = 0             */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M2PwmInitValVl_LSB4              = 0;     /* Param Val = 0             */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M3PwmInitValVr_MSB4              = 0;     /* Param Val = 0             */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M3PwmInitValVr_LSB8              = 0;     /* Param Val = 0             */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M4PwmInitValWl_MSB8              = 0;     /* Param Val = 0             */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M4PwmInitValWl_LSB4              = 0;     /* Param Val = 0             */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M5PwmInitValWr_MSB4              = 0;     /* Param Val = 0             */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M5PwmInitValWr_LSB8              = 0;     /* Param Val = 0             */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M6Id1Spare_MSB8                  = 0;     /* Param Val = 0             */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.M6Id1Spare_LSB4                  = 0;     /* Param Val = 0             */
+   /*--------------------*/
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.Debug_MSB4                       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.Debug_LSB8                       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx1.Signal.Ctrl                             = 0;
+   /*--------------------*/
+   /* BswFpgaIf IPDU TxA Id2   */
+   /*--------------------*/
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.Id                               = 0x00;  /* Field updated in Frame */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.StateReq.Field.EmergencySw       = 1;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.StateReq.Field.SCSpeedReady      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.StateReq.Field.Operation         = VSISRV_SIGNAL_OPERATION_MCU;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.StateReq.Field.SwitchType        = VSISRV_SIGNAL_SWITCHTYPE_MLI_T;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.StateReq.Field.ModeReq           = VSISRV_SIGNAL_MODE_REQ_OFF;
+
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.EmergencyStop       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.PwrSupLs            = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.PwrSupHs            = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.PwrSupMul           = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.IgbtL               = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.IgbtH               = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.ActiveDisIn         = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.ActiveDisAc         = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.Spare07             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.Spare06             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.Spare05             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.Spare04             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.Spare03             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.Spare02             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.Spare01             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultA.Field.LossComSpi          = 0;
+
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverCurBat          = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverTempCtrlBd      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverTempIgbt        = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverTempDrvBd       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.UnderVoltVBat       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverVoltVBat        = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.IgbtMidPointU       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.IgbtMidPointV       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.IgbtMidPointW       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.WdgCpld             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurWr      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurWl      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurVr      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurVl      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurUr      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurUl      = 0;
+
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M0Id2Spare06To11                 = 0x04;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.PwrSupDrvInh                     = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.PwrSupHbrInh                     = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M0IFilAverage                    = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M0VFilAverage                    = 0;
+
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M1Id2Spare_MSB4                  = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M1Id2Spare_LSB8                  = 0;
+   /*--------------------*/
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M2OverCurThBat_MSB8              = 0;     /* Param Val = ???  :50A     */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M2OverCurThBat_LSB4              = 0;     /* Param Val = ???  :50A     */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M3OverVoltVbatTh_MSB4            = 0;     /* Param Val = ???  :850V    */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M3OverVoltVbatTh_LSB8            = 0;     /* Param Val = ???  :850V    */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M4Id2Spare_MSB8                  = 0;     /* Param Val = 0             */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M4Id2Spare_LSB4                  = 0;     /* Param Val = 0             */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M5Id2Spare_MSB4                  = 0;     /* Param Val = 0             */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M5Id2Spare_LSB8                  = 0;     /* Param Val = 0             */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M6Id2Spare_MSB8                  = 0;     /* Param Val = 0             */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.M6Id2Spare_LSB4                  = 0;     /* Param Val = 0             */
+   /*--------------------*/
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.Debug_MSB4                       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.Debug_LSB8                       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx2.Signal.Ctrl                             = 0;
+   /*--------------------*/
+   /* BswFpgaIf IPDU TxA Id3   */
+   /*--------------------*/
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.Id                               = 0x00;  /* Field updated in Frame */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.StateReq.Field.EmergencySw       = 1;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.StateReq.Field.SCSpeedReady      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.StateReq.Field.Operation         = VSISRV_SIGNAL_OPERATION_MCU;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.StateReq.Field.SwitchType        = VSISRV_SIGNAL_SWITCHTYPE_MLI_T;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.StateReq.Field.ModeReq           = VSISRV_SIGNAL_MODE_REQ_OFF;
+
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.EmergencyStop       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.PwrSupLs            = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.PwrSupHs            = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.PwrSupMul           = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.IgbtL               = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.IgbtH               = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.ActiveDisIn         = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.ActiveDisAc         = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.Spare07             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.Spare06             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.Spare05             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.Spare04             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.Spare03             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.Spare02             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.Spare01             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultA.Field.LossComSpi          = 0;
+
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverCurBat          = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverTempCtrlBd      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverTempIgbt        = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverTempDrvBd       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.UnderVoltVBat       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverVoltVBat        = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.IgbtMidPointU       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.IgbtMidPointV       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.IgbtMidPointW       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.WdgCpld             = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurWr      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurWl      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurVr      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurVl      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurUr      = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurUl      = 0;
+
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M0DebugL_MSB8                    = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M0DebugL_LSB4                    = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M1DebugH_MSB4                    = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M1DebugH_LSB8                    = 0;
+   /*--------------------*/
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M2OverCurThMot_MSB8              = 0;                 /* Param Val = ???  :300A    */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M2OverCurThMot_LSB4              = 0;                 /* Param Val = ???  :300A    */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M3ActiveDisDur_MSB4              = (2442 >> 8);       /* Param Val = 2442 :4000\xb5s  */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M3ActiveDisDur_LSB8              = (2442 & 0x00FF);   /* Param Val = 2442 :4000\xb5s  */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M4SynchroDelay_MSB8              = (436 >> 4);        /* Param Val = 436  :10.900\xb5s*/
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M4SynchroDelay_LSB4              = (436 & 0x000F);    /* Param Val = 436  :10.900\xb5s*/
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M5Id3Spare_MSB4                  = 0;                 /* Param Val = 0             */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M5Id3Spare_LSB8                  = 0;                 /* Param Val = 0             */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M6Id3Spare_MSB8                  = 0;                 /* Param Val = 0             */
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.M6Id3Spare_LSB4                  = 0;                 /* Param Val = 0             */
+   /*--------------------*/
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.Debug_MSB4                       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.Debug_LSB8                       = 0;
+      BswFpgaIfIpduTxDef.Data.TxA.Id.Mx3.Signal.Ctrl                             = 0;
+
+   /*----------------------------------------------------------------------------*/
+   /* BswFpgaIf IPDU Rx Default value                                                  */
+   /*----------------------------------------------------------------------------*/
+   /*------------------------------------*/
+   /* BswFpgaIf IPDU RxA                       */
+   /*------------------------------------*/
+   /*--------------------*/
+   /* BswFpgaIf IPDU RxA IdA   */
+   /*--------------------*/
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.Id                               = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.StateRes.Field.PWM_RatioFreqRes  = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.StateRes.Field.CurAcq            = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.StateRes.Field.SwitchTypeRes     = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.StateRes.Field.ModeRes           = 0;
+
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.EmergencyStop       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.PwrSupLs            = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.PwrSupHs            = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.PwrSupMul           = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.IgbtL               = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.IgbtH               = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.ActiveDisIn         = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.ActiveDisAc         = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare07             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare06             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare05             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare04             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare03             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare02             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare01             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultA.Field.LossComSpi          = 1;
+
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.OverCurBat          = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.OverTempCtrlBd      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.OverTempIgbt        = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.OverTempDrvBd       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.UnderVoltVBat       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.OverVoltVBat        = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.IgbtMidPointU       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.IgbtMidPointV       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.IgbtMidPointW       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.WdgCpld             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurWr      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurWl      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurVr      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurVl      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurUr      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurUl      = 1;
+
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare15             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare14             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare13             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare12             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare11             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare10             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare09             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare08             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare07             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare06             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare05             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.LowSpeedReach       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare03             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.PwmClampFlag        = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.PwmParamFlag        = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare00             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.Debug64To75_MSB8                 = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.Debug64To75_LSB4                 = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.M0_MSB4                          = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.M0_LSB8                          = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.M1_MSB8                          = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.M1_LSB4                          = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.Debug100To111_MSB4               = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.Debug100To111_LSB8               = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.MxA.Signal.Ctrl                             = 0;
+   /*--------------------*/
+   /* BswFpgaIf IPDU RxA Id0   */
+   /*--------------------*/
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.Id                               = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.StateRes.Field.PWM_RatioFreqRes  = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.StateRes.Field.CurAcq            = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.StateRes.Field.SwitchTypeRes     = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.StateRes.Field.ModeRes           = 0;
+
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.EmergencyStop       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.PwrSupLs            = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.PwrSupHs            = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.PwrSupMul           = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.IgbtL               = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.IgbtH               = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.ActiveDisIn         = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.ActiveDisAc         = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.Spare07             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.Spare06             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.Spare05             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.Spare04             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.Spare03             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.Spare02             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.Spare01             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultA.Field.LossComSpi          = 1;
+
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverCurBat          = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverTempCtrlBd      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverTempIgbt        = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverTempDrvBd       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.UnderVoltVBat       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverVoltVBat        = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.IgbtMidPointU       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.IgbtMidPointV       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.IgbtMidPointW       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.WdgCpld             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurWr      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurWl      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurVr      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurVl      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurUr      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurUl      = 1;
+
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare15             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare14             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare13             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare12             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare11             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare10             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare09             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare08             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare07             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare06             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare05             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.LowSpeedReach       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare03             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.PwmClampFlag        = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.PwmParamFlag        = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare00             = 1;
+
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.Debug64To75_MSB8                 = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.Debug64To75_LSB4                 = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.TempIgbt_MSB4                    = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.TempIgbt_LSB8                    = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.MeasCurBat_MSB8                  = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.MeasCurBat_LSB4                  = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.Debug100To111_MSB4               = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.Debug100To111_LSB8               = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx0.Signal.Ctrl                             = 0;
+   /*--------------------*/
+   /* BswFpgaIf IPDU RxA Id1   */
+   /*--------------------*/
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.Id                               = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.StateRes.Field.PWM_RatioFreqRes  = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.StateRes.Field.CurAcq            = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.StateRes.Field.SwitchTypeRes     = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.StateRes.Field.ModeRes           = 0;
+
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.EmergencyStop       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.PwrSupLs            = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.PwrSupHs            = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.PwrSupMul           = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.IgbtL               = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.IgbtH               = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.ActiveDisIn         = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.ActiveDisAc         = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.Spare07             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.Spare06             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.Spare05             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.Spare04             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.Spare03             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.Spare02             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.Spare01             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultA.Field.LossComSpi          = 1;
+
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverCurBat          = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverTempCtrlBd      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverTempIgbt        = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverTempDrvBd       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.UnderVoltVBat       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverVoltVBat        = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.IgbtMidPointU       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.IgbtMidPointV       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.IgbtMidPointW       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.WdgCpld             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurWr      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurWl      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurVr      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurVl      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurUr      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurUl      = 1;
+
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare15             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare14             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare13             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare12             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare11             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare10             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare09             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare08             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare07             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare06             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare05             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.LowSpeedReach       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare03             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.PwmClampFlag        = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.PwmParamFlag        = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare00             = 1;
+
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.Debug64To75_MSB8                 = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.Debug64To75_LSB4                 = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.DcLinkCtrlBd_MSB4                = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.DcLinkCtrlBd_LSB8                = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.DcLinkDrvBd_MSB8                 = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.DcLinkDrvBd_LSB4                 = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.Debug100To111_MSB4               = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.Debug100To111_LSB8               = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx1.Signal.Ctrl                             = 0;
+   /*--------------------*/
+   /* BswFpgaIf IPDU RxA Id2   */
+   /*--------------------*/
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.Id                               = 2;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.StateRes.Field.PWM_RatioFreqRes  = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.StateRes.Field.CurAcq            = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.StateRes.Field.SwitchTypeRes     = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.StateRes.Field.ModeRes           = 0;
+
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.EmergencyStop       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.PwrSupLs            = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.PwrSupHs            = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.PwrSupMul           = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.IgbtL               = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.IgbtH               = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.ActiveDisIn         = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.ActiveDisAc         = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.Spare07             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.Spare06             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.Spare05             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.Spare04             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.Spare03             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.Spare02             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.Spare01             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultA.Field.LossComSpi          = 1;
+
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverCurBat          = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverTempCtrlBd      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverTempIgbt        = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverTempDrvBd       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.UnderVoltVBat       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverVoltVBat        = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.IgbtMidPointU       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.IgbtMidPointV       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.IgbtMidPointW       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.WdgCpld             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurWr      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurWl      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurVr      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurVl      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurUr      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurUl      = 1;
+
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare15             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare14             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare13             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare12             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare11             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare10             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare09             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare08             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare07             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare06             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare05             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.LowSpeedReach       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare03             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.PwmClampFlag        = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.PwmParamFlag        = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare00             = 1;
+
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.Debug64To75_MSB8                 = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.Debug64To75_LSB4                 = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.TempCtrlBd_MSB4                  = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.TempCtrlBd_LSB8                  = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.M1VFpgaL_MSB8                    = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.M1VFpgaL_LSB4                    = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.Debug100To111_MSB4               = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.Debug100To111_LSB8               = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx2.Signal.Ctrl                             = 0;
+   /*--------------------*/
+   /* BswFpgaIf IPDU RxA Id3   */
+   /*--------------------*/
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.Id                               = 3;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.StateRes.Field.PWM_RatioFreqRes  = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.StateRes.Field.CurAcq            = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.StateRes.Field.SwitchTypeRes     = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.StateRes.Field.ModeRes           = 0;
+
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.EmergencyStop       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.PwrSupLs            = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.PwrSupHs            = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.PwrSupMul           = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.IgbtL               = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.IgbtH               = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.ActiveDisIn         = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.ActiveDisAc         = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.Spare07             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.Spare06             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.Spare05             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.Spare04             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.Spare03             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.Spare02             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.Spare01             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultA.Field.LossComSpi          = 1;
+
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverCurBat          = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverTempCtrlBd      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverTempIgbt        = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverTempDrvBd       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.UnderVoltVBat       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverVoltVBat        = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.IgbtMidPointU       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.IgbtMidPointV       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.IgbtMidPointW       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.WdgCpld             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurWr      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurWl      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurVr      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurVl      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurUr      = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurUl      = 1;
+
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare15             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare14             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare13             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare12             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare11             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare10             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare09             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare08             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare07             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare06             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare05             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.LowSpeedReach       = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare03             = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.PwmClampFlag        = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.PwmParamFlag        = 1;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare00             = 1;
+
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.Debug64To75_MSB8                 = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.Debug64To75_LSB4                 = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.TempDrvBd_MSB4                   = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.TempDrvBd_LSB8                   = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.M1VFpgaH_MSB8                    = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.M1VFpgaH_LSB4                    = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.Debug100To111_MSB4               = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.Debug100To111_LSB8               = 0;
+      BswFpgaIfIpduRxDef.Data.RxA.Id.Mx3.Signal.Ctrl                             = 0;
+   /*------------------------------------*/
+   /* BswFpgaIf IPDU RxS                       */
+   /*------------------------------------*/
+      BswFpgaIfIpduRxDef.Data.RxS.Signal.HalfCoilCur_Ul_MSB8                     = 0;
+      BswFpgaIfIpduRxDef.Data.RxS.Signal.HalfCoilCur_Ul_LSB4                     = 0;
+      BswFpgaIfIpduRxDef.Data.RxS.Signal.HalfCoilCur_Ur_MSB4                     = 0;
+      BswFpgaIfIpduRxDef.Data.RxS.Signal.HalfCoilCur_Ur_LSB8                     = 0;
+      BswFpgaIfIpduRxDef.Data.RxS.Signal.HalfCoilCur_Vl_MSB8                     = 0;
+      BswFpgaIfIpduRxDef.Data.RxS.Signal.HalfCoilCur_Vl_LSB4                     = 0;
+      BswFpgaIfIpduRxDef.Data.RxS.Signal.HalfCoilCur_Vr_MSB4                     = 0;
+      BswFpgaIfIpduRxDef.Data.RxS.Signal.HalfCoilCur_Vr_LSB8                     = 0;
+      BswFpgaIfIpduRxDef.Data.RxS.Signal.HalfCoilCur_Wl_MSB8                     = 0;
+      BswFpgaIfIpduRxDef.Data.RxS.Signal.HalfCoilCur_Wl_LSB4                     = 0;
+      BswFpgaIfIpduRxDef.Data.RxS.Signal.HalfCoilCur_Wr_MSB4                     = 0;
+      BswFpgaIfIpduRxDef.Data.RxS.Signal.HalfCoilCur_Wr_LSB8                     = 0;
+      BswFpgaIfIpduRxDef.Data.RxS.Signal.GridVoltU_MSB8                          = 0;
+      BswFpgaIfIpduRxDef.Data.RxS.Signal.GridVoltU_LSB4                          = 0;
+      BswFpgaIfIpduRxDef.Data.RxS.Signal.GridVoltV_MSB4                          = 0;
+      BswFpgaIfIpduRxDef.Data.RxS.Signal.GridVoltV_LSB8                          = 0;
+      BswFpgaIfIpduRxDef.Data.RxS.Signal.GridVoltW_MSB8                          = 0;
+      BswFpgaIfIpduRxDef.Data.RxS.Signal.GridVoltW_LSB4                          = 0;
+      BswFpgaIfIpduRxDef.Data.RxS.Signal.FS_TXA                                  = 0;
+      BswFpgaIfIpduRxDef.Data.RxS.Signal.FS_TXS                                  = 0;
+      BswFpgaIfIpduRxDef.Data.RxS.Signal.FS_SOL                                  = 0;
+      BswFpgaIfIpduRxDef.Data.RxS.Signal.FS_SOE                                  = 0;
+      BswFpgaIfIpduRxDef.Data.RxS.Signal.Ctrl                                    = 0;
+
+      BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Ur_MSB4    = 0x3u;
+      BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Ur_LSB8    = 0xE8u;
+      BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Vr_MSB4    = 0x3u;
+      BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Vr_LSB8    = 0xE8u;
+      BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Wr_MSB4    = 0x3u;
+      BswFpgaIfIpduTxDef.Data.TxS.Signal.PWM_Wr_LSB8    = 0xE8u;
+      VSISRV_SetSignalPWM_UVW_ON(1u);
+      VSISRV_SetSignalPWM_RatioFreq(0u);
+
+}
+
+
+/******************************************************************/
+/*!
+ * \\fn      BswFpgaIf_DrcvRxSignals
+ * \\brief   This function shall provide Fpga Rx data to DRCO.
+ * \\param   [in]
+ * \\param   [out]
+ * \\return
+ * \\retval  OK
+ * \\retval  NOK
+ */
+/******************************************************************/
+
+void BswFpgaIf_DrcvRxSignals (void)
+{
+   /*AC-Currents*/
+   if (BswFpgaIfPhaISelEna == 0U)
+   {
+      BswFpgaIf_IPhaRawVal_1[SYSDEF_PHA_U] = VSISRV_GetSignalHalfCoilCur_Ul();
+      BswFpgaIf_IPhaRawVal_1[SYSDEF_PHA_V] = VSISRV_GetSignalHalfCoilCur_Vl();
+      BswFpgaIf_IPhaRawVal_1[SYSDEF_PHA_W] = VSISRV_GetSignalHalfCoilCur_Wl();
+
+      BswFpgaIf_IPhaRawVal[SYSDEF_PHA_U] = BswFpgaIf_IPhaRawVal_1[SYSDEF_PHA_U];
+      BswFpgaIf_IPhaRawVal[SYSDEF_PHA_V] = BswFpgaIf_IPhaRawVal_1[SYSDEF_PHA_V];
+      BswFpgaIf_IPhaRawVal[SYSDEF_PHA_W] = BswFpgaIf_IPhaRawVal_1[SYSDEF_PHA_W];
+   }
+   else if (BswFpgaIfPhaISelEna == 1U)
+   {
+      BswFpgaIf_IPhaRawVal_2[SYSDEF_PHA_U] = VSISRV_GetSignalHalfCoilCur_Ur();
+      BswFpgaIf_IPhaRawVal_2[SYSDEF_PHA_V] = VSISRV_GetSignalHalfCoilCur_Vr();
+      BswFpgaIf_IPhaRawVal_2[SYSDEF_PHA_W] = VSISRV_GetSignalHalfCoilCur_Wr();
+
+      BswFpgaIf_IPhaRawVal[SYSDEF_PHA_U] = BswFpgaIf_IPhaRawVal_2[SYSDEF_PHA_U];
+      BswFpgaIf_IPhaRawVal[SYSDEF_PHA_V] = BswFpgaIf_IPhaRawVal_2[SYSDEF_PHA_V];
+      BswFpgaIf_IPhaRawVal[SYSDEF_PHA_W] = BswFpgaIf_IPhaRawVal_2[SYSDEF_PHA_W];
+   }
+   else if (BswFpgaIfPhaISelEna == 2U)
+   {
+      BswFpgaIf_IPhaRawVal_2[SYSDEF_PHA_U] = VSISRV_GetSignalHalfCoilCur_Ur();
+      BswFpgaIf_IPhaRawVal_2[SYSDEF_PHA_V] = VSISRV_GetSignalHalfCoilCur_Vr();
+      BswFpgaIf_IPhaRawVal_2[SYSDEF_PHA_W] = VSISRV_GetSignalHalfCoilCur_Wr();
+
+      BswFpgaIf_IPhaRawVal_1[SYSDEF_PHA_U] = VSISRV_GetSignalHalfCoilCur_Ul();
+      BswFpgaIf_IPhaRawVal_1[SYSDEF_PHA_V] = VSISRV_GetSignalHalfCoilCur_Vl();
+      BswFpgaIf_IPhaRawVal_1[SYSDEF_PHA_W] = VSISRV_GetSignalHalfCoilCur_Wl();
+
+      BswFpgaIf_IPhaRawVal[SYSDEF_PHA_U] = (BswFpgaIf_IPhaRawVal_2[SYSDEF_PHA_U] + BswFpgaIf_IPhaRawVal_1[SYSDEF_PHA_U]) >> 1u;
+      BswFpgaIf_IPhaRawVal[SYSDEF_PHA_V] = (BswFpgaIf_IPhaRawVal_2[SYSDEF_PHA_V] + BswFpgaIf_IPhaRawVal_1[SYSDEF_PHA_V]) >> 1u;
+      BswFpgaIf_IPhaRawVal[SYSDEF_PHA_W] = (BswFpgaIf_IPhaRawVal_2[SYSDEF_PHA_W] + BswFpgaIf_IPhaRawVal_1[SYSDEF_PHA_W]) >> 1u;
+   }
+   else
+   {
+
+   }
+    /*DC-Link-Voltage*/
+   BswFpgaIf_UdcRawVal = VSISRV_GetSignalDebug64To75();//DC Voltage
+
 }
+
+
 /******************************************************************/
 /*!
  * \\fn      void BswFpgaIf_SetTxSyncData(void)
@@ -1625,28 +1504,46 @@ void BswFpgaIf_Init(void)
 /******************************************************************/
 void BswFpgaIf_SetTxSyncData(void)
 {
-\tuint16 Pwm3PhaMuxDutyCycPha_U;
-\tuint16 Pwm3PhaMuxDutyCycPha_V;
-\tuint16 Pwm3PhaMuxDutyCycPha_W;
-\t
-\tPwm3PhaMuxDutyCycPha_U = (( 1 - PwmSpMuxDutyCycPha[SYSDEF_PHA_U])  *  2000 );
-    Pwm3PhaMuxDutyCycPha_V = (( 1 - PwmSpMuxDutyCycPha[SYSDEF_PHA_V])  * 2000 );
-    Pwm3PhaMuxDutyCycPha_W = (( 1 - PwmSpMuxDutyCycPha[SYSDEF_PHA_W])  * 2000 );
-
-\tBswFpgaIfIpduTx.Data.TxS.Signal.PWM_Ul_MSB8    = ((Pwm3PhaMuxDutyCycPha_U >> 4) & 0xFFu);
-\tBswFpgaIfIpduTx.Data.TxS.Signal.PWM_Ul_LSB4    = ((Pwm3PhaMuxDutyCycPha_U) & 0xFu);
-\tBswFpgaIfIpduTx.Data.TxS.Signal.PWM_Vl_MSB8    = ((Pwm3PhaMuxDutyCycPha_V >> 4) & 0xFFu);
-\tBswFpgaIfIpduTx.Data.TxS.Signal.PWM_Vl_LSB4    = ((Pwm3PhaMuxDutyCycPha_V) & 0xFu);
-\tBswFpgaIfIpduTx.Data.TxS.Signal.PWM_Wl_MSB8    = ((Pwm3PhaMuxDutyCycPha_W >> 4) & 0xFFu);
-\tBswFpgaIfIpduTx.Data.TxS.Signal.PWM_Wl_LSB4    = ((Pwm3PhaMuxDutyCycPha_W) & 0xFu);
-    
-\tBswFpgaIf_SetSignalPWM_Ul_ON(1u);
-\tBswFpgaIf_SetSignalPWM_Vl_ON(1u);
-\tBswFpgaIf_SetSignalPWM_Wl_ON(1u);
-\tBswFpgaIf_SetSignalPWM_RatioFreq(0u);
-    BswFpgaIf_CopyIpduTxSToFrameTxS();
+   uint16 Pwm3PhaMuxDutyCycPha_U;
+   uint16 Pwm3PhaMuxDutyCycPha_V;
+   uint16 Pwm3PhaMuxDutyCycPha_W;
+   uint16 Freq;
+
+   Pwm3PhaMuxDutyCycPha_U = (( 1 - PwmSpMuxDutyCycPha[SYSDEF_PHA_U])  *  4000 );
+   Pwm3PhaMuxDutyCycPha_V = (( 1 - PwmSpMuxDutyCycPha[SYSDEF_PHA_V])  * 4000 );
+   Pwm3PhaMuxDutyCycPha_W = (( 1 - PwmSpMuxDutyCycPha[SYSDEF_PHA_W])  * 4000 );
+
+    VsisrvIpduTx.Data.TxS.Signal.PWM_Ul_MSB8    = ((Pwm3PhaMuxDutyCycPha_U >> 4) & 0xFFu);
+    VsisrvIpduTx.Data.TxS.Signal.PWM_Ul_LSB4    = ((Pwm3PhaMuxDutyCycPha_U) & 0xFu);
+    VsisrvIpduTx.Data.TxS.Signal.PWM_Vl_MSB8    = ((Pwm3PhaMuxDutyCycPha_V >> 4) & 0xFFu);
+    VsisrvIpduTx.Data.TxS.Signal.PWM_Vl_LSB4    = ((Pwm3PhaMuxDutyCycPha_V) & 0xFu);
+    VsisrvIpduTx.Data.TxS.Signal.PWM_Wl_MSB8    = ((Pwm3PhaMuxDutyCycPha_W >> 4) & 0xFFu);
+    VsisrvIpduTx.Data.TxS.Signal.PWM_Wl_LSB4    = ((Pwm3PhaMuxDutyCycPha_W) & 0xFu);
+    VsisrvIpduTx.Data.TxS.Signal.PWM_Ur_MSB4    = ((Pwm3PhaMuxDutyCycPha_U >> 8) & 0xFu);
+    VsisrvIpduTx.Data.TxS.Signal.PWM_Ur_LSB8    = ((Pwm3PhaMuxDutyCycPha_U) & 0xFFu);
+    VsisrvIpduTx.Data.TxS.Signal.PWM_Vr_MSB4    = ((Pwm3PhaMuxDutyCycPha_V >> 8) & 0xFu);
+    VsisrvIpduTx.Data.TxS.Signal.PWM_Vr_LSB8    = ((Pwm3PhaMuxDutyCycPha_V) & 0xFFu);
+    VsisrvIpduTx.Data.TxS.Signal.PWM_Wr_MSB4    = ((Pwm3PhaMuxDutyCycPha_W >> 8) & 0xFu);
+    VsisrvIpduTx.Data.TxS.Signal.PWM_Wr_LSB8    = ((Pwm3PhaMuxDutyCycPha_W) & 0xFFu);
+
+    VSISRV_SetSignalPWM_UVW_ON(1u);
+    VSISRV_SetSignalPWM_RatioFreq(0u);
+
+    if (BswFpgaIfTxPwmSwtFreqOvrdEna == FALSE)
+    {
+       Freq = (uint16) (BSWFPGAIF_CLK_FRQ_FPGA / PwmSpMgrPwmFrqSp);
+    }
+    else
+    {
+       Freq = BswFpgaIfTxPwmSwtFreqOvrdVal;
+    }
+
+    VSISRV_SetSignalM4Id2Spare(BswFpgaIfTxISamplOffs);
+
+    VSISRV_SetSignalPwmFreqDyn(Freq);
 
 }
+
 /******************************************************************/
 /*!
  * \\fn      void BswFpgaIf_SetTxAsyncData(void)
@@ -1656,11 +1553,10 @@ void BswFpgaIf_SetTxSyncData(void)
  * \\return
  */
 /******************************************************************/
-void BswFpgaIf_SetTxAsyncData(void)
+uint8 BswFpgaIf_SetTxAsyncData(void)
 {
-\tuint8 Mode = BSWFPGAIF_MODE_INIT;
-\tuint8 txMuxId = 0u;
-\t
+   uint8 Mode = BSWFPGAIF_MODE_INIT;
+
     if((BswFpgaIfReiniCombinedFltOvrdEna != 0u) || (ErrDebFltRstReqKl15 != BswFpgaIfFltRstAckKl15) || (ErrDebFltRstReqClrDtc != BswFpgaIfFltRstAckClrDtc))
     {
       BswFpgaIfTxaFault_A_Data = (uint16)BswFpgaIfReiniCombinedFltOvrdVal;
@@ -1673,87 +1569,31 @@ void BswFpgaIf_SetTxAsyncData(void)
       BswFpgaIfTxaFault_A_Data = (uint16)0x0u;
       BswFpgaIfTxaFault_B_Data = (uint16)0x0u;
     }
-    
-    BswFpgaIf_SetSignalFaultA(BswFpgaIfTxaFault_A_Data);
-    BswFpgaIf_SetSignalFaultB(BswFpgaIfTxaFault_B_Data);
+    VSISRV_SetSignalFaultA(BswFpgaIfTxaFault_A_Data);
+    VSISRV_SetSignalFaultB(BswFpgaIfTxaFault_B_Data);
 
     if (SftyC2cData.ActvDchaReq == TRUE)
     {
-    \tBswFpgaIf_SetSignalStateReqModeReq(BSWFPGAIF_MODE_ACTIVE_DISCHARGE);
-    \tMode = BSWFPGAIF_MODE_ACTIVE_DISCHARGE;
+        VSISRV_SetSignalStateReqModeReq(BSWFPGAIF_MODE_ACTIVE_DISCHARGE);
+      Mode = BSWFPGAIF_MODE_ACTIVE_DISCHARGE;
     }
-/*  
-    else if ((SftyC2cData.ActvDchaReq == FALSE ) && (SftyC2cData.InvSafeStReq != SFTY_ST_ACTIVE))
-    {
-   \t   BswFpgaIf_SetSignalStateReqModeReq(BSWFPGAIF_MODE_OFF);
-   \t   Mode = BSWFPGAIF_MODE_OFF;
-    } 
-*/
-    else if ((SftyC2cData.ActvDchaReq == FALSE ) && (BswC2cData.EmmMode == EMM_TRQCTRL_MODE) && ((BswFpgaIf_GetFrameFS_SOL == 1) && (BswFpgaIf_GetFrameFS_SOE == 1)))
+    else if ((SftyC2cData.ActvDchaReq == FALSE ) && (BswC2cData.EmmMode == EMM_TRQCTRL_MODE) && ((VSISRV_GetFrameFS_SOL() == 1) && (VSISRV_GetFrameFS_SOE() == 1)))
     {
-    \tBswFpgaIf_SetSignalStateReqModeReq(BSWFPGAIF_MODE_PWM_DIRECT);
-    \tMode = BSWFPGAIF_MODE_PWM_DIRECT;
+       VSISRV_SetSignalStateReqModeReq(BSWFPGAIF_MODE_PWM_DIRECT);
+      Mode = BSWFPGAIF_MODE_PWM_DIRECT;
     }
     else if ((SftyC2cData.ActvDchaReq == FALSE ) && ((BswC2cData.EmmMode == EMM_STANDBY_MODE) || (BswC2cData.EmmMode == EMM_SLEEP_MODE)))
     {
-      \tBswFpgaIf_SetSignalStateReqModeReq(BSWFPGAIF_MODE_INIT);
-      \tMode = BSWFPGAIF_MODE_INIT;
+       VSISRV_SetSignalStateReqModeReq(BSWFPGAIF_MODE_INIT);
+         Mode = BSWFPGAIF_MODE_INIT;
     }
-    if(Mode == BSWFPGAIF_MODE_INIT)
-    {
-    \ttxMuxId = (txMuxIdCnt | 0xF0u);
-    }
-    else
-    {
-    \ttxMuxId = txMuxIdCnt;
-    }
-
-    switch(txMuxIdCnt)
-    {
-      case BSWFPGAIF_TXID0 :
-
-   \t     BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.Id   = txMuxId;
-\t\t /* PwmMinDutycycle = ((float32)1 -(BswFpgaIf_invA_pwm_MIN_PULSE_WIDTH * Pwm3PhaPwmFrqAct[SYSDEF_PHA_SET_A])) * 2000; */
-\t\t BswFpgaIf_SetSignalPwmMinDutyCycle(0u);
-    \t BswFpgaIf_CopyIpduTxAToFrameTxAId0();
-      break;
-
-      case BSWFPGAIF_TXID1 :
-         
-         BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.Id  = txMuxId;
-         /* PwmMaxDutycycle = ((BswFpgaIf_invA_pwm_MIN_PULSE_WIDTH * Pwm3PhaPwmFrqAct[SYSDEF_PHA_SET_A]) * (float32)2000); */
-\t     BswFpgaIf_SetSignalPwmMaxDutyCycle(2000u);
-         BswFpgaIf_CopyIpduTxAToFrameTxAId1();
-        break;
-
-      case BSWFPGAIF_TXID2 :
-
-         BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.Id  = txMuxId;
- \t     BswFpgaIf_CopyIpduTxAToFrameTxAId2();
-      break;
-
-      case BSWFPGAIF_TXID3 :
-\t  
-         BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.Id = txMuxId;
-\t\t BswFpgaIf_SetSignalDebugL(FltMskVal);
-         BswFpgaIf_CopyIpduTxAToFrameTxAId3();
-
-      break;
-
-      default :
-   \t  break;
-    }
-    txMuxIdCnt++;
-    if(txMuxIdCnt > 3u) 
-\t{
-\t  txMuxIdCnt = 0u;
-\t}
+    return Mode;
 }
 
 /******************************************************************/
 /*!
- * \\fn      void BswFpgaIf_SetTxFrm1ms(void)
- * \\brief   The function shall set Tx frame data for Fpga
+ * \\fn      void BswFpgaIf_TxRx1ms(void)
+ * \\brief   The function shall update Rx signals and set Tx frame data for Fpga
  * \\param   [in]  index to data which shall be provided
  * \\param   [out] PtrData Pointer to the provided data
  * \\return  status of provided data
@@ -1761,218 +1601,73 @@ void BswFpgaIf_SetTxAsyncData(void)
  * \\retval  NOK   provided data is not valid
  */
 /******************************************************************/
-void BswFpgaIf_SetTxFrm1ms(void)
+void BswFpgaIf_TxRx1ms(void)
 {
-\tuint16 Pwm3PhaMuxDutyCycPha_U = 0u;
-\tuint16 Pwm3PhaMuxDutyCycPha_V = 0u;
-\tuint16 Pwm3PhaMuxDutyCycPha_W = 0u;
-\tuint16 PwmFreq = 0u;
-\tuint16 PwmDeadtime = 0u;
-
-    Pwm3PhaMuxDutyCycPha_U = (( 1 - PwmSpMuxDutyCycPha[SYSDEF_PHA_U] ) *  2000  );
-    Pwm3PhaMuxDutyCycPha_V = (( 1 - PwmSpMuxDutyCycPha[SYSDEF_PHA_V] ) * 2000 );
-    Pwm3PhaMuxDutyCycPha_W = (( 1 - PwmSpMuxDutyCycPha[SYSDEF_PHA_W] ) * 2000 );
-   
-\tBswFpgaIf_SetSignalActDischReq(0u);
-\tBswFpgaIf_SetSignalDebug(0u);
-\tBswFpgaIf_SetSignalSynchroDelay(436u);
-   BswFpgaIf_SetSignalFyBPwrSupCtrl(0u);
-\tBswFpgaIf_SetSignalStateReqSCSpeedReady(SftyC2cData.FpgaStateReq.B.SCspdReady);
-\tBswFpgaIf_SetSignalEmergencyStop(SftyC2cData.FpgaStateReq.B.NoEmgySw);
-\t
-\tswitch(txMuxIdCnt)
+   uint16 Pwm3PhaMuxDutyCycPha_U = 0u;
+   uint16 Pwm3PhaMuxDutyCycPha_V = 0u;
+   uint16 Pwm3PhaMuxDutyCycPha_W = 0u;
+   uint16 PwmFreq = 0u;
+   uint16 PwmDeadtime = 0u;
+
+    Pwm3PhaMuxDutyCycPha_U = (( 1 - PwmSpMuxDutyCycPha[SYSDEF_PHA_U] ) * 4000  );
+    Pwm3PhaMuxDutyCycPha_V = (( 1 - PwmSpMuxDutyCycPha[SYSDEF_PHA_V] ) * 4000 );
+    Pwm3PhaMuxDutyCycPha_W = (( 1 - PwmSpMuxDutyCycPha[SYSDEF_PHA_W] ) * 4000 );
+
+   VSISRV_SetSignalDebug(0);
+   VSISRV_SetSignalSynchroDelay(436u);
+   VSISRV_SetSignalStateReqSCSpeedReady(SftyC2cData.FpgaStateReq.B.SCspdReady);
+   VSISRV_SetSignalStateReqEmergencySw(SftyC2cData.FpgaStateReq.B.NoEmgySw);
+
+   switch(txMuxIdCnt)
     {
       case BSWFPGAIF_TXID0 :
-\t  
-\t  /* PwmFreq = (Pwm3PhaPwmFrqAct[SYSDEF_PHA_SET_A] * 0.2); */ 
-   \t  PwmFreq = 2000u; /* (Pwm3PhaPwmFrqAct[SYSDEF_PHA_SET_A] * 0.2); */
+
+      PwmFreq = 2000u; /* (Pwm3PhaPwmFrqAct[SYSDEF_PHA_SET_A] * 0.2); */
       PwmDeadtime = (BswFpgaIf_invA_pwm_DEADTIME * 40000000); /* Comes to 100 counts */
-\t  BswFpgaIf_SetSignalPwmFreq(PwmFreq);
-  \t  BswFpgaIf_SetSignalPwmDeadtime(PwmDeadtime);
-  \t  BswFpgaIf_SetSignalPwmInitValUl(Pwm3PhaMuxDutyCycPha_U);
-\t  BswFpgaIf_SetSignalPwmInitValUr(Pwm3PhaMuxDutyCycPha_U);
-\t  
-\t  break;
-\t  
+
+     //VSISRV_SetSignalPwmFreq(PwmFreq);
+     VSISRV_SetSignalPwmDeadtime(PwmDeadtime);
+     VSISRV_SetSignalPwmInitValUl(Pwm3PhaMuxDutyCycPha_U);
+     VSISRV_SetSignalPwmInitValUr(Pwm3PhaMuxDutyCycPha_U);
+
+     break;
+
       case BSWFPGAIF_TXID1 :
-\t  
-\t    BswFpgaIf_SetSignalPwmInitValVl(Pwm3PhaMuxDutyCycPha_V);
-        BswFpgaIf_SetSignalPwmInitValVr(Pwm3PhaMuxDutyCycPha_V);
-        BswFpgaIf_SetSignalPwmInitValWl(Pwm3PhaMuxDutyCycPha_W);
-        BswFpgaIf_SetSignalPwmInitValWr(Pwm3PhaMuxDutyCycPha_W);
-\t  break;
-\t  
-      case BSWFPGAIF_TXID2 :
-\t  
-\t\tBswFpgaIf_SetSignalOverVoltVbatTh(0xB3Bu);
-\t\tBswFpgaIf_SetSignalM0IFilAverage(0u);
-\t\tBswFpgaIf_SetSignalM0VFilAverage(0u);
-\t  break;
-\t  
-      case BSWFPGAIF_TXID3 :
-\t  
-         BswFpgaIf_SetSignalM6Id3Spare(0xFFFu);
-         BswFpgaIf_SetSignalOverCurThMot(BswFpgaIfPhaOcThd);
-         BswFpgaIf_SetSignalDebugL(FltMskVal);
 
-\t  break;
-\t  
-      default :
-   \t  break;
-\t}
-}
-/******************************************************************/
-/*!
- * \\fn      void BswFpgaIf_SetTxFrm(void)
- * \\brief   The function shall set Tx frame data for Fpga
- * \\param   [in]  index to data which shall be provided
- * \\param   [out] PtrData Pointer to the provided data
- * \\return  status of provided data
- * \\retval  OK    provided data is valid
- * \\retval  NOK   provided data is not valid
- */
-/******************************************************************/
-void BswFpgaIf_SetTxFrm(void)
-{   
-   /*Set Sync data*/
-   BswFpgaIf_SetTxSyncData();
+         VSISRV_SetSignalPwmInitValVl(Pwm3PhaMuxDutyCycPha_V);
+        VSISRV_SetSignalPwmInitValVr(Pwm3PhaMuxDutyCycPha_V);
+        VSISRV_SetSignalPwmInitValWl(Pwm3PhaMuxDutyCycPha_W);
+        VSISRV_SetSignalPwmInitValWr(Pwm3PhaMuxDutyCycPha_W);
+     break;
 
-   BswFpgaIf_vidWriteDataCheck10B(
-\t\t                       BswFpgaIf_START_DATA8_FRAME_TXS,
-                               &BswFpgaIf_GetFrameTxSCtrl()
-                              );
-   /*Set Async data*/
-   BswFpgaIf_SetTxAsyncData();
+      case BSWFPGAIF_TXID2 :
 
+      VSISRV_SetSignalOverVoltVbatTh(0xB3Bu);
+      VSISRV_SetSignalM0IFilAverage(0u);
+      VSISRV_SetSignalM0VFilAverage(0u);
 
-   BswFpgaIf_vidWriteDataCheck18B(
-                               BswFpgaIf_START_DATA8_FRAME_TXA,
-                               &BswFpgaIf_GetFrameTxACtrl()
-                              );
+     break;
 
-     /*Send the FPGA sequence to Qspi*/
-   LlswFpgaIf_Tx();
+      case BSWFPGAIF_TXID3 :
 
-}
-/******************************************************************/
-/*!
- * \\fn      BswFpgaIf_UpdRxFrm
- * \\brief   This function shall read the Rx data from Fpga and update in RxBuffer
- * \\param   [in]
- * \\param   [out]
- * \\return
- * \\retval  OK
- * \\retval  NOK
- */
-/******************************************************************/
-void BswFpgaIf_UpdRxFrm(void)
-{
-#ifdef SWIT_Active
-   SWIT_BswFpgaIf_UpdRxFrm_BgnHook();
-#endif
-   uint8 u8LocalIdRx;
-   uint8 u8LocalIdRxNm1;
-   boolean bLocalCheckStatusRxA;
-   boolean bLocalCheckStatusRxS;
-   boolean bLocalCheckStatusIdRx;
-
-/* ------------------------  -------------------------------------------------- */
-/* RXA - Check for the received CRC against calc CRC                                  */
-/* ---------------------------------------------  ----------------------------- */
-   BswFpgaIf_vidVerifyDataCheck14B(
-\t\t                        BswFpgaIf_START_DATA8_FRAME_RXA,
-                                BswFpgaIf_GetFrameRxACtrl(),
-                                &bLocalCheckStatusRxA
-                               );
-
-   if (bLocalCheckStatusRxA == BswFpgaIf_STATUS_OK)
-   {
-      bLocalCheckStatusIdRx = BswFpgaIf_STATUS_OK;
-
-      u8LocalIdRx = BswFpgaIf_GetFrameRxAId();
-      u8LocalIdRxNm1 = BswFpgaIf_IdRxNm1Read();
-
-      BswFpgaIf_CopyFrameRxAToIpduRxA();
-
-      /*Check for the Rx Id*/
-      switch (u8LocalIdRx)
-      {
-         case 0x00:
-            BswFpgaIf_CopyFrameRxAToIpduRxAId0();
-            if (u8LocalIdRxNm1 != 0x03u)
-            {
-               bLocalCheckStatusIdRx = BswFpgaIf_STATUS_NOK;
-            }
-            break;
-
-         case 0x01:
-            BswFpgaIf_CopyFrameRxAToIpduRxAId1();
-            if (u8LocalIdRxNm1 != 0x00u)
-            {
-               bLocalCheckStatusIdRx = BswFpgaIf_STATUS_NOK;
-            }
-            break;
-
-         case 0x02:
-            BswFpgaIf_CopyFrameRxAToIpduRxAId2();
-            if (u8LocalIdRxNm1 != 0x01u)
-            {
-               bLocalCheckStatusIdRx = BswFpgaIf_STATUS_NOK;
-            }
-            break;
-
-         case 0x03:
-            BswFpgaIf_CopyFrameRxAToIpduRxAId3();
-            if (u8LocalIdRxNm1 != 0x02u)
-            {
-               bLocalCheckStatusIdRx = BswFpgaIf_STATUS_NOK;
-            }
-            break;
-
-         default:
-            bLocalCheckStatusIdRx = BswFpgaIf_STATUS_NOK;
-            break;
-      }
-      BswFpgaIf_bCheckStatusIdRx = ((BswFpgaIf_ComInitRead()) || bLocalCheckStatusIdRx);
-      BswFpgaIf_IdRxNm1Set(u8LocalIdRx);
-      BswFpgaIf_ComInitOff();
-
-      /*Read IGBT Temperature raw value*/
-      BswFpgaIf_ReadIgbtTemp();
-   }
-   else
-   {
-      BswFpgaIf_bCheckStatusRxA = BswFpgaIf_STATUS_NOK;
-      BswFpgaIf_ComInitOn();
-   }
+         VSISRV_SetSignalM6Id3Spare(0xFFFu);
+         VSISRV_SetSignalOverCurThMot(BswFpgaIfPhaOcThd);
+         VSISRV_SetSignalDebugL(FltMskVal);
 
-/* -------------------------------------------------------------------------- */
-   /* RXS - Check for the received CRC against calc CRC                       */
-/* -------------------------------------------------------------------------- */
-   BswFpgaIf_vidVerifyDataCheck14B(
-                                BswFpgaIf_START_DATA8_FRAME_RXS,
-                                BswFpgaIf_GetFrameRxSCtrl(),
-                                &bLocalCheckStatusRxS
-                               );
+     break;
 
-   if (bLocalCheckStatusRxS == BswFpgaIf_STATUS_OK)
-   {
-      BswFpgaIf_bCheckStatusRxS = BswFpgaIf_STATUS_OK;
-      BswFpgaIf_CopyFrameRxSToIpduRxS();
-      DrvCtrlSdl_RunPwmA();
-   }
-   else
-   {
-      BswFpgaIf_bCheckStatusRxS = BswFpgaIf_STATUS_NOK;
-      BswFpgaIf_SetTxFrm();
+      default :
+        break;
    }
+  /**Copy measurement data*/
    BswFpgaIf_MeasDataCopy();
 }
 
 /******************************************************************/
 /*!
- * \\fn      BswFpgaIf_DrcvRxSignals
- * \\brief   This function shall provide signal data to DRCO
+ * \\fn      BswFpgaIf_MeasDataCopy
+ * \\brief   This function shall copy measurement data from
+ *          Data structure elements to measurement variables
  * \\param   [in]
  * \\param   [out]
  * \\return
@@ -1980,16 +1675,32 @@ void BswFpgaIf_UpdRxFrm(void)
  * \\retval  NOK
  */
 /******************************************************************/
-
-void BswFpgaIf_DrcvRxSignals (void)
+static void BswFpgaIf_MeasDataCopy(void)
 {
-\t/*AC-Currents*/
-\tBswFpgaIf_IPhaRawVal[SYSDEF_PHA_U] = BswFpgaIf_GetSignalCurMeasPh_U();
-\tBswFpgaIf_IPhaRawVal[SYSDEF_PHA_V] = BswFpgaIf_GetSignalCurMeasPh_V();
-\tBswFpgaIf_IPhaRawVal[SYSDEF_PHA_W] = BswFpgaIf_GetSignalCurMeasPh_W();
+   BswFpgaIfRx_PwrSupply_5V_HS = VSISRV_GetSignalGridVoltU();
+
+    BswFpgaIfRx_PwrSupply_5V_LS = VSISRV_GetSignalGridVoltV();
+
+   BswFpgaIfRx_PwrSupply_16V_Multi = VSISRV_GetSignalGridVoltW();
+
+   BswFpgaIfRx_FpgaVer_LSW =
+   (uint16)(((uint16)VsisrvIpduRx.Data.RxA.Id.Mx2.Signal.M1VFpgaL_MSB8 << 4u)
+           | (uint16)VsisrvIpduRx.Data.RxA.Id.Mx2.Signal.M1VFpgaL_LSB4);
+
+   BswFpgaIfRx_FpgaVer_MSW =
+   (uint16)(((uint16)VsisrvIpduRx.Data.RxA.Id.Mx3.Signal.M1VFpgaH_MSB8 << 4u)
+           | (uint16)VsisrvIpduRx.Data.RxA.Id.Mx3.Signal.M1VFpgaH_LSB4);
+
+   BswFpgaIfRx_CtrlBd_Temp = VSISRV_GetSignalTempCtrlBd();
+
+   BswFpgaIfRx_DrvBd_Temp = VSISRV_GetSignalTempDrvBd();
+
+   BswFpgaIfRx_IgbtTemp_U = VSISRV_GetSignalDcLinkCtrlBd();
+
+   BswFpgaIfRx_IgbtTemp_V = VSISRV_GetSignalTempIgbt();
+
+   BswFpgaIfRx_IgbtTemp_W = VSISRV_GetSignalMeasCurBat();
 
-    /*DC-Link-Voltage*/
-    BswFpgaIf_UdcRawVal = BswFpgaIf_GetSignalDCLinkVolatge();
 }
 
 /******************************************************************/
@@ -2004,95 +1715,15 @@ void BswFpgaIf_DrcvRxSignals (void)
  * \\retval  NOK
  */
 /******************************************************************/
-static void BswFpgaIf_ReadIgbtTemp (void)
+void BswFpgaIf_ReadIgbtTemp (void)
 {
-   DrvCtrlC2cData.IgbtTempURaw = BswFpgaIf_GetSignalIgbtUTemp();
-   DrvCtrlC2cData.IgbtTempVRaw = BswFpgaIf_GetSignalIgbtVTemp();
-   DrvCtrlC2cData.IgbtTempWRaw = BswFpgaIf_GetSignalIgbtWTemp();
+   DrvCtrlC2cData.IgbtTempURaw =  VSISRV_GetSignalDcLinkCtrlBd();
+   DrvCtrlC2cData.IgbtTempVRaw =  VSISRV_GetSignalTempIgbt();
+   DrvCtrlC2cData.IgbtTempWRaw = VSISRV_GetSignalMeasCurBat();
 
 }
 
-/******************************************************************/
-/*!
- * \\fn      BswFpgaIf_MeasDataCopy
- * \\brief   This function shall copy measurement data from 
- *          Data structure elements to measurement variables
- * \\param   [in]
- * \\param   [out]
- * \\return
- * \\retval  OK
- * \\retval  NOK
- */
-/******************************************************************/
-static void BswFpgaIf_MeasDataCopy(void)
-{
-\tBswFpgaIfRx_PwrSupply_5V_HS =
-   (uint16)(((uint16)BswFpgaIfIpduRx.Data.RxS.Signal.PwrSupply_5V_HS_MSB8 << 4u)
-           | (uint16)BswFpgaIfIpduRx.Data.RxS.Signal.PwrSupply_5V_HS_LSB4);
-\t\t   
-    BswFpgaIfRx_PwrSupply_5V_LS =
-   (uint16)(((uint16)BswFpgaIfIpduRx.Data.RxS.Signal.PwrSupply_5V_LS_MSB4 << 8u)
-           | (uint16)BswFpgaIfIpduRx.Data.RxS.Signal.PwrSupply_5V_LS_LSB8);
-\t\t   
-\tBswFpgaIfRx_PwrSupply_16V_Multi =
-   (uint16)(((uint16)BswFpgaIfIpduRx.Data.RxS.Signal.PwrSup_16V_MULTI_MSB8 << 4u)
-           | (uint16)BswFpgaIfIpduRx.Data.RxS.Signal.PwrSup_16V_MULTI_LSB4);
-\t\t   
-\tBswFpgaIfRx_FpgaVer_LSW =
-   (uint16)(((uint16)BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.M1VFpgaL_MSB8 << 4u)
-           | (uint16)BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.M1VFpgaL_LSB4);
-\t\t   
-\tBswFpgaIfRx_FpgaVer_MSW =
-   (uint16)(((uint16)BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.M1VFpgaH_MSB8 << 4u)
-           | (uint16)BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.M1VFpgaH_LSB4);
-\t\t   
-\tBswFpgaIfRx_DebugMux_64To75 =
-   (uint16)(((uint16)BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.Debug64To75_MSB8 << 4u)
-           | (uint16)BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.Debug64To75_LSB4);
-\t\t   
-\tBswFpgaIfRx_CurMeasPh_U =
-   (uint16)(((uint16)BswFpgaIfIpduRx.Data.RxS.Signal.CurMeasPh_U_MSB8 << 4u)
-           | (uint16)BswFpgaIfIpduRx.Data.RxS.Signal.CurMeasPh_U_LSB4);
-\t\t   
-\tBswFpgaIfRx_CurMeasPh_V =
-   (uint16)(((uint16)BswFpgaIfIpduRx.Data.RxS.Signal.CurMeasPh_V_MSB8 << 4u)
-           | (uint16)BswFpgaIfIpduRx.Data.RxS.Signal.CurMeasPh_V_LSB4);
-\t\t   
-\tBswFpgaIfRx_CurMeasPh_W =
-   (uint16)(((uint16)BswFpgaIfIpduRx.Data.RxS.Signal.CurMeasPh_W_MSB8 << 4u)
-           | (uint16)BswFpgaIfIpduRx.Data.RxS.Signal.CurMeasPh_W_LSB4);
-\t\t   
-    BswFpgaIfRx_CtrlBd_Temp =
-   (uint16)(((uint16)BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.TempCtrlBd_MSB4 << 8u)
-           | (uint16)BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.TempCtrlBd_LSB8);
-\t\t   
-\tBswFpgaIfRx_DrvBd_Temp =
-   (uint16)(((uint16)BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.TempDrvBd_MSB4 << 8u)
-           | (uint16)BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.TempDrvBd_LSB8);
-\t
-\tBswFpgaIfRx_DcLinkVol_DrvBd =
-   (uint16)(((uint16)BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.DcLinkDrvBd_MSB8 << 4u)
-           | (uint16)BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.DcLinkDrvBd_LSB4);
-\t\t   
-\tBswFpgaIfRx_DcLinkVol_CtrlBd =
-   (uint16)(((uint16)BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.DcLinkCtrlBd_MSB4 << 8u)
-           | (uint16)BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.DcLinkCtrlBd_LSB8);
-\t
-    BswFpgaIfRx_IgbtTemp_U =
-   (uint16)(((uint16)BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.IgbtTempU_MSB4 << 8u)
-           | (uint16)BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.IgbtTempU_LSB8);
-\t\t   
-\tBswFpgaIfRx_IgbtTemp_V =
-   (uint16)(((uint16)BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.IgbtTempV_MSB4 << 8u)
-           | (uint16)BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.IgbtTempV_LSB8);
-\t\t   
-\tBswFpgaIfRx_IgbtTemp_W =
-   (uint16)(((uint16)BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.IgbtTempW_MSB8 << 4u)
-           | (uint16)BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.IgbtTempW_LSB4);
-}
-
 #define BSWFPGAIF_STOP_SEC_CODE_SLOW
 #include "NextGen_MemMap.h"
 
-
 #undef MASTER_BswFpgaIf_
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/src/BswFpgaIf_Def.c b/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/src/BswFpgaIf_Def.c
index 2f4b22959..06a5c2c99 100644
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/src/BswFpgaIf_Def.c
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/src/BswFpgaIf_Def.c
@@ -1,18 +1,12 @@
-/**
- * \\file        BswFpgaIf.c
- * \\brief       Function:                                           \

- *              Purpose:    Functionality of CAN Trcv driver        \

- *
- * History:
- *  Name:       \tSapthagiri G                                    \

- *  Date:       \t2020.05.15                                      \

- *  Reason:     \tNew implementation                              \

- *  Details:    \tNew requirement                                 \

- *  Specification :                                                 \

- *
- *              All Rights Reserved.  Confidential                  \

- */
-
+/* *************************************************************************** */
+/* File:      BswFpgaIf_Def                                                    */
+/*                                                                             */
+/*                                                                             */
+/* First author:                                                               */
+/* Other authors:                                                              */
+/* *************************************************************************** */
+/* All Rights Reserved.  Confidential                                          */
+/* *************************************************************************** */
 /*******************************************************************************
 **                      Revision Control History                              **
 *******************************************************************************/
@@ -62,6 +56,7 @@ const uint16 BswFpgaIf_u16Cal1PwmDeadtimeC = 100u;
 const uint16 BswFpgaIf_u16Cal1PwmFreqC = 2000u;
 const uint16 BswFpgaIf_u16Cal1PwmInitValUlC = 0u;
 const uint16 BswFpgaIf_u16Cal1PwmInitValUrC = 0u;
+
 /* const boolean BswFpgaIf_bBenchFrameRxChkOffC = 0;
 const boolean BswFpgaIf_bBenchFrameTxIdOffC = 0;
 const uint32 BswFpgaIf_u32CheckModeReqResCntC = 2;
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/src/VsiSrv.c b/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/src/VsiSrv.c
new file mode 100644
index 000000000..ab2fac089
--- /dev/null
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/src/VsiSrv.c
@@ -0,0 +1,739 @@
+/******************************************************************************/
+/*                                                                            */
+/* !Layer           : BSW                                                     */
+/*                                                                            */
+/* !Component       : VSI                                                     */
+/* !Description     : VSI control                                             */
+/*                                                                            */
+/* !Module          : VSISRV                                                  */
+/* !Description     : API\'s services                                          */
+/*                                                                            */
+/* !File            : VSISRV_API.C                                            */
+/*                                                                            */
+/* !Scope           : Public                                                  */
+/*                                                                            */
+/* !Target          : All                                                     */
+/*                                                                            */
+/* !Vendor          : Valeo                                                   */
+/*                                                                            */
+/* Coding language  : C                                                       */
+/*                                                                            */
+/* COPYRIGHT 2010 VALEO                                                       */
+/* all rights reserved                                                        */
+/*                                                                            */
+/******************************************************************************/
+/* VSISRV.API.1 / VSISRV_vidInit                                              */
+/* VSISRV.API.2 / VSISRV_vidSetFrameTx                                        */
+/* VSISRV.API.3 / VSISRV_vidGetFrameRx                                        */
+/* VSISRV.API.4 / VSISRV_vidSetModeReq                                        */
+/* VSISRV.API.5 / VSISRV_u16GetModeReq                                        */
+/* VSISRV.API.6 / VSISRV_bGetStatusParamDl                                    */
+/* VSISRV.API.7 / VSISRV_bGetStatusModeReqRes                                 */
+/* VSISRV.API.8 / VSISRV_vidAutSigEmergencySwMgr                              */
+/******************************************************************************/
+/* PVCS Information                                                           */
+/* $Archive::                                                                $*/
+/* $Revision::             $$Author::   ogarot        $$Date::               $*/
+/******************************************************************************/
+/* Dimension Informations
+ * %PCMS_HEADER_SUBSTITUTION_START:%
+ * The PID has this format: <Product ID>:<Item ID>.<Variant>-<Item Type>;<Revision>
+ * %PID:%
+ * %PCMS_HEADER_SUBSTITUTION_END:%
+ ******************************************************************************/
+
+#include "Std_Types.h"
+
+#include "VsiSrv.h"
+#include "VsiSrv_L.h"
+#include "VsiSrv_e.h"
+#include "VsiSrv_chk.h"
+
+#include "ErrDeb.h"
+#include "DrvCtrlSdl.h"
+#include "emm.h"
+#include "emm_common.h"
+#include "RotorAgSpdCalcn_data.h"
+#include "PwmSpMgr_WrprData.h"
+#include "C2cComDrvCtrlData.h"
+#include "LlswFpgaIf.h"
+#include "IvtrThermMdl_data.h"
+/*******************************************************************************
+**                      Global Constant Definitions                           **
+*******************************************************************************/
+
+#define ISWIF_START_SEC_VAR_FAST_CLEARED
+#include "MemMap.h"
+
+volatile uint8 txMuxIdCnt;
+
+#define ISWIF_STOP_SEC_VAR_FAST_CLEARED
+#include "MemMap.h"
+
+#define ISW_START_SEC_VAR_FAST_INIT
+#include <MemMap.h>
+
+#define ISW_STOP_SEC_VAR_FAST_INIT
+#include <MemMap.h>
+
+/******************************************************************************/
+/* GLOBAL FUNCTION DEFINITION                                                 */
+/******************************************************************************/
+#define VSISRV_START_SEC_CODE
+#include "NextGen_MemMap.h"
+
+/******************************************************************************/
+/*                                                                            */
+/* !Description : Initialises the VSI SRV unit                                */
+/* !Number      : VSISRV.API.1                                                */
+/* !Reference   : V01NT1001498.001                                            */
+/* !Reference   : V01NT1001945.002                                            */
+/*                                                                            */
+/******************************************************************************/
+/* !LastAuthor  : O. Garot                                                    */
+/******************************************************************************/
+void VSISRV_vidInit(void)
+{
+/*----------------------------------------------------------------------------*/
+/* VSI IPDU Initialisation                                                    */
+/*----------------------------------------------------------------------------*/
+/*------------------------------------*/
+/* VSI IPDU Default value             */
+/*------------------------------------*/
+   VSISRV_vidInitIpduDef();
+/*------------------------------------*/
+/* VSI IPDU Tx                        */
+/*------------------------------------*/
+   VsisrvIpduTx.Data32[0]     = VsisrvIpduTxDef.Data32[0];
+   VsisrvIpduTx.Data32[1]     = VsisrvIpduTxDef.Data32[1];
+   VsisrvIpduTx.Data32[2]     = VsisrvIpduTxDef.Data32[2];
+   VsisrvIpduTx.Data32[3]     = VsisrvIpduTxDef.Data32[3];
+   VsisrvIpduTx.Data32[4]     = VsisrvIpduTxDef.Data32[4];
+   VsisrvIpduTx.Data32[5]     = VsisrvIpduTxDef.Data32[5];
+   VsisrvIpduTx.Data32[6]     = VsisrvIpduTxDef.Data32[6];
+   VsisrvIpduTx.Data32[7]     = VsisrvIpduTxDef.Data32[7];
+   VsisrvIpduTx.Data32[8]     = VsisrvIpduTxDef.Data32[8];
+   VsisrvIpduTx.Data32[9]     = VsisrvIpduTxDef.Data32[9];
+   VsisrvIpduTx.Data32[10]    = VsisrvIpduTxDef.Data32[10];
+   VsisrvIpduTx.Data32[11]    = VsisrvIpduTxDef.Data32[11];
+   VsisrvIpduTx.Data32[12]    = VsisrvIpduTxDef.Data32[12];
+   VsisrvIpduTx.Data32[13]    = VsisrvIpduTxDef.Data32[13];
+   VsisrvIpduTx.Data32[14]    = VsisrvIpduTxDef.Data32[14];
+   VsisrvIpduTx.Data32[15]    = VsisrvIpduTxDef.Data32[15];
+   VsisrvIpduTx.Data32[16]    = VsisrvIpduTxDef.Data32[16];
+   VsisrvIpduTx.Data32[17]    = VsisrvIpduTxDef.Data32[17];
+   VsisrvIpduTx.Data32[18]    = VsisrvIpduTxDef.Data32[18];
+   VsisrvIpduTx.Data32[19]    = VsisrvIpduTxDef.Data32[19];
+   VsisrvIpduTx.Data32[20]    = VsisrvIpduTxDef.Data32[20];
+   VsisrvIpduTx.Data32[21]    = VsisrvIpduTxDef.Data32[21];
+   VsisrvIpduTx.Data32[22]    = VsisrvIpduTxDef.Data32[22];
+/*------------------------------------*/
+/* VSI IPDU Rx                        */
+/*------------------------------------*/
+   VsisrvIpduRx.Data32[0]     = VsisrvIpduRxDef.Data32[0];
+   VsisrvIpduRx.Data32[1]     = VsisrvIpduRxDef.Data32[1];
+   VsisrvIpduRx.Data32[2]     = VsisrvIpduRxDef.Data32[2];
+   VsisrvIpduRx.Data32[3]     = VsisrvIpduRxDef.Data32[3];
+   VsisrvIpduRx.Data32[4]     = VsisrvIpduRxDef.Data32[4];
+   VsisrvIpduRx.Data32[5]     = VsisrvIpduRxDef.Data32[5];
+   VsisrvIpduRx.Data32[6]     = VsisrvIpduRxDef.Data32[6];
+   VsisrvIpduRx.Data32[7]     = VsisrvIpduRxDef.Data32[7];
+   VsisrvIpduRx.Data32[8]     = VsisrvIpduRxDef.Data32[8];
+   VsisrvIpduRx.Data32[9]     = VsisrvIpduRxDef.Data32[9];
+   VsisrvIpduRx.Data32[10]    = VsisrvIpduRxDef.Data32[10];
+   VsisrvIpduRx.Data32[11]    = VsisrvIpduRxDef.Data32[11];
+   VsisrvIpduRx.Data32[12]    = VsisrvIpduRxDef.Data32[12];
+   VsisrvIpduRx.Data32[13]    = VsisrvIpduRxDef.Data32[13];
+   VsisrvIpduRx.Data32[14]    = VsisrvIpduRxDef.Data32[14];
+   VsisrvIpduRx.Data32[15]    = VsisrvIpduRxDef.Data32[15];
+   VsisrvIpduRx.Data32[16]    = VsisrvIpduRxDef.Data32[16];
+   VsisrvIpduRx.Data32[17]    = VsisrvIpduRxDef.Data32[17];
+   VsisrvIpduRx.Data32[18]    = VsisrvIpduRxDef.Data32[18];
+   VsisrvIpduRx.Data32[19]    = VsisrvIpduRxDef.Data32[19];
+   VsisrvIpduRx.Data32[20]    = VsisrvIpduRxDef.Data32[20];
+   VsisrvIpduRx.Data32[21]    = VsisrvIpduRxDef.Data32[21];
+   VsisrvIpduRx.Data32[22]    = VsisrvIpduRxDef.Data32[22];
+   VsisrvIpduRx.Data32[23]    = VsisrvIpduRxDef.Data32[23];
+
+   /***** BswFpgaIf_SetTxSyncData() code movement *****/
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Ur_MSB4    = 0x3u;
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Ur_LSB8    = 0xE8u;
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Vr_MSB4    = 0x3u;
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Vr_LSB8    = 0xE8u;
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Wr_MSB4    = 0x3u;
+   VsisrvIpduTx.Data.TxS.Signal.PWM_Wr_LSB8    = 0xE8u;
+
+   VSISRV_SetSignalPWM_UVW_ON(1);
+   VSISRV_SetSignalPWM_RatioFreq(0);
+
+   /***** BswFpgaIf_SetTxASyncData() code movement *****/
+   BswFpgaIfTxaStateReqOperation = 1u;
+   BswFpgaIfTxaStateReqSwitchType = 1u;
+
+   VSISRV_SetSignalStateReqOperation(BswFpgaIfTxaStateReqOperation);
+   VSISRV_SetSignalStateReqSwitchType(BswFpgaIfTxaStateReqSwitchType);
+
+   /**********************************Switch Case*********************************/
+      /* MUX ID0 */
+   VSISRV_SetSignalM1Id0Spare(0u);
+   VSISRV_SetSignalM4Id0Spare(0u);
+   VSISRV_SetSignalPwmInitValUr(0);
+   VSISRV_SetSignalDebug(0);
+
+   VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.Ctrl         = 0u;
+
+      /* MUX ID1 */
+   VSISRV_SetSignalM1Id1Spare(0u);
+   VSISRV_SetSignalM6Id1Spare(0u);
+   VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.Debug_MSB4   = 0u;
+   VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.Debug_LSB8  = 0u;
+   VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.Ctrl        = 0u;
+
+      /* MUX ID2 */
+/*   VSISRV_SetSignalM0Id2Spare06To11(0x04u);*/
+   VSISRV_SetSignalM0IFilAverage(0);
+   VSISRV_SetSignalM1Id2Spare(0u);
+   VSISRV_SetSignalOverCurThBat(0xE67u);
+   VSISRV_SetSignalOverVoltVbatTh(0xB3B);
+   VSISRV_SetSignalM4Id2Spare(0u);
+   VSISRV_SetSignalM5Id2Spare(0u);
+   VSISRV_SetSignalM6Id2Spare(0u);
+   VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.Debug_MSB4       = 0u;
+   VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.Debug_LSB8       = 0u;
+   VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.Ctrl             = 0u;
+
+      /* MUX ID3 */
+   VSISRV_SetSignalDebugH(0u);
+   VSISRV_SetSignalOverCurThMot(BswFpgaIfPhaOcThd);
+   VSISRV_SetSignalActiveDisDur(0x98Au);
+   VSISRV_SetSignalSynchroDelay(436);
+   VSISRV_SetSignalM5Id3Spare(0u);
+   VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.Debug_MSB4     = 0u;
+   VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.Debug_LSB8     = 0u;
+   VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.Ctrl           = 0u;
+
+/*----------------------------------------------------------------------------*/
+/* VSI FRAME Initialisation                                                   */
+/*----------------------------------------------------------------------------*/
+/*------------------------------------*/
+/* ID Tx Initialisation               */
+/*------------------------------------*/
+   VSISRV_u8IdTx = 0;
+   VSISRV_u8IdTxNm1 = 0;
+   VSISRV_u8IdTxParamCycle = 0;
+   VSISRV_u8ModeReqTxNm1 = VSISRV_SIGNAL_MODE_REQ_OFF;
+   VSISRV_IdTxSetModeNominal();
+
+/*------------------------------------*/
+/* Scalings Tx Initialisation         */
+/*------------------------------------*/
+   VSISRV_u16ValueMaxGroup1 = 16384; /* !!! must be = 0 is FPGA not calibrated */
+   VSISRV_u16ValueMaxGroup2 = 16384; /* !!! must be = 0 is FPGA not calibrated */
+
+/*------------------------------------*/
+/* VSI FRAME Tx                       */
+/*------------------------------------*/
+//<<   VsisrvFrameTx.Data32[0]    = 0;
+//<<   VsisrvFrameTx.Data32[1]    = 0;
+//<<   VsisrvFrameTx.Data32[2]    = 0;
+//<<   VsisrvFrameTx.Data32[3]    = 0;
+//<<   VsisrvFrameTx.Data32[4]    = 0;
+//<<   VsisrvFrameTx.Data32[5]    = 0;
+//<<   VsisrvFrameTx.Data32[6]    = 0;
+//<<   VsisrvFrameTx.Data32[7]    = 0;
+
+   VSISRV_vidSetFrameTx();
+/*------------------------------------*/
+/* ID Rx Initialisation               */
+/*------------------------------------*/
+   VSISRV_u8IdRxNm1 = 0;
+/*------------------------------------*/
+/* VSI FRAME Rx                       */
+/*------------------------------------*/
+   VsisrvFrameRx.Data32[0]    = 0;
+   VsisrvFrameRx.Data32[1]    = 0;
+   VsisrvFrameRx.Data32[2]    = 0;
+   VsisrvFrameRx.Data32[3]    = 0;
+   VsisrvFrameRx.Data32[4]    = 0;
+   VsisrvFrameRx.Data32[5]    = 0;
+   VsisrvFrameRx.Data32[6]    = 0;
+   VsisrvFrameRx.Data32[7]    = 0;
+
+/*------------------------------------*/
+   VSISRV_bCheckStatusRxA        = VSISRV_STATUS_NOK;
+   VSISRV_bCheckStatusRxS        = VSISRV_STATUS_NOK;
+   VSISRV_bCheckStatusIdRx       = VSISRV_STATUS_OK;
+   VSISRV_bCheckStatusParamDl    = VSISRV_STATUS_OK;
+   VSISRV_bCheckStatusModeReqRes = VSISRV_STATUS_OK;
+
+   VSISRV_u32CounterChkNokParamDl = 0;
+   VSISRV_u32CounterChkNokModeReqRes = 0;
+
+   VSISRV_u32CheckModeReqResCnt = VSISRV_u32CheckModeReqResCntC;
+
+   VSISRV_bComInit = 1;
+}
+
+/******************************************************************************/
+/*                                                                            */
+/* !Description : Set frame Tx to HW VSI                                      */
+/* !Number      : VSISRV.API.2                                                */
+/* !Reference   : V01NT1001498.001                                            */
+/* !Reference   : V01NT1001945.002                                            */
+/*                                                                            */
+/******************************************************************************/
+/* !LastAuthor  : O. Garot                                                    */
+/******************************************************************************/
+void VSISRV_vidSetFrameTx(void)
+{
+   uint8 u8LocalIdTx = 0u;
+   uint8 txMode = 0u;
+   uint8 txMuxId = 0u;
+
+   VSISRV_IdTxNm1Set();
+
+   /*Update Tx Sync Data*/
+   BswFpgaIf_SetTxSyncData();
+   
+/* -------------------------------------------------------------------------- */
+/* TxS treatments                                                             */
+/* -------------------------------------------------------------------------- */
+   VSISRV_CopyIpduTxSToFrameTxS();
+   VSISRV_vidWriteDataCheck11B(
+                               VSISRV_START_DATA8_FRAME_TXS,
+                               &VSISRV_GetFrameTxSCtrl()
+                              );
+
+/* -------------------------------------------------------------------------- */
+/* TxA treatments                                                             */
+/* -------------------------------------------------------------------------- */
+   if (VSISRV_u8IdTxParamCycle != 0)
+   {
+      VSISRV_IdTxSetModeParam();
+      VSISRV_u8IdTxParamCycle--;
+      if (VSISRV_u8IdTxParamCycle == 0)
+      {
+         VSISRV_IdTxSetModeNominal();
+      }
+   }
+
+/* -------------------------------------------------------------------------- */   
+   if (VSISRV_bBenchFrameTxIdOffC == 0)
+   {
+      VSISRV_IdTxInc();
+   }
+   /*Update Tx ASync Data*/
+   txMode = BswFpgaIf_SetTxAsyncData();
+
+   if(txMode == BSWFPGAIF_MODE_INIT)
+    {
+      txMuxId = (txMuxIdCnt | 0xF0u);
+    }
+    else
+    {
+      txMuxId = txMuxIdCnt;
+    }
+
+   u8LocalIdTx = txMuxIdCnt;
+
+   switch (u8LocalIdTx & 0x0F)
+   {
+      case 0x00:
+         VsisrvIpduTx.Data.TxA.Id.Mx0.Signal.Id   = txMuxId;
+                /* PwmMinDutycycle = ((float32)1 -(BswFpgaIf_invA_pwm_MIN_PULSE_WIDTH * Pwm3PhaPwmFrqAct[SYSDEF_PHA_SET_A])) * 2000; */
+         VSISRV_SetSignalPwmMinDutyCycle(4000u);
+
+         VSISRV_CopyIpduTxAToFrameTxAId0();
+         break;
+
+      case 0x01:
+         VsisrvIpduTx.Data.TxA.Id.Mx1.Signal.Id  = txMuxId;
+                  /* PwmMaxDutycycle = ((BswFpgaIf_invA_pwm_MIN_PULSE_WIDTH * Pwm3PhaPwmFrqAct[SYSDEF_PHA_SET_A]) * (float32)2000); */
+         VSISRV_SetSignalPwmMaxDutyCycle(0u);
+
+         VSISRV_CopyIpduTxAToFrameTxAId1();
+         break;
+
+      case 0x02:
+         VsisrvIpduTx.Data.TxA.Id.Mx2.Signal.Id  = txMuxId;
+
+         VSISRV_CopyIpduTxAToFrameTxAId2();
+         break;
+
+      case 0x03:
+         VsisrvIpduTx.Data.TxA.Id.Mx3.Signal.Id = txMuxId;
+         VSISRV_SetSignalDebugL(FltMskVal);
+
+         VSISRV_CopyIpduTxAToFrameTxAId3();
+         break;
+
+      default:
+         break;
+   }
+   VSISRV_SetFrameTxAId(u8LocalIdTx);
+
+   txMuxIdCnt++;
+   if(txMuxIdCnt > 3u)
+   {
+     txMuxIdCnt = 0u;
+   }
+
+   VSISRV_vidWriteDataCheck18B(
+                               VSISRV_START_DATA8_FRAME_TXA,
+                               &VSISRV_GetFrameTxACtrl()
+                              );
+   /*Send the FPGA sequence to Qspi*/
+   LlswFpgaIf_Tx();
+}
+
+/******************************************************************************/
+/*                                                                            */
+/* !Description : Get frame Rx from HW VSI                                    */
+/* !Number      : VSISRV.API.3                                                */
+/* !Reference   : V01NT1001498.001                                            */
+/* !Reference   : V01NT1001945.002                                            */
+/*                                                                            */
+/******************************************************************************/
+/* !LastAuthor  : O. Garot                                                    */
+/******************************************************************************/
+void VSISRV_vidGetFrameRx(void)
+{
+   uint8 u8LocalIdRx;
+   uint8 u8LocalIdRxNm1;
+   uint8 u8LocalIdTxNm1;
+   uint8 u8LocalModeReqTx;
+   boolean bLocalCheckStatusRxA;
+   boolean bLocalCheckStatusRxS;
+   boolean bLocalCheckStatusIdRx;
+
+/* -------------------------------------------------------------------------- */
+/* RxA treatments                                                             */
+/* -------------------------------------------------------------------------- */
+   VSISRV_vidVerifyDataCheck14B(
+                                VSISRV_START_DATA8_FRAME_RXA,
+                                VSISRV_GetFrameRxACtrl(),
+                                &bLocalCheckStatusRxA
+                               );
+
+   if (  (bLocalCheckStatusRxA == VSISRV_STATUS_OK)
+      || (VSISRV_bBenchFrameRxChkOffC != 0)
+      )
+   {
+      bLocalCheckStatusIdRx = VSISRV_STATUS_OK;
+
+      u8LocalIdRx = (uint8)VSISRV_GetFrameRxAId();
+
+      u8LocalIdRxNm1 = VSISRV_IdRxNm1Read();
+
+      VSISRV_bCheckStatusRxA = VSISRV_STATUS_OK;
+
+      VSISRV_CopyFrameRxAToIpduRxA();
+
+      switch (u8LocalIdRx)
+      {
+         case 0x00:
+            VSISRV_CopyFrameRxAToIpduRxAId0();
+            if (u8LocalIdRxNm1 != 0x03)
+            {
+               bLocalCheckStatusIdRx = VSISRV_STATUS_NOK;
+            }
+            break;
+
+         case 0x01:
+            VSISRV_CopyFrameRxAToIpduRxAId1();
+            if (u8LocalIdRxNm1 != 0x00)
+            {
+               bLocalCheckStatusIdRx = VSISRV_STATUS_NOK;
+            }
+            break;
+
+         case 0x02:
+            VSISRV_CopyFrameRxAToIpduRxAId2();
+            if (u8LocalIdRxNm1 != 0x01)
+            {
+               bLocalCheckStatusIdRx = VSISRV_STATUS_NOK;
+            }
+            break;
+
+         case 0x03:
+            VSISRV_CopyFrameRxAToIpduRxAId3();
+            if (u8LocalIdRxNm1 != 0x02)
+            {
+               bLocalCheckStatusIdRx = VSISRV_STATUS_NOK;
+            }
+            break;
+
+         default:
+            bLocalCheckStatusIdRx = VSISRV_STATUS_NOK;
+            break;
+      }
+      VSISRV_bCheckStatusIdRx = ((VSISRV_ComInitRead()) || bLocalCheckStatusIdRx);
+      VSISRV_IdRxNm1Set(u8LocalIdRx);
+      VSISRV_ComInitOff();
+
+      /*Read IGBT Temperature raw value*/
+      BswFpgaIf_ReadIgbtTemp();
+   }
+   else
+   {
+      VSISRV_bCheckStatusRxA = VSISRV_STATUS_NOK;
+      VSISRV_ComInitOn();
+   }
+
+/* -------------------------------------------------------------------------- */
+/* RxS treatments                                                             */
+/* -------------------------------------------------------------------------- */
+   VSISRV_vidVerifyDataCheck14B(
+                                VSISRV_START_DATA8_FRAME_RXS,
+                                VSISRV_GetFrameRxSCtrl(),
+                                &bLocalCheckStatusRxS
+                               );
+
+   if (  (bLocalCheckStatusRxS == VSISRV_STATUS_OK)
+      || (VSISRV_bBenchFrameRxChkOffC != 0)
+      )
+   {
+      VSISRV_bCheckStatusRxS = VSISRV_STATUS_OK;
+      VSISRV_CopyFrameRxSToIpduRxS();
+
+      DrvCtrlSdl_RunPwmA();
+   }
+   else
+   {
+      VSISRV_bCheckStatusRxS = VSISRV_STATUS_NOK;
+
+      VSISRV_vidSetFrameTx();
+   }
+
+/* -------------------------------------------------------------------------- */
+/* Checks Mode Req-Res consistency                                            */
+/* -------------------------------------------------------------------------- */   
+   if (bLocalCheckStatusRxA == VSISRV_STATUS_OK)
+   {
+      u8LocalModeReqTx = VSISRV_GetSignalTxModeReq();
+      if (VSISRV_u8ModeReqTxNm1 != u8LocalModeReqTx)
+      {
+         VSISRV_u32CheckModeReqResCnt = VSISRV_u32CheckModeReqResCntC;
+      }
+      VSISRV_u8ModeReqTxNm1 = u8LocalModeReqTx;
+
+      if (VSISRV_u32CheckModeReqResCnt != 0)
+      {
+         VSISRV_u32CheckModeReqResCnt --;
+      }
+      else
+      {
+         if (u8LocalModeReqTx != VSISRV_GetSignalStateResModeRes())
+         {
+            VSISRV_bCheckStatusModeReqRes = VSISRV_STATUS_NOK;
+         }
+      }
+   }
+
+/* -------------------------------------------------------------------------- */
+/* Checks Params download                                                     */
+/* -------------------------------------------------------------------------- */   
+   u8LocalIdTxNm1 = VSISRV_IdTxNm1Read();
+   if ((u8LocalIdTxNm1 & 0xF0) == 0xF0)
+   {
+      if (  (bLocalCheckStatusRxS == VSISRV_STATUS_OK)
+         && (bLocalCheckStatusRxA == VSISRV_STATUS_OK)
+         )
+      {
+         if (  (VSISRV_FrameStatusTxCtrlA() == VSISRV_STATUS_NOK)
+            || (VSISRV_GetSignalStateResModeRes() != VSISRV_SIGNAL_MODE_REQ_INIT)
+            )
+         {
+            VSISRV_bCheckStatusParamDl = VSISRV_STATUS_NOK;
+         }
+      }
+      else
+      {
+         VSISRV_bCheckStatusParamDl = VSISRV_STATUS_NOK;
+      }
+   }
+
+/* -------------------------------------------------------------------------- */
+}
+
+/******************************************************************************/
+/*                                                                            */
+/* !Description : VSI Set mode request to HW VSI                              */
+/* !Number      : VSISRV.API.4                                                */
+/* !Reference   : V01NT1001945.002                                            */
+/*                                                                            */
+/******************************************************************************/
+/* !LastAuthor  : O. Garot                                                    */
+/******************************************************************************/
+void VSISRV_vidSetModeReq(
+   uint16 VsiState   /* !Comment : State command to HW VSI                    */
+                     /* !Range   : VSISRV_VSI_MODE_REQ_OFF                    */
+                     /*            VSISRV_VSI_MODE_REQ_PWM_DIRECT             */
+                     /*               Scaling Group1 = PwmFreq                */
+                     /*               Scaling Group2 = TarModFreq             */
+                     /*            VSISRV_VSI_MODE_REQ_PWM_HARD               */
+                     /*               Scaling Group1 = RegFreq                */
+                     /*               Scaling Group2 = TarModFreq             */
+                     /*                  -Group 1 :                           */
+                     /*                   PWM_Ul                              */
+                     /*                   PWM_Ur                              */
+                     /*                   PWM_Vl                              */
+                     /*                   PWM_Vr                              */
+                     /*                   PWM_Wl                              */
+                     /*                   PWM_Wr                              */
+                     /*                   PwmMinDutyCycle                     */
+                     /*                   PwmMaxDutyCycle                     */
+                     /*                  -Group 2 :                           */
+                     /*                   RegulTarU                           */
+                     /*                   RegulTarIPos                        */
+                     /*                   RegulTarINeg                        */
+                     /*            VSISRV_VSI_MODE_REQ_INIT_CAL1              */
+                     /*            VSISRV_VSI_MODE_REQ_INIT_CAL2              */
+                     /*            VSISRV_VSI_MODE_REQ_INIT_CAL3              */
+)
+{
+   switch (VsiState)
+   {
+      case VSISRV_VSI_MODE_REQ_OFF:
+      /* state Tx = OFF                               */
+         VSISRV_SetSignalStateReqModeReq(VSISRV_SIGNAL_MODE_REQ_OFF);
+         break;
+
+      case VSISRV_VSI_MODE_REQ_PWM_DIRECT:
+      /* Init scalings group1, group2                 */
+      /* state Tx = PWM DIRECT                        */
+         VSISRV_u16ValueMaxGroup1 = 2 * VSISRV_GetSignalTxPwmFreq();
+//<<         VSISRV_u16ValueMaxGroup2 = ;
+         VSISRV_SetSignalStateReqModeReq(VSISRV_SIGNAL_MODE_REQ_PWM_DIRECT);
+         break;
+
+      case VSISRV_VSI_MODE_REQ_PWM_HARD:
+      /* Init scalings group1, group2                 */
+      /* state Tx = PWM HARD                          */
+//<<         VSISRV_u16ValueMaxGroup1 = VSISRV_GetSignalTxM5Id3Spare();
+//<<         VSISRV_u16ValueMaxGroup2 = ;
+         VSISRV_SetSignalStateReqModeReq(VSISRV_SIGNAL_MODE_REQ_PWM_HARD);
+         break;
+
+      case VSISRV_VSI_MODE_REQ_INIT_CAL1:
+      /* 1./ Parameters ACU initialization to IPDU Tx */
+      /* 2./ state Tx = INIT                          */
+      /* 3./ 0xF* one cycle to frame Tx               */
+         VSISRV_vidInitIpduTxInitParam(VSISRV_VSI_MODE_REQ_INIT_CAL1);
+         VSISRV_SetSignalStateReqModeReq(VSISRV_SIGNAL_MODE_REQ_INIT);
+         VSISRV_IdTxSetModeParam1Cycle();
+         break;
+
+      case VSISRV_VSI_MODE_REQ_INIT_CAL2:
+      /* 1./ Parameters MCU initialization to IPDU Tx */
+      /* 2./ state Tx = INIT                          */
+      /* 3./ 0xF* one cycle to frame Tx               */
+         VSISRV_vidInitIpduTxInitParam(VSISRV_VSI_MODE_REQ_INIT_CAL2);
+         VSISRV_SetSignalStateReqModeReq(VSISRV_SIGNAL_MODE_REQ_INIT);
+         VSISRV_IdTxSetModeParam1Cycle();
+         break;
+
+      case VSISRV_VSI_MODE_REQ_INIT_CAL3:
+      /* 1./ Parameters CCU initialization to IPDU Tx */
+      /* 2./ state Tx = INIT                          */
+      /* 3./ 0xF* one cycle to frame Tx               */
+         VSISRV_vidInitIpduTxInitParam(VSISRV_VSI_MODE_REQ_INIT_CAL3);
+         VSISRV_SetSignalStateReqModeReq(VSISRV_SIGNAL_MODE_REQ_INIT);
+         VSISRV_IdTxSetModeParam1Cycle();
+         break;
+
+      default:
+         break;
+   }
+   VSISRV_u16ModeReq = VsiState;
+}
+
+/******************************************************************************/
+/*                                                                            */
+/* !Description : VSI Get mode request to HW VSI                              */
+/* !Number      : VSISRV.API.5                                                */
+/* !Reference   : V01NT1001945.002                                            */
+/*                                                                            */
+/******************************************************************************/
+/* !LastAuthor  : O. Garot                                                    */
+/******************************************************************************/
+uint16 VSISRV_u16GetModeReq(void)
+{
+   return(VSISRV_u16ModeReq);
+}
+
+/******************************************************************************/
+/*                                                                            */
+/* !Description : Get parameters download status                              */
+/*              : (NOK, OK)                                                   */
+/* !Number      : VSISRV.API.6                                                */
+/* !Reference   : V01NT1001498.001                                            */
+/* !Reference   : V01NT1001945.002                                            */
+/*                                                                            */
+/******************************************************************************/
+/* !LastAuthor  : O. Garot                                                    */
+/******************************************************************************/
+boolean VSISRV_bGetStatusParamDl(void)
+{
+   boolean bLocalStatus;
+
+   bLocalStatus = VSISRV_bCheckStatusParamDl;
+   if (bLocalStatus == VSISRV_STATUS_NOK)
+   {
+      VSISRV_u32CounterChkNokParamDl++;
+   }
+   VSISRV_bCheckStatusParamDl = VSISRV_STATUS_OK;
+   return(bLocalStatus);
+}
+
+/******************************************************************************/
+/*                                                                            */
+/* !Description : Get consistency Mode Req-Res status                         */
+/*              : (NOK, OK)                                                   */
+/* !Number      : VSISRV.API.7                                                */
+/* !Reference   : V01NT1001498.001                                            */
+/* !Reference   : V01NT1001945.002                                            */
+/*                                                                            */
+/******************************************************************************/
+/* !LastAuthor  : O. Garot                                                    */
+/******************************************************************************/
+boolean VSISRV_bGetStatusModeReqRes(void)
+{
+   boolean bLocalStatus;
+
+   bLocalStatus = VSISRV_bCheckStatusModeReqRes;
+   if (bLocalStatus == VSISRV_STATUS_NOK)
+   {
+      VSISRV_u32CounterChkNokModeReqRes++;
+   }
+   VSISRV_bCheckStatusModeReqRes = VSISRV_STATUS_OK;
+   return(bLocalStatus);
+}
+
+/******************************************************************************/
+/*                                                                            */
+/* !Description : Fault reinit satus                                          */
+/* !Number      : VSISRV.API.8                                                */
+/* !Reference   : V01NT1001498.001                                            */
+/* !Reference   : V01NT1001945.002                                            */
+/*                                                                            */
+/******************************************************************************/
+/* !LastAuthor  : O. Garot                                                    */
+/******************************************************************************/
+void VSISRV_vidAutSigEmergencySwMgr(void)
+{
+   if (VSISRV_u16AutSigEmergencySwDelay != 0)
+   {
+      VSISRV_AutSigEmergencySw(0);
+      VSISRV_u16AutSigEmergencySwDelay --;
+   }
+   else
+   {
+      VSISRV_AutSigEmergencySw(1);
+   }
+}
+
+#define VSISRV_STOP_SEC_CODE
+#include "NextGen_MemMap.h"
+
+/*-------------------------------- end of file -------------------------------*/
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/src/VsiSrv_Def.c b/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/src/VsiSrv_Def.c
new file mode 100644
index 000000000..d71cbd6d2
--- /dev/null
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/BswFpgaIf/src/VsiSrv_Def.c
@@ -0,0 +1,130 @@
+/***************************** <AUTO_FILE_HEADER> *****************************/
+/*                                                                            */
+/* !Layer           : APPLI                                                   */
+/*                                                                            */
+/* !Component       : VSISRV                                                  */
+/*                                                                            */
+/* !Module          : VSISRV                                                  */
+/* !Description     : Data definition                                         */
+/*                                                                            */
+/* !File            : VSISRV_DEF.C                                            */
+/*                                                                            */
+/* !Target          : All                                                     */
+/*                                                                            */
+/* !Vendor          : Valeo                                                   */
+/*                                                                            */
+/* Coding language  : C                                                       */
+/*                                                                            */
+/* COPYRIGHT 2008 VALEO                                                       */
+/* all rights reserved                                                        */
+/*                                                                            */
+/**************************** </AUTO_FILE_HEADER> *****************************/
+/* PVCS Information                                                           */
+/* $Archive::                                                                $*/
+/* $Revision::                                                               $*/
+/* $Author::                                          $$Date::               $*/
+/******************************************************************************/
+/* !VnrOff  : Names imposed by the customer                                   */
+/* !CompReq :                                                                 */
+/******************************************************************************/
+
+#include "Std_Types.h"
+#include "VsiSrv.h"
+#include "VsiSrv_L.h"
+
+/******************************************************************************/
+/* CALIBRATIONS DEFINITION                                                    */
+/******************************************************************************/
+#define START_SEC_CALIB
+/*lint -e(537,451) Repeated inclusion is needed. */
+#include "MemMap.h"
+
+CONST(boolean, VSISRV_CALIB) VSISRV_bBenchFrameRxChkOffC = 0;
+CONST(boolean, VSISRV_CALIB) VSISRV_bBenchFrameTxIdOffC = 0;
+CONST(boolean, VSISRV_CALIB) VSISRV_bChkCRCOffXOROnC = 0;
+CONST(uint32, VSISRV_CALIB) VSISRV_u32CheckModeReqResCntC = 2;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16AutSigEmergencySwDelayC = 100;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1ActiveDisDurC = 2442;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1M4Id0SpareC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1M4Id2SpareC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1M5Id2SpareC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1M5Id3SpareC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1M6Id1SpareC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1M6Id2SpareC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1M6Id3SpareC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1OverCurThBatC = 3687;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1OverCurThMotC = 3480;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1OverVoltVbatThC = 4000;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1PwmDeadtimeC = 100;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1PwmFreqC = 2000;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1PwmInitValUlC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1PwmInitValUrC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1PwmInitValVlC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1PwmInitValVrC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1PwmInitValWlC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1PwmInitValWrC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1SynchroDelayC = 436;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal1TxaPwmExcFreqC = 2000;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2ActiveDisDurC = 2442;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2M4Id0SpareC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2M4Id2SpareC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2M5Id2SpareC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2M5Id3SpareC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2M6Id1SpareC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2M6Id2SpareC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2M6Id3SpareC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2OverCurThBatC = 3687;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2OverCurThMotC = 3480;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2OverVoltVbatThC = 4000;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2PwmDeadtimeC = 100;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2PwmFreqC = 2000;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2PwmInitValUlC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2PwmInitValUrC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2PwmInitValVlC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2PwmInitValVrC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2PwmInitValWlC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2PwmInitValWrC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2SynchroDelayC = 436;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal2TxaPwmExcFreqC = 2000;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3ActiveDisDurC = 2442;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3M4Id0SpareC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3M4Id2SpareC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3M5Id2SpareC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3M5Id3SpareC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3M6Id1SpareC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3M6Id2SpareC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3M6Id3SpareC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3OverCurThBatC = 3687;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3OverCurThMotC = 3480;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3OverVoltVbatThC = 4000;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3PwmDeadtimeC = 100;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3PwmFreqC = 2000;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3PwmInitValUlC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3PwmInitValUrC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3PwmInitValVlC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3PwmInitValVrC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3PwmInitValWlC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3PwmInitValWrC = 0;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3SynchroDelayC = 436;
+CONST(uint16, VSISRV_CALIB) VSISRV_u16Cal3TxaPwmExcFreqC = 2000;
+
+#define STOP_SEC_CALIB
+/*lint -e(537,451) Repeated inclusion is needed. */
+#include "MemMap.h"
+
+
+/******************************************************************************/
+/* DATA DEFINITION                                                            */
+/******************************************************************************/
+#define ISWIF_START_SEC_VAR_FAST_CLEARED
+#include "MemMap.h"
+
+VAR(uint32, VSISRV_VAR) VSISRV_u32CheckModeReqResCnt;
+VAR(uint32, VSISRV_VAR) VSISRV_u32CounterChkNokModeReqRes;
+VAR(uint32, VSISRV_VAR) VSISRV_u32CounterChkNokParamDl;
+VAR(uint8, VSISRV_VAR) VSISRV_u8IdTx;
+
+#define ISWIF_STOP_SEC_VAR_FAST_CLEARED
+#include "MemMap.h"
+
+/*-------------------------------- end of file -------------------------------*/
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/LlswFpgaIf/src/LlswFpgaIf.c b/src/fw_cu/Components/Inv/ValMeasAndProc/LlswFpgaIf/src/LlswFpgaIf.c
index cb82f582c..9c75c9154 100644
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/LlswFpgaIf/src/LlswFpgaIf.c
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/LlswFpgaIf/src/LlswFpgaIf.c
@@ -41,6 +41,7 @@
 #include "DrvCtrlErrDeb.h"
 #include "DrvCtrlSeqr.h"
 #include "PwmSpMux_Wrpr.h"
+#include "VsiSrv.h"
 
 /* #include "Dio.h" */
 /* #include "Port_Cfg.h" */
@@ -386,7 +387,8 @@ void LlswFpgaIf_RxNotif(void)
 
 
    /* TODO: Call the DrcoIf Receive notification function here */
-   BswFpgaIf_UpdRxFrm();
+
+   VSISRV_vidGetFrameRx();
 }
 
 FUNC(void, FPGA_CODE) LlswFpgaIf_Main(void)
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyDmaDrvr/src/SftyDmaDrvr_cfg.c b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyDmaDrvr/src/SftyDmaDrvr_cfg.c
index 0a1d1066c..e21bc614b 100644
--- a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyDmaDrvr/src/SftyDmaDrvr_cfg.c
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyDmaDrvr/src/SftyDmaDrvr_cfg.c
@@ -46,6 +46,7 @@
 #include "AddGlobalDefines.h"
 #include "IntPrioDef.h"
 #include "Os_user.h"
+#include "VsiSrv.h"
 #include "BswFpgaIf.h"
 /*================== [defines] ==============================================*/
 
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftySysInit/include/SftySysInit.h b/src/fw_cu/Components/Safety/Sfty_Cmn/SftySysInit/include/SftySysInit.h
index 072ff2ea8..2e90cc875 100644
--- a/src/fw_cu/Components/Safety/Sfty_Cmn/SftySysInit/include/SftySysInit.h
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/SftySysInit/include/SftySysInit.h
@@ -223,6 +223,9 @@
 #define SFTY_GD_RESET_U_BOT_PORT_OMR_PCL_PIN                  MODULE_P15.OMR.B.PCL7
 #define SFTY_GD_RESET_U_BOT_PORT_OMR_PS_PIN                   MODULE_P15.OMR.B.PS7
 
+#define SFTY_ENA_HT_HS_PORT_OMR_PCL_PIN                  MODULE_P00.OMR.B.PCL2
+#define SFTY_ENA_HT_LS_PORT_OMR_PCL_PIN                  MODULE_P00.OMR.B.PCL3
+
 /* ******************************** GD_RESET_V_TOP ****************************** */
 /* Port 20, pin 6 */
 #define SFTY_GD_RESET_V_TOP_PORT_PDR_PD_PIN                   MODULE_P20.PDR0.B.PD6
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftySysInit/src/SftySysInit.c b/src/fw_cu/Components/Safety/Sfty_Cmn/SftySysInit/src/SftySysInit.c
index e3b705410..5344680a1 100644
--- a/src/fw_cu/Components/Safety/Sfty_Cmn/SftySysInit/src/SftySysInit.c
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/SftySysInit/src/SftySysInit.c
@@ -387,6 +387,9 @@ LOCAL_INLINE void SftySysInit_SetXbarAccen(uint32 AllwdTagId)
 /******************************************************************/
 LOCAL_INLINE void SftySysInit_SetPortsAcsEna(uint32 AllwdTagId)
 {
+   /*To be fixed*/
+   MODULE_P00.IOCR8.B.PC9 = 0x11;
+
    /* Port00 is open for all cores */
    Mcal_WriteSafetyEndInitProtReg(&MODULE_P00.ACCEN0.U, AllwdTagId);    //SFTY_PORT00_ACCEN = AllwdTagId;
 
@@ -463,7 +466,7 @@ LOCAL_INLINE void SftySysInit_SetAcsEna(uint32 AllwdTagId)
 #endif
 
    /* MTU Access Protection */
-   MTU_ACCEN0.U = AllwdTagId;
+  /*  MTU_ACCEN0.U = AllwdTagId;  FIX for \'\'CAN communication lost when parameters are modified with CANape\'\' */
 
    return;
 }
@@ -527,7 +530,8 @@ LOCAL_INLINE void SftySysInit_PortInit(void)
    /*---------------------------------PWM DRIVER----------------------------------------*/
    SFTYSYSINIT_MODULE_PX_PDR1.B.PD9 = SFTY_IO_PORT_PDR_CMOS_SPD_GRD_1;
    SFTYSYSINIT_MODULE_PX_PDR1.B.PL9 = SFTY_IO_PORT_PDR_CMOS_AUTOMOTIVE_LVL;
-   SFTYSYSINIT_MODULE_PX_IOCR8.B.PC9 = SFTY_GPO_IOCR_VAL;
+  // SFTYSYSINIT_MODULE_PX_IOCR8.B.PC9 = SFTY_GPO_IOCR_VAL; 07.01.22
+   SFTYSYSINIT_MODULE_PX_IOCR8.B.PC9 =  SFTY_GTM_OUT_IOCR_VAL;
 
    Mcal_WriteCpuEndInitProtReg(&MODULE_P00.PDR0.U,(uint32)SFTYSYSINIT_MODULE_PX_PDR0.U);
    Mcal_WriteCpuEndInitProtReg(&MODULE_P00.PDR1.U,(uint32)SFTYSYSINIT_MODULE_PX_PDR1.U);
@@ -827,6 +831,10 @@ FUNC(void, SFTYSYSINIT) SftySysInit_InitArea0(void)
    /* LOW indicates FAULT */
    SFTY_N_ASC_CTRL_SMU_PORT_OMR_PS_PIN = 1U;
 
+   SFTY_ENA_HT_HS_PORT_OMR_PCL_PIN = 1U;
+
+   SFTY_ENA_HT_LS_PORT_OMR_PCL_PIN = 1U;
+
    /* Set PSW IO setting back to USER1 */
    SftyUtils_SetPswIoMode(SFTY_UTILS_PSW_IO_USER_MODE_1);
    return;
diff --git a/src/fw_cu/build/a2l/Measurements-to-Timeslices-Mapping.csv b/src/fw_cu/build/a2l/Measurements-to-Timeslices-Mapping.csv
index cd63447ff..6b6efc2d9 100644
--- a/src/fw_cu/build/a2l/Measurements-to-Timeslices-Mapping.csv
+++ b/src/fw_cu/build/a2l/Measurements-to-Timeslices-Mapping.csv
@@ -3173,848 +3173,6 @@ FncGen_InputData.halfperiod,Core_2,C2_100u_PWM,0.1,,,DRCO
 FncGen_InputData.mode,Core_2,C2_100u_PWM,0.1,,,DRCO
 FncGen_InputData.offset,Core_2,C2_100u_PWM,0.1,,,DRCO
 FncGen_OutputData.signalOut,Core_2,C2_100u_PWM,0.1,,,DRCO
-BswFpgaIfFrameRx.Data.RxA.Data16,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameRx.Data.RxA.Data32,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameRx.Data.RxA.Data8,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameRx.Data.RxA.Signal.Crc,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameRx.Data.RxA.Signal.Data8,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameRx.Data.RxA.Signal.Id,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameRx.Data.RxS.Data16,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameRx.Data.RxS.Data32,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameRx.Data.RxS.Data8,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameRx.Data.RxS.Signal.Align1_LSB4,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameRx.Data.RxS.Signal.Align1_MSB8,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameRx.Data.RxS.Signal.Crc,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameRx.Data.RxS.Signal.Data8,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameRx.Data.RxS.Signal.FS_SOE,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameRx.Data.RxS.Signal.FS_SOL,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameRx.Data.RxS.Signal.FS_TXA,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameRx.Data.RxS.Signal.FS_TXS,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameRx.Data16,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameRx.Data32,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameRx.Data8,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameTx.Data.TxA.Data32,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameTx.Data.TxA.Signal.Ctrl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfFrameTx.Data.TxA.Signal.Data8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfFrameTx.Data.TxA.Signal.dummy,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfFrameTx.Data.TxS.Data16,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameTx.Data.TxS.Data32,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameTx.Data.TxS.Data8,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameTx.Data.TxS.Signal.Ctrl,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameTx.Data.TxS.Signal.Data8,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameTx.Data.TxS.Signal.dummy,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameTx.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfFrameTx.Data32,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameTx.Data8,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Data32,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Data8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.Ctrl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.Debug64To75_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.Debug64To75_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.ActiveDisAc,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.ActiveDisIn,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.EmergencyStop,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.IgbtH,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.IgbtL,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.LossComSpi,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.PwrSupHs,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.PwrSupLs,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.PwrSupMul,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.MeasCoherence,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.Spare02,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.Spare03,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.Spare04,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.Spare05,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.Spare06,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.Spare07,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.IgbtMidPointU,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.IgbtMidPointV,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.IgbtMidPointW,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverCurBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverTempCtrlBd,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverTempDrvBd,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverTempIgbt,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurUl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurUr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurVl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurVr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurWl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurWr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverVoltVBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.UnderVoltVBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.WdgCpld,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.LowSpeedReach,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.PwmClampFlag,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.PwmParamFlag,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare00,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare03,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare05,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare06,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare07,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare08,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare09,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare10,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare11,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare12,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare13,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare14,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare15,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.Id,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.StateRes.Field.CurAcq,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.StateRes.Field.ModeRes,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.StateRes.Field.PWM_RatioFreqRes,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.StateRes.Field.SwitchTypeRes,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Data32,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Data8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.Ctrl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.DcLinkCtrlBd_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.DcLinkCtrlBd_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.DcLinkDrvBd_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.DcLinkDrvBd_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.Debug100To111_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.Debug100To111_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.Debug64To75_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.Debug64To75_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.ActiveDisAc,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.ActiveDisIn,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.EmergencyStop,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.IgbtH,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.IgbtL,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.LossComSpi,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.PwrSupHs,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.PwrSupLs,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.PwrSupMul,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.MeasCoherence,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.Spare02,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.Spare03,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.Spare04,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.Spare05,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.Spare06,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.Spare07,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.IgbtMidPointU,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.IgbtMidPointV,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.IgbtMidPointW,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverCurBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverTempCtrlBd,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverTempDrvBd,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverTempIgbt,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurUl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurUr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurVl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurVr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurWl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurWr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverVoltVBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.UnderVoltVBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.WdgCpld,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.LowSpeedReach,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.PwmClampFlag,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.PwmParamFlag,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare00,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare03,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare05,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare06,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare07,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare08,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare09,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare10,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare11,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare12,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare13,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare14,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare15,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.Id,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.StateRes.Field.CurAcq,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.StateRes.Field.ModeRes,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.StateRes.Field.PWM_RatioFreqRes,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.StateRes.Field.SwitchTypeRes,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Data32,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Data8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.Ctrl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.Debug100To111_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.Debug100To111_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.Debug64To75_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.Debug64To75_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.ActiveDisAc,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.ActiveDisIn,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.EmergencyStop,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.IgbtH,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.IgbtL,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.LossComSpi,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.PwrSupHs,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.PwrSupLs,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.PwrSupMul,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.MeasCoherence,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.Spare02,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.Spare03,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.Spare04,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.Spare05,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.Spare06,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.Spare07,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.IgbtMidPointU,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.IgbtMidPointV,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.IgbtMidPointW,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverCurBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverTempCtrlBd,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverTempDrvBd,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverTempIgbt,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurUl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurUr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurVl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurVr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurWl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurWr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverVoltVBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.UnderVoltVBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.WdgCpld,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.LowSpeedReach,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.PwmClampFlag,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.PwmParamFlag,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare00,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare03,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare05,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare06,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare07,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare08,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare09,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare10,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare11,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare12,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare13,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare14,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare15,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.Id,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.M1VFpgaL_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.M1VFpgaL_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.StateRes.Field.CurAcq,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.StateRes.Field.ModeRes,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.StateRes.Field.PWM_RatioFreqRes,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.StateRes.Field.SwitchTypeRes,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.TempCtrlBd_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.TempCtrlBd_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Data32,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Data8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.Ctrl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.Debug100To111_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.Debug100To111_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.Debug64To75_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.Debug64To75_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.ActiveDisAc,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.ActiveDisIn,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.EmergencyStop,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.IgbtH,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.IgbtL,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.LossComSpi,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.PwrSupHs,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.PwrSupLs,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.PwrSupMul,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.MeasCoherence,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.Spare02,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.Spare03,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.Spare04,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.Spare05,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.Spare06,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.Spare07,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.IgbtMidPointU,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.IgbtMidPointV,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.IgbtMidPointW,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverCurBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverTempCtrlBd,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverTempDrvBd,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverTempIgbt,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurUl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurUr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurVl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurVr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurWl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurWr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverVoltVBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.UnderVoltVBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.WdgCpld,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.LowSpeedReach,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.PwmClampFlag,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.PwmParamFlag,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare00,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare03,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare05,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare06,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare07,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare08,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare09,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare10,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare11,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare12,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare13,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare14,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare15,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.Id,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.M1VFpgaH_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.M1VFpgaH_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.StateRes.Field.CurAcq,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.StateRes.Field.ModeRes,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.StateRes.Field.PWM_RatioFreqRes,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.StateRes.Field.SwitchTypeRes,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.TempDrvBd_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.TempDrvBd_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Data32,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Data8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.Ctrl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.Debug100To111_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.Debug100To111_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.Debug64To75_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.Debug64To75_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.ActiveDisAc,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.ActiveDisIn,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.EmergencyStop,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.IgbtH,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.IgbtL,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.LossComSpi,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.PwrSupHs,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.PwrSupLs,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.PwrSupMul,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.MeasCoherence,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare02,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare03,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare04,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare05,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare06,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare07,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.IgbtMidPointU,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.IgbtMidPointV,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.IgbtMidPointW,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverCurBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverTempCtrlBd,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverTempDrvBd,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverTempIgbt,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurUl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurUr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurVl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurVr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurWl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurWr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverVoltVBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.UnderVoltVBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.WdgCpld,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.LowSpeedReach,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.PwmClampFlag,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.PwmParamFlag,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare00,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare03,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare05,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare06,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare07,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare08,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare09,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare10,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare11,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare12,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare13,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare14,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare15,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.Id,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.M0_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.M0_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.M1_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.M1_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.StateRes.Field.CurAcq,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.StateRes.Field.ModeRes,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.StateRes.Field.PWM_RatioFreqRes,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.StateRes.Field.SwitchTypeRes,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Data32,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Data8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.Ctrl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.Debug100To111_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.Debug100To111_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.Debug64To75_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.Debug64To75_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.ActiveDisAc,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.ActiveDisIn,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.EmergencyStop,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.IgbtH,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.IgbtL,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.LossComSpi,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.PwrSupHs,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.PwrSupLs,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.PwrSupMul,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.MeasCoherence,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.Spare02,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.Spare03,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.Spare04,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.Spare05,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.Spare06,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.Spare07,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.IgbtMidPointU,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.IgbtMidPointV,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.IgbtMidPointW,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.OverCurBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.OverTempCtrlBd,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.OverTempDrvBd,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.OverTempIgbt,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.OverUnderCurUl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.OverUnderCurUr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.OverUnderCurVl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.OverUnderCurVr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.OverUnderCurWl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.OverUnderCurWr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.OverVoltVBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.UnderVoltVBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.WdgCpld,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.LowSpeedReach,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.PwmClampFlag,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.PwmParamFlag,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.Spare00,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.Spare03,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.Spare05,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.Spare06,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.Spare07,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.Spare08,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.Spare09,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.Spare10,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.Spare11,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.Spare12,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.Spare13,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.Spare14,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.Spare15,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.Id,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.M0_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.M0_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.M1_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.M1_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.StateRes.Field.CurAcq,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.StateRes.Field.ModeRes,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.StateRes.Field.PWM_RatioFreqRes,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.StateRes.Field.SwitchTypeRes,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxS.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxS.Data32,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxS.Data8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxS.Signal.Ctrl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxS.Signal.FS_SOE,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxS.Signal.FS_SOL,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxS.Signal.FS_TXA,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxS.Signal.FS_TXS,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxS.Signal.PwrSupply_5V_HS_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxS.Signal.PwrSupply_5V_HS_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxS.Signal.PwrSupply_5V_LS_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxS.Signal.PwrSupply_5V_LS_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxS.Signal.PwrSup_16V_MULTI_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxS.Signal.PwrSup_16V_MULTI_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxS.Signal.CurMeasPh_U_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxS.Signal.CurMeasPh_U_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxS.Signal.HalfCoilCur_Ur_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxS.Signal.HalfCoilCur_Ur_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxS.Signal.CurMeasPh_V_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxS.Signal.CurMeasPh_V_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxS.Signal.HalfCoilCur_Vr_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxS.Signal.HalfCoilCur_Vr_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxS.Signal.CurMeasPh_W_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxS.Signal.CurMeasPh_W_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxS.Signal.HalfCoilCur_Wr_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxS.Signal.HalfCoilCur_Wr_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data32,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.IgbtTempU_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.IgbtTempU_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.IgbtTempV_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.IgbtTempV_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.IgbtTempW_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.IgbtTempW_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfRx_PwrSupply_5V_HS,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfRx_PwrSupply_5V_LS,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfRx_PwrSupply_16V_Multi,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfRx_FpgaVer_LSW,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfRx_FpgaVer_MSW,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfRx_DebugMux_64To75,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfRx_CurMeasPh_U,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfRx_CurMeasPh_V,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfRx_CurMeasPh_W,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfRx_CtrlBd_Temp,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfRx_DrvBd_Temp,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfRx_DcLinkVol_DrvBd,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfRx_DcLinkVol_CtrlBd,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfRx_IgbtTemp_U,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfRx_IgbtTemp_V,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfRx_IgbtTemp_W,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Data16,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Data32,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Data8,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.Ctrl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.Debug_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.Debug_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.ActiveDisAc,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.ActiveDisIn,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.EmergencyStop,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.IgbtH,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.IgbtL,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.LossComSpi,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.PwrSupHs,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.PwrSupLs,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.PwrSupMul,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.MeasCoherence,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.Spare02,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.Spare03,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.Spare04,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.Spare05,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.Spare06,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.Spare07,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.IgbtMidPointU,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.IgbtMidPointV,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.IgbtMidPointW,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverCurBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverTempCtrlBd,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverTempDrvBd,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverTempIgbt,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurUl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurUr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurVl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurVr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurWl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurWr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverVoltVBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.UnderVoltVBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.WdgCpld,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.Id,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M0PwmMinDutyCycle_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M0PwmMinDutyCycle_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M1Id0Spare_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M1Id0Spare_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M2PwmFreq_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M2PwmFreq_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M3PwmDeadtime_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M3PwmDeadtime_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M4Id0Spare_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M4Id0Spare_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M5PwmInitValUl_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M5PwmInitValUl_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M6PwmInitValUr_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M6PwmInitValUr_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.StateReq.Data8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.StateReq.Field.EmergencySw,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.StateReq.Field.ModeReq,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.StateReq.Field.Operation,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.StateReq.Field.SCSpeedReady,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.StateReq.Field.SwitchType,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Data16,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Data32,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Data8,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.Ctrl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.Debug_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.Debug_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.ActiveDisAc,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.ActiveDisIn,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.EmergencyStop,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.IgbtH,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.IgbtL,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.LossComSpi,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.PwrSupHs,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.PwrSupLs,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.PwrSupMul,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.MeasCoherence,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.Spare02,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.Spare03,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.Spare04,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.Spare05,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.Spare06,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.Spare07,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultB.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultB.Field.IgbtMidPointU,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultB.Field.IgbtMidPointV,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultB.Field.IgbtMidPointW,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverCurBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverTempCtrlBd,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverTempDrvBd,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverTempIgbt,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurUl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurUr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurVl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurVr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurWl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurWr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultB.Field.OverVoltVBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultB.Field.UnderVoltVBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultB.Field.WdgCpld,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.Id,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M0PwmMaxDutyCycle_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M0PwmMaxDutyCycle_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M1Id1Spare_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M1Id1Spare_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M2PwmInitValVl_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M2PwmInitValVl_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M3PwmInitValVr_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M3PwmInitValVr_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M4PwmInitValWl_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M4PwmInitValWl_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M5PwmInitValWr_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M5PwmInitValWr_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M6Id1Spare_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M6Id1Spare_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Data16,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Data32,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Data8,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.Ctrl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.Debug_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.Debug_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.ActiveDisAc,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.ActiveDisIn,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.EmergencyStop,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.IgbtH,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.IgbtL,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.LossComSpi,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.PwrSupHs,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.PwrSupLs,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.PwrSupMul,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.MeasCoherence,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.Spare02,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.Spare03,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.Spare04,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.Spare05,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.Spare06,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.Spare07,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultB.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultB.Field.IgbtMidPointU,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultB.Field.IgbtMidPointV,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultB.Field.IgbtMidPointW,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverCurBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverTempCtrlBd,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverTempDrvBd,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverTempIgbt,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurUl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurUr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurVl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurVr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurWl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurWr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultB.Field.OverVoltVBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultB.Field.UnderVoltVBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultB.Field.WdgCpld,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.Id,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M0Id2Spare09To11,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M0Id2Spare05To07,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M0IFilAverage,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M0VFilAverage,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M1Id2Spare_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M1Id2Spare_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M2OverCurThBat_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M2OverCurThBat_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M3OverVoltVbatTh_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M3OverVoltVbatTh_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M4Id2Spare_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M4Id2Spare_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M5Id2Spare_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M5Id2Spare_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M6Id2Spare_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M6Id2Spare_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.ActDisch_Req,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FyBPwrSupCtrl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.StateReq.Data8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.StateReq.Field.EmergencySw,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.StateReq.Field.ModeReq,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.StateReq.Field.Operation,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.StateReq.Field.SCSpeedReady,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.StateReq.Field.SwitchType,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Data16,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Data32,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Data8,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.Ctrl,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.Debug_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.Debug_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultA.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultA.Field.ActiveDisAc,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultA.Field.ActiveDisIn,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultA.Field.EmergencyStop,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultA.Field.IgbtH,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultA.Field.IgbtL,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultA.Field.LossComSpi,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultA.Field.PwrSupHs,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultA.Field.PwrSupLs,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultA.Field.PwrSupMul,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultA.Field.MeasCoherence,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultA.Field.Spare02,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultA.Field.Spare03,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultA.Field.Spare04,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultA.Field.Spare05,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultA.Field.Spare06,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultA.Field.Spare07,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultB.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultB.Field.IgbtMidPointU,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultB.Field.IgbtMidPointV,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultB.Field.IgbtMidPointW,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverCurBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverTempCtrlBd,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverTempDrvBd,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverTempIgbt,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurUl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurUr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurVl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurVr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurWl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurWr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultB.Field.OverVoltVBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultB.Field.UnderVoltVBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.FaultB.Field.WdgCpld,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.Id,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M0DebugL_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M0DebugL_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M1DebugH_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M1DebugH_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M2OverCurThMot_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M2OverCurThMot_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M3ActiveDisDur_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M3ActiveDisDur_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M4SynchroDelay_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M4SynchroDelay_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M5Id3Spare_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M5Id3Spare_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M6Id3Spare_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.M6Id3Spare_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.StateReq.Data8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.StateReq.Field.EmergencySw,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.StateReq.Field.ModeReq,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.StateReq.Field.Operation,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.StateReq.Field.SCSpeedReady,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Signal.StateReq.Field.SwitchType,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Data32,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Data8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.Ctrl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.Debug_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.Debug_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultA.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultA.Field.ActiveDisAc,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultA.Field.ActiveDisIn,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultA.Field.EmergencyStop,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultA.Field.IgbtH,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultA.Field.IgbtL,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultA.Field.LossComSpi,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultA.Field.PwrSupHs,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultA.Field.PwrSupLs,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultA.Field.PwrSupMul,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultA.Field.MeasCoherence,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultA.Field.Spare02,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultA.Field.Spare03,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultA.Field.Spare04,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultA.Field.Spare05,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultA.Field.Spare06,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultA.Field.Spare07,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultB.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultB.Field.IgbtMidPointU,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultB.Field.IgbtMidPointV,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultB.Field.IgbtMidPointW,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultB.Field.OverCurBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultB.Field.OverTempCtrlBd,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultB.Field.OverTempDrvBd,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultB.Field.OverTempIgbt,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultB.Field.OverUnderCurUl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultB.Field.OverUnderCurUr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultB.Field.OverUnderCurVl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultB.Field.OverUnderCurVr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultB.Field.OverUnderCurWl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultB.Field.OverUnderCurWr,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultB.Field.OverVoltVBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultB.Field.UnderVoltVBat,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.FaultB.Field.WdgCpld,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.Id,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.M0_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.M0_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.M1_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.M1_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.M2_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.M2_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.M3_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.M3_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.M4_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.M4_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.M5_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.M5_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.M6_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.M6_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.StateReq.Data8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.StateReq.Field.EmergencySw,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.StateReq.Field.ModeReq,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.StateReq.Field.Operation,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.StateReq.Field.SCSpeedReady,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.IdMx.Signal.StateReq.Field.SwitchType,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.Data32,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.Data8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.Signal.Ctrl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Ul_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Ul_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Ur_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Ur_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Vl_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Vl_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Vr_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Vr_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Wl_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Wl_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Wr_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.Signal.PWM_Wr_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Data8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_RatioFreq,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Ul_ON,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Ur_ON,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Vl_ON,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Vr_ON,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Wl_ON,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field.PWM_Wr_ON,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field2.PWM_All_ON,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.Signal.PWMControl.Field2.PWM_RatioFreq,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_AT1_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_AT1_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_AT2_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_AT2_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_AT3_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_AT3_MSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_AT4_LSB8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_AT4_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_V1,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_V2_LSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_V2_MSB2,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_V3_LSB2,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_V3_MSB4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.SignalSVM.SVM_V4,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.SignalSVM.Ctrl,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.SignalSVM.PWMControl.Data8,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.SignalSVM.PWMControl.Field.PWM_RatioFreq,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.SignalSVM.PWMControl.Field.PWM_Ul_ON,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.SignalSVM.PWMControl.Field.PWM_Ur_ON,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.SignalSVM.PWMControl.Field.PWM_Vl_ON,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.SignalSVM.PWMControl.Field.PWM_Vr_ON,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.SignalSVM.PWMControl.Field.PWM_Wl_ON,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.SignalSVM.PWMControl.Field.PWM_Wr_ON,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.SignalSVM.PWMControl.Field2.PWM_All_ON,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.SignalSVM.PWMControl.Field2.PWM_RatioFreq,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data16,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data32,Core_2,C2_128ms,128,,,DRCO
-BswFpgaIfIpduTx.Data8,Core_2,C2_128ms,128,,,DRCO
 FreeSpaceOfOVR,Core_0,C0_10ms_Slow,10,XCP event based,shared variable,BSW
 HvAcAp_AliveCount,Core_0,C0_1ms_TimeTask,1,,,DRCO
 HvAcIFndmtlCptAmpCalcn_AlvCntr,Core_2,C2_100u_PWM,0.1,,,DRCO
@@ -7848,23 +7006,6 @@ SftyE2eFpgaIpduRx.Data.RxA.Id.Mx2.Sig.FltA.Field.PwrSupLs,Core_1,Core_1_200us,0.
 SftyE2eFpgaIpduRx.Data.RxA.Id.Mx2.Sig.FltA.Field.PwrSupMul,Core_1,Core_1_200us,0.2,,,SSW
 SftyE2eFpgaIpduRx.Data.RxA.Id.Mx2.Sig.FltA.Field.Spare06,Core_1,Core_1_200us,0.2,,,SSW
 SftyE2eFpgaIpduRx.Data.RxA.Id.Mx2.Sig.FltA.Field.Spare07,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.Mx2.Sig.FltB.Data16,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.Mx2.Sig.FltB.Field.IgbtMidPointU,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.Mx2.Sig.FltB.Field.IgbtMidPointV,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.Mx2.Sig.FltB.Field.IgbtMidPointW,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.Mx2.Sig.FltB.Field.OverCurBat,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.Mx2.Sig.FltB.Field.OverTempCtrlBd,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.Mx2.Sig.FltB.Field.OverTempDrvBd,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.Mx2.Sig.FltB.Field.OverTempIgbt,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.Mx2.Sig.FltB.Field.OverUnderCurUl,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.Mx2.Sig.FltB.Field.OverUnderCurUr,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.Mx2.Sig.FltB.Field.OverUnderCurVl,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.Mx2.Sig.FltB.Field.OverUnderCurVr,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.Mx2.Sig.FltB.Field.OverUnderCurWl,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.Mx2.Sig.FltB.Field.OverUnderCurWr,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.Mx2.Sig.FltB.Field.OverVoltVBat,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.Mx2.Sig.FltB.Field.UnderVoltVBat,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.Mx2.Sig.FltB.Field.WdgCpld,Core_1,Core_1_200us,0.2,,,SSW
 SftyE2eFpgaIpduRx.Data.RxA.Id.Mx2.Sig.FltC.Data16,Core_1,Core_1_200us,0.2,,,SSW
 SftyE2eFpgaIpduRx.Data.RxA.Id.Mx2.Sig.FltC.Field.LowSpeedReach,Core_1,Core_1_200us,0.2,,,SSW
 SftyE2eFpgaIpduRx.Data.RxA.Id.Mx2.Sig.FltC.Field.PwmClampFlag,Core_1,Core_1_200us,0.2,,,SSW
@@ -7964,141 +7105,6 @@ SftyE2eFpgaIpduRx.Data.RxA.Id.Mx3.Sig.TempDrvBd_MSB4,Core_1,Core_1_200us,0.2,,,S
 SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Data16,Core_1,Core_1_200us,0.2,,,SSW
 SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Data32,Core_1,Core_1_200us,0.2,,,SSW
 SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Data8,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.StateRes.Data8,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.StateRes.Data8,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.Ctrl,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.Debug100To111_LSB8,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.Debug100To111_MSB4,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.Debug64To75_LSB4,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.Debug64To75_MSB8,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultA.Data16,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultA.Field.ActiveDisAc,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultA.Field.ActiveDisIn,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultA.Field.EmergencyStop,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultA.Field.IgbtH,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultA.Field.IgbtL,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultA.Field.LossComSpi,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultA.Field.PwrSupHs,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultA.Field.PwrSupLs,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultA.Field.PwrSupMul,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultA.Field.MeasCoherence,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultA.Field.Spare02,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultA.Field.Spare03,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultA.Field.Spare04,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultA.Field.Spare05,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultA.Field.Spare06,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultA.Field.Spare07,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultB.Data16,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultB.Field.IgbtMidPointU,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultB.Field.IgbtMidPointV,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultB.Field.IgbtMidPointW,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultB.Field.OverCurBat,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultB.Field.OverTempCtrlBd,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultB.Field.OverTempDrvBd,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultB.Field.OverTempIgbt,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultB.Field.OverUnderCurUl,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultB.Field.OverUnderCurUr,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultB.Field.OverUnderCurVl,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultB.Field.OverUnderCurVr,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultB.Field.OverUnderCurWl,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultB.Field.OverUnderCurWr,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultB.Field.OverVoltVBat,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultB.Field.UnderVoltVBat,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultB.Field.WdgCpld,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultC.Data16,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultC.Field.LowSpeedReach,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultC.Field.PwmClampFlag,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultC.Field.PwmParamFlag,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultC.Field.Spare00,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultC.Field.Spare03,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultC.Field.Spare05,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultC.Field.Spare06,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultC.Field.Spare07,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultC.Field.Spare08,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultC.Field.Spare09,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultC.Field.Spare10,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultC.Field.Spare11,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultC.Field.Spare12,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultC.Field.Spare13,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultC.Field.Spare14,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.FaultC.Field.Spare15,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.Id,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.M0_LSB8,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.M0_MSB4,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.M1_LSB4,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.M1_MSB8,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.StateRes.Field.CurAcq,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.StateRes.Field.ModeRes,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.StateRes.Field.PWM_RatioFreqRes,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.Id.MxA.Sig.StateRes.Field.SwitchTypeRes,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Data16,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Data32,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Data8,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.Ctrl,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.Debug100To111_LSB8,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.Debug100To111_MSB4,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.Debug64To75_LSB4,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.Debug64To75_MSB8,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultA.Data16,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultA.Field.ActiveDisAc,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultA.Field.ActiveDisIn,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultA.Field.EmergencyStop,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultA.Field.IgbtH,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultA.Field.IgbtL,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultA.Field.LossComSpi,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultA.Field.PwrSupHs,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultA.Field.PwrSupLs,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultA.Field.PwrSupMul,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultA.Field.MeasCoherence,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultA.Field.Spare02,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultA.Field.Spare03,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultA.Field.Spare04,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultA.Field.Spare05,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultA.Field.Spare06,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultA.Field.Spare07,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultB.Data16,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultB.Field.IgbtMidPointU,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultB.Field.IgbtMidPointV,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultB.Field.IgbtMidPointW,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultB.Field.OverCurBat,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultB.Field.OverTempCtrlBd,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultB.Field.OverTempDrvBd,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultB.Field.OverTempIgbt,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultB.Field.OverUnderCurUl,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultB.Field.OverUnderCurUr,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultB.Field.OverUnderCurVl,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultB.Field.OverUnderCurVr,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultB.Field.OverUnderCurWl,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultB.Field.OverUnderCurWr,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultB.Field.OverVoltVBat,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultB.Field.UnderVoltVBat,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultB.Field.WdgCpld,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultC.Data16,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultC.Field.LowSpeedReach,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultC.Field.PwmClampFlag,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultC.Field.PwmParamFlag,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultC.Field.Spare00,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultC.Field.Spare03,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultC.Field.Spare05,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultC.Field.Spare06,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultC.Field.Spare07,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultC.Field.Spare08,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultC.Field.Spare09,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultC.Field.Spare10,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultC.Field.Spare11,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultC.Field.Spare12,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultC.Field.Spare13,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultC.Field.Spare14,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.FaultC.Field.Spare15,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.Id,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.M0_LSB8,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.M0_MSB4,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.M1_LSB4,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.M1_MSB8,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.StateRes.Field.CurAcq,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.StateRes.Field.ModeRes,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.StateRes.Field.PWM_RatioFreqRes,Core_1,Core_1_200us,0.2,,,SSW
-SftyE2eFpgaIpduRx.Data.RxA.IdMx.Sig.StateRes.Field.SwitchTypeRes,Core_1,Core_1_200us,0.2,,,SSW
 SftyE2eFpgaIpduRx.Data.RxS.Data16,Core_1,Core_1_200us,0.2,,,SSW
 SftyE2eFpgaIpduRx.Data.RxS.Data32,Core_1,Core_1_200us,0.2,,,SSW
 SftyE2eFpgaIpduRx.Data.RxS.Data8,Core_1,Core_1_200us,0.2,,,SSW
@@ -8177,21 +7183,6 @@ SftyAcEvlnSetOverCurrPhaReinitSt,Core_1,Core_1_200us,0.2,,,SSW
 SftyAcEvlnSetPlausReinitSt,Core_1,Core_1_200us,0.2,,,SSW
 BswFpgaIfFltRstAckKl15,Core_2,C2_100u_PWM,0.1,,,DRCO
 BswFpgaIfFltRstAckClrDtc,Core_2,C2_100u_PWM,0.1,,,DRCO
-BswFpgaIfFrameTx.Data.TxA.Data16,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfFrameTx.Data.TxA.Data8,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.StateRes.Data8,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.StateRes.Data8,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.StateRes.Data8,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.StateRes.Data8,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.StateRes.Data8,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.StateRes.Data8,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.StateReq.Data8,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.StateReq.Field.EmergencySw,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.StateReq.Field.ModeReq,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.StateReq.Field.Operation,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.StateReq.Field.SCSpeedReady,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.StateReq.Field.SwitchType,Core_2,C2_10ms,10,,,DRCO
-BswFpgaIfIpduTx.Data.TxS.Data16,Core_2,C2_10ms,10,,,DRCO
 SftyInvActrEmgySwFltSts,Core_1,Core_1_200us,0.2,,,SSW
 SftyInvActrEmmMode,Core_1,Core_1_200us,0.2,,,SSW
 SftyInvActrSCSpdReadyFltSts,Core_1,Core_1_200us,0.2,,,SSW
@@ -8852,3 +7843,657 @@ LlswFpgaIfCalcTxProdSpi,Core_0,C0_1ms_TimeTask,10,,,LLSW
 LlswFpgaIfCalcRxProdSpi,Core_0,C0_1ms_TimeTask,10,,,LLSW
 LlswFpgaIfTxStsSpi,Core_0,C0_1ms_TimeTask,10,,,LLSW
 LlswFpgaIfRxStsSpi,Core_0,C0_1ms_TimeTask,10,,,LLSW
+BswFpgaIfRx_CtrlBd_Temp,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfRx_DrvBd_Temp,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfRx_FpgaVer_LSW,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfRx_FpgaVer_MSW,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfRx_IgbtTemp_U,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfRx_IgbtTemp_V,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfRx_IgbtTemp_W,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfRx_PwrSupply_16V_Multi,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfRx_PwrSupply_5V_HS,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfRx_PwrSupply_5V_LS,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIf_IPhaRawVal,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIf_IPhaRawVal_1,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIf_IPhaRawVal_2,Core_2,C2_1ms,1,,,DRCO
+SftyE2eFpgaIpduRx.Data.RxA.IdMx.Data16,Core_1,Core_1_200us,0.2,,,SSW
+SftyE2eFpgaIpduRx.Data.RxA.IdMx.Data32,Core_1,Core_1_200us,0.2,,,SSW
+SftyE2eFpgaIpduRx.Data.RxA.IdMx.Data8,Core_1,Core_1_200us,0.2,,,SSW
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.Ctrl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.Debug100To111_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.Debug100To111_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.Debug64To75_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.Debug64To75_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.ActiveDisAc,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.ActiveDisIn,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.EmergencyStop,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.IgbtH,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.IgbtL,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.LossComSpi,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.PwrSupHs,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.PwrSupLs,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.PwrSupMul,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.Spare01,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.Spare02,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.Spare03,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.Spare04,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.Spare05,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.Spare06,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultA.Field.Spare07,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.IgbtMidPointU,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.IgbtMidPointV,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.IgbtMidPointW,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverCurBat,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverTempCtrlBd,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverTempDrvBd,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverTempIgbt,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurUl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurUr,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurVl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurVr,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurWl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurWr,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.OverVoltVBat,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.UnderVoltVBat,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultB.Field.WdgCpld,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.LowSpeedReach,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.PwmClampFlag,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.PwmParamFlag,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare00,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare03,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare05,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare06,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare07,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare08,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare09,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare10,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare11,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare12,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare13,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare14,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.FaultC.Field.Spare15,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.Id,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.MeasCurBat_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.MeasCurBat_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.StateRes.Data8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.StateRes.Field.CurAcq,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.StateRes.Field.ModeRes,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.StateRes.Field.PWM_RatioFreqRes,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.StateRes.Field.SwitchTypeRes,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.TempIgbt_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx0.Signal.TempIgbt_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Data32,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Data8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.Ctrl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.DcLinkCtrlBd_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.DcLinkCtrlBd_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.DcLinkDrvBd_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.DcLinkDrvBd_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.Debug100To111_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.Debug100To111_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.Debug64To75_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.Debug64To75_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.ActiveDisAc,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.ActiveDisIn,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.EmergencyStop,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.IgbtH,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.IgbtL,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.LossComSpi,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.PwrSupHs,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.PwrSupLs,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.PwrSupMul,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.Spare01,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.Spare02,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.Spare03,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.Spare04,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.Spare05,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.Spare06,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultA.Field.Spare07,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.IgbtMidPointU,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.IgbtMidPointV,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.IgbtMidPointW,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverCurBat,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverTempCtrlBd,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverTempDrvBd,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverTempIgbt,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurUl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurUr,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurVl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurVr,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurWl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverUnderCurWr,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.OverVoltVBat,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.UnderVoltVBat,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultB.Field.WdgCpld,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.LowSpeedReach,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.PwmClampFlag,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.PwmParamFlag,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare00,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare03,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare05,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare06,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare07,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare08,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare09,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare10,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare11,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare12,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare13,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare14,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.FaultC.Field.Spare15,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.Id,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.StateRes.Data8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.StateRes.Field.CurAcq,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.StateRes.Field.ModeRes,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.StateRes.Field.PWM_RatioFreqRes,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx1.Signal.StateRes.Field.SwitchTypeRes,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Data32,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Data8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.Ctrl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.Debug100To111_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.Debug100To111_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.Debug64To75_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.Debug64To75_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.ActiveDisAc,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.ActiveDisIn,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.EmergencyStop,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.IgbtH,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.IgbtL,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.LossComSpi,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.PwrSupHs,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.PwrSupLs,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.PwrSupMul,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.Spare01,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.Spare02,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.Spare03,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.Spare04,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.Spare05,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.Spare06,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultA.Field.Spare07,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.IgbtMidPointU,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.IgbtMidPointV,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.IgbtMidPointW,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverCurBat,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverTempCtrlBd,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverTempDrvBd,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverTempIgbt,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurUl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurUr,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurVl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurVr,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurWl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverUnderCurWr,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.OverVoltVBat,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.UnderVoltVBat,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultB.Field.WdgCpld,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.LowSpeedReach,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.PwmClampFlag,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.PwmParamFlag,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare00,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare03,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare05,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare06,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare07,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare08,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare09,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare10,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare11,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare12,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare13,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare14,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.FaultC.Field.Spare15,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.Id,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.M1VFpgaL_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.M1VFpgaL_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.StateRes.Data8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.StateRes.Field.CurAcq,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.StateRes.Field.ModeRes,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.StateRes.Field.PWM_RatioFreqRes,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.StateRes.Field.SwitchTypeRes,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.TempCtrlBd_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx2.Signal.TempCtrlBd_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Data32,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Data8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.Ctrl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.Debug100To111_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.Debug100To111_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.Debug64To75_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.Debug64To75_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.ActiveDisAc,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.ActiveDisIn,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.EmergencyStop,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.IgbtH,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.IgbtL,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.LossComSpi,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.PwrSupHs,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.PwrSupLs,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.PwrSupMul,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.Spare01,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.Spare02,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.Spare03,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.Spare04,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.Spare05,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.Spare06,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultA.Field.Spare07,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.IgbtMidPointU,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.IgbtMidPointV,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.IgbtMidPointW,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverCurBat,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverTempCtrlBd,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverTempDrvBd,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverTempIgbt,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurUl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurUr,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurVl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurVr,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurWl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverUnderCurWr,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.OverVoltVBat,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.UnderVoltVBat,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultB.Field.WdgCpld,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.LowSpeedReach,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.PwmClampFlag,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.PwmParamFlag,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare00,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare03,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare05,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare06,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare07,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare08,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare09,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare10,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare11,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare12,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare13,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare14,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.FaultC.Field.Spare15,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.Id,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.M1VFpgaH_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.M1VFpgaH_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.StateRes.Data8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.StateRes.Field.CurAcq,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.StateRes.Field.ModeRes,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.StateRes.Field.PWM_RatioFreqRes,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.StateRes.Field.SwitchTypeRes,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.TempDrvBd_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.Mx3.Signal.TempDrvBd_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Data32,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Data8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.Ctrl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.Debug100To111_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.Debug100To111_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.Debug64To75_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.Debug64To75_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.ActiveDisAc,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.ActiveDisIn,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.EmergencyStop,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.IgbtH,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.IgbtL,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.LossComSpi,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.PwrSupHs,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.PwrSupLs,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.PwrSupMul,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare01,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare02,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare03,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare04,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare05,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare06,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultA.Field.Spare07,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.IgbtMidPointU,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.IgbtMidPointV,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.IgbtMidPointW,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverCurBat,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverTempCtrlBd,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverTempDrvBd,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverTempIgbt,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurUl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurUr,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurVl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurVr,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurWl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverUnderCurWr,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.OverVoltVBat,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.UnderVoltVBat,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultB.Field.WdgCpld,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.LowSpeedReach,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.PwmClampFlag,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.PwmParamFlag,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare00,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare03,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare05,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare06,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare07,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare08,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare09,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare10,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare11,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare12,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare13,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare14,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.FaultC.Field.Spare15,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.Id,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.M0_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.M0_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.M1_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.M1_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.StateRes.Data8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.StateRes.Field.CurAcq,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.StateRes.Field.ModeRes,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.StateRes.Field.PWM_RatioFreqRes,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.Id.MxA.Signal.StateRes.Field.SwitchTypeRes,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Data32,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Data8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.Ctrl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.Debug100To111_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.Debug100To111_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.Debug64To75_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.Debug64To75_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.ActiveDisAc,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.ActiveDisIn,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.EmergencyStop,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.IgbtH,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.IgbtL,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.LossComSpi,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.PwrSupHs,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.PwrSupLs,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.PwrSupMul,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.Spare01,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.Spare02,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.Spare03,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.Spare04,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.Spare05,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.Spare06,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultA.Field.Spare07,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.IgbtMidPointU,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.IgbtMidPointV,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.IgbtMidPointW,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.OverCurBat,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.OverTempCtrlBd,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.OverTempDrvBd,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.OverTempIgbt,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.OverUnderCurUl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.OverUnderCurUr,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.OverUnderCurVl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.OverUnderCurVr,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.OverUnderCurWl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.OverUnderCurWr,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.OverVoltVBat,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.UnderVoltVBat,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultB.Field.WdgCpld,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.LowSpeedReach,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.PwmClampFlag,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.PwmParamFlag,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.Spare00,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.Spare03,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.Spare05,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.Spare06,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.Spare07,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.Spare08,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.Spare09,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.Spare10,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.Spare11,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.Spare12,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.Spare13,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.Spare14,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.FaultC.Field.Spare15,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.Id,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.M0_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.M0_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.M1_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.M1_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.StateRes.Data8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.StateRes.Field.CurAcq,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.StateRes.Field.ModeRes,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.StateRes.Field.PWM_RatioFreqRes,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxA.IdMx.Signal.StateRes.Field.SwitchTypeRes,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxS.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxS.Data32,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxS.Data8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxS.Signal.Crc,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxS.Signal.FS_SOE,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxS.Signal.FS_SOL,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxS.Signal.FS_TXA,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxS.Signal.FS_TXS,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxS.Signal.GridVoltU_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxS.Signal.GridVoltU_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxS.Signal.GridVoltV_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxS.Signal.GridVoltV_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxS.Signal.GridVoltW_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxS.Signal.GridVoltW_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxS.Signal.HalfCoilCur_Ul_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxS.Signal.HalfCoilCur_Ul_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxS.Signal.HalfCoilCur_Ur_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxS.Signal.HalfCoilCur_Ur_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxS.Signal.HalfCoilCur_Vl_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxS.Signal.HalfCoilCur_Vl_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxS.Signal.HalfCoilCur_Vr_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxS.Signal.HalfCoilCur_Vr_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxS.Signal.HalfCoilCur_Wl_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxS.Signal.HalfCoilCur_Wl_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxS.Signal.HalfCoilCur_Wr_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data.RxS.Signal.HalfCoilCur_Wr_MSB4,Core_2,C2_1ms,1,,,DRCOr_MSB4
+BswFpgaIfIpduRx.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data32,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduRx.Data8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Data32,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Data8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.Ctrl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.Debug_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.Debug_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.ActiveDisAc,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.ActiveDisIn,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.EmergencyStop,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.IgbtH,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.IgbtL,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.LossComSpi,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.PwrSupHs,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.PwrSupLs,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.PwrSupMul,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.Spare01,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.Spare02,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.Spare03,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.Spare04,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.Spare05,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.Spare06,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultA.Field.Spare07,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.IgbtMidPointU,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.IgbtMidPointV,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.IgbtMidPointW,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverCurBat,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverTempCtrlBd,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverTempDrvBd,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverTempIgbt,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurUl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurUr,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurVl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurVr,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurWl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverUnderCurWr,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.OverVoltVBat,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.UnderVoltVBat,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.FaultB.Field.WdgCpld,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.Id,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M0PwmMinDutyCycle_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M0PwmMinDutyCycle_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M1Id0Spare_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M1Id0Spare_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M2PwmFreq_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M2PwmFreq_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M3PwmDeadtime_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M3PwmDeadtime_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M4Id0Spare_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M4Id0Spare_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M5PwmInitValUl_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M5PwmInitValUl_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M6PwmInitValUr_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.M6PwmInitValUr_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.StateReq.Data8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.StateReq.Field.EmergencySw,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.StateReq.Field.ModeReq,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.StateReq.Field.Operation,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.StateReq.Field.SCSpeedReady,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx0.Signal.StateReq.Field.SwitchType,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Data32,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Data8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.Ctrl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.Debug_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.Debug_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.ActiveDisAc,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.ActiveDisIn,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.EmergencyStop,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.IgbtH,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.IgbtL,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.LossComSpi,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.PwrSupHs,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.PwrSupLs,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.PwrSupMul,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.Spare01,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.Spare02,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.Spare03,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.Spare04,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.Spare05,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.Spare06,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.FaultA.Field.Spare07,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.Id,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M0PwmMaxDutyCycle_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M0PwmMaxDutyCycle_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M1Id1Spare_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M1Id1Spare_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M2PwmInitValVl_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M2PwmInitValVl_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M3PwmInitValVr_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M3PwmInitValVr_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M4PwmInitValWl_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M4PwmInitValWl_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M5PwmInitValWr_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M5PwmInitValWr_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M6Id1Spare_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.M6Id1Spare_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.StateReq.Data8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.StateReq.Field.EmergencySw,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.StateReq.Field.ModeReq,Core_2,C2_1ms,1,,,DRCO,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.StateReq.Field.Operation,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.StateReq.Field.SCSpeedReady,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx1.Signal.StateReq.Field.SwitchType,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Data32,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Data8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.Ctrl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.Debug_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.Debug_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.ActiveDisAc,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.ActiveDisIn,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.EmergencyStop,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.IgbtH,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.IgbtL,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.LossComSpi,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.PwrSupHs,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.PwrSupLs,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.PwrSupMul,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.Spare01,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.Spare02,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.Spare03,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.Spare04,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.Spare05,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.Spare06,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.FaultA.Field.Spare07,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.Id,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M0IFilAverage,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M0Id2Spare06To11,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M0VFilAverage,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M1Id2Spare_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M1Id2Spare_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M2OverCurThBat_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M2OverCurThBat_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M3OverVoltVbatTh_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M3OverVoltVbatTh_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M4Id2Spare_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M4Id2Spare_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M5Id2Spare_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M5Id2Spare_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M6Id2Spare_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.M6Id2Spare_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.PwrSupDrvInh,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.PwrSupHbrInh,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.StateReq.Data8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.StateReq.Field.EmergencySw,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.StateReq.Field.ModeReq,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.StateReq.Field.Operation,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.StateReq.Field.SCSpeedReady,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx2.Signal.StateReq.Field.SwitchType,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Ctrl,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Data32,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Data8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Debug_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Debug_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.FaultA.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.FaultA.Field.ActiveDisAc,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.FaultA.Field.ActiveDisIn,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.FaultA.Field.EmergencyStop,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.FaultA.Field.IgbtH,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.FaultA.Field.IgbtL,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.FaultA.Field.LossComSpi,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.FaultA.Field.PwrSupHs,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.FaultA.Field.PwrSupLs,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.FaultA.Field.PwrSupMul,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.FaultA.Field.Spare01,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.FaultA.Field.Spare02,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.FaultA.Field.Spare03,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.FaultA.Field.Spare04,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.FaultA.Field.Spare05,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.FaultA.Field.Spare06,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.FaultA.Field.Spare07,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.Id,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.M0DebugL_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.M0DebugL_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.M1DebugH_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.M1DebugH_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.M2OverCurThMot_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.M2OverCurThMot_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.M3ActiveDisDur_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.M3ActiveDisDur_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.M4SynchroDelay_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.M4SynchroDelay_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.M5Id3Spare_LSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.M5Id3Spare_MSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.M6Id3Spare_LSB4,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.M6Id3Spare_MSB8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.StateRes.Data8,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.StateRes.Field.CurAcq,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.StateRes.Field.ModeRes,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.StateRes.Field.PWM_RatioFreqRes,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data.TxA.Id.Mx3.StateRes.Field.SwitchTypeRes,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data16,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data32,Core_2,C2_1ms,1,,,DRCO
+BswFpgaIfIpduTx.Data8,Core_2,C2_1ms,1,,,DRCO
diff --git a/src/fw_cu/workspace/Tresos/nextgen/config/CanIf.xdm b/src/fw_cu/workspace/Tresos/nextgen/config/CanIf.xdm
index 8e1126435..f2509e9e4 100644
--- a/src/fw_cu/workspace/Tresos/nextgen/config/CanIf.xdm
+++ b/src/fw_cu/workspace/Tresos/nextgen/config/CanIf.xdm
@@ -1599,7 +1599,7 @@
                              value="536870911">
                         <a:a name="IMPORTER_INFO" value="@DEF"/>
                       </d:var>
-                      <d:var name="CanIfRxPduDlc" type="INTEGER" value="0">
+                      <d:var name="CanIfRxPduDlc" type="INTEGER" value="8">
                         <a:a name="IMPORTER_INFO" value="@DEF"/>
                       </d:var>
                       <d:var name="CanIfRxPduId" type="INTEGER" value="14">
diff --git a/src/fw_cu/workspace/Tresos/nextgen/config/SystemModel2.tdb b/src/fw_cu/workspace/Tresos/nextgen/config/SystemModel2.tdb
index 85b98b6ab..0067f1eb7 100644
Binary files a/src/fw_cu/workspace/Tresos/nextgen/config/SystemModel2.tdb and b/src/fw_cu/workspace/Tresos/nextgen/config/SystemModel2.tdb differ
'

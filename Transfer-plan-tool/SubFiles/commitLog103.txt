b'commit 2ea4421be0ff0ae4bd32410fc5a915db38f52d09
Author: Frank IRMISCH (JV EXT) <frank.irmisch.jv.ext@valeo.com>
Date:   Wed Dec 1 14:28:36 2021 +0100

    $100kW-46091$ - Fix implementation review findings for B02
    
    C2cComDrvCtrl
    RslvrOffsDetn
    EncCalcn
    HvAcIFndmtlCptAmpCalcn
    IvtrIgbtJcnTempDrtg
    IvtrIgbtNtcTempDrtg
    IvtrIgbtJcnTempCooltTempDeltaDrtg_Wrpr
    IvtrHvDcI2tDrtg
    IvtrHvAcI2tDrtg
    HvAcIMaxCalcn
    IvtrCooltTempDrtg
    IvtrDcLinkTempDrtg
    IpmPwrLossCalcn
    HvAcIMeas
    HvDcICalcn
    
    Change-Id: Id79e6ecf7ea21ae274be6061ab085526bd1ef45f

diff --git a/src/fw_cu/Components/Cmn/Com/C2cCom/src/C2cComDrvCtrl.c b/src/fw_cu/Components/Cmn/Com/C2cCom/src/C2cComDrvCtrl.c
index 28a4275cb..359ce4cc4 100644
--- a/src/fw_cu/Components/Cmn/Com/C2cCom/src/C2cComDrvCtrl.c
+++ b/src/fw_cu/Components/Cmn/Com/C2cCom/src/C2cComDrvCtrl.c
@@ -102,20 +102,20 @@
 FUNC(void, DRVCTRL_C2C_COM_CODE) DrvCtrlC2c_Send1ms(void)
 {
    /* actual speed */
-   DrvCtrlC2cData.SpdMeclFild10 = RotorAgSpdCalcnSpdMeclFild10;
+   DrvCtrlC2cData.SpdMeclFild10 = RotorAgSpdCalcnSpdMeclFild10; /*  mechanical angular speed filtered for usage in 10ms time slice */
    DrvCtrlC2cData.SpdMeclRpmFild1 = RotorAgSpdCalcnSpdMeclFild1 * SYSCON_RAD_TO_RPM; /* Spd*60/(2PI) */
    DrvCtrlC2cData.SpdMeclRpmFild10 = RotorAgSpdCalcnSpdMeclFild10 * SYSCON_RAD_TO_RPM; /* Spd*60/(2PI) */
-   DrvCtrlC2cData.SpdElecFild10 = RotorAgSpdCalcnSpdElecFild10;
-   DrvCtrlC2cData.SpdElecFild1Ivs = RotorAgSpdCalcnSpdMeclFild1Ivs;
-   DrvCtrlC2cData.SpdActIsVld = (uint8)RotorAgSpdCalcnSpdVld; /* Valid status of actual speed */
+   DrvCtrlC2cData.SpdElecFild10 = RotorAgSpdCalcnSpdElecFild10; /* electrical speed filtered for usage in 10ms time slice */
+   DrvCtrlC2cData.SpdElecFild1Ivs = RotorAgSpdCalcnSpdMeclFild1Ivs; /* inverse mechanical angular speed filtered for usage in 1ms time slice */
+   DrvCtrlC2cData.SpdActIsVld = (uint8)RotorAgSpdCalcnSpdVld; /* valid status of actual speed */
 
    /* actual torque */
-   DrvCtrlC2cData.TqAct = TqCtrlTqActFild;
-   DrvCtrlC2cData.TrqSptOut = TqMgrTqSp;
+   DrvCtrlC2cData.TqAct = TqCtrlTqActFild; /* HvDc current filtered for usage in 10ms timeslice */
+   DrvCtrlC2cData.TrqSptOut = TqMgrTqSp; /* HvDc current filtered for usage in 10ms timeslice */
 
    /* DC current */
    DrvCtrlC2cData.IDcAct = HvDcICalcnIDc;
-   DrvCtrlC2cData.IDcActFild10 = HvDcICalcnIDcFild10;
+   DrvCtrlC2cData.IDcActFild10 = HvDcICalcnIDcFild10; /* HvDc current filtered for usage in 10ms timeslice */
    /* set valid signal when called, currently no sensor-valid-information available */
    DrvCtrlC2cData.IDcActIsVld = 1u; /* Valid status of DC link current */
 
@@ -123,17 +123,17 @@ FUNC(void, DRVCTRL_C2C_COM_CODE) DrvCtrlC2c_Send1ms(void)
    DrvCtrlC2cData.HvAcICalcnIAbsFild1Sum = HvAcICalcnIAbsFild1Sum;
 
    /* DC voltage */
-   DrvCtrlC2cData.UDcActFild1 = HvDcUMeasUDcFild1;
-   DrvCtrlC2cData.UDcActFild2 = HvDcUMeasUDcFild2;
-   DrvCtrlC2cData.UDcActFild10 = HvDcUMeasUDcFild10;
+   DrvCtrlC2cData.UDcActFild1 = HvDcUMeasUDcFild1; /* Measured DC link voltage (filtered for 1 ms time slices) */
+   DrvCtrlC2cData.UDcActFild2 = HvDcUMeasUDcFild2;  /* Measured DC link voltage (filtered for 2 ms time slices) */
+   DrvCtrlC2cData.UDcActFild10 = HvDcUMeasUDcFild10;  /* Measured DC link voltage (filtered for 10 ms time slices) */
    /* set valid signal when called, currently no sensor-valid-information available */
    DrvCtrlC2cData.UDcActIsVld = 1u; /* Valid status of DC link voltage */
 
    /* Power */
-   DrvCtrlC2cData.PwrLossIvtr = IvtrThermMdlPwrLossIvtr;
+   DrvCtrlC2cData.PwrLossIvtr = IvtrThermMdlPwrLossIvtr; /* Total inverter power loss */
    DrvCtrlC2cData.PwrLossEmAndCable = EmPwrLossCalcnPwrLossEmAndCable; /* motor and cable power losses (w/o inverter) in W */
    DrvCtrlC2cData.EmPwrLossCalcnTqLossFric = EmPwrLossCalcnTqLossFric; /* Torque losses due to mechanical and magnetic losses */
-   DrvCtrlC2cData.PwrElecAct = TqCtrlAcPwrElec;
+   DrvCtrlC2cData.PwrElecAct = TqCtrlAcPwrElec; /* electric power */
 
    /* Coolant inlet Temperature */
    DrvCtrlC2cData.IvtrCooltInlTemp = IvtrThermMdlCooltInlTemp;
@@ -151,11 +151,11 @@ FUNC(void, DRVCTRL_C2C_COM_CODE) DrvCtrlC2c_Send1ms(void)
    /* Actual absolute value of the maximum allowed mechanical speed in pulse off state */
    DrvCtrlC2cData.SpoMaxSpdAllwd = SpoMaxEmSpdCalcnSpdLim * SYSCON_RAD_TO_RPM;
 
-   DrvCtrlC2cData.RslvrOffsEmf = RslvrOffsDetnBackEmfRslvrOffsAgElec;
-   DrvCtrlC2cData.RslvrOffsHf = RslvrOffsDetnHfRslvrOffsAgElec;
-   DrvCtrlC2cData.StsRslvrCalib = (C2cStsCalibType)RslvrOffsDetnCalSts;
-   DrvCtrlC2cData.RslvrOffsFltInv = RslvrOffsDetnErrStsInv;
-   DrvCtrlC2cData.RslvrOffsFltEm = RslvrOffsDetnErrStsEm;
+   DrvCtrlC2cData.RslvrOffsEmf = RslvrOffsDetnBackEmfRslvrOffsAgElec; /* calculated electrical resolver offset angle based on back emf method */
+   DrvCtrlC2cData.RslvrOffsHf = RslvrOffsDetnHfRslvrOffsAgElec; /* calculated electrical resolver offset angle based on HF method */
+   DrvCtrlC2cData.StsRslvrCalib = (C2cStsCalibType)RslvrOffsDetnCalSts; /* status of resolver offset calibration */
+   DrvCtrlC2cData.RslvrOffsFltInv = RslvrOffsDetnErrStsInv; /* tatus of resolver offset calibration */
+   DrvCtrlC2cData.RslvrOffsFltEm = RslvrOffsDetnErrStsEm; /* tatus of resolver offset calibration */
    DrvCtrlC2cData.BackEmfPmFluxEstim = RslvrOffsDetnBackEmfPmFluxEstim; /* CZ: Shouldn\'t that be used by BSW for a DID ??? */
 #endif /* SYSCON_FTR_PSM == 1 */
 
@@ -209,30 +209,35 @@ FUNC(void, DRVCTRL_C2C_COM_CODE) DrvCtrlC2c_Send1ms(void)
    /* Phase_W_current */
    DrvCtrlC2cData.IPhaW = HvAcIMeasIPha[SYSDEF_PHA_W];
 
-   DrvCtrlC2cData.RslvrOffsetSin          = ResApp_Output_Trace.OffsetSin;
-   DrvCtrlC2cData.RslvrOffsetCos          = ResApp_Output_Trace.OffsetCos;
-   DrvCtrlC2cData.RslvrGainSin            = ResApp_Output_Trace.GainSin;
-   DrvCtrlC2cData.RslvrGainCos            = ResApp_Output_Trace.GainCos;
+   DrvCtrlC2cData.RslvrOffsetSin          = ResApp_Output_Trace.OffsetSin; /* correction value of the offset in Y direction */
+   DrvCtrlC2cData.RslvrOffsetCos          = ResApp_Output_Trace.OffsetCos; /* correction value of the offset in X direction */
+   DrvCtrlC2cData.RslvrGainSin            = ResApp_Output_Trace.GainSin; /* actual amplitude of the sinus  */
+   DrvCtrlC2cData.RslvrGainCos            = ResApp_Output_Trace.GainCos; /* actual amplitude of the sinus */
 
-   DrvCtrlC2cData.SpdMeclOutp             = RotorAgSpdCalcnSpdMecl;
-   DrvCtrlC2cData.AgMeclOutp              = EncFilAgMeclFilDelta;
+   DrvCtrlC2cData.SpdMeclOutp             = RotorAgSpdCalcnSpdMecl; /* actual amplitude of the sinus  */
+   DrvCtrlC2cData.AgMeclOutp              = EncFilAgMeclFilDelta; /* delta filtered physical mechanical angle */
 
+   /* total inverter power loss per phase U, V and W */
    DrvCtrlC2cData.PwrLossTotPhaU          = IvtrThermMdlIvtrTotPwrLossPha[SYSDEF_PHA_U];
    DrvCtrlC2cData.PwrLossTotPhaV          = IvtrThermMdlIvtrTotPwrLossPha[SYSDEF_PHA_V];
    DrvCtrlC2cData.PwrLossTotPhaW          = IvtrThermMdlIvtrTotPwrLossPha[SYSDEF_PHA_W];
 
+   /* bottom IGBT junction temperature per phase U, V and W */
    DrvCtrlC2cData.TempIgbtPhaUBotm        = IvtrThermMdlJcnTempPhaBot[SYSDEF_PHA_U];
    DrvCtrlC2cData.TempIgbtPhaVBotm        = IvtrThermMdlJcnTempPhaBot[SYSDEF_PHA_V];
    DrvCtrlC2cData.TempIgbtPhaWBotm        = IvtrThermMdlJcnTempPhaBot[SYSDEF_PHA_W];
 
+   /*top IGBT junction temperature per phase U, V and W */
    DrvCtrlC2cData.TempIgbtPhaUTop         = IvtrThermMdlJcnTempPhaTop[SYSDEF_PHA_U];
    DrvCtrlC2cData.TempIgbtPhaVTop         = IvtrThermMdlJcnTempPhaTop[SYSDEF_PHA_V];
    DrvCtrlC2cData.TempIgbtPhaWTop         = IvtrThermMdlJcnTempPhaTop[SYSDEF_PHA_W];
 
+   /*top IGBT diode temperature per phase U, V and W */
    DrvCtrlC2cData.TempDiodePhaUTop        = IvtrThermMdlDiodeTempPhaTop[SYSDEF_PHA_U];
    DrvCtrlC2cData.TempDiodePhaVTop        = IvtrThermMdlDiodeTempPhaTop[SYSDEF_PHA_V];
    DrvCtrlC2cData.TempDiodePhaWTop        = IvtrThermMdlDiodeTempPhaTop[SYSDEF_PHA_W];
 
+   /*bottom IGBT diode temperature per phase U, V and W */
    DrvCtrlC2cData.TempDiodePhaUBotm       = IvtrThermMdlDiodeTempPhaBot[SYSDEF_PHA_U];
    DrvCtrlC2cData.TempDiodePhaVBotm       = IvtrThermMdlDiodeTempPhaBot[SYSDEF_PHA_V];
    DrvCtrlC2cData.TempDiodePhaWBotm       = IvtrThermMdlDiodeTempPhaBot[SYSDEF_PHA_W];
@@ -271,6 +276,7 @@ FUNC(void, DRVCTRL_C2C_COM_CODE) DrvCtrlC2c_Send10ms(void)
    /* Estimated Em Airgap temperature  */
    DrvCtrlC2cData.InvTempAct.EmTemp3 = PmTempCalcnThermNetWindgTempSnrAvg;
 
+   /* Thermal netwok fault */
    DrvCtrlC2cData.InvTempAct.EmTempVld = PmTempCalcnThermNetPmTempVld;
 #endif /* SYSCON_FTR_PSM == 1 */
 
@@ -284,6 +290,7 @@ FUNC(void, DRVCTRL_C2C_COM_CODE) DrvCtrlC2c_Send10ms(void)
    /* Difference between estimated output value PMTempThermNet and winding temperature */
    DrvCtrlC2cData.InvTempAct.EmTemp2 = AsmThermMdlTempDifWindg;
 
+   /* Thermal netwok fault */
    DrvCtrlC2cData.InvTempAct.EmTempVld = AsmThermMdlTempVld;
 #endif /* SYSCON_FTR_ASM == 1 */
 
@@ -292,14 +299,14 @@ FUNC(void, DRVCTRL_C2C_COM_CODE) DrvCtrlC2c_Send10ms(void)
    DrvCtrlC2cData.InvTempAct.AcI2tCntr2           = IvtrHvAcI2tDrtgI2tCntrAct2; /* AC I2t counter value 2 */
    DrvCtrlC2cData.InvTempAct.DcLinkI2tCntr1       = IvtrHvDcI2tDrtgI2tCntrAct1; /* DC I2t counter value 1 */
    DrvCtrlC2cData.InvTempAct.DcLinkI2tCntr2       = IvtrHvDcI2tDrtgI2tCntrAct2; /* DC I2t counter value 2 */
-   DrvCtrlC2cData.InvTempAct.AcI2tCntrVld         = TRUE;
-   DrvCtrlC2cData.InvTempAct.DcLinkI2tCntrVld     = TRUE;
-   DrvCtrlC2cData.InvTempAct.DcBusBarTemp         = IvtrDcLinkThermMdlBusBarTemp;
-   DrvCtrlC2cData.InvTempAct.DcLinkCpTemp         = IvtrDcLinkThermMdlCpTemp;
-   DrvCtrlC2cData.InvTempAct.DcLinkTempVld        = TRUE;
-   DrvCtrlC2cData.InvTempAct.AcBusBarTempEm       = IvtrHvAcBusBarThermMdlBusBarTempEm;
-   DrvCtrlC2cData.InvTempAct.AcBusBarTempIgbt     = IvtrHvAcBusBarThermMdlBusBarTempIgbt;
-   DrvCtrlC2cData.InvTempAct.AcBusBarTempVld      = TRUE;
+   DrvCtrlC2cData.InvTempAct.AcI2tCntrVld         = TRUE; /* AC I2T counter valid flag */
+   DrvCtrlC2cData.InvTempAct.DcLinkI2tCntrVld     = TRUE; /* DcLink I2T counter valid flag */
+   DrvCtrlC2cData.InvTempAct.DcBusBarTemp         = IvtrDcLinkThermMdlBusBarTemp; /* Calculated HV AC bus bar temperature (EM-side) */
+   DrvCtrlC2cData.InvTempAct.DcLinkCpTemp         = IvtrDcLinkThermMdlCpTemp; /* Calculated HV AC bus bar temperature (EM-side) */
+   DrvCtrlC2cData.InvTempAct.DcLinkTempVld        = TRUE; /* DcLink temperature valid flag */
+   DrvCtrlC2cData.InvTempAct.AcBusBarTempEm       = IvtrHvAcBusBarThermMdlBusBarTempEm; /* Calculated HV AC bus bar temperature (EM-side) */
+   DrvCtrlC2cData.InvTempAct.AcBusBarTempIgbt     = IvtrHvAcBusBarThermMdlBusBarTempIgbt; /* Calculated HV AC bus bar temperature (IGBT-side)  */
+   DrvCtrlC2cData.InvTempAct.AcBusBarTempVld      = TRUE; /* Ac Busbar temperature valid flag */
 
    /* Performance Indicator signals to send via CAN */
    /* Convert absolute values to percentage values as per requirements (VW) */
diff --git a/src/fw_cu/Components/Inv/LimAndDrt/HvAcILimCalcn/src/HvAcILimCalcn.c b/src/fw_cu/Components/Inv/LimAndDrt/HvAcILimCalcn/src/HvAcILimCalcn.c
index 5f9209c5e..f4f10d917 100644
--- a/src/fw_cu/Components/Inv/LimAndDrt/HvAcILimCalcn/src/HvAcILimCalcn.c
+++ b/src/fw_cu/Components/Inv/LimAndDrt/HvAcILimCalcn/src/HvAcILimCalcn.c
@@ -124,9 +124,9 @@ FUNC(void, HVACILIMCALCN_CODE) HvAcILimCalcn_Run1ms(void)
 
    /* HvAcIMax current limit request based on external limitation  */
    HvAcIMaxCalcnSlow_InputData.ReqIAcExtLim \t\t   = (boolean)BswC2cData.ExtdTqLimReq;
-   /* CZ: FIXME: 20% AC max limit */
+   /* 20% AC max limit */
    HvAcIMaxCalcnSlow_InputData.ReqIAcMaxLim1 \t\t= DrvCtrlErrDebFctInhbnSts.B.FctIdIacMaxLim20;
-   /* CZ: FIXME: 50% AC max limit */
+   /* 50% AC max limit */
    HvAcIMaxCalcnSlow_InputData.ReqIAcMaxLim2 \t\t= DrvCtrlErrDebFctInhbnSts.B.FctIdIacMaxLim50;
    /* 0% AC max limit */
    HvAcIMaxCalcnSlow_InputData.ReqIAcMaxLim3 \t\t= DrvCtrlErrDebFctInhbnSts.B.FctIdIacMaxLim0;
@@ -178,6 +178,7 @@ FUNC(void, HVACILIMCALCN_CODE) HvAcILimCalcn_Run1ms(void)
    /* Call the cyclic function */
    HvAcIMaxCalcn_Slow();
 
+   /* Maximal current for the power performance indicator calculation */
    HvAcILimCalcnIMaxPrfmncIndcrPwr = HvAcIMaxCalcnSlow_OutputData.HvAcIMaxRef;
 
    /************** Call 3: Temperature-based deratings ******************/
@@ -195,6 +196,7 @@ FUNC(void, HVACILIMCALCN_CODE) HvAcILimCalcn_Run1ms(void)
   /* Call the cyclic function */
    HvAcIMaxCalcn_Slow();
 
+   /* Maximal current for the temperature performance indicator calculation */
    HvAcILimCalcnIMaxPrfmncIndcrTemp = HvAcIMaxCalcnSlow_OutputData.HvAcIMaxRef;
 
    /************** Call 4: Everything ******************/
diff --git a/src/fw_cu/Components/Inv/LimAndDrt/IvtrCooltTempDrtg/src/IvtrCooltTempDrtg_Wrpr.c b/src/fw_cu/Components/Inv/LimAndDrt/IvtrCooltTempDrtg/src/IvtrCooltTempDrtg_Wrpr.c
index 07cddc21b..3be294896 100644
--- a/src/fw_cu/Components/Inv/LimAndDrt/IvtrCooltTempDrtg/src/IvtrCooltTempDrtg_Wrpr.c
+++ b/src/fw_cu/Components/Inv/LimAndDrt/IvtrCooltTempDrtg/src/IvtrCooltTempDrtg_Wrpr.c
@@ -81,7 +81,7 @@ FUNC(void, IVTRCOOLTTEMPDRTG_CODE) IvtrCooltTempDrtg_Run(void)
    IvtrCooltTempDrtgMonrSt = (0U != IvtrCooltTempDrtg_OutputData.ErrSts) ?
                ERR_DEB_MONR_STS_FAILED : ERR_DEB_MONR_STS_PASSED; /* Error status */
    IvtrCooltTempDrtgFac = IvtrCooltTempDrtg_OutputData.DrtgFactor; /* Derating factor */
-   IvtrCooltTempDrtgSts = IvtrCooltTempDrtg_OutputData.DrtgSts;
+   IvtrCooltTempDrtgSts = IvtrCooltTempDrtg_OutputData.DrtgSts; /* Derating status (derating factor < 1) */
 
    return;
 }
diff --git a/src/fw_cu/Components/Inv/LimAndDrt/IvtrDcLinkTempDrtg/src/IvtrDcLinkTempDrtg_Wrpr.c b/src/fw_cu/Components/Inv/LimAndDrt/IvtrDcLinkTempDrtg/src/IvtrDcLinkTempDrtg_Wrpr.c
index c3f294c84..85fe0da47 100644
--- a/src/fw_cu/Components/Inv/LimAndDrt/IvtrDcLinkTempDrtg/src/IvtrDcLinkTempDrtg_Wrpr.c
+++ b/src/fw_cu/Components/Inv/LimAndDrt/IvtrDcLinkTempDrtg/src/IvtrDcLinkTempDrtg_Wrpr.c
@@ -67,7 +67,7 @@ FUNC(void, IVTRDCLINKTEMPDRTG_CODE) IvtrDcLinkTempDrtg_Run(void)
 {
    /* FID handling: 1=Function inhibited, 0=Normal operation (boolean) */  
 /* comments code for new FM v1.1.0*/
-#if 0
+#if FTR_SNG_PWM_INTRPT == 0
    DCLinkCapTempDrtg_InputData.FidDCLinkCapTempDrtgInhbn = DrvCtrlErrDebFctInhbnSts.B.FctIdDrtgIvtrDcLinkCapTemp;
 #else
    DCLinkCapTempDrtg_InputData.FidDCLinkCapTempDrtgInhbn = FALSE;
diff --git a/src/fw_cu/Components/Inv/LimAndDrt/IvtrHvAcI2tDrtg/src/IvtrHvAcI2tDrtg_Wrpr.c b/src/fw_cu/Components/Inv/LimAndDrt/IvtrHvAcI2tDrtg/src/IvtrHvAcI2tDrtg_Wrpr.c
index 52c73f13a..28bcd97fc 100644
--- a/src/fw_cu/Components/Inv/LimAndDrt/IvtrHvAcI2tDrtg/src/IvtrHvAcI2tDrtg_Wrpr.c
+++ b/src/fw_cu/Components/Inv/LimAndDrt/IvtrHvAcI2tDrtg/src/IvtrHvAcI2tDrtg_Wrpr.c
@@ -120,8 +120,6 @@ FUNC(void, IVTRHVACI2TDRTG_CODE) IvtrHvAcI2tDrtg_Run(void)
    IvtrHvAcI2tDrtgPwmFrqDrtgReq = IvtrHvAcI2tDrtg_OutputData.PwmFrqDrtgReq; /* Request pwm frequency derating (= 1) either if I2tCntrAct1 > I2tCntrThdForPwmFrqDrtgReq1 or if I2tCntrAct2 > I2tCntrThdForPwmFrqDrtgReq2 */
    IvtrHvAcI2tDrtgPerfFac = IvtrHvAcI2tDrtg_OutputData.IvtrHvAcI2tDrtgPerfFac; /* HV AC derating factor for performance indicator calculation */
 
-   /* IvtrHvAcI2tDrtgSts = IvtrHvAcI2tDrtg_OutputData.DrtgSts;*/ /* The derating status is set (= 1) either if I2tCntrAct1 >= I2tCntrStrtDrtg1 or if I2tCntrAct2 >= I2tCntrStrtDrtg2 */
-
    if(TRUE == IvtrHvAcI2tDrtg_OutputData.ErrSts)
    {
       IvtrHvAcI2tDrtgMonrSt = ERR_DEB_MONR_STS_FAILED; /* I2T Status Monitoring */
@@ -130,8 +128,12 @@ FUNC(void, IVTRHVACI2TDRTG_CODE) IvtrHvAcI2tDrtg_Run(void)
    {
       IvtrHvAcI2tDrtgMonrSt = ERR_DEB_MONR_STS_PASSED; /* I2T Status Monitoring */
    }
+
+   /* comments code for new FM v1.1.0*/
+#if FTR_SNG_PWM_INTRPT == 0
    /* AC I2t Derating functionality failure fault monitor */
-   /*DrvCtrlErrDeb_SetEventStatus(ERR_ID_INV_IAC_TEMP_HWP, IvtrHvAcI2tDrtgMonrSt);*/
+   DrvCtrlErrDeb_SetEventStatus(ERR_ID_INV_IAC_TEMP_HWP, IvtrHvAcI2tDrtgMonrSt);
+#endif
 
    return;
 }
diff --git a/src/fw_cu/Components/Inv/LimAndDrt/IvtrHvDcI2tDrtg/src/IvtrHvDcI2tDrtg_Wrpr.c b/src/fw_cu/Components/Inv/LimAndDrt/IvtrHvDcI2tDrtg/src/IvtrHvDcI2tDrtg_Wrpr.c
index 0c42ab096..36ad223d9 100644
--- a/src/fw_cu/Components/Inv/LimAndDrt/IvtrHvDcI2tDrtg/src/IvtrHvDcI2tDrtg_Wrpr.c
+++ b/src/fw_cu/Components/Inv/LimAndDrt/IvtrHvDcI2tDrtg/src/IvtrHvDcI2tDrtg_Wrpr.c
@@ -112,9 +112,7 @@ FUNC(void, IVTRHVDCI2TDRTG_CODE) IvtrHvDcI2tDrtg_Run(void)
    IvtrHvDcI2tDrtgI2tCntrAct1 = IvtrHvDcI2tDrtg_OutputData.I2tCntrAct1; /* Actual I2t value of Curve 1 */
    IvtrHvDcI2tDrtgI2tCntrAct2 = IvtrHvDcI2tDrtg_OutputData.I2tCntrAct2; /* Actual I2t value of Curve 2 */
    IvtrHvDcI2tDrtgPwmFrqDrtgReq = IvtrHvDcI2tDrtg_OutputData.PwmFrqDrtgReq; /* Request for pwm frequency derating when I2t counter exceeds  */
-   IvtrHvDcI2tDrtgPerfFac = IvtrHvDcI2tDrtg_OutputData.IvtrHvDcI2tDrtgPerfFac /* HV DC derating factor for performance indicator calculation */
-
-    /* = IvtrHvDcI2tDrtg_OutputData.DrtgSts */ /* Description: The derating status is set (= 1) either if I2tCntrAct1 >= I2tCntrStrtDrtg1 or if I2tCntrAct2 >= I2tCntrStrtDrtg2. */;
+   IvtrHvDcI2tDrtgPerfFac = IvtrHvDcI2tDrtg_OutputData.IvtrHvDcI2tDrtgPerfFac; /* HV DC derating factor for performance indicator calculation */
 
    if(TRUE == IvtrHvDcI2tDrtg_OutputData.ErrSts)
    {
@@ -125,8 +123,11 @@ FUNC(void, IVTRHVDCI2TDRTG_CODE) IvtrHvDcI2tDrtg_Run(void)
       IvtrHvDcI2tDrtgMonrSt = ERR_DEB_MONR_STS_PASSED; /* I2T Status Monitoring */
    }
 
+   /* comments code for new FM v1.1.0*/
+#if FTR_SNG_PWM_INTRPT == 0
    /* DC I2t Derating functionality failure fault monitor */
-   /*DrvCtrlErrDeb_SetEventStatus(ERR_ID_INV_IDC_TEMP_HWP, IvtrHvDcI2tDrtgMonrSt);*/
+   DrvCtrlErrDeb_SetEventStatus(ERR_ID_INV_IDC_TEMP_HWP, IvtrHvDcI2tDrtgMonrSt);
+#endif
 
    return;
 }
diff --git a/src/fw_cu/Components/Inv/LimAndDrt/IvtrIgbtJcnTempCooltTempDeltaDrtg/src/IvtrIgbtJcnTempCooltTempDeltaDrtg_Wrpr.c b/src/fw_cu/Components/Inv/LimAndDrt/IvtrIgbtJcnTempCooltTempDeltaDrtg/src/IvtrIgbtJcnTempCooltTempDeltaDrtg_Wrpr.c
index 1a99c3c91..69d296bee 100644
--- a/src/fw_cu/Components/Inv/LimAndDrt/IvtrIgbtJcnTempCooltTempDeltaDrtg/src/IvtrIgbtJcnTempCooltTempDeltaDrtg_Wrpr.c
+++ b/src/fw_cu/Components/Inv/LimAndDrt/IvtrIgbtJcnTempCooltTempDeltaDrtg/src/IvtrIgbtJcnTempCooltTempDeltaDrtg_Wrpr.c
@@ -69,9 +69,6 @@
 /* VWMEB-Inv-203305 - DRCO IvtrIgbtJcnTempCooltTempDeltaDrtg_Wrpr              */
 FUNC(void, IVTRIGBTJCNTEMPCOOLTTEMPDELTADRTG_CODE) IvtrIgbtJcnTempCooltTempDeltaDrtg_Run(void)
 {
-   #ifdef SWIT_Active
-      //SWIT_IvtrIgbtJcnTempCooltTempDeltaDrtg_Run_BgnHook();
-   #endif
    /* Actual delta temperature between inlet cooloant and virtual junction*/
    IvtrIgbtJcnTempCooltTempDeltaDrtg_InputData.IvtrThermMdlIgbtJcnTempCooltTempDelta = IvtrThermMdlIgbtJcnTempCooltTempDelta;
    /* FID handling: 1=Function inhibited, 0=Normal operation */
diff --git a/src/fw_cu/Components/Inv/LimAndDrt/IvtrIgbtJcnTempDrtg/src/IvtrIgbtJcnTempDrtg_Wrpr.c b/src/fw_cu/Components/Inv/LimAndDrt/IvtrIgbtJcnTempDrtg/src/IvtrIgbtJcnTempDrtg_Wrpr.c
index b6e12d446..bce86150d 100644
--- a/src/fw_cu/Components/Inv/LimAndDrt/IvtrIgbtJcnTempDrtg/src/IvtrIgbtJcnTempDrtg_Wrpr.c
+++ b/src/fw_cu/Components/Inv/LimAndDrt/IvtrIgbtJcnTempDrtg/src/IvtrIgbtJcnTempDrtg_Wrpr.c
@@ -85,7 +85,7 @@ FUNC(void, IVTRIGBTJCNTEMPDRTG_CODE) IvtrIgbtJcnTempDrtg_Run(void)
 
    IvtrIgbtJcnTempDrtgMonrSt = (0U != IvtrIgbtJcnTempDrtg_OutputData.ErrSts) ? ERR_DEB_MONR_STS_FAILED : ERR_DEB_MONR_STS_PASSED; /* Error signal to when act Junction temperature beyong certain temperature */
    IvtrIgbtJcnTempDrtgFac = IvtrIgbtJcnTempDrtg_OutputData.DrtgFactor; /* Derating factor */
-   IvtrIgbtJcnTempDrtgSts = IvtrIgbtJcnTempDrtg_OutputData.DrtgSts;
+   IvtrIgbtJcnTempDrtgSts = IvtrIgbtJcnTempDrtg_OutputData.DrtgSts; /* Derating status (derating factor < 1) */
 
    return;
 }
diff --git a/src/fw_cu/Components/Inv/LimAndDrt/IvtrIgbtNtcTempDrtg/src/IvtrIgbtNtcTempDrtg_Wrpr.c b/src/fw_cu/Components/Inv/LimAndDrt/IvtrIgbtNtcTempDrtg/src/IvtrIgbtNtcTempDrtg_Wrpr.c
index 4ff70afc9..6c46da6a5 100644
--- a/src/fw_cu/Components/Inv/LimAndDrt/IvtrIgbtNtcTempDrtg/src/IvtrIgbtNtcTempDrtg_Wrpr.c
+++ b/src/fw_cu/Components/Inv/LimAndDrt/IvtrIgbtNtcTempDrtg/src/IvtrIgbtNtcTempDrtg_Wrpr.c
@@ -75,11 +75,12 @@ FUNC(void, IVTRIGBTNTCTEMPDRTG_CODE) IvtrIgbtNtcTempDrtg_Run(void)
    IvtrIgbtNtcTempDrtg_InputData.IgbtTempMax = BswC2cData.IgbtTempMax; /*  Actual IGBT NTC Temperature */
    IvtrIgbtNtcTempDrtg_InputData.TqCtrlSpdElec = RotorAgSpdCalcnSpdElecFild2; /* Electrical angular speed */
 
+   /* Call the cyclic function */
    IvtrIgbtNtcTempDrtg();
 
    IvtrIgbtNtcTempDrtgMonrSt = (0U != IvtrIgbtNtcTempDrtg_OutputData.ErrSts) ? ERR_DEB_MONR_STS_FAILED : ERR_DEB_MONR_STS_PASSED; /* Error status */
    IvtrIgbtNtcTempDrtgFac = IvtrIgbtNtcTempDrtg_OutputData.DrtgFactor; /* Derating factor */
-   IvtrIgbtNtcTempDrtgSts = IvtrIgbtNtcTempDrtg_OutputData.DrtgSts;
+   IvtrIgbtNtcTempDrtgSts = IvtrIgbtNtcTempDrtg_OutputData.DrtgSts; /* Derating status (derating factor < 1) */
 
    /* IGBT Junction HWP temperature check */
    DrvCtrlErrDeb_SetEventStatus(ERR_ID_INV_IGBT_TEMP_HWP, IvtrIgbtNtcTempDrtgMonrSt);
diff --git a/src/fw_cu/Components/Inv/RslvrCal/RslvrOffsDetn/src/RslvrOffsDetn_Wrpr.c b/src/fw_cu/Components/Inv/RslvrCal/RslvrOffsDetn/src/RslvrOffsDetn_Wrpr.c
index 641206d09..424bb0522 100644
--- a/src/fw_cu/Components/Inv/RslvrCal/RslvrOffsDetn/src/RslvrOffsDetn_Wrpr.c
+++ b/src/fw_cu/Components/Inv/RslvrCal/RslvrOffsDetn/src/RslvrOffsDetn_Wrpr.c
@@ -85,35 +85,39 @@ FUNC(void, RSLVROFFSDETN_CODE) RslvrOffsDetn_Run(void)
 
 #if SYSCON_FTR_PSM == 1 /* USE_IPMCTRL_CONTROL */
 
-   RslvrOffsDetn_InputData.VDcAct = HvDcUMeasUDcFild1;
+   RslvrOffsDetn_InputData.VDcAct = HvDcUMeasUDcFild1; /* measured DC voltage filtered (LPF (0.5ms) */
 
    RslvrOffsDetn_InputData.CurCtrlIntgMax = curctrl_CalibParam.CtrlrIntglStSatnLimnRslvrOffsInvld; /* to be provided by IPMCtrl */
    RslvrOffsDetn_InputData.ICtrlMaxOut = curctrl_CalibParam.CtrlrOutpLimnRslvrOffsInvld; /* to be provided by IPMCtrl */
 
-   RslvrOffsDetn_InputData.Amax = PwmSpMgrModlnIdxMax;
-   RslvrOffsDetn_InputData.RslvrOffsAgAct = SftyC2cData.RslvrOffs;
-   RslvrOffsDetn_InputData.AgSpdElecAct = RotorAgSpdCalcnSpdElecFild10;
-   RslvrOffsDetn_InputData.SigCollVReqddqCum[0] = SigCollUdUqActAccum[0];
-   RslvrOffsDetn_InputData.SigCollVReqddqCum[1] = SigCollUdUqActAccum[1];
-   RslvrOffsDetn_InputData.MaxDevDeltaPhiMech = SigCollAgMeclFilDeltaMax;
-   RslvrOffsDetn_InputData.SigCollIActdqCum[0] = SigCollIdIqActAccum[0];
-   RslvrOffsDetn_InputData.SigCollIActdqCum[1] = SigCollIdIqActAccum[1];
-   RslvrOffsDetn_InputData.SigCollAgSpdElActCum = SigCollAgSpdElecAccum;
-   RslvrOffsDetn_InputData.SigCollAgSpdElMinMax[0] = SigCollAgSpdElecMinMax[0];
-   RslvrOffsDetn_InputData.SigCollAgSpdElMinMax[1] = SigCollAgSpdElecMinMax[1];
-   RslvrOffsDetn_InputData.SigCollMeasCycRdy = SigCollMeasCycRdy;
-   RslvrOffsDetn_InputData.SigCollSampleCount = SigCollSampleCntAct;
-   RslvrOffsDetn_InputData.SigCollTSampleMinMax[0] = SigCollPwmCycTiMinMax[0];
-   RslvrOffsDetn_InputData.SigCollTSampleMinMax[1] = SigCollPwmCycTiMinMax[1];
+   RslvrOffsDetn_InputData.Amax = PwmSpMgrModlnIdxMax; /* Maximum allowed modulation index */
+   RslvrOffsDetn_InputData.RslvrOffsAgAct = SftyC2cData.RslvrOffs; /* Maximum allowed modulation index */
+   RslvrOffsDetn_InputData.AgSpdElecAct = RotorAgSpdCalcnSpdElecFild10; /* electrical speed filtered for usage in 10ms time slice */
+   RslvrOffsDetn_InputData.SigCollVReqddqCum[0] = SigCollUdUqActAccum[0]; /* Accumulated values for dq voltages d-axis during the actual or last measurement cycle*/
+   RslvrOffsDetn_InputData.SigCollVReqddqCum[1] = SigCollUdUqActAccum[1]; /* Accumulated values for dq voltages q-axis during the actual or last measurement cycle*/
+   RslvrOffsDetn_InputData.MaxDevDeltaPhiMech = SigCollAgMeclFilDeltaMax; /* maximal absolute deviation of filter phi input from zero during the actual or last measurement cycle */
+   RslvrOffsDetn_InputData.SigCollIActdqCum[0] = SigCollIdIqActAccum[0]; /* Accumulated values for dq currents d-axis during the actual or last measurement cycle during the actual or last measurement cycle*/
+   RslvrOffsDetn_InputData.SigCollIActdqCum[1] = SigCollIdIqActAccum[1]; /* Accumulated values for dq currents q-axis */
+   RslvrOffsDetn_InputData.SigCollAgSpdElActCum = SigCollAgSpdElecAccum; /* Accumulated values of angular electric speed during acutal or last measurement cycle */
+   RslvrOffsDetn_InputData.SigCollAgSpdElMinMax[0] = SigCollAgSpdElecMinMax[0]; /* minimal value for electric angular speed during actual or last measurement cycle */
+   RslvrOffsDetn_InputData.SigCollAgSpdElMinMax[1] = SigCollAgSpdElecMinMax[1]; /* maximal value for electric angular speed during actual or last measurement cycle */
+   RslvrOffsDetn_InputData.SigCollMeasCycRdy = SigCollMeasCycRdy; /* Measurement cycle ready flag */
+   RslvrOffsDetn_InputData.SigCollSampleCount = SigCollSampleCntAct; /* actual value of acquired samples during actual or last measurement cycle */
+   RslvrOffsDetn_InputData.SigCollTSampleMinMax[0] = SigCollPwmCycTiMinMax[0]; /* minimal  value for PWM cycle time during actual or last measurement cycle*/
+   RslvrOffsDetn_InputData.SigCollTSampleMinMax[1] = SigCollPwmCycTiMinMax[1]; /* maximal  value for PWM cycle time during actual or last measurement cycle*/
+
+   RslvrOffsDetn_InputData.HFOmega = TqCtrlHfFrq; /* Frequency of the HF testsignal current */
    
-   RslvrOffsDetn_InputData.HFOmega = TqCtrlHfFrq;
+   /* Accumulated Cos Component Amplitude of HF dq Voltage or Current (depending on settings in IPMCtrl)*/
    RslvrOffsDetn_InputData.SigCollXdqcosCum[0] = SigCollHfXdXqCosCptAmpAccum[0];
    RslvrOffsDetn_InputData.SigCollXdqcosCum[1] = SigCollHfXdXqCosCptAmpAccum[1];
+   /* Accumulated sin Component Amplitude of HF dq Voltage or Current (depending on settings in IPMCtrl)*/
    RslvrOffsDetn_InputData.SigCollXdqsinCum[0] = SigCollHfXdXqSinCptAmpAccum[0];
    RslvrOffsDetn_InputData.SigCollXdqsinCum[1] = SigCollHfXdXqSinCptAmpAccum[1];
-   RslvrOffsDetn_InputData.HFCurAmp = TqCtrlHfIAmp;
 
-   RslvrOffsDetn_InputData.ReqCalibDrvCtrl = SftyC2cData.ReqRslvrCalib;
+   RslvrOffsDetn_InputData.HFCurAmp = TqCtrlHfIAmp; /* Amplitude of the HF testsignal current */
+
+   RslvrOffsDetn_InputData.ReqCalibDrvCtrl = SftyC2cData.ReqRslvrCalib; /* Resolver calibration request (DrvCtrl) */
 #ifndef SERIES_PRODUCTION
 #if SYSCON_FTR_PSM == 1
    if (FALSE != DrvCtrlSimnRslvrOffsDetnEna)
@@ -127,25 +131,27 @@ FUNC(void, RSLVROFFSDETN_CODE) RslvrOffsDetn_Run(void)
    RslvrOffsDetn();
 
    /*Copy the outputs for ADD transformation*/
-   RslvrOffsDetnBackEmfRslvrOffsAgElec = RslvrOffsDetn_OutputData.BEmfRslvrOffsAgNew_rad;
-   RslvrOffsDetnBackEmfPmFluxEstim = RslvrOffsDetn_OutputData.BEmfPsiPmEst;
-   RslvrOffsDetnIdIqReqEna = RslvrOffsDetn_OutputData.ReqIdIqSetToZero;
+   RslvrOffsDetnBackEmfRslvrOffsAgElec = RslvrOffsDetn_OutputData.BEmfRslvrOffsAgNew_rad; /* calculated electrical resolver offset angle based on back emf method */
+   RslvrOffsDetnBackEmfPmFluxEstim = RslvrOffsDetn_OutputData.BEmfPsiPmEst; /* Pm flux estimate obtained during last back Emf Mesasurement cycle*/
+   RslvrOffsDetnIdIqReqEna = RslvrOffsDetn_OutputData.ReqIdIqSetToZero; /* Request to set the current setpoints to zero. Level sensitive, which means the Id and Iq shall be zero as long as the flag is set */
 
+   /* check Resolver calibration request (DrvCtrl)*/
    if (FALSE == SftyC2cData.ReqRslvrCalib)
    {
-      RslvrOffsDetnIdIqReqEna = FALSE;
+      RslvrOffsDetnIdIqReqEna = FALSE; /* disable - Request to set the current setpoints to zero. Level sensitive, which means the Id and Iq shall be zero as long as the flag is set */
    }
-
-   RslvrOffsDetnSigCollStrtTrig = RslvrOffsDetn_OutputData.SigCollStartTrig;
-   RslvrOffsDetnCalSts = (uint8)RslvrOffsDetn_OutputData.StsCalibDrvCtrl;
-   RslvrOffsDetnHfSigVld = RslvrOffsDetn_OutputData.ActvtHFSigColl;
-   RslvrOffsDetnHfTestSigEnaReq = RslvrOffsDetn_OutputData.ActvtTestSig;
-   RslvrOffsDetnHfCtrlEnaReq = RslvrOffsDetn_OutputData.ActvtHFCtrl;
-   RslvrOffsDetnBackEmfSinDeltaGamma = RslvrOffsDetn_OutputData.sinDeltaGammaEMF;
-   RslvrOffsDetnBackEmfCosDeltaGamma = RslvrOffsDetn_OutputData.cosDeltaGammaEMF;
-   RslvrOffsDetnHfRslvrOffsAgElec = RslvrOffsDetn_OutputData.HFRslvrOffsAgNew_rad;
-   RslvrOffsDetnErrStsInv = RslvrOffsDetn_OutputData.FltInv;
-   RslvrOffsDetnErrStsEm = RslvrOffsDetn_OutputData.FltEm;
+   else { /* MISRA empty */ }
+
+   RslvrOffsDetnSigCollStrtTrig = RslvrOffsDetn_OutputData.SigCollStartTrig; /* Trigger to start accumulation of signals to be collected over full mechanic periods */
+   RslvrOffsDetnCalSts = (uint8)RslvrOffsDetn_OutputData.StsCalibDrvCtrl; /* "Status of resolver offset calibration */
+   RslvrOffsDetnHfSigVld = RslvrOffsDetn_OutputData.ActvtHFSigColl; /* Flag that signals that the HF outputs from torque control are valid and shall be collected */
+   RslvrOffsDetnHfTestSigEnaReq = RslvrOffsDetn_OutputData.ActvtTestSig; /* "Request for torque control to generate HF test signal */
+   RslvrOffsDetnHfCtrlEnaReq = RslvrOffsDetn_OutputData.ActvtHFCtrl; /* Request for torque control to activate the HF controller */
+   RslvrOffsDetnBackEmfSinDeltaGamma = RslvrOffsDetn_OutputData.sinDeltaGammaEMF; /* Value of sinuous delta gamma of back emf */
+   RslvrOffsDetnBackEmfCosDeltaGamma = RslvrOffsDetn_OutputData.cosDeltaGammaEMF; /* Value of cosinus delta gamma of back emf */
+   RslvrOffsDetnHfRslvrOffsAgElec = RslvrOffsDetn_OutputData.HFRslvrOffsAgNew_rad; /* calculated electrical resolver offset angle based on HF method */
+   RslvrOffsDetnErrStsInv = RslvrOffsDetn_OutputData.FltInv; /* resolver offset detection has failed because of inverter fault */
+   RslvrOffsDetnErrStsEm = RslvrOffsDetn_OutputData.FltEm; /* resolver offset detection has failed because of electrical machine fault */
 
 #endif /* SYSCON_FTR_PSM == 1 */
 #if defined( SWIT_IT_Active)
diff --git a/src/fw_cu/Components/Inv/TqCtrl/IpmPwrLossCalcn/src/IpmPwrLossCalcn_Wrpr.c b/src/fw_cu/Components/Inv/TqCtrl/IpmPwrLossCalcn/src/IpmPwrLossCalcn_Wrpr.c
index ddaa653fb..217295bd5 100644
--- a/src/fw_cu/Components/Inv/TqCtrl/IpmPwrLossCalcn/src/IpmPwrLossCalcn_Wrpr.c
+++ b/src/fw_cu/Components/Inv/TqCtrl/IpmPwrLossCalcn/src/IpmPwrLossCalcn_Wrpr.c
@@ -104,7 +104,7 @@ FUNC(void, IPMPWRLOSSCALCN_CODE) IpmPwrLossCalcn_Run(void)
     /* Actual phase resistance of the drive system (sum of actual ohmic phase resistances: stator, motor cable, IvtrCndcnRPhaAct) */
     IpmPwrLossCalcn_InputData.DrvSysRPhaAct = TqCtrlRPhaSys;
 
-
+    /* Call the cyclic function */
     IpmPwrLossCalcn();
     
     /* Description: Torque losses due to mechanical and magnetic losses */
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/EncCalcn/src/EncCalcn_Wrpr.c b/src/fw_cu/Components/Inv/ValMeasAndProc/EncCalcn/src/EncCalcn_Wrpr.c
index 06717633e..d2958c8f8 100644
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/EncCalcn/src/EncCalcn_Wrpr.c
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/EncCalcn/src/EncCalcn_Wrpr.c
@@ -63,10 +63,10 @@
 /* 100kW-20395 - DRCO EncCalcn_Wrpr                               */
 FUNC(void, ENCCALCN_CODE) EncCalcn_Run(void)
 {
-   EncCalcnInpAgMeclRslvr \t= RslvrCalcnAgMeclRslvr;
-   EncCalcnInpSpdMecl \t\t= EncFilSpdMecl;
-   EncCalcnInpTiStampRslvr \t= RslvrCalcnTiStampRslvr;
-   EncCalcnInpSpdMeclRslvr \t= RslvrCalcnSpdMeclRslvr;
+   EncCalcnInpAgMeclRslvr \t= RslvrCalcnAgMeclRslvr; /* RslvrCalcnAgMeclRslvr */
+   EncCalcnInpSpdMecl \t\t= EncFilSpdMecl; /* RslvrCalcnAgMeclRslvr */
+   EncCalcnInpTiStampRslvr \t= RslvrCalcnTiStampRslvr; /* RslvrCalcnAgMeclRslvr */
+   EncCalcnInpSpdMeclRslvr \t= RslvrCalcnSpdMeclRslvr; /* RslvrCalcnAgMeclRslvr */
    
    /* angle and speed valid */
    EncCalcnInpAgIsVld \t\t= RslvrCalcnAgIsVld;
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/HvAcIFndmtlCptAmpCalcn/src/HvAcIFndmtlCptAmpCalcn_Wrpr.c b/src/fw_cu/Components/Inv/ValMeasAndProc/HvAcIFndmtlCptAmpCalcn/src/HvAcIFndmtlCptAmpCalcn_Wrpr.c
index 74d7cc1ef..52e929db8 100644
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/HvAcIFndmtlCptAmpCalcn/src/HvAcIFndmtlCptAmpCalcn_Wrpr.c
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/HvAcIFndmtlCptAmpCalcn/src/HvAcIFndmtlCptAmpCalcn_Wrpr.c
@@ -85,9 +85,12 @@ LOCAL_INLINE FUNC(void, HVACIFNDMTLCPTAMPCALCN_CODE) HvAcIFndmtlCptAmpCalcn_getA
    /* Call the cyclic function */
    HvAcIFndmtlCptAmpCalcn();
 
+   /* copy fundamental component current amplitude value  */
    HvAcIFndmtlCptAmpCalcnIPeak[SYSDEF_PHA_SET_A][SYSDEF_PHA_U] = HvAcIFndmtlCptAmpCalcn_OutputData.AmpPhaU;
    HvAcIFndmtlCptAmpCalcnIPeak[SYSDEF_PHA_SET_A][SYSDEF_PHA_V] = HvAcIFndmtlCptAmpCalcn_OutputData.AmpPhaV;
    HvAcIFndmtlCptAmpCalcnIPeak[SYSDEF_PHA_SET_A][SYSDEF_PHA_W] = HvAcIFndmtlCptAmpCalcn_OutputData.AmpPhaW;
+
+   /* copy fundamental component current RMS value  */
    HvAcIFndmtlCptAmpCalcnIRms[SYSDEF_PHA_SET_A][SYSDEF_PHA_U]  = HvAcIFndmtlCptAmpCalcn_OutputData.RMSPhaU;
    HvAcIFndmtlCptAmpCalcnIRms[SYSDEF_PHA_SET_A][SYSDEF_PHA_V]  = HvAcIFndmtlCptAmpCalcn_OutputData.RMSPhaV;
    HvAcIFndmtlCptAmpCalcnIRms[SYSDEF_PHA_SET_A][SYSDEF_PHA_W]  = HvAcIFndmtlCptAmpCalcn_OutputData.RMSPhaW;
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/HvAcIMeas/src/HvAcIMeas.c b/src/fw_cu/Components/Inv/ValMeasAndProc/HvAcIMeas/src/HvAcIMeas.c
index 169b00a5c..a294b6a2f 100644
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/HvAcIMeas/src/HvAcIMeas.c
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/HvAcIMeas/src/HvAcIMeas.c
@@ -171,6 +171,8 @@ FUNC(void, HVACIMEAS_CODE) HvAcIMeas_RunA(void)
 #if FTR_SNG_PWM_INTRPT == 0
    DSADC_DataHandler(DSADC_RETRIES);
 #endif
+
+   /* call the model */
    HvAcIMeas_GetAndProcHvAcI();
 
    return;
@@ -191,6 +193,7 @@ FUNC(void, HVACIMEAS_CODE) HvAcIMeas_RunA(void)
 /* 100kW-20370  - HvAcIMeas_Run4ms */
 FUNC(void, HVACIMEAS_CODE) HvAcIMeas_Run4ms(void)
 {
+   /* call the model */
    HvAcIMeas_GetElFrqAndProcLut();
 
    return;
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/HvDcICalcn/src/HvDcICalcn_Wrpr.c b/src/fw_cu/Components/Inv/ValMeasAndProc/HvDcICalcn/src/HvDcICalcn_Wrpr.c
index 84b1590eb..6b2519503 100644
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/HvDcICalcn/src/HvDcICalcn_Wrpr.c
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/HvDcICalcn/src/HvDcICalcn_Wrpr.c
@@ -96,6 +96,7 @@ FUNC(void, HVDCICALCN_CODE) HvDcICalcn_Run(void)
       HvDcICalcnIDc = HvDcICalcn_OutputData.IDc;
    }
    
+   /* HvDc current filtered for usage in 10ms timeslice*/
    HvDcICalcnIDcFild10 += SYSCON_1MS * SYSCON_FIL_CON_LPF_TO_10MS * (HvDcICalcnIDc - HvDcICalcnIDcFild10);
 
 #ifdef SWIT_Active
'

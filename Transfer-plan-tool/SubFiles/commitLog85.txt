b'commit 27776096d007ff0dde65707cb23fd81d2ca7614c
Author: Neehara ODANKY <neehara.odanky.jv.ext@valeo.com>
Date:   Fri Jan 7 20:20:15 2022 +0530

    $100kW-50159$ - FCT_CtrlParkPos - Release code SftyParkLockMgr
    
    Change-Id: I11ade0beb89f6ba0c76a0ab8571e9cfb3928726a

diff --git a/src/fw_cu/Components/Cmn/Com/C2cCom/include/C2cComBswData.h b/src/fw_cu/Components/Cmn/Com/C2cCom/include/C2cComBswData.h
index 3f69252a7..30ed2043f 100644
--- a/src/fw_cu/Components/Cmn/Com/C2cCom/include/C2cComBswData.h
+++ b/src/fw_cu/Components/Cmn/Com/C2cCom/include/C2cComBswData.h
@@ -655,26 +655,59 @@ typedef struct BswC2cDataType_
    uint8 MotTempIni;
 
    /*
-   @@ ELEMENT = DisEngmentValue
-   @@ STRUCTURE = BswC2cDataType
-   @@ A2L_TYPE = MEASURE
-   @@ DATA_TYPE = FLOAT
-   @@ DESCRIPTION = "Park lock Actuator Disengage Position Angle"
-   @@ GROUP = C2cCom
-   @@ END
-   */
-   float32 DisEngmentValue;
-
-   /*
-   @@ ELEMENT = EngmentValue
-   @@ STRUCTURE = BswC2cDataType
-   @@ A2L_TYPE = MEASURE
-   @@ DATA_TYPE = FLOAT
-   @@ DESCRIPTION = "Park lock Actuator Engage Position Angle"
-   @@ GROUP = C2cCom
-   @@ END
-   */
-   float32 EngmentValue;
+  @@ ELEMENT = ParkLockMgrCalibTestEna
+  @@ STRUCTURE = BswC2cDataType
+  @@ A2L_TYPE = MEASURE
+  @@ DATA_TYPE = UBYTE
+  @@ DESCRIPTION = "Parklock calibration test request"
+  @@ GROUP = C2cCom
+  @@ END
+  */
+  boolean ParkLockMgrCalibTestEna;
+
+  /*
+  @@ ELEMENT = EngmentValueCrc
+  @@ STRUCTURE = BswC2cDataType
+  @@ A2L_TYPE = MEASURE
+  @@ DATA_TYPE = UWORD
+  @@ DESCRIPTION = "Parklock target engagement angle CRC"
+  @@ GROUP = C2cCom
+  @@ END
+  */
+  uint16 EngmentValueCrc;
+
+  /*
+  @@ ELEMENT = DisEngmentValueCrc
+  @@ STRUCTURE = BswC2cDataType
+  @@ A2L_TYPE = MEASURE
+  @@ DATA_TYPE = UWORD
+  @@ DESCRIPTION = "Parklock target disengagement angle CRC"
+  @@ GROUP = C2cCom
+  @@ END
+  */
+  uint16 DisEngmentValueCrc;
+
+  /*
+  @@ ELEMENT = EngmentValue
+  @@ STRUCTURE = BswC2cDataType
+  @@ A2L_TYPE = MEASURE
+  @@ DATA_TYPE = FLOAT
+  @@ DESCRIPTION = "Parklock target engagement angle "
+  @@ GROUP = C2cCom
+  @@ END
+  */
+  float32 EngmentValue;
+
+  /*
+  @@ ELEMENT = DisEngmentValue
+  @@ STRUCTURE = BswC2cDataType
+  @@ A2L_TYPE = MEASURE
+  @@ DATA_TYPE = FLOAT
+  @@ DESCRIPTION = "Parklock target disengagement angle "
+  @@ GROUP = C2cCom
+  @@ END
+  */
+  float32 DisEngmentValue;
 
 } BswC2cDataType;
 
diff --git a/src/fw_cu/Components/Cmn/Com/C2cCom/include/C2cComSftyData.h b/src/fw_cu/Components/Cmn/Com/C2cCom/include/C2cComSftyData.h
index 66ffd624d..5471ab3c7 100644
--- a/src/fw_cu/Components/Cmn/Com/C2cCom/include/C2cComSftyData.h
+++ b/src/fw_cu/Components/Cmn/Com/C2cCom/include/C2cComSftyData.h
@@ -914,6 +914,72 @@ typedef struct SftyC2cDataType_
      */
      boolean DbgModAllwd;
 
+     /*
+     @@ ELEMENT = EngmentValueCrc
+     @@ STRUCTURE = SftyC2cDataType
+     @@ A2L_TYPE = MEASURE
+     @@ DATA_TYPE = UWORD
+     @@ DESCRIPTION = "Parklock engagement angle CRC"
+     @@ GROUP = C2cCom
+     @@ END
+     */
+     uint16 EngmentValueCrc;
+
+     /*
+     @@ ELEMENT = DisEngmentValueCrc
+     @@ STRUCTURE = SftyC2cDataType
+     @@ A2L_TYPE = MEASURE
+     @@ DATA_TYPE = UWORD
+     @@ DESCRIPTION = "Parklock disengagement angle CRC"
+     @@ GROUP = C2cCom
+     @@ END
+     */
+     uint16 DisEngmentValueCrc;
+
+     /*
+     @@ ELEMENT = EngmentValue
+     @@ STRUCTURE = SftyC2cDataType
+     @@ A2L_TYPE = MEASURE
+     @@ DATA_TYPE = FLOAT
+     @@ DESCRIPTION = "Parklock target engagement angle "
+     @@ GROUP = C2cCom
+     @@ END
+     */
+     float32 EngmentValue;
+
+     /*
+     @@ ELEMENT = DisEngmentValue
+     @@ STRUCTURE = SftyC2cDataType
+     @@ A2L_TYPE = MEASURE
+     @@ DATA_TYPE = FLOAT
+     @@ DESCRIPTION = "Parklock target disengagement angle "
+     @@ GROUP = C2cCom
+     @@ END
+     */
+     float32 DisEngmentValue;
+
+     /*
+     @@ ELEMENT = CalibTestRngVld
+     @@ STRUCTURE = SftyC2cDataType
+     @@ A2L_TYPE = MEASURE
+     @@ DATA_TYPE = UBYTE
+     @@ DESCRIPTION = " Calibration test engage and disengage angle range validity flag "
+     @@ GROUP = C2cCom
+     @@ END
+     */
+     uint8 CalibTestRngVld;
+
+     /*
+     @@ ELEMENT = PLKNVMStorReq
+     @@ STRUCTURE = SftyC2cDataType
+     @@ A2L_TYPE = MEASURE
+     @@ DATA_TYPE = UBYTE
+     @@ DESCRIPTION = " Parklock NvM store request flag "
+     @@ GROUP = C2cCom
+     @@ END
+     */
+     uint8 PLKNVMStorReq;
+
 } SftyC2cDataType;
 
 typedef struct SftyC2cSecu2SftyDataType_
diff --git a/src/fw_cu/Components/Cmn/MngFlts/ErrDeb/include/ErrDeb_cfg.h b/src/fw_cu/Components/Cmn/MngFlts/ErrDeb/include/ErrDeb_cfg.h
index 9651cdffa..6a572e8b4 100644
--- a/src/fw_cu/Components/Cmn/MngFlts/ErrDeb/include/ErrDeb_cfg.h
+++ b/src/fw_cu/Components/Cmn/MngFlts/ErrDeb/include/ErrDeb_cfg.h
@@ -3845,6 +3845,7 @@ typedef struct ErrDeb_FctIdBitFieBType_
    */
    ErrDeb_BitFieType FctIdLockVsiModePlaus : 1;
 
+   ErrDeb_BitFieType FctIdParkLockFault : 1;
 
 
 /*! \\misra Warning No C2012:1.1(Dir) "[L] Number of members in \'struct\' or \'union\' exceeds 127 - program does not conform strictly to ISO:C90.
diff --git a/src/fw_cu/Components/Cmn/Shared/MemMap/include/SftyNextGen_MemMap.h b/src/fw_cu/Components/Cmn/Shared/MemMap/include/SftyNextGen_MemMap.h
index d1823f104..29ddcc489 100644
--- a/src/fw_cu/Components/Cmn/Shared/MemMap/include/SftyNextGen_MemMap.h
+++ b/src/fw_cu/Components/Cmn/Shared/MemMap/include/SftyNextGen_MemMap.h
@@ -2734,7 +2734,138 @@
    #undef SFTYSDL_STOP_SEC_CALIB_8
    #define SAFETY_STOP_SEC_CALIB
    #include "BasicNextGen_MemMap.h"
+   
+/********************************************** SftyParkLockMgr  ***********************************************************/
+#elif (defined SFTYPARKLOCKMGR_AREA_1_START_SEC_CODE_SLOW)
+   #undef SFTYPARKLOCKMGR_AREA_1_START_SEC_CODE_SLOW
+   #define SFTY_ASIL_A_START_SEC_CODE_SLOW
+   #include "BasicNextGen_MemMap.h"
+
+#elif (defined SFTYPARKLOCKMGR_AREA_1_STOP_SEC_CODE_SLOW)
+   #undef SFTYPARKLOCKMGR_AREA_1_STOP_SEC_CODE_SLOW
+   #define SFTY_ASIL_A_STOP_SEC_CODE_SLOW
+   #include "BasicNextGen_MemMap.h"
+
+#elif (defined SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8)
+   #undef SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+   #define SFTY_ASIL_A_START_SEC_VAR_FAST_INIT
+   #include "BasicNextGen_MemMap.h"
+
+#elif (defined SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8)
+   #undef SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+   #define SFTY_ASIL_A_STOP_SEC_VAR_FAST_INIT
+   #include "BasicNextGen_MemMap.h"
+
+#elif (defined SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_16)
+   #undef SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_16
+   #define SFTY_ASIL_A_START_SEC_VAR_FAST_INIT
+   #include "BasicNextGen_MemMap.h"
+
+#elif (defined SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_16)
+   #undef SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_16
+   #define SFTY_ASIL_A_STOP_SEC_VAR_FAST_INIT
+   #include "BasicNextGen_MemMap.h"
+
+#elif (defined SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_32)
+   #undef SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_32
+   #define SFTY_ASIL_A_START_SEC_VAR_FAST_INIT
+   #include "BasicNextGen_MemMap.h"
+
+#elif (defined SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_32)
+   #undef SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_32
+   #define SFTY_ASIL_A_STOP_SEC_VAR_FAST_INIT
+   #include "BasicNextGen_MemMap.h"
+
+#elif (defined SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32)
+   #undef SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32
+   #define SFTY_ASIL_A_START_SEC_VAR_FAST_NOINIT
+   #include "BasicNextGen_MemMap.h"
+
+#elif (defined SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32)
+   #undef SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32
+   #define SFTY_ASIL_A_STOP_SEC_VAR_FAST_NOINIT
+   #include "BasicNextGen_MemMap.h"
+
+#elif (defined SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_16)
+   #undef SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_16
+   #define SFTY_ASIL_A_START_SEC_VAR_FAST_NOINIT
+   #include "BasicNextGen_MemMap.h"
+
+#elif (defined SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_16)
+   #undef SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_16
+   #define SFTY_ASIL_A_STOP_SEC_VAR_FAST_NOINIT
+   #include "BasicNextGen_MemMap.h"
+
+#elif (defined SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_8)
+   #undef SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_8
+   #define SFTY_ASIL_A_START_SEC_VAR_FAST_NOINIT
+   #include "BasicNextGen_MemMap.h"
 
+#elif (defined SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_8)
+   #undef SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_8
+   #define SFTY_ASIL_A_STOP_SEC_VAR_FAST_NOINIT
+   #include "BasicNextGen_MemMap.h"
+
+#elif (defined SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_CLEARED_8)
+   #undef SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_CLEARED_8
+   #define SFTY_ASIL_A_START_SEC_VAR_FAST_CLEARED
+   #include "BasicNextGen_MemMap.h"
+
+#elif (defined SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_CLEARED_8)
+   #undef SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_CLEARED_8
+   #define SFTY_ASIL_A_STOP_SEC_VAR_FAST_CLEARED
+   #include "BasicNextGen_MemMap.h"
+
+#elif (defined SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_CLEARED_32)
+   #undef SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_CLEARED_32
+   #define SFTY_ASIL_A_START_SEC_VAR_FAST_CLEARED
+   #include "BasicNextGen_MemMap.h"
+
+#elif (defined SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_CLEARED_32)
+   #undef SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_CLEARED_32
+   #define SFTY_ASIL_A_STOP_SEC_VAR_FAST_CLEARED
+   #include "BasicNextGen_MemMap.h"
+
+#elif (defined SFTYPARKLOCKMGR_START_SEC_CALIB_32)
+   #undef SFTYPARKLOCKMGR_START_SEC_CALIB_32
+   #define SAFETY_START_SEC_CALIB
+   #include "BasicNextGen_MemMap.h"
+
+#elif (defined SFTYPARKLOCKMGR_STOP_SEC_CALIB_32)
+   #undef SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+   #define SAFETY_STOP_SEC_CALIB
+   #include "BasicNextGen_MemMap.h"
+
+#elif (defined SFTYPARKLOCKMGR_START_SEC_CALIB_8)
+   #undef SFTYPARKLOCKMGR_START_SEC_CALIB_8
+   #define SAFETY_START_SEC_CALIB
+   #include "BasicNextGen_MemMap.h"
+
+#elif (defined SFTYPARKLOCKMGR_STOP_SEC_CALIB_8)
+   #undef SFTYPARKLOCKMGR_STOP_SEC_CALIB_8
+   #define SAFETY_STOP_SEC_CALIB
+   #include "BasicNextGen_MemMap.h"
+
+#elif (defined SFTYPARKLOCKMGR_START_SEC_CALIB_16)
+   #undef SFTYPARKLOCKMGR_START_SEC_CALIB_16
+   #define SAFETY_START_SEC_CALIB
+   #include "BasicNextGen_MemMap.h"
+
+#elif (defined SFTYPARKLOCKMGR_STOP_SEC_CALIB_16)
+   #undef SFTYPARKLOCKMGR_STOP_SEC_CALIB_16
+   #define SAFETY_STOP_SEC_CALIB
+   #include "BasicNextGen_MemMap.h"
+
+#elif (defined SFTYPARKLOCKMGR_START_SEC_CONST_32)
+   #undef SFTYPARKLOCKMGR_START_SEC_CONST_32
+   #define SFTY_ASIL_A_START_SEC_CONST
+   #include "BasicNextGen_MemMap.h"
+
+#elif (defined SFTYPARKLOCKMGR_STOP_SEC_CONST_32)
+   #undef SFTYPARKLOCKMGR_STOP_SEC_CONST_32
+   #define SFTY_ASIL_A_STOP_SEC_CONST
+   #include "BasicNextGen_MemMap.h"
+   
 /* SftyActvDchaCtrl ******************************************************* */
 #elif (defined SFTYACTVDCHACTRL_START_SEC_VAR_AREA_CMN_FAST_CLEARED_32)
    #undef SFTYACTVDCHACTRL_START_SEC_VAR_AREA_CMN_FAST_CLEARED_32
diff --git a/src/fw_cu/Components/Cmn/Shared/SysDef/include/AddEnumTypes.h b/src/fw_cu/Components/Cmn/Shared/SysDef/include/AddEnumTypes.h
index 69fe07b74..9a1d4838a 100644
--- a/src/fw_cu/Components/Cmn/Shared/SysDef/include/AddEnumTypes.h
+++ b/src/fw_cu/Components/Cmn/Shared/SysDef/include/AddEnumTypes.h
@@ -46,9 +46,16 @@ typedef enum  {SYSPRM_EM_PHA_SET_ACTVN_NONE = 0, SYSPRM_EM_PHA_SET_ACTVN_A = 1,
 typedef enum  {BSW_ERR_DEB_MONR_NOT_TESTD_ST = 0, BSW_ERR_DEB_MONR_NO_ERR_ST = 1, BSW_ERR_DEB_MONR_ERR_ST = 2} BswErrDeb_ErrMonrStType;
 typedef enum  {INV_STANDBY = 0, INV_TRQCTRL = 1, INV_INT_SPDCTRL = 2, INV_VTGCTRL = 3, INV_EX_SPDCTRL = 4, INV_FAILURE = 5, INV_CALIBRATION = 6, INV_SPCLBRK = 7, INV_FREEWHL = 8, INV_INIT = 15}Sfty_InvModType;
 typedef enum  {NVM_UPDT_INACTIVE = 0, NVM_UPDT_PENDING = 1, NVM_UPDT_SUCCESS = 2, NVM_UPDT_FAILED = 3} RslvrOffsNvmUpdtStsType;
+typedef enum  {SFTYPARKLOCKMGR_PRKGPOSN_IDLE, SFTYPARKLOCKMGR_PRKGPOSN_PARK, SFTYPARKLOCKMGR_PRKGPOSN_DRIVE} SftyParkLockMgr_PrkgPosnReqType;
+typedef enum  {SFTYPARKLOCKMGR_NO_REQ = 0, SFTYPARKLOCKMGR_REQ_LOCK = 1, SFTYPARKLOCKMGR_REQ_UNLOCK = 2} SftyParkLockMgr_PlkPosnCanReqType;
+typedef enum  {SFTYPARKLOCKMGR_OPERMOD_PRIMACTRSTRTUPTST = 0, SFTYPARKLOCKMGR_OPERMOD_IDLE = 1, SFTYPARKLOCKMGR_OPERMOD_ENG_PRIM_ACTR = 2, SFTYPARKLOCKMGR_OPERMOD_DISENG = 3, SFTYPARKLOCKMGR_OPERMOD_FAIL = 4, SFTYPARKLOCKMGR_OPERMOD_CALIBRATETEST = 5} SftyParkLockMgr_OperModType;
+typedef enum  {SFTYPARKLOCKMGR_TEST_STS_NOTRUN = 0, SFTYPARKLOCKMGR_TEST_STS_ACTIVE = 1, SFTYPARKLOCKMGR_TEST_STS_FAIL = 2, SFTYPARKLOCKMGR_TEST_STS_PASS = 3, SFTYPARKLOCKMGR_TEST_STS_DONE = 4} SftyParkLockMgr_TestStsType;
+typedef enum  {SFTYPARKLOCKMGR_CALIBTST_INIT = 0, SFTYPARKLOCKMGR_CALIBTST_ENGAGETST = 1, SFTYPARKLOCKMGR_CALIBTST_DISENGAGETST = 2, SFTYPARKLOCKMGR_CALIBTST_ANGLE_CALC = 3, SFTYPARKLOCKMGR_CALIBTST_RNG_CRC_CHECK = 4, SFTYPARKLOCKMGR_CALIBTST_PASS = 5, SFTYPARKLOCKMGR_CALIBTST_FAIL = 6 } SftyParkLockMgr_CalibTestStType;
+typedef enum  {SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_INIT = 0, SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_HB1_ENTST = 1, SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_HB1_DITST = 2, SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_HB2_ENTST = 3, SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_HB2_DITST = 4, SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_PASS = 5, SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_FAIL = 6, SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_ANGLE_TST = 7, SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_OVERALL_TST_FAIL = 8 } SftyParkLockMgr_PrimActrStrtUpTestStType;
 typedef enum  {SFTYPARKLOCK_POSN_SIGNAL_NOT_AVAILABLE = 0, SFTYPARKLOCK_POSN_ENGAGED = 1, SFTYPARKLOCK_POSN_UNDETERMINED = 2, SFTYPARKLOCK_POSN_DISENGAGED = 3} SftyParkLockEvln_AbsPosnType;
 typedef enum  {SFTYPARKLOCK_DIR_STOP = 0, SFTYPARKLOCK_DIR_DISENGAGE = 1, SFTYPARKLOCK_DIR_ENGAGE = 2} SftyParkLockActr_DirType;
 typedef enum  {SFTYPARKLOCKACTR_PRIMACTR_DISABLE = 0, SFTYPARKLOCKACTR_PRIMACTR_SLOWENG = 1, SFTYPARKLOCKACTR_PRIMACTR_FASTENG = 2, SFTYPARKLOCKACTR_PRIMACTR_SLOWDISENG = 3, SFTYPARKLOCKACTR_PRIMACTR_FASTDISENG = 4, SFTYPARKLOCKACTR_PRIMACTR_CLSD_LOOP_CTRL = 5} SftyParkLockActr_PrimActrCtrlStType;
+typedef enum  {SFTYPARKLOCK_FAULT = 0, SFTYPARKLOCK_NO_FAULT = 1} SftyParkLockMgr_FaultType;
 
 #endif
 /** @} doxygen end group definition */
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyE2eCompst_Cfg/SftyE2eTx_Cfg/src/SftyE2eTx_cfg.c b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyE2eCompst_Cfg/SftyE2eTx_Cfg/src/SftyE2eTx_cfg.c
index f8eb6fd45..d75a6744a 100644
--- a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyE2eCompst_Cfg/SftyE2eTx_Cfg/src/SftyE2eTx_cfg.c
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyE2eCompst_Cfg/SftyE2eTx_Cfg/src/SftyE2eTx_cfg.c
@@ -37,7 +37,7 @@
 #include "Mathlib.h"
 #include "SftyHVInterlock_data.h"
 #include "SftyActvDchaCtrl_data.h"
-#include "SftyParkLockEvln_data.h"
+#include "SftyParkLockMgr_data.h"
 /*================== [defines] ==============================================*/
 
 #define SFTY_E2E_TX_KL30_OFFSET              (38u)
@@ -520,7 +520,7 @@ STATIC FUNC(void, SFTYE2E_CODE) SftyE2eTx_FillInvVcuStat7RunData(void)
    /* Overwrite BSW data with data that is coming from SSW */
    SftyE2eTxInvVcuStat7Msg.Sig.ActiveDchaStsToVeh  = SftyActvDchaCtrlActvDchaSts;
    SftyE2eTxInvVcuStat7Msg.Sig.ParkLockPosnSts     = SftyE2eTx_ConvParklockPosStsToCanVal(SftyParkLockEvlnActrAbsPosn);
-   SftyE2eTxInvVcuStat7Msg.Sig.ParkLockFailureSts  = SftyParkLockMgrFailureStatus;
+   SftyE2eTxInvVcuStat7Msg.Sig.ParkLockFailureSts  = SftyParkLockMgrFailrSts;
 
    if(SftyErrDebFctInhbnSts.B.FctIdFltGrp1 == ERR_DEB_FCT_INHBN_ACTIVE)
    {
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockEvln/include/SftyParkLockEvln_data.h b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockEvln/include/SftyParkLockEvln_data.h
index c83c42f46..9fb533cf1 100644
--- a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockEvln/include/SftyParkLockEvln_data.h
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockEvln/include/SftyParkLockEvln_data.h
@@ -29,9 +29,6 @@ extern VAR(uint8, SFTYPARKLOCKEVLN_VAR) SftyParkLockEvlnSnrDataElecHiErrMonrSt;
 
 extern VAR(uint8, SFTYPARKLOCKEVLN_VAR) SftyParkLockEvlnPrkgPosSnsrErrMonrSt;
 
-extern VAR(uint8, SFTYPARKLOCKEVLN_VAR) SftyParkLockMgrFailureStatus;
-
-
 #define SFTYPARKLOCKEVLN_STOP_SEC_VAR_AREA_2_FAST_INIT_8
 #include "MemMap.h"
 /* End: SFTYPARKLOCKEVLN_STOP_SEC_VAR_AREA_2_FAST_INIT_8 (online) */
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockEvln/src/SftyParkLockEvln_data.c b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockEvln/src/SftyParkLockEvln_data.c
index e2a316609..3d15b1b02 100644
--- a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockEvln/src/SftyParkLockEvln_data.c
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockEvln/src/SftyParkLockEvln_data.c
@@ -65,8 +65,6 @@ VAR(uint8, SFTYPARKLOCKEVLN_VAR) SftyParkLockEvlnPrkgPosSnsrErrMonrSt = 0U;
 */
 VAR(SftyParkLockEvln_AbsPosnType, SFTYPARKLOCKEVLN_VAR) SftyParkLockEvlnActrAbsPosn = SFTYPARKLOCK_POSN_SIGNAL_NOT_AVAILABLE;
 
-VAR(uint8, SFTYPARKLOCKEVLN_VAR) SftyParkLockMgrFailureStatus = 0U;
-
 #define SFTYPARKLOCKEVLN_STOP_SEC_VAR_AREA_2_FAST_INIT_8
 #include "MemMap.h"
 /* End: SFTYPARKLOCKEVLN_STOP_SEC_VAR_AREA_2_FAST_INIT_8 (online) */
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockMgr/a2l/.gitkeep b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockMgr/a2l/.gitkeep
new file mode 100644
index 000000000..e69de29bb
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockMgr/doc/.gitkeep b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockMgr/doc/.gitkeep
new file mode 100644
index 000000000..e69de29bb
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockMgr/include/SftyParkLockMgr.h b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockMgr/include/SftyParkLockMgr.h
new file mode 100644
index 000000000..8392d3a96
--- /dev/null
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockMgr/include/SftyParkLockMgr.h
@@ -0,0 +1,38 @@
+/* ********************************************************************** */
+/* Sourcefile:    SftyParkLockMgr.h                                       */
+/*                                                                        */
+/* Project:       100kw                                                   */
+/* TriCore                                                                */
+/*                                                                        */
+/* Department: Valeo Siemens eAutomotive                                  */
+/* I DT EC R&D                                                            */
+/* ********************************************************************** */
+/* Copyright (C) Valeo Siemens eAutomotive Germany GmbH 2021              */
+/* All Rights Reserved. Confidential                                      */
+/* ********************************************************************** */
+#ifndef SFTYPARKLOCKMGR_H
+#define SFTYPARKLOCKMGR_H
+/*!
+* \\addtogroup SftyParkLockMgr_module
+* @{
+*/
+
+/*================== [includes] =============================================*/
+
+/*================== [macros] ===============================================*/
+
+/*================== [type definitions] =====================================*/
+
+/*================== [declaration of public data] ===========================*/
+
+/*================== [declaration of global functions] ======================*/
+extern FUNC(void,SFTY_PARKLOCK_MGR_CODE) SftyParkLockMgr_Init(void);
+extern FUNC(void,SFTY_PARKLOCK_MGR_CODE) SftyParkLockMgr_MainFunction(void);
+
+/*================== [closure] ==============================================*/
+#endif
+/* ********************************************************************** */
+/* Copyright (C) Valeo Siemens eAutomotive Germany GmbH 2021              */
+/* All Rights Reserved. Confidential                                      */
+/* ********************************************************************** */
+/*==================[end of file]============================================*/
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockMgr/include/SftyParkLockMgr_data.h b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockMgr/include/SftyParkLockMgr_data.h
new file mode 100644
index 000000000..b20cf9083
--- /dev/null
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockMgr/include/SftyParkLockMgr_data.h
@@ -0,0 +1,796 @@
+/* ***************************************************************** */
+/* Sourcefile: SftyParkLockMgr_data.h                                  */
+/* ADD Container: SftyParkLockMgr                                      */
+/* ADD Container Version: 1.0.0                                      */
+/* ***************************************************************** */
+/* Copyright (C) Valeo-Siemens eAutomotive GmbH 2021                 */
+/* All Rights Reserved. Confidential                                 */
+/* ***************************************************************** */
+#ifndef\tSFTYPARKLOCKMGR_DATA_H
+#define\tSFTYPARKLOCKMGR_DATA_H
+
+#include "AddGlobalDefines.h"
+#include "Platform_Types.h"
+#include "Compiler.h"
+#include "ErrDeb_data.h"
+#include "AddEnumTypes.h"
+
+
+
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+
+extern CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockMgrPlkIntFltStiEna;
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+
+extern CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockMgrPlkIntFlt; /* PRQA S 0777 #All external variables are created with unique names */
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+
+extern CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockMgrE2ePrkgPosnReqVldStiEna;
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+
+extern CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockMgrE2ePrkgPosnReqVld; /* PRQA S 0777 #All external variables are created with unique names */
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+
+extern CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockMgrE2ePrkgPosnReqStiEna; /* PRQA S 0777 #All external variables are created with unique names */
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+
+extern CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockMgrE2ePrkgPosnReq; /* PRQA S 0777 #All external variables are created with unique names */
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+
+/* Begin: SFTYE2E_START_SEC_VAR_AREA_CMN_FAST_CLEARED (online) */
+#define SFTYE2E_START_SEC_VAR_AREA_CMN_FAST_CLEARED
+#include "MemMap.h"
+
+extern VAR(uint8, SFTYE2E_VAR) SftyE2ePhyDataVcuInvCtrl2PrkgPosnReq;
+#define SFTYE2E_STOP_SEC_VAR_AREA_CMN_FAST_CLEARED
+#include "MemMap.h"
+/* End: SFTYE2E_STOP_SEC_VAR_AREA_CMN_FAST_CLEARED (online) */
+
+
+/* Begin: SFTYE2E_START_SEC_VAR_AREA_CMN_FAST_CLEARED (online) */
+#define SFTYE2E_START_SEC_VAR_AREA_CMN_FAST_CLEARED
+#include "MemMap.h"
+
+extern VAR(boolean, SFTYE2E_VAR) SftyE2ePhyDataVcuInvCtrl2PrkgPosnReqVld; /* PRQA S 0777 #All external variables are created with unique names */
+#define SFTYE2E_STOP_SEC_VAR_AREA_CMN_FAST_CLEARED
+#include "MemMap.h"
+/* End: SFTYE2E_STOP_SEC_VAR_AREA_CMN_FAST_CLEARED (online) */
+
+
+/* Begin: SFTYPARKLOCKACTR_START_SEC_VAR_AREA_2_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKACTR_START_SEC_VAR_AREA_2_FAST_INIT_8
+#include "MemMap.h"
+
+extern VAR(boolean, SFTYPARKLOCKACTR_VAR)SftyParkLockActrPosSnsrSts;
+#define SFTYPARKLOCKACTR_STOP_SEC_VAR_AREA_2_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKACTR_STOP_SEC_VAR_AREA_2_FAST_INIT_8 (online) */
+
+
+/* Begin: SFTYPARKLOCKEVLN_START_SEC_VAR_AREA_2_FAST_INIT_32 (online) */
+#define SFTYPARKLOCKEVLN_START_SEC_VAR_AREA_2_FAST_INIT_32
+#include "MemMap.h"
+
+extern VAR (float32, SFTYPARKLOCKEVLN_VAR) SftyParkLockEvlnPrimActrPosChUMeas;
+#define SFTYPARKLOCKEVLN_STOP_SEC_VAR_AREA_2_FAST_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKEVLN_STOP_SEC_VAR_AREA_2_FAST_INIT_32 (online) */
+
+
+/* Begin: SFTYPARKLOCKEVLN_START_SEC_VAR_AREA_2_FAST_INIT_32 (online) */
+#define SFTYPARKLOCKEVLN_START_SEC_VAR_AREA_2_FAST_INIT_32
+#include "MemMap.h"
+
+extern VAR (float32, SFTYPARKLOCKEVLN_VAR) SftyParkLockEvlnPrimActrNegChUMeas;
+#define SFTYPARKLOCKEVLN_STOP_SEC_VAR_AREA_2_FAST_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKEVLN_STOP_SEC_VAR_AREA_2_FAST_INIT_32 (online) */
+
+
+/* Begin: SFTYPARKLOCKEVLN_START_SEC_VAR_AREA_2_FAST_INIT_32 (online) */
+#define SFTYPARKLOCKEVLN_START_SEC_VAR_AREA_2_FAST_INIT_32
+#include "MemMap.h"
+
+extern VAR (SftyParkLockEvln_AbsPosnType, SFTYPARKLOCKEVLN_VAR) SftyParkLockEvlnActrAbsPosn;
+#define SFTYPARKLOCKEVLN_STOP_SEC_VAR_AREA_2_FAST_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKEVLN_STOP_SEC_VAR_AREA_2_FAST_INIT_32 (online) */
+
+
+/* Begin: SFTYPARKLOCKEVLN_START_SEC_VAR_AREA_2_FAST_INIT_32 (online) */
+#define SFTYPARKLOCKEVLN_START_SEC_VAR_AREA_2_FAST_INIT_32
+#include "MemMap.h"
+
+extern VAR (float32, SFTYPARKLOCKEVLN_VAR) SftyParkLockEvlnActrAg;
+#define SFTYPARKLOCKEVLN_STOP_SEC_VAR_AREA_2_FAST_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKEVLN_STOP_SEC_VAR_AREA_2_FAST_INIT_32 (online) */
+
+
+/* Begin: SFTYPARKLOCKEVLN_AREA_0_START_SEC_VAR_FAST_INIT_32 (online) */
+#define SFTYPARKLOCKEVLN_AREA_0_START_SEC_VAR_FAST_INIT_32
+#include "MemMap.h"
+
+extern VAR (float32, SFTYPARKLOCKEVLN_VAR) SftyParkLockEvlnPrimActrIMeas;
+#define SFTYPARKLOCKEVLN_AREA_0_STOP_SEC_VAR_FAST_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKEVLN_AREA_0_STOP_SEC_VAR_FAST_INIT_32 (online) */
+
+
+/* Begin: SFTYLVSPLYEVLN_START_SEC_VAR_AREA_2_SLOW_INIT_32 */
+#define SFTYLVSPLYEVLN_START_SEC_VAR_AREA_2_SLOW_INIT_32
+#include "MemMap.h"
+
+extern VAR (float32, SFTYPARKLOCKEVLN_VAR) SftyLvSplyEvlnKl30UMeas;
+#define SFTYLVSPLYEVLN_STOP_SEC_VAR_AREA_2_SLOW_INIT_32
+#include "MemMap.h"
+/* End: SFTYLVSPLYEVLN_STOP_SEC_VAR_AREA_2_SLOW_INIT_32 */
+
+
+/* Begin: SFTYPARKLOCKACTR_START_SEC_VAR_AREA_2_FAST_INIT_32 (online) */
+#define SFTYPARKLOCKACTR_START_SEC_VAR_AREA_2_FAST_INIT_32
+#include "MemMap.h"
+
+extern VAR (SftyParkLockActr_DirType,SFTYPARKLOCKACTR_VAR) SftyParkLockActrPrimActrDirRq;
+#define SFTYPARKLOCKACTR_STOP_SEC_VAR_AREA_2_FAST_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKACTR_STOP_SEC_VAR_AREA_2_FAST_INIT_32 (online) */
+
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+
+extern CONST(boolean, SFTYREPLCMT_CALIB) SftyReplcmtSpdMonMeclSpdVldyFlg;
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_32 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_32
+#include "MemMap.h"
+
+extern CONST(float32, SFTYREPLCMT_CALIB) SftyReplcmtSpdMonMeclSpdRpmFild;
+#define SFTYREPLCMT_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_32 (calib) */
+
+
+/********************************* AREA 1 - START ***************************************/
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+
+extern VAR (boolean, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrFailrSts;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+
+extern VAR (uint8, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPluErrMonrSt;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+
+extern VAR (uint8, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrDisengEngCRCErrMonrSt;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+
+extern VAR (uint8, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPrimActrEngTiOutErrMonrSt;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+
+extern VAR (uint8, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPrimActrDisEngTiOutErrMonrSt;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+
+extern VAR (uint8, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrEngRangErrMonrSt;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+
+extern VAR (uint8, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrDisEngRangErrMonrSt;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+
+extern VAR (float32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrTarEngmtAgNvm;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+
+extern VAR (float32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrTarDisengmtAgNvm;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_16 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_16
+#include "MemMap.h"
+
+extern VAR (uint16, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrEngmtAgCrcNvm;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_16
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_16 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_16 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_16
+#include "MemMap.h"
+
+extern VAR (uint16, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrDisengmtAgCrcNvm;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_16
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_16 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_8
+#include "MemMap.h"
+
+extern VAR (uint8, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPlkIntFlt;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+
+extern VAR (uint8, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPrimActrStrtUpTstErrMonrSt;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+
+extern VAR (SftyParkLockMgr_PrkgPosnReqType, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPlkCanReq;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+
+extern VAR (SftyParkLockMgr_OperModType, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrOperMod;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+
+extern VAR (SftyParkLockMgr_TestStsType, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPrimActrOverAllStrtUpTestSts;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+extern VAR (SftyParkLockMgr_TestStsType, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPrimActrStrtUpTestSts;
+
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+
+extern VAR (SftyParkLockMgr_PrimActrStrtUpTestStType, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPrimActrStrtUpTestSt; /* PRQA S 0777 #All external variables are created with unique names */
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+
+extern VAR (SftyParkLockMgr_TestStsType, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPrimActrStrtUpTestFinshd; /* PRQA S 0777 #All external variables are created with unique names */
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+
+extern VAR (SftyParkLockMgr_TestStsType, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPrimActrOverAllStrtUpTestFinshd; /* PRQA S 0777 #All external variables are created with unique names */
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+
+extern VAR (SftyParkLockMgr_TestStsType, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrEngmtFinshd;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_32 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_32
+#include "MemMap.h"
+
+extern VAR(uint32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPauseTi;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_32 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_32 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_32
+#include "MemMap.h"
+
+extern VAR(uint32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPrimActrStrtUpTestTiOutTmrVar; /* PRQA S 0777 #All external variables are created with unique names */
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_32 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+
+extern VAR (SftyParkLockMgr_TestStsType, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrCalibTestFinshd;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+
+extern VAR (SftyParkLockMgr_TestStsType, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrCalibTestSts;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+
+extern VAR (SftyParkLockMgr_CalibTestStType, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrCalibTestSt;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+
+extern VAR (SftyParkLockMgr_TestStsType, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrDisengmtFinshd;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_8
+#include "MemMap.h"
+
+extern VAR (boolean, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPrkgPosnReqVld;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_8
+#include "MemMap.h"
+
+extern VAR (uint8, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPrkgPosnReq; /* PRQA S 0777 #All external variables are created with unique names */
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+
+/* Pause time timer elapsed flag */
+extern VAR (uint8, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPauseTiTmrElpd;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+
+/* Engagement timeout timer variable */
+extern VAR (uint32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrEngmtTiOutTmrVar;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+
+/* Disengagement timeout timer variable */
+extern VAR (uint32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrDisengmtTiOutTmrVar;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+
+/* Pause time timer variable */
+extern VAR (uint32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPauseTiTmrVar;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_8
+#include "MemMap.h"
+
+/* Pause time over flag */
+extern VAR (boolean, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPauseTiFinshd;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_32 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_32
+#include "MemMap.h"
+
+/* Parklock actuator calibration test timer variable */
+extern VAR(uint32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrCalibTestTiOutTmrVar;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_32 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+
+/* Calibrated target disengagement angle. Unit \'degree\' */
+extern VAR (float32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrCalibTestTarDisengmtAg;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+
+/* Calibrated target engagement angle. Unit \'degree\' */
+extern VAR (float32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrCalibTestTarEngmtAg;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+
+
+/********************************* AREA 1 - END *****************************************/
+
+
+
+/************************* CALIBRATION PARAMETERS - BEGIN *****************************/
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+extern CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrCalibTestOffsetAg;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/* Offset angle lower limit in calibration test; unit \'degree\' */
+extern CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrCalibTestOffsetAgLo;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/* Offset angle upper limit in calibration test; unit \'degree\' */
+extern CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrCalibTestOffsetAgHi; /* PRQA S 0777 #All external variables are created with unique names */
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/* Safety ParkLock Manager primary actuator calibration test time out timer threshold; unit \'us\' */
+extern CONST(uint32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrCalibTestTiThd;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/* Safety ParkLock Manager primary actuator startup test time out timer threshold; unit \'ms\' */
+extern CONST(uint32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrPrimActrStrtUpTestTiOutTmrThd; /* PRQA S 0777 #All external variables are created with unique names */
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/* Safety ParkLock Manager primary actuator startup test HB1 enable test voltage tolerance; unit \'V\' */
+extern CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrPrimActrStrtUpTestHb1EnaTestUTolr; /* PRQA S 0777 #All external variables are created with unique names */
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/* Safety ParkLock Manager primary actuator startup test HB1 disable test voltage tolerance; unit \'V\' */
+extern CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrPrimActrStrtUpTestHb1DiTestUTolr; /* PRQA S 0777 #All external variables are created with unique names */
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/* Safety ParkLock Manager primary actuator startup test HB2 enable test voltage tolerance; unit \'V\' */
+extern CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrPrimActrStrtUpTestHb2EnaTestUTolr; /* PRQA S 0777 #All external variables are created with unique names */
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/* Safety ParkLock Manager primary actuator startup test HB2 disable test voltage tolerance; unit \'V\' */ 
+extern CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrPrimActrStrtUpTestHb2DiTestUTolr; /* PRQA S 0777 #All external variables are created with unique names */
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/* Safety ParkLock Manager actuator target engagement angle lower limit; unit \'degree\' */
+extern CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrTarEngmtAgLoRng;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/* Safety ParkLock Manager actuator target engagement angle upper limit; unit \'degree\' */
+extern CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrTarEngmtAgHiRng;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/* Safety ParkLock Manager actuator target disengagement angle lower limit; unit \'degree\' */
+extern CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrTarDisengmtAgLoRng;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/* Safety ParkLock Manager actuator target disengagement angle lower limit; unit \'degree\' */
+extern CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrTarDisengmtAgHiRng;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/* The maximum eAxle speed to allow engagement operation of parklock.; unit \'rpm\' */
+extern CONST(float32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrParlockSpdThd;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_8 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_8
+#include "MemMap.h"
+
+/* The maximum retry possible for engagement/disengagement operation */
+extern CONST(uint8, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrEngmtDisengmtMaxRetry;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+extern CONST(uint32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPrkgPosnMaxTi;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+extern CONST(uint32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPauseTiNorm;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+extern CONST(uint32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPauseTiStall;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/* Minimum engagement angle for performing angle calibration; unit \'degree\' */
+extern CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrCalibTestEngmtAgMin;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_8 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_8
+#include "MemMap.h"
+
+/* Maximum number of engage operations in calibration test */
+extern CONST(uint8, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrCalibTestEngCntMax;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_8 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_8
+#include "MemMap.h"
+
+/* Maximum number of disengage operations in calibration test */
+extern CONST(uint8, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrCalibTestDisengCntMax;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/* Maximum disengagement angle for performing angle calibration; unit \'degree\' */
+extern CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrCalibTestDisengmtAgMax;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/* Actuator current threshold for disengage operation in calibration test; unit \'A\' */
+extern CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrPrimActrDisengmtIMeasThd;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/* Actuator current threshold for engage operation in calibration test; unit \'A\' */
+extern CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrPrimActrEngmtIMeasThd;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/************************* CALIBRATION PARAMETERS - END *****************************/
+
+/*================== [closure] ==============================================*/
+#endif
+/* ***************************************************************** */
+/* Copyright (C) Valeo-Siemens eAutomotive GmbH 2021                 */
+/* All Rights Reserved. Confidential                                 */
+/* ***************************************************************** */
+/*==================[end of file]====================================*/
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockMgr/lib/.gitkeep b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockMgr/lib/.gitkeep
new file mode 100644
index 000000000..e69de29bb
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockMgr/make/makefile.mak b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockMgr/make/makefile.mak
new file mode 100644
index 000000000..358103210
--- /dev/null
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockMgr/make/makefile.mak
@@ -0,0 +1,28 @@
+# \\\\file\
#
+# \\brief AUTOSAR <ComponentName>
+#
+# This file contains the implementation of AUTOSAR
+# module <ComponentName>.
+#
+# \\author <AuthorInformation> Siemens AG, 91056 Erlangen, Germany
+#
+# Copyright 2015 - 2015 Siemens AG
+# All rights exclusively reserved for Siemens AG,
+# unless expressly agreed to otherwise.#
+################################################################## DEFINITIONS#
+#################################################################
+
+
+SftyParkLockMgr_BASE := $(dir $(abspath $(lastword $(dir $(abspath $(lastword $(MAKEFILE_LIST)))))))
+SftyParkLockMgr_PATH_OUT := $(SftyParkLockMgr_BASE)generated
+SftyParkLockMgr_PATH_USE := $(SftyParkLockMgr_BASE)
+CC_FILES_TO_BUILD += $(wildcard $(SftyParkLockMgr_BASE)src/*.c)
+CPP_FILES_TO_BUILD += $(wildcard $(SftyParkLockMgr_BASE)src/*.cpp)
+ASM_FILES_TO_BUILD += $(wildcard $(SftyParkLockMgr_BASE)src/*.s)
+
+SftyParkLockMgr_ARCHIVED_LIB := $(wildcard $(SftyParkLockMgr_BASE)lib/*.a)
+SftyParkLockMgr_GENERATED_LIB := $(SftyParkLockMgr_BASE)generated/lib/SftyParkLockMgr.a
+SftyParkLockMgr_ARCHIVED_A2L := $(wildcard $(SftyParkLockMgr_BASE)a2l/*.a2l)
+SftyParkLockMgr_GENERATED_A2L := $(SftyParkLockMgr_BASE)generated/a2l/SftyParkLockMgr.a2l
+A2L_SLAVE_SftyParkLockMgr = $(SftyParkLockMgr_GENERATED_A2L)
+CC_INCLUDE_PATH += $(SftyParkLockMgr_BASE)include
\\ No newline at end of file
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockMgr/src/SftyParkLockMgr.c b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockMgr/src/SftyParkLockMgr.c
new file mode 100644
index 000000000..4033a799b
--- /dev/null
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockMgr/src/SftyParkLockMgr.c
@@ -0,0 +1,2057 @@
+/* ********************************************************************** */
+/* Sourcefile:    SftyParkLockMgr.c                                       */
+/*                                                                        */
+/* Project:       100kw                                                   */
+/* TriCore                                                                */
+/*                                                                        */
+/* Department: Valeo Siemens eAutomotive                                  */
+/*             I DT EC R&D                                                */
+/* ********************************************************************** */
+/* Copyright (C) Valeo Siemens eAutomotive Germany GmbH 2021              */
+/* All Rights Reserved. Confidential                                      */
+/* ********************************************************************** */
+
+/*!
+ * \\defgroup SftyParkLockMgr SftyParkLockMgr -
+ *
+ *
+ */
+
+
+/** 
+ * \\page SftyParkLockMgr_reqs  
+ * \\ingroup SftyParkLockMgr
+ * \\brief  
+ */
+
+
+/*!
+ * \\defgroup SftyParkLockMgr_module
+ * \\ingroup SftyParkLockMgr
+ * @{
+ */
+
+/*================== [includes] =============================================*/
+#include "Std_Types.h"
+#include "Sfty_Types.h"
+#include "SftyParkLockActr.h"
+#include "SftyParkLockEvln.h"
+#include "SftyParkLockMgr.h"
+#include "SftyParkLockMgr_data.h" /* PRQA S 0380 #Macro definitions are required to meet the correct functionality */
+#include "C2cComBswData.h"
+#include "SftySysInit.h"
+#include "IfxPort_reg.h"
+#include "SftyCrc.h"
+#include "SftyCrc_data.h"
+#include "SftyUtils.h"
+#include "Mathlib.h"
+#include "SftyErrDeb.h"
+#include "C2cComSftyData.h"
+
+/*================== [defines] ==============================================*/
+#define DIV_BY_TWO 2.0f
+/*================== [type definitions] =====================================*/
+/* State type of parklock state machine */
+typedef struct StateType_Tag
+{
+   void (*OnEntry)(void);
+   void  (*Run)(void);
+   SftyParkLockMgr_OperModType (*NextSt)(void);
+   void (*OnExit)(void);
+}SftyParkLockMgr_StateType;
+
+/*================== [prototype of local functions] =========================*/
+
+/* Empty function for unused states */
+STATIC FUNC(void, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_DummyFunction(void);
+
+/* Primary actuator startup test state functions */
+STATIC FUNC(void, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_PrimActrStrtupTstOnEntry(void);
+STATIC FUNC(void, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_PrimActrStrtupTstRun(void);
+STATIC FUNC(SftyParkLockMgr_OperModType, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_PrimActrStrtupTstNextSt(void);
+
+/* Primary actuator idle state functions */
+STATIC FUNC(void, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_IdleOnEntry(void);
+STATIC FUNC(SftyParkLockMgr_OperModType, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_IdleNextSt(void);
+
+/* Primary actuator engage state functions */
+STATIC FUNC(void, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_PrimActrEngOnEntry(void);
+STATIC FUNC(void, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_PrimActrEngRun(void);
+STATIC FUNC(SftyParkLockMgr_OperModType, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_PrimActrEngNextSt(void);
+STATIC FUNC(void, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_PrimActrEngOnExit(void);
+
+/* Primary actuator disengage state functions */
+STATIC FUNC(void, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_PrimActrDisengOnEntry(void);
+STATIC FUNC(void, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_PrimActrDisengRun(void);
+STATIC FUNC(SftyParkLockMgr_OperModType, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_PrimActrDisengNextSt(void);
+STATIC FUNC(void, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_PrimActrDisengOnExit(void);
+
+/* Primary actuator calibration test state functions */
+STATIC FUNC(void, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_CalibTestOnEntry(void);
+STATIC FUNC(void, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_CalibTestRun(void);
+STATIC FUNC(SftyParkLockMgr_OperModType, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_CalibTestNextSt(void);
+
+/* Primary actuator fail state functions */
+STATIC FUNC(void, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_FailRun(void);
+STATIC FUNC(SftyParkLockMgr_OperModType, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_FailNextSt(void);
+
+/*================== [local data] ===========================================*/
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CONST_32 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_CONST_32
+#include "MemMap.h"
+
+/* Table of state functions for the parklock state machine */
+STATIC CONST(SftyParkLockMgr_StateType, SFTYPARKLOCKMGR_CONST) SftyParkLockMgrStTbl[] =
+{
+         [SFTYPARKLOCKMGR_OPERMOD_PRIMACTRSTRTUPTST] = /* PRQA S 3676 #Designators have been used in this initialization list for better readability */
+         {
+                  .OnEntry = &SftyParkLockMgr_PrimActrStrtupTstOnEntry,
+                  .Run = &SftyParkLockMgr_PrimActrStrtupTstRun,
+                  .NextSt = &SftyParkLockMgr_PrimActrStrtupTstNextSt,
+                  .OnExit = &SftyParkLockMgr_DummyFunction
+         },
+         [SFTYPARKLOCKMGR_OPERMOD_IDLE] =
+         {
+                  .OnEntry = &SftyParkLockMgr_IdleOnEntry,
+                  .Run = &SftyParkLockMgr_DummyFunction,
+                  .NextSt = &SftyParkLockMgr_IdleNextSt,
+                  .OnExit = &SftyParkLockMgr_DummyFunction
+         },
+         [SFTYPARKLOCKMGR_OPERMOD_ENG_PRIM_ACTR] =
+         {
+                  .OnEntry = &SftyParkLockMgr_PrimActrEngOnEntry,
+                  .Run = &SftyParkLockMgr_PrimActrEngRun,
+                  .NextSt = &SftyParkLockMgr_PrimActrEngNextSt,
+                  .OnExit = &SftyParkLockMgr_PrimActrEngOnExit
+         },
+         [SFTYPARKLOCKMGR_OPERMOD_DISENG] =
+         {
+                  .OnEntry = &SftyParkLockMgr_PrimActrDisengOnEntry,
+                  .Run = &SftyParkLockMgr_PrimActrDisengRun,
+                  .NextSt = &SftyParkLockMgr_PrimActrDisengNextSt,
+                  .OnExit = &SftyParkLockMgr_PrimActrDisengOnExit
+         },
+         [SFTYPARKLOCKMGR_OPERMOD_CALIBRATETEST] =
+         {
+                  .OnEntry = &SftyParkLockMgr_CalibTestOnEntry,
+                  .Run = &SftyParkLockMgr_CalibTestRun,
+                  .NextSt = &SftyParkLockMgr_CalibTestNextSt,
+                  .OnExit = &SftyParkLockMgr_DummyFunction
+         },
+         [SFTYPARKLOCKMGR_OPERMOD_FAIL] =
+         {
+                  .OnEntry = &SftyParkLockMgr_DummyFunction,
+                  .Run = &SftyParkLockMgr_FailRun,
+                  .NextSt = &SftyParkLockMgr_FailNextSt,
+                  .OnExit = &SftyParkLockMgr_DummyFunction
+         }
+};
+
+#define SFTYPARKLOCKMGR_STOP_SEC_CONST_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CONST_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_CLEARED_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_CLEARED_8
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrEngmtDisengmtRetryCnt
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = " Retry count of engage and disengage operation "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Retry count of engage and disengage operation */
+STATIC VAR(uint8, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrEngmtDisengmtRetryCnt;
+
+/*
+@@ SYMBOL = SftyParkLockMgrCalibTestEngCnt
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = " Engagement counter in calibration test "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Engagement counter in calibration test */
+STATIC VAR(uint8, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrCalibTestEngCnt;
+
+/*
+@@ SYMBOL = SftyParkLockMgrCalibTestDisengCnt
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = " Disengagement counter in calibration test "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Disengagement counter in calibration test */
+STATIC VAR(uint8, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrCalibTestDisengCnt;
+
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_CLEARED_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_CLEARED_8 (online) */
+
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_CLEARED_32 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_CLEARED_32
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrCalibTestEngAg
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = " Total engagement angle calculated in calibration test "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Total engagement angle calculated in calibration test. Unit is \'degree\' */
+STATIC VAR(float32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrCalibTestEngAg;
+
+/*
+@@ SYMBOL = SftyParkLockMgrCalibTestDisengAg
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = " Total engagement angle calculated in calibration test "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Total engagement angle calculated in calibration test. Unit is \'degree\' */
+STATIC VAR(float32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrCalibTestDisengAg;
+
+/*
+@@ SYMBOL = SftyParkLockMgrCalibTestEngAgAvg
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = " Average engagement angle calculated in calibration test "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Average engagement angle calculated in calibration test. Unit is \'degree\' */
+STATIC VAR(float32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrCalibTestEngAgAvg;
+
+/*
+@@ SYMBOL = SftyParkLockMgrCalibTestDisengAgAvg
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = " Average disengagement angle calculated in calibration test "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Average disengagement angle calculated in calibration test. Unit is \'degree\' */
+STATIC VAR(float32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrCalibTestDisengAgAvg;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_CLEARED_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_CLEARED_32 (online) */
+
+/*================== [definition of local functions] ========================*/
+
+
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_DisEngPrimActrAllwd(void)
+* \\brief      : This function evaluates the activation criteria for disengagement state
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : TRUE: Disengage operation is allowed
+* \\return     : FALSE: Disengage operation is not allowed
+* \\Parent_DD  : SftyParkLockMgr_IdleNextSt
+*/
+/***********************************************************************************/
+LOCAL_INLINE boolean SftyParkLockMgr_DisEngPrimActrAllwd(void)
+{
+   boolean retVal;
+
+   /* Parklock is in engaged or unknown position */
+   if ((SftyParkLockEvlnActrAbsPosn == SFTYPARKLOCK_POSN_ENGAGED) ||
+       (SftyParkLockEvlnActrAbsPosn == SFTYPARKLOCK_POSN_UNDETERMINED))
+   {
+      /* Disengage operation is allowed */
+      retVal = TRUE;
+   }
+   else
+   {
+      /* Disengage operation is not allowed */
+      retVal = FALSE;
+   }
+
+   return retVal;
+}
+
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_EngPrimActrAllwd(void)
+* \\brief      : This function evaluates the activation criteria for engagement state
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : TRUE: Engage operation is allowed
+* \\return     : FALSE: Engage operation is not allowed
+* \\Parent_DD  : SftyParkLockMgr_IdleNextSt
+*/
+/***********************************************************************************/
+LOCAL_INLINE boolean SftyParkLockMgr_EngPrimActrAllwd(void)
+{
+   boolean retVal;
+
+   /* Speed of EM is valid AND
+    * Absolute value of EM speed is less than or equal to speed threshold AND
+    * Parklock is in disengaged or unknown position */
+   if (
+       (SftyReplcmtSpdMonMeclSpdVldyFlg == TRUE) &&
+       (MLIB_F32AbsF32(SftyReplcmtSpdMonMeclSpdRpmFild) <= SftyParkLockMgrParlockSpdThd) &&
+       ((SftyParkLockEvlnActrAbsPosn == SFTYPARKLOCK_POSN_DISENGAGED) ||
+        (SftyParkLockEvlnActrAbsPosn == SFTYPARKLOCK_POSN_UNDETERMINED))
+      )
+   {
+      /* Engage operation is allowed */
+      retVal = TRUE;
+   }
+   else
+   {
+      /* Engage operation is not allowed */
+      retVal = FALSE;
+   }
+
+   return retVal;
+}
+
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_UpdIdleNextSt(void)
+* \\brief      : This function updates the next state from IDLE state based on
+* \\           : parklock CAN requests
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : nextSt- Next state of parklock state machine
+* \\Parent_DD  : SftyParkLockMgr_IdleNextSt
+*/
+/***********************************************************************************/
+LOCAL_INLINE SftyParkLockMgr_OperModType SftyParkLockMgr_UpdIdleNextSt(void)
+{
+   SftyParkLockMgr_OperModType nextSt;
+
+   /* CAN request is ENGAGE and engagement is allowed */
+   if((SftyParkLockMgrPlkCanReq == SFTYPARKLOCKMGR_PRKGPOSN_PARK) &&
+      (SftyParkLockMgr_EngPrimActrAllwd() == TRUE ))
+   {
+      /* Next state is ENGAGE */
+      nextSt = SFTYPARKLOCKMGR_OPERMOD_ENG_PRIM_ACTR;
+   }
+   /* CAN request is DISENGAGE and disengagement is allowed */
+   else if ( (SftyParkLockMgrPlkCanReq == SFTYPARKLOCKMGR_PRKGPOSN_DRIVE) &&
+             (SftyParkLockMgr_DisEngPrimActrAllwd() == TRUE ))
+   {
+      /* Next state is DISENGAGE */
+      nextSt = SFTYPARKLOCKMGR_OPERMOD_DISENG;
+   }
+   else
+   {
+      /* Stay in IDLE state */
+      nextSt = SFTYPARKLOCKMGR_OPERMOD_IDLE;
+   }
+
+   return nextSt;
+}
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_CalibTestRngChkCrcCalcn(void)
+* \\brief      : This function handles the range check and CRC calculation of calibration test
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : None
+* \\Parent_DD  : SftyParkLockMgr_MainFunction
+*/
+/***********************************************************************************/
+LOCAL_INLINE void SftyParkLockMgr_CalibTestRngChkCrcCalcn(void)
+{
+   float32 tempDiffAg;
+
+   /* Calculate the difference between disengage  angle and engage angle */
+   tempDiffAg = SftyParkLockMgrCalibTestTarDisengmtAg - SftyParkLockMgrCalibTestTarEngmtAg;
+
+   /* Angle difference is greater than 0 and less than 90 */
+   if ((tempDiffAg > SftyParkLockMgrCalibTestOffsetAgLo) &&
+       (tempDiffAg < SftyParkLockMgrCalibTestOffsetAgHi))
+   {
+      /* Target engagement angle is in range */
+      if ((SftyParkLockMgrCalibTestTarEngmtAg > SftyParkLockMgrTarEngmtAgLoRng)
+         && (SftyParkLockMgrCalibTestTarEngmtAg < SftyParkLockMgrTarEngmtAgHiRng))
+      {
+         /* Target disengagement angle is in range */
+         if ((SftyParkLockMgrCalibTestTarDisengmtAg > SftyParkLockMgrTarDisengmtAgLoRng)
+            && (SftyParkLockMgrCalibTestTarDisengmtAg < SftyParkLockMgrTarDisengmtAgHiRng))
+         {
+            /* Update CRC of target engagement angle */
+            SftyC2cData.EngmentValueCrc = SftyCrc_CalcCRC16((const uint8*)&SftyParkLockMgrCalibTestTarEngmtAg,
+                                        sizeof(SftyParkLockMgrCalibTestTarEngmtAg),
+                                        CRC_INITIAL_VALUE16,
+                                        TRUE);
+
+            /* Update CRC of target disengagement angle */
+            SftyC2cData.DisEngmentValueCrc = SftyCrc_CalcCRC16((const uint8*)&SftyParkLockMgrCalibTestTarDisengmtAg,
+                                        sizeof(SftyParkLockMgrCalibTestTarDisengmtAg),
+                                        CRC_INITIAL_VALUE16,
+                                        TRUE);
+
+            /* Update target engagement angle in C2C */
+            SftyC2cData.EngmentValue = SftyParkLockMgrCalibTestTarEngmtAg;
+
+            /* Update target disengagement angle in C2C */
+            SftyC2cData.DisEngmentValue = SftyParkLockMgrCalibTestTarDisengmtAg;
+
+            /* next state of angle calibration test is PASS */
+            SftyParkLockMgrCalibTestSt = SFTYPARKLOCKMGR_CALIBTST_PASS;
+         }
+         else
+         {
+            /* next state of angle calibration test is FAIL */
+            SftyParkLockMgrCalibTestSt = SFTYPARKLOCKMGR_CALIBTST_FAIL;
+         }
+      }
+      else
+      {
+         /* next state of angle calibration test is FAIL */
+         SftyParkLockMgrCalibTestSt = SFTYPARKLOCKMGR_CALIBTST_FAIL;
+      }
+   }
+   else
+   {
+      /* next state of angle calibration test is FAIL */
+      SftyParkLockMgrCalibTestSt = SFTYPARKLOCKMGR_CALIBTST_FAIL;
+   }
+
+   return;
+}
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_CalibTestDisengTest(void)
+* \\brief      : This function handles the disengage state of calibration test
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : None
+* \\Parent_DD  : SftyParkLockMgr_MainFunction
+*/
+/***********************************************************************************/
+LOCAL_INLINE void SftyParkLockMgr_CalibTestDisengTest(void)
+{
+  /* Start disengage operation with maximum disengagement angle */
+  SftyParkLockActr_SetPrimActrTarAg(SftyParkLockMgrCalibTestDisengmtAgMax, SFTYPARKLOCK_DIR_DISENGAGE);
+
+  /* Calibration test timer elapsed */
+  if (TRUE == SftyUtils_IsTrmElpd(&SftyParkLockMgrCalibTestTiOutTmrVar))
+  {
+     /* next state of angle calibration test is FAIL */
+     SftyParkLockMgrCalibTestSt = SFTYPARKLOCKMGR_CALIBTST_FAIL;
+  }
+  else
+  {
+     /* Three times engagement and disengagement are done */
+     if( (SftyParkLockMgrCalibTestEngCnt >= SftyParkLockMgrCalibTestEngCntMax) &&
+        (SftyParkLockMgrCalibTestDisengCnt >= SftyParkLockMgrCalibTestDisengCntMax) )
+     {
+        /* Stop parklock actuator */
+        SftyParkLockActr_PrimActrStop();
+
+        /* next state of angle calibration test is ANGLE CALCULATION */
+        SftyParkLockMgrCalibTestSt = SFTYPARKLOCKMGR_CALIBTST_ANGLE_CALC;
+     }
+     else
+     {
+        /* Actuator current reached threshold */
+        if (MLIB_F32AbsF32(SftyParkLockEvlnPrimActrIMeas) >= SftyParkLockMgrPrimActrDisengmtIMeasThd)
+        {
+           /* Increment disengage count by 1 */
+           SftyParkLockMgrCalibTestDisengCnt++;
+
+           /* Store disengagement angle */
+           SftyParkLockMgrCalibTestDisengAg = SftyParkLockMgrCalibTestDisengAg + SftyParkLockEvlnActrAg;
+
+           /* Stop parklock actuator */
+           SftyParkLockActr_PrimActrStop();
+
+           /* next state of angle calibration test is ENGAGE */
+           SftyParkLockMgrCalibTestSt = SFTYPARKLOCKMGR_CALIBTST_ENGAGETST;
+
+           /* Restart calibration test timer */
+           SftyUtils_StrtTmrUs(&SftyParkLockMgrCalibTestTiOutTmrVar, SftyParkLockMgrCalibTestTiThd);
+        }
+        else
+        {
+           /* Continue test */
+        }
+     }
+  }
+
+  return;
+}
+
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_CalibTestEngTest(void)
+* \\brief      : This function handles the engage state of calibration test
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : None
+* \\Parent_DD  : SftyParkLockMgr_MainFunction
+*/
+/***********************************************************************************/
+LOCAL_INLINE void SftyParkLockMgr_CalibTestEngTest(void)
+{
+  /* Start engage operation with minimum engagement angle */
+  SftyParkLockActr_SetPrimActrTarAg(SftyParkLockMgrCalibTestEngmtAgMin, SFTYPARKLOCK_DIR_ENGAGE);
+
+  /* Calibration test timer elapsed */
+  if (TRUE == SftyUtils_IsTrmElpd(&SftyParkLockMgrCalibTestTiOutTmrVar))
+  {
+     /* next state of angle calibration test is FAIL */
+     SftyParkLockMgrCalibTestSt = SFTYPARKLOCKMGR_CALIBTST_FAIL;
+  }
+  else
+  {
+     /* Three times engagement and disengagement are done */
+     if( (SftyParkLockMgrCalibTestEngCnt >= SftyParkLockMgrCalibTestEngCntMax) &&
+        (SftyParkLockMgrCalibTestDisengCnt >= SftyParkLockMgrCalibTestDisengCntMax) )
+     {
+        /* Stop parklock actuator */
+        SftyParkLockActr_PrimActrStop();
+
+        /* next state of angle calibration test is ANGLE CALCULATION */
+        SftyParkLockMgrCalibTestSt = SFTYPARKLOCKMGR_CALIBTST_ANGLE_CALC;
+     }
+    else
+    {
+       /* Actuator current reached threshold */
+       if (MLIB_F32AbsF32(SftyParkLockEvlnPrimActrIMeas) >= SftyParkLockMgrPrimActrEngmtIMeasThd)
+       {
+          /* Increment engage count by 1 */
+          SftyParkLockMgrCalibTestEngCnt++;
+
+          /* Store engagement angle */
+          SftyParkLockMgrCalibTestEngAg = SftyParkLockMgrCalibTestEngAg + SftyParkLockEvlnActrAg;
+
+          /* Stop parklock actuator */
+          SftyParkLockActr_PrimActrStop();
+
+          /* next state of angle calibration test is DISENGAGE */
+          SftyParkLockMgrCalibTestSt = SFTYPARKLOCKMGR_CALIBTST_DISENGAGETST;
+
+          /* Restart calibration test timer */
+          SftyUtils_StrtTmrUs(&SftyParkLockMgrCalibTestTiOutTmrVar, SftyParkLockMgrCalibTestTiThd);
+       }
+       else
+       {
+         /* Continue test */
+       }
+    }
+  }
+
+  return;
+}
+
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_CalibTestIni(void)
+* \\brief      : This function handles the INIT state of calibration test
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : None
+* \\Parent_DD  : SftyParkLockMgr_MainFunction
+*/
+/***********************************************************************************/
+LOCAL_INLINE void SftyParkLockMgr_CalibTestIni(void)
+{
+  /* Initialize calibrated engage angle */
+  SftyParkLockMgrCalibTestEngAg = 0.0f;
+
+  /* Initialize calibrated disengage angle */
+  SftyParkLockMgrCalibTestDisengAg = 0.0f;
+
+  /* Initialize engage operation count */
+  SftyParkLockMgrCalibTestEngCnt = 0U;
+
+  /* Initialize disengage operation count */
+  SftyParkLockMgrCalibTestDisengCnt = 0U;
+
+  /* Initialize NvM store request flag */
+  SftyC2cData.PLKNVMStorReq = FALSE;
+
+  /* Initialize angle range validity flag */
+  SftyC2cData.CalibTestRngVld = E_NOT_OK;
+
+  /* Parklock already in engaged position */
+  if(SftyParkLockEvlnActrAbsPosn == SFTYPARKLOCK_POSN_ENGAGED)
+  {
+    /* The next state of angle calibration test is DISENGAGE */
+    SftyParkLockMgrCalibTestSt = SFTYPARKLOCKMGR_CALIBTST_DISENGAGETST;
+  }
+  else
+  {
+     /* The next state of angle calibration test is ENGAGE */
+     SftyParkLockMgrCalibTestSt = SFTYPARKLOCKMGR_CALIBTST_ENGAGETST;
+  }
+
+  /* Update angle calibration test result status */
+  SftyParkLockMgrCalibTestSts = SFTYPARKLOCKMGR_TEST_STS_ACTIVE;
+
+  /* Update calibration test finish status */
+  SftyParkLockMgrCalibTestFinshd = SFTYPARKLOCKMGR_TEST_STS_ACTIVE;
+
+  /* Start calibration test timer */
+  SftyUtils_StrtTmrUs(&SftyParkLockMgrCalibTestTiOutTmrVar, SftyParkLockMgrCalibTestTiThd);
+
+  return;
+}
+
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_EngmtDisengmtAgRngChk(void)
+* \\brief      : This function performs range check of engagement angle and
+* \\           : disengagement angle
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : None
+* \\Parent_DD  : SftyParkLockMgr_PrimActrStrtupTstRun
+*/
+/***********************************************************************************/
+LOCAL_INLINE void SftyParkLockMgr_EngmtDisengmtAgRngChk(void)
+{
+   /* Target engagement angle read from Nvm is in range */
+   if ((SftyParkLockMgrTarEngmtAgNvm > SftyParkLockMgrTarEngmtAgLoRng) &&
+       (SftyParkLockMgrTarEngmtAgNvm < SftyParkLockMgrTarEngmtAgHiRng))
+   {
+      /* No range error in engagement angle */
+      SftyParkLockMgrEngRangErrMonrSt = ERR_DEB_MONR_STS_PASSED;
+   }
+   else
+   {
+      /* Engagement angle range error */
+      SftyParkLockMgrEngRangErrMonrSt = ERR_DEB_MONR_STS_FAILED;
+   }
+
+   /* Target disengagement angle read from Nvm is in range */
+   if ((SftyParkLockMgrTarDisengmtAgNvm > SftyParkLockMgrTarDisengmtAgLoRng) &&
+       (SftyParkLockMgrTarDisengmtAgNvm < SftyParkLockMgrTarDisengmtAgHiRng))
+   {
+      /* No range error in disengagement angle */
+      SftyParkLockMgrDisEngRangErrMonrSt  = ERR_DEB_MONR_STS_PASSED;
+   }
+   else
+   {
+      /* Disengagement angle range error */
+      SftyParkLockMgrDisEngRangErrMonrSt  = ERR_DEB_MONR_STS_FAILED;
+   }
+
+   return;
+}
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_PrimActrStrtUpHb2DisTest(void)
+* \\brief      : This function handles HB2 disable test of startup test
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : None
+* \\Parent_DD  : SftyParkLockMgr_PrimActrStrtupTstRun
+*/
+/***********************************************************************************/
+LOCAL_INLINE void SftyParkLockMgr_PrimActrStrtUpHb2DisTest(void)
+{
+   float32 tempUDif;
+
+   /* Startup test timeout occurred */
+   if(SftyUtils_IsTrmElpd(&SftyParkLockMgrPrimActrStrtUpTestTiOutTmrVar) == TRUE)
+   {
+      /* Set the next state of startup test to FAIL */
+      SftyParkLockMgrPrimActrStrtUpTestSt = SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_FAIL;
+   }
+   else
+   {
+      /* Calculate the difference between actuator motor N voltage and kl30voltage/2 */
+      tempUDif = MLIB_F32AbsF32(SftyParkLockEvlnPrimActrNegChUMeas - (SftyLvSplyEvlnKl30UMeas/DIV_BY_TWO));
+
+      /* Motor N voltage = Half of kl30voltage +- Tolerance */
+      if (tempUDif <= SftyParkLockMgrPrimActrStrtUpTestHb2DiTestUTolr)
+      {
+         /* Set the next state of startup test to passed */
+         SftyParkLockMgrPrimActrStrtUpTestSt = SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_PASS;
+      }
+      else
+      {
+         /* Continue test */
+      }
+   }
+
+   return;
+}
+
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_PrimActrStrtUpHb2EnaTest(void)
+* \\brief      : This function handles HB2 enable test of power stage startup test
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : None
+* \\Parent_DD  : SftyParkLockMgr_PrimActrStrtupTstRun
+*/
+/***********************************************************************************/
+LOCAL_INLINE void SftyParkLockMgr_PrimActrStrtUpHb2EnaTest(void)
+{
+   float32 tempUDif;
+
+   /* Startup test timeout occurred */
+   if(SftyUtils_IsTrmElpd(&SftyParkLockMgrPrimActrStrtUpTestTiOutTmrVar) == TRUE)
+   {
+      /* Set the next state of startup test to FAIL */
+      SftyParkLockMgrPrimActrStrtUpTestSt = SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_FAIL;
+   }
+   else
+   {
+      /* Calculate the difference between actuator motor N voltage and kl30voltage */
+      tempUDif = MLIB_F32AbsF32(SftyParkLockEvlnPrimActrNegChUMeas - SftyLvSplyEvlnKl30UMeas);
+
+      /* Motor N voltage = kl30voltage +- Tolerance*/
+      if (tempUDif <= SftyParkLockMgrPrimActrStrtUpTestHb2EnaTestUTolr)
+      {
+         /* Restart primary actuator startup test monitoring timer for HB2 disable test*/
+         SftyUtils_StrtTmrUs(&SftyParkLockMgrPrimActrStrtUpTestTiOutTmrVar, SftyParkLockMgrPrimActrStrtUpTestTiOutTmrThd);
+
+         /* Disable HB2 (HB2_EN = 0) */
+         SftyParkLockActr_Hb2DiTst();
+
+         /* Set the next state of startup test to HB2 disable test */
+         SftyParkLockMgrPrimActrStrtUpTestSt = SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_HB2_DITST;
+      }
+      else
+      {
+         /* Continue test */
+      }
+   }
+   return;
+}
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_PrimActrStrtUpHb1EnaTest(void)
+* \\brief      : This function handles HB1 enable test of startup test
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : None
+* \\Parent_DD  : SftyParkLockMgr_PrimActrStrtupTstRun
+*/
+/***********************************************************************************/
+LOCAL_INLINE void SftyParkLockMgr_PrimActrStrtUpHb1EnaTest(void)
+{
+   float32 tempUDif;
+
+   /* Startup test timeout occurred */
+   if (SftyUtils_IsTrmElpd(&SftyParkLockMgrPrimActrStrtUpTestTiOutTmrVar) == TRUE)
+   {
+      /* Set the next state of startup test to FAIL */
+      SftyParkLockMgrPrimActrStrtUpTestSt = SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_FAIL;
+   }
+   else
+   {
+      /* Calculate the difference between actuator motor P voltage and kl30voltage */
+      tempUDif = MLIB_F32AbsF32(SftyParkLockEvlnPrimActrPosChUMeas - SftyLvSplyEvlnKl30UMeas);
+
+      /* Motor P voltage = kl30voltage +- Tolerance*/
+      if (tempUDif <= SftyParkLockMgrPrimActrStrtUpTestHb1EnaTestUTolr)
+      {
+         /* Restart primary actuator startup test monitoring timer for HB1 disable test*/
+         SftyUtils_StrtTmrUs(&SftyParkLockMgrPrimActrStrtUpTestTiOutTmrVar, SftyParkLockMgrPrimActrStrtUpTestTiOutTmrThd);
+
+         /* Disable HB1(HB1_EN = 0) */
+         SftyParkLockActr_Hb1DiTst();
+
+         /* Set the next state of startup test to HB1 disable test */
+         SftyParkLockMgrPrimActrStrtUpTestSt = SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_HB1_DITST;
+      }
+      else
+      {
+         /* Continue test */
+      }
+   }
+
+   return;
+}
+
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_PrimActrStrtUpHb1DisTest(void)
+* \\brief      : This function handles HB1 disable test of startup test
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : None
+* \\Parent_DD  : SftyParkLockMgr_PrimActrStrtupTstRun
+*/
+/***********************************************************************************/
+LOCAL_INLINE void SftyParkLockMgr_PrimActrStrtUpHb1DisTest(void)
+{
+   float32 tempUDif;
+
+   /* Startup test timeout occurred */
+   if (SftyUtils_IsTrmElpd(&SftyParkLockMgrPrimActrStrtUpTestTiOutTmrVar) == TRUE)
+   {
+      /* Set the next state of startup test to FAIL */
+      SftyParkLockMgrPrimActrStrtUpTestSt = SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_FAIL;
+   }
+   else
+   {
+      /* Calculate the difference between actuator motor P voltage and kl30voltage/2 */
+      tempUDif = MLIB_F32AbsF32(SftyParkLockEvlnPrimActrPosChUMeas - (SftyLvSplyEvlnKl30UMeas/DIV_BY_TWO));
+
+      /* Motor P voltage = Half of kl30voltage +- Tolerance*/
+      if (tempUDif <= SftyParkLockMgrPrimActrStrtUpTestHb1DiTestUTolr)
+      {
+         /* Disable all HB switches for next test step (HBx_CTRL = 0, HBx_EN = 0) */
+         SftyParkLockActr_DiTst();
+
+         /* Restart primary actuator startup test monitoring timer for HB2 enable test*/
+         SftyUtils_StrtTmrUs(&SftyParkLockMgrPrimActrStrtUpTestTiOutTmrVar, SftyParkLockMgrPrimActrStrtUpTestTiOutTmrThd);
+
+         /* Enable HB2(HB2_CTRL = 1, HB2_EN = 1) */
+         SftyParkLockActr_Hb2EnTst();
+
+         /* Set the next state of startup test to HB2 enable test */
+         SftyParkLockMgrPrimActrStrtUpTestSt = SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_HB2_ENTST;
+      }
+      else
+      {
+         /* Continue test */
+      }
+   }
+
+   return;
+}
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_PrimActrStrtUpTestIni(void)
+* \\brief      : This function handles the INIT state of startup test
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : None
+* \\Parent_DD  : SftyParkLockMgr_PrimActrStrtupTstRun
+*/
+/***********************************************************************************/
+LOCAL_INLINE void SftyParkLockMgr_PrimActrStrtUpTestIni(void)
+{
+   /*Disable parklock actuator(HBx_CTRL = 0, HBx_EN = 0) */
+   SftyParkLockActr_DiTst();
+
+   /* Start primary actuator startup test monitoring timer */
+   SftyUtils_StrtTmrUs(&SftyParkLockMgrPrimActrStrtUpTestTiOutTmrVar, SftyParkLockMgrPrimActrStrtUpTestTiOutTmrThd);
+
+   /* Start HB1 enable test. Enable HB1_EN and HB1_CTRL */
+   SftyParkLockActr_Hb1EnTst();
+
+   /* Set the next state of startup test to HB1 enable test */
+   SftyParkLockMgrPrimActrStrtUpTestSt = SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_HB1_ENTST;
+
+   /* Set finish status of power stage startup test to active */
+   SftyParkLockMgrPrimActrStrtUpTestFinshd = SFTYPARKLOCKMGR_TEST_STS_ACTIVE;
+
+   /* Set the finish status of overall startup test to active */
+   SftyParkLockMgrPrimActrOverAllStrtUpTestFinshd = SFTYPARKLOCKMGR_TEST_STS_ACTIVE;
+
+   return;
+}
+
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_IniPosnAgStrtUpTest(void)
+* \\brief      : This function performs parklock initial position angle startup test
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : None
+* \\Parent_DD  : SftyParkLockMgr_PrimActrStrtupTstRun
+*/
+/***********************************************************************************/
+LOCAL_INLINE void SftyParkLockMgr_IniPosnAgStrtUpTest(void)
+{
+   uint16 calcdCrc1;
+   uint16 calcdCrc2;
+
+   /* Read target engagement angle CRC from Nvm */
+   SftyParkLockMgrEngmtAgCrcNvm = BswC2cData.EngmentValueCrc;
+
+   /* Read target disengagement angle CRC from Nvm */
+   SftyParkLockMgrDisengmtAgCrcNvm = BswC2cData.DisEngmentValueCrc;
+
+   /* Read target engagement angle from Nvm */
+   SftyParkLockMgrTarEngmtAgNvm = BswC2cData.EngmentValue;
+
+   /* Read target disengagement angle from Nvm */
+   SftyParkLockMgrTarDisengmtAgNvm = BswC2cData.DisEngmentValue;
+
+   /* Calculate CRC of target engagement angle */
+   calcdCrc1 = SftyCrc_CalcCRC16((const uint8*)&SftyParkLockMgrTarEngmtAgNvm,
+                                  sizeof(SftyParkLockMgrTarEngmtAgNvm),
+                                  CRC_INITIAL_VALUE16,
+                                  TRUE);
+
+   /* Calculate CRC of target disengagement angle */
+   calcdCrc2 = SftyCrc_CalcCRC16((const uint8*)&SftyParkLockMgrTarDisengmtAgNvm,
+                                  sizeof(SftyParkLockMgrTarDisengmtAgNvm),
+                                  CRC_INITIAL_VALUE16,
+                                  TRUE);
+
+   /* CRC validation */
+   if ((calcdCrc1 == SftyParkLockMgrEngmtAgCrcNvm) &&
+       (calcdCrc2 == SftyParkLockMgrDisengmtAgCrcNvm))
+   {
+      /* CRC validation successful */
+      SftyParkLockMgrDisengEngCRCErrMonrSt = ERR_DEB_MONR_STS_PASSED;
+   }
+   else
+   {
+      /* CRC validation failed */
+      SftyParkLockMgrDisengEngCRCErrMonrSt = ERR_DEB_MONR_STS_FAILED;
+   }
+
+   /* CRC validation passed */
+   if (SftyParkLockMgrDisengEngCRCErrMonrSt == ERR_DEB_MONR_STS_PASSED)
+   {
+      /* Perform range check of engagement angle and disengagement angle */
+      SftyParkLockMgr_EngmtDisengmtAgRngChk();
+   }
+   else
+   {
+      /* Do nothing */
+   }
+
+   /* Overall startup test status */
+   if( (SftyParkLockMgrDisengEngCRCErrMonrSt == ERR_DEB_MONR_STS_PASSED) &&
+       (SftyParkLockMgrEngRangErrMonrSt == ERR_DEB_MONR_STS_PASSED) &&
+       (SftyParkLockMgrDisEngRangErrMonrSt  == ERR_DEB_MONR_STS_PASSED) )
+   {
+      /* Overall startup test is passed */
+      SftyParkLockMgrPrimActrOverAllStrtUpTestSts = SFTYPARKLOCKMGR_TEST_STS_PASS;
+
+      /* Enable half bridges of parklock actuator */
+      /* Enable HB1 */
+      SFTY_HB1_EN_OUT_P = STD_HIGH;
+
+      /* Enable HB2 */
+      SFTY_HB2_EN_OUT_P = STD_HIGH;
+
+      /* Overall startup test is finished */
+      SftyParkLockMgrPrimActrOverAllStrtUpTestFinshd = SFTYPARKLOCKMGR_TEST_STS_DONE;
+   }
+   else
+   {
+      /* Set the next state of startup test to OVERALL_TST_FAIL */
+      SftyParkLockMgrPrimActrStrtUpTestSt = SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_OVERALL_TST_FAIL;
+   }
+
+   return;
+}
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_ChkPauseTiUpdNextSt(void)
+* \\brief      : This function checks whether pause time is over or not and return next state
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : nextSt: Next state of parklock state machine
+* \\Parent_DD  : SftyParkLockMgr_IdleNextSt
+*/
+/***********************************************************************************/
+LOCAL_INLINE SftyParkLockMgr_OperModType SftyParkLockMgr_ChkPauseTiUpdNextSt(void)
+{
+   SftyParkLockMgr_OperModType nextSt;
+
+    /* Pause time timer is already elapsed */
+    if(SftyParkLockMgrPauseTiTmrElpd == TRUE )
+    {
+       /* Pause time is over */
+       SftyParkLockMgrPauseTiFinshd = TRUE;
+    }
+    /* Check if pause time timer is elapsed */
+    else if(TRUE == SftyUtils_IsTrmElpd(&SftyParkLockMgrPauseTiTmrVar))
+    {
+       /* Pause time timer is elapsed */
+       SftyParkLockMgrPauseTiTmrElpd = TRUE;
+
+       /* Pause time is over */
+       SftyParkLockMgrPauseTiFinshd = TRUE;
+    }
+    /* Pause time timer is not elapsed */
+    else
+    {
+       /* Pause time is not over */
+       SftyParkLockMgrPauseTiFinshd = FALSE;
+    }
+
+    /* Pause time is over */
+    if (SftyParkLockMgrPauseTiFinshd == TRUE)
+    {
+       /* Update next state based on parklock request */
+       nextSt = SftyParkLockMgr_UpdIdleNextSt();
+    }
+    else
+    {
+       /* Stay in IDLE state */
+       nextSt = SFTYPARKLOCKMGR_OPERMOD_IDLE;
+    }
+
+    return nextSt;
+}
+
+/***********************************************************************************/
+#define SFTYPARKLOCKMGR_AREA_1_START_SEC_CODE_SLOW
+#include "MemMap.h"
+
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_DummyFunction(void)
+* \\brief      : Dummy function for the correct operation of the state machine
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : None
+* \\Parent_DD  : SftyParkLockMgr_MainFunction
+*/
+/***********************************************************************************/
+STATIC FUNC(void, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_DummyFunction(void)
+{
+   /* Do nothing */
+
+   return;
+}
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_FailRun(void)
+* \\brief      : This function disables both half bridges
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : None
+* \\Parent_DD  : SftyParkLockMgr_MainFunction
+*/
+/***********************************************************************************/
+STATIC FUNC(void, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_FailRun(void)
+{
+   /* Disable half bridges of parklock actuator */
+   /* Disable HB1 */
+   SFTY_HB1_EN_OUT_P = STD_LOW;
+
+   /* Disable HB2 */
+   SFTY_HB2_EN_OUT_P = STD_LOW;
+
+   return;
+}
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_FailNextSt(void)
+* \\brief      : This function checks the conditions to switch to other states from
+* \\           : fail state and returns the next state of parklock state machine.
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : nextSt: next state of parklock state machine
+* \\Parent_DD  : SftyParkLockMgr_MainFunction
+*/
+/***********************************************************************************/
+STATIC FUNC(SftyParkLockMgr_OperModType, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_FailNextSt(void)
+{
+   SftyParkLockMgr_OperModType nextSt;
+
+   /* Parklock internal fault not present */
+   if (SftyParkLockMgrPlkIntFlt == 0U)
+   {
+      /* Next state is idle */
+      nextSt = SFTYPARKLOCKMGR_OPERMOD_IDLE;
+
+      /* Enable half bridges of parklock actuator */
+      SFTY_HB1_EN_OUT_P = STD_HIGH;
+      SFTY_HB2_EN_OUT_P = STD_HIGH;
+   }
+   else
+   {
+      /* Next state is fail */
+      nextSt = SFTYPARKLOCKMGR_OPERMOD_FAIL;
+   }
+
+   return nextSt;
+}
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_CalibTestNextSt(void)
+* \\brief      : This function checks the conditions to switch to other states from
+* \\           : calibration test state and returns the next state of parklock state machine.
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : nextSt: next state of parklock state machine
+* \\Parent_DD  : SftyParkLockMgr_MainFunction
+*/
+/***********************************************************************************/
+STATIC FUNC(SftyParkLockMgr_OperModType, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_CalibTestNextSt(void)
+{
+   SftyParkLockMgr_OperModType nextSt;
+
+   /* Stay in calibration test state */
+   nextSt = SFTYPARKLOCKMGR_OPERMOD_CALIBRATETEST;
+
+   /* Position sensor fault present */
+   if(SftyParkLockMgrPlkIntFlt == 1U)
+   {
+      /* Next state is FAIL state */
+      nextSt = SFTYPARKLOCKMGR_OPERMOD_FAIL;
+   }
+   else
+   {
+      /* Do nothing */
+   }
+
+   return nextSt;
+}
+
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_CalibTestRun(void)
+* \\brief      : This function handles angle calibration test execution of parklock
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : None
+* \\Parent_DD  : SftyParkLockMgr_MainFunction
+*/
+/***********************************************************************************/
+STATIC FUNC(void, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_CalibTestRun(void)
+{
+
+   float32 diffAg;
+
+   /* Current state of angle calibration test */
+   switch(SftyParkLockMgrCalibTestSt)
+   {
+      case SFTYPARKLOCKMGR_CALIBTST_INIT:
+      {
+         /* Handle the init state of calibration test */
+         SftyParkLockMgr_CalibTestIni();
+
+         break;
+      }
+      case SFTYPARKLOCKMGR_CALIBTST_ENGAGETST:
+      {
+         /* Handle the engage state of calibration test */
+         SftyParkLockMgr_CalibTestEngTest();
+
+         break;
+      }
+      case SFTYPARKLOCKMGR_CALIBTST_DISENGAGETST:
+      {
+         /* Handle the disengage state of calibration test */
+         SftyParkLockMgr_CalibTestDisengTest();
+
+         break;
+      }
+      case SFTYPARKLOCKMGR_CALIBTST_ANGLE_CALC:
+      {
+        /* Calculate the average engagement angle = total engagement angle divide by engage count */
+         SftyParkLockMgrCalibTestEngAgAvg = (float32)(SftyParkLockMgrCalibTestEngAg /  (float32)SftyParkLockMgrCalibTestEngCntMax) ;
+
+         /* Calculate the average disengagement angle = total disengagement angle divide by disengage count */
+          SftyParkLockMgrCalibTestDisengAgAvg = (float32)(SftyParkLockMgrCalibTestDisengAg /  (float32)SftyParkLockMgrCalibTestEngCntMax) ;
+
+          /* Calculate the difference in angles */
+          diffAg = SftyParkLockMgrCalibTestDisengAgAvg - SftyParkLockMgrCalibTestEngAgAvg;
+
+          /* Angle difference in range */
+          if ((diffAg > SftyParkLockMgrCalibTestOffsetAgLo) &&
+              (diffAg < SftyParkLockMgrCalibTestOffsetAgHi))
+          {
+             /* Target engage angle is equal to average engage angle */
+             SftyParkLockMgrCalibTestTarEngmtAg = SftyParkLockMgrCalibTestEngAgAvg;
+
+             /* Target disengage angle is equal to average disengage angle */
+             SftyParkLockMgrCalibTestTarDisengmtAg = SftyParkLockMgrCalibTestDisengAgAvg;
+          }
+          else
+          {
+             /* Target engage angle = average engage angle - 90 degree*/
+             SftyParkLockMgrCalibTestTarEngmtAg = (float32)(SftyParkLockMgrCalibTestEngAgAvg - SftyParkLockMgrCalibTestOffsetAg);
+
+             /* Target disengage angle = average disengage angle + 90 degree*/
+             SftyParkLockMgrCalibTestTarDisengmtAg = (float32)(SftyParkLockMgrCalibTestDisengAgAvg + SftyParkLockMgrCalibTestOffsetAg);
+          }
+
+          /* next state of angle calibration test is RANG_CRC_CHECK */
+          SftyParkLockMgrCalibTestSt = SFTYPARKLOCKMGR_CALIBTST_RNG_CRC_CHECK;
+
+          break;
+      }
+      case SFTYPARKLOCKMGR_CALIBTST_RNG_CRC_CHECK:
+      {
+         /* Handle the range check and CRC calculation of calibration test */
+         SftyParkLockMgr_CalibTestRngChkCrcCalcn();
+
+         break;
+      }
+      case SFTYPARKLOCKMGR_CALIBTST_PASS:
+      {
+         /* Angle values are in range */
+         SftyC2cData.CalibTestRngVld = E_OK;
+
+         /* Request to store angle values and CRC values to NvM */
+         SftyC2cData.PLKNVMStorReq = TRUE;
+
+         /* Calibration test is passed */
+          SftyParkLockMgrCalibTestSts = SFTYPARKLOCKMGR_TEST_STS_PASS;
+
+          /* Calibration test is finished */
+          SftyParkLockMgrCalibTestFinshd = SFTYPARKLOCKMGR_TEST_STS_DONE;
+
+         break;
+      }
+      case SFTYPARKLOCKMGR_CALIBTST_FAIL:
+      default:
+      {
+         /* Stop parklock actuator */
+         SftyParkLockActr_PrimActrStop();
+
+         /* Calibration test is failed */
+          SftyParkLockMgrCalibTestSts = SFTYPARKLOCKMGR_TEST_STS_FAIL;
+
+          /* Calibration test is finished */
+          SftyParkLockMgrCalibTestFinshd = SFTYPARKLOCKMGR_TEST_STS_DONE;
+
+         break;
+      }
+   }
+   return;
+}
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_CalibTestOnEntry(void)
+* \\brief      : This function initializes variables used in calibration test of
+* \\           : parklock actuator
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : None
+* \\Parent_DD  : SftyParkLockMgr_MainFunction
+*/
+/***********************************************************************************/
+STATIC FUNC(void, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_CalibTestOnEntry(void)
+{
+   /* Initialize angle calibration test result status */
+   SftyParkLockMgrCalibTestSts = SFTYPARKLOCKMGR_TEST_STS_NOTRUN;
+
+   /* Initialize calibration test finish status */
+   SftyParkLockMgrCalibTestFinshd = SFTYPARKLOCKMGR_TEST_STS_NOTRUN;
+
+   /* Initialize the state of calibration test */
+   SftyParkLockMgrCalibTestSt = SFTYPARKLOCKMGR_CALIBTST_INIT;
+
+   return;
+}
+
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_PrimActrDisengOnExit(void)
+* \\brief      : This function implements on exit state for disengage operation
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : None
+* \\Parent_DD  : SftyParkLockMgr_MainFunction
+*/
+/***********************************************************************************/
+STATIC FUNC(void, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_PrimActrDisengOnExit(void)
+{
+   /* Disable parklock actuator */
+   SftyParkLockActr_PrimActrStop();
+
+   /* Clear pause time timer elapsed flag */
+   SftyParkLockMgrPauseTiTmrElpd = FALSE;
+
+   return;
+}
+
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_PrimActrDisengNextSt(void)
+* \\brief      : This function checks the conditions to switch to other states from
+* \\           : disengage state and returns the next state of parklock state machine.
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : nextSt: next state of parklock state machine
+* \\Parent_DD  : SftyParkLockMgr_MainFunction
+*/
+/***********************************************************************************/
+STATIC FUNC(SftyParkLockMgr_OperModType, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_PrimActrDisengNextSt(void)
+{
+   SftyParkLockMgr_OperModType nextSt;
+
+   /* Parklock internal fault present */
+   if(SftyParkLockMgrPlkIntFlt == 1U)
+   {
+      /* Next state is FAIL state */
+      nextSt = SFTYPARKLOCKMGR_OPERMOD_FAIL;
+   }
+   /* Disengagement is finished */
+   else if ((SftyParkLockMgrDisengmtFinshd == SFTYPARKLOCKMGR_TEST_STS_DONE) &&
+            (SftyParkLockActrPrimActrDirRq == SFTYPARKLOCK_DIR_STOP))
+   {
+      /* Go to IDLE state */
+      nextSt = SFTYPARKLOCKMGR_OPERMOD_IDLE;
+   }
+   else
+   {
+      /* Stay in disengage state */
+      nextSt = SFTYPARKLOCKMGR_OPERMOD_DISENG;
+   }
+
+   return nextSt;
+}
+
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_PrimActrDisengRun(void)
+* \\brief      : This function shall monitor disengage operation of parklock actuator
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : None
+* \\Parent_DD  : SftyParkLockMgr_PrimActrDisengRun
+*/
+/***********************************************************************************/
+STATIC FUNC(void, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_PrimActrDisengRun(void)
+{
+   /* Maximum retry count is not reached */
+   if (SftyParkLockMgrEngmtDisengmtRetryCnt < SftyParkLockMgrEngmtDisengmtMaxRetry)
+   {
+      /* Disengagement timer elapsed */
+      if (TRUE == SftyUtils_IsTrmElpd(&SftyParkLockMgrDisengmtTiOutTmrVar))
+      {
+         /* Increment retry count */
+         SftyParkLockMgrEngmtDisengmtRetryCnt++;
+
+         /* Restart disengagement timer (500ms) */
+         SftyUtils_StrtTmrUs(&SftyParkLockMgrDisengmtTiOutTmrVar, SftyParkLockMgrPrkgPosnMaxTi);
+
+         /* Parklock reached target disengage position */
+         if(SftyParkLockEvlnActrAbsPosn == SFTYPARKLOCK_POSN_DISENGAGED)
+         {
+            /* No parklock disengagement failure */
+            SftyParkLockMgrFailrSts = (boolean)SFTYPARKLOCK_NO_FAULT;
+
+            /* No mode error */
+            SftyParkLockMgrPluErrMonrSt = ERR_DEB_MONR_STS_PASSED;
+
+            /* 1st try */
+            if(SftyParkLockMgrEngmtDisengmtRetryCnt == 1U)
+            {
+               /* Pause time is 1sec */
+               SftyParkLockMgrPauseTi = SftyParkLockMgrPauseTiNorm;
+            }
+            /* 2nd or 3rd try */
+            else
+            {
+               /* Pause time is 2sec */
+               SftyParkLockMgrPauseTi = SftyParkLockMgrPauseTiStall;
+            }
+
+            /* No parklock disengagement timeout error */
+            SftyParkLockMgrPrimActrDisEngTiOutErrMonrSt = ERR_DEB_MONR_STS_PASSED;
+
+            /* Disengagement operation is finished */
+            SftyParkLockMgrDisengmtFinshd = SFTYPARKLOCKMGR_TEST_STS_DONE;
+         }
+         else
+         {
+            /* Parklock disengagement failure */
+            SftyParkLockMgrFailrSts = (boolean)SFTYPARKLOCK_FAULT;
+
+            /* Pause time is 2sec */
+            SftyParkLockMgrPauseTi = SftyParkLockMgrPauseTiStall;
+
+            /* Mode error */
+            SftyParkLockMgrPluErrMonrSt = ERR_DEB_MONR_STS_FAILED;
+
+            /* Disengagement operation is ongoing */
+            SftyParkLockMgrDisengmtFinshd = SFTYPARKLOCKMGR_TEST_STS_ACTIVE;
+         }
+
+         /* Three tries are over AND parklock actuator didn\'t reach the target disengage position*/
+         if((SftyParkLockMgrEngmtDisengmtRetryCnt == SftyParkLockMgrEngmtDisengmtMaxRetry) &&
+             (SftyParkLockMgrDisengmtFinshd != SFTYPARKLOCKMGR_TEST_STS_DONE))
+         {
+            /* Stop parklock actuator */
+            SftyParkLockActr_PrimActrStop();
+
+            /* Parklock engagement timeout error */
+            SftyParkLockMgrPrimActrDisEngTiOutErrMonrSt = ERR_DEB_MONR_STS_FAILED;
+         }
+         else
+         {
+            /* Do nothing */
+         }
+      }
+      else
+      {
+         /* Wait for 500ms */
+      }
+   }
+   else
+   {
+      /* Do nothing */
+   }
+
+   return;
+}
+
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_PrimActrDisengOnEntry(void)
+* \\brief      : This function initializes disengage state variables and sets the target
+* \\           : disengagement angle and direction for parklock actuator
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : None
+* \\Parent_DD  : SftyParkLockMgr_MainFunction
+*/
+/***********************************************************************************/
+STATIC FUNC(void, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_PrimActrDisengOnEntry(void)
+{
+   /* Initialize retry count */
+   SftyParkLockMgrEngmtDisengmtRetryCnt = 0U;
+
+   /* Initialize disengagement finish status */
+   SftyParkLockMgrDisengmtFinshd = SFTYPARKLOCKMGR_TEST_STS_NOTRUN;
+
+   /* Initialize disengagement timeout error monitor */
+   SftyParkLockMgrPrimActrDisEngTiOutErrMonrSt = ERR_DEB_MONR_STS_INACTIVE;
+
+   /* Enable parklock actuator by setting the disengagement target angle*/
+   SftyParkLockActr_SetPrimActrTarAg(SftyParkLockMgrTarDisengmtAgNvm, SFTYPARKLOCK_DIR_DISENGAGE);
+
+   /* Start disengagement timer (500ms timer) */
+   SftyUtils_StrtTmrUs(&SftyParkLockMgrDisengmtTiOutTmrVar, SftyParkLockMgrPrkgPosnMaxTi);
+
+   return;
+}
+
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_PrimActrEngOnExit(void)
+* \\brief      : This function implements on exit state for engage operation
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : None
+* \\Parent_DD  : SftyParkLockMgr_MainFunction
+*/
+/***********************************************************************************/
+STATIC FUNC(void, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_PrimActrEngOnExit(void)
+{
+   /* Disable parklock actuator */
+   SftyParkLockActr_PrimActrStop();
+
+   /* Clear pause time timer elapsed flag */
+   SftyParkLockMgrPauseTiTmrElpd = FALSE;
+
+   return;
+}
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_PrimActrEngNextSt(void)
+* \\brief      : This function checks the conditions to switch to other states from
+* \\           : engage state and returns the next state of parklock state machine.
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : nextSt: next state of parklock state machine
+* \\Parent_DD  : SftyParkLockMgr_MainFunction
+*/
+/***********************************************************************************/
+STATIC FUNC(SftyParkLockMgr_OperModType, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_PrimActrEngNextSt(void)
+{
+   SftyParkLockMgr_OperModType nextSt;
+
+   /* Parklock internal fault present */
+   if(SftyParkLockMgrPlkIntFlt == 1U)
+   {
+      /* Next state is FAIL state */
+      nextSt = SFTYPARKLOCKMGR_OPERMOD_FAIL;
+   }
+   /* Engagement is finished */
+   else if ((SftyParkLockMgrEngmtFinshd == SFTYPARKLOCKMGR_TEST_STS_DONE) &&
+            (SftyParkLockActrPrimActrDirRq == SFTYPARKLOCK_DIR_STOP))
+   {
+      /* Go to IDLE state */
+      nextSt = SFTYPARKLOCKMGR_OPERMOD_IDLE;
+   }
+   else
+   {
+      /* Stay in engage state */
+      nextSt = SFTYPARKLOCKMGR_OPERMOD_ENG_PRIM_ACTR;
+   }
+
+   return nextSt;
+}
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_PrimActrEngRun(void)
+* \\brief      : This function shall monitor engage operation of parklock actuator
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : None
+* \\Parent_DD  : SftyParkLockMgr_PrimActrEngRun
+*/
+/***********************************************************************************/
+STATIC FUNC(void, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_PrimActrEngRun(void)
+{
+   /* Maximum retry count is not reached */
+   if (SftyParkLockMgrEngmtDisengmtRetryCnt < SftyParkLockMgrEngmtDisengmtMaxRetry)
+   {
+      /* Engagement timer elapsed (500ms) */
+      if (TRUE == SftyUtils_IsTrmElpd(&SftyParkLockMgrEngmtTiOutTmrVar))
+      {
+         /* Increment retry count */
+         SftyParkLockMgrEngmtDisengmtRetryCnt++;
+
+         /* restart engagement counter (500ms timer) */
+         SftyUtils_StrtTmrUs(&SftyParkLockMgrEngmtTiOutTmrVar, SftyParkLockMgrPrkgPosnMaxTi);
+
+         /* Parklock reached target engage position */
+         if(SftyParkLockEvlnActrAbsPosn == SFTYPARKLOCK_POSN_ENGAGED)
+         {
+            /* No parklock engagement failure */
+            SftyParkLockMgrFailrSts = (boolean)SFTYPARKLOCK_NO_FAULT;
+
+            /* No mode error */
+            SftyParkLockMgrPluErrMonrSt = ERR_DEB_MONR_STS_PASSED;
+
+            /* 1st try */
+            if(SftyParkLockMgrEngmtDisengmtRetryCnt == 1U)
+            {
+               /* Pause time is 1sec */
+               SftyParkLockMgrPauseTi = SftyParkLockMgrPauseTiNorm;
+            }
+            /* 2nd or 3rd try */
+            else
+            {
+               /* Pause time is 2sec */
+               SftyParkLockMgrPauseTi = SftyParkLockMgrPauseTiStall;
+            }
+
+            /* No parklock engagement timeout error */
+            SftyParkLockMgrPrimActrEngTiOutErrMonrSt = ERR_DEB_MONR_STS_PASSED;
+
+            /* Engagement operation is finished */
+            SftyParkLockMgrEngmtFinshd = SFTYPARKLOCKMGR_TEST_STS_DONE;
+         }
+         else
+         {
+            /* Parklock engagement failure */
+            SftyParkLockMgrFailrSts = (boolean)SFTYPARKLOCK_FAULT;
+
+            /* Pause time is 2sec */
+            SftyParkLockMgrPauseTi = SftyParkLockMgrPauseTiStall;
+
+            /* Mode error */
+            SftyParkLockMgrPluErrMonrSt = ERR_DEB_MONR_STS_FAILED;
+
+            /* Engagement operation is ongoing */
+            SftyParkLockMgrEngmtFinshd = SFTYPARKLOCKMGR_TEST_STS_ACTIVE;
+         }
+
+         /* Three tries are over AND parklock actuator didn\'t reach the target position*/
+         if((SftyParkLockMgrEngmtDisengmtRetryCnt == SftyParkLockMgrEngmtDisengmtMaxRetry) &&
+            (SftyParkLockMgrEngmtFinshd != SFTYPARKLOCKMGR_TEST_STS_DONE))
+         {
+            /* Stop parklock actuator */
+            SftyParkLockActr_PrimActrStop();
+
+            /* Parklock engagement timeout error */
+            SftyParkLockMgrPrimActrEngTiOutErrMonrSt = ERR_DEB_MONR_STS_FAILED;
+         }
+         else
+         {
+            /* Do nothing */
+         }
+      }
+      else
+      {
+         /* Wait for 500ms */
+      }
+   }
+   else
+   {
+      /* Do nothing */
+   }
+
+   return;
+}
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_PrimActrEngOnEntry(void)
+* \\brief      : This function initializes engage state variables and sets the target
+* \\           : engagement angle and direction for parklock actuator
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : None
+* \\Parent_DD  : SftyParkLockMgr_MainFunction
+*/
+/***********************************************************************************/
+STATIC FUNC(void, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_PrimActrEngOnEntry(void)
+{
+   /* Initialize retry count */
+   SftyParkLockMgrEngmtDisengmtRetryCnt = 0U;
+
+   /* Initialize engagement finish status */
+   SftyParkLockMgrEngmtFinshd = SFTYPARKLOCKMGR_TEST_STS_NOTRUN;
+
+   /* Initialize engagement timeout error monitor */
+   SftyParkLockMgrPrimActrEngTiOutErrMonrSt = ERR_DEB_MONR_STS_INACTIVE;
+
+   /* Enable parklock actuator by setting the engagement target angle*/
+   SftyParkLockActr_SetPrimActrTarAg(SftyParkLockMgrTarEngmtAgNvm, SFTYPARKLOCK_DIR_ENGAGE);
+
+   /* Start engagement counter (500ms timer) */
+   SftyUtils_StrtTmrUs(&SftyParkLockMgrEngmtTiOutTmrVar, SftyParkLockMgrPrkgPosnMaxTi);
+
+   return;
+}
+/***********************************************************************************/
+/*!
+* \\fn         : SftyParkLockMgr_IdleNextSt(void)
+* \\brief      : This function checks the conditions to switch to other states from
+* \\           : idle state and returns the next state of parklock state machine.
+* \\param[in]  : None
+* \\param[out] : None
+* \\return     : nextSt: next state of parklock state machine
+* \\Parent_DD  : SftyParkLockMgr_IdleNextSt
+*/
+/***********************************************************************************/
+STATIC FUNC(SftyParkLockMgr_OperModType, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_IdleNextSt(void)
+{
+   SftyParkLockMgr_OperModType nextSt;
+
+   /* Parklock internal fault present */
+   if(SftyParkLockMgrPlkIntFlt == 1U)
+   {
+      /* Next state is FAIL state */
+      nextSt = SFTYPARKLOCKMGR_OPERMOD_FAIL;
+   }
+   /* Calibration test request present from BSW */
+   else if(BswC2cData.ParkLockMgrCalibTestEna == TRUE)
+   {
+      /* Next state is CALIBRATETEST state */
+      nextSt = SFTYPARKLOCKMGR_OPERMOD_CALIBRATETEST;
+   }
+   else
+   {
+      /* Check if pause time is over or not and update next state*/
+      nextSt = SftyParkLockMgr_ChkPauseTiUpdNextSt();
+   }
+
+   /* Return next state */
+   return nextSt;
+}
+/***********************************************************************************/
+/*!
+ * \\fn         : SftyParkLockMgr_IdleOnEntry(void)
+ * \\brief      : This function starts the timer to ensure pause time between 2 parklock movements.
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\return     : None
+ * \\Parent_DD  : SftyParkLockMgr_MainFunction
+ */
+/***********************************************************************************/
+STATIC FUNC(void, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_IdleOnEntry(void)
+{
+      /* Start pause time timer */
+      SftyUtils_StrtTmrUs(&SftyParkLockMgrPauseTiTmrVar, SftyParkLockMgrPauseTi);
+
+   return;
+}
+/***********************************************************************************/
+/*!
+ * \\fn         : SftyParkLockMgr_PrimActrStrtupTstRun(void)
+ * \\brief      : This function performs power stage startup test and parklock initial
+ * \\           : position angle startup test
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\return     : None
+ * \\Parent_DD  : SftyParkLockMgr_PrimActrStrtupTstRun
+ */
+/***********************************************************************************/
+STATIC FUNC(void, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_PrimActrStrtupTstRun(void)
+{
+
+   /* Enter the power stage startup test state machine */
+   switch(SftyParkLockMgrPrimActrStrtUpTestSt)
+   {
+      /*Initialization state*/
+      case SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_INIT:
+      {
+         /* Handle the init state of power stage startup test */
+         SftyParkLockMgr_PrimActrStrtUpTestIni();
+
+         break;
+      }
+      /* HB1 enable test state*/
+      case SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_HB1_ENTST:
+      {
+         /* Handle the HB1 enable test of startup test */
+         SftyParkLockMgr_PrimActrStrtUpHb1EnaTest();
+
+         break;
+      }
+      /* HB1 disable test state*/
+      case SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_HB1_DITST:
+      {
+         /* Handle the HB1 disable test of startup test */
+         SftyParkLockMgr_PrimActrStrtUpHb1DisTest();
+
+         break;
+      }
+      /* HB2 enable test state*/
+      case SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_HB2_ENTST:
+      {
+         /* Handle the HB2 enable test of startup test */
+         SftyParkLockMgr_PrimActrStrtUpHb2EnaTest();
+
+         break;
+      }
+      /* HB2 disable test state*/
+      case SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_HB2_DITST:
+      {
+         /* Handle the HB2 disable test of startup test */
+         SftyParkLockMgr_PrimActrStrtUpHb2DisTest();
+
+         break;
+      }
+      /* Parklock actuator power stage startup test pass state */
+      case SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_PASS:
+      {
+         /* Power stage startup test is finished */
+         SftyParkLockMgrPrimActrStrtUpTestFinshd = SFTYPARKLOCKMGR_TEST_STS_DONE;
+
+         /* Power stage startup test is passed */
+         SftyParkLockMgrPrimActrStrtUpTestSts = SFTYPARKLOCKMGR_TEST_STS_PASS;
+
+         /* Set the next state of startup test to ANGLE_TST */
+         SftyParkLockMgrPrimActrStrtUpTestSt = SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_ANGLE_TST;
+
+         /* No errors in power stage startup test  */
+         SftyParkLockMgrPrimActrStrtUpTstErrMonrSt = ERR_DEB_MONR_STS_PASSED;
+
+         break;
+      }
+      /* Parklock actuator angle startup test state */
+      case SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_ANGLE_TST:
+      {
+         /* Perform parklock initial position angle startup test */
+         SftyParkLockMgr_IniPosnAgStrtUpTest();
+
+         break;
+      }
+      /* Parklock actuator power stage startup test fail state */
+      case SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_FAIL:
+      {
+         /* Power stage startup test is finished */
+         SftyParkLockMgrPrimActrStrtUpTestFinshd = SFTYPARKLOCKMGR_TEST_STS_DONE;
+
+         /* Power stage startup test is failed */
+         SftyParkLockMgrPrimActrStrtUpTestSts = SFTYPARKLOCKMGR_TEST_STS_FAIL;
+
+         /* Set the next state of startup test to OVERALL_TST_FAIL */
+          SftyParkLockMgrPrimActrStrtUpTestSt = SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_OVERALL_TST_FAIL;
+
+          /* Power stage startup test Error */
+          SftyParkLockMgrPrimActrStrtUpTstErrMonrSt = ERR_DEB_MONR_STS_FAILED;
+
+         break;
+      }
+
+      /* Parklock actuator overall startup test fail state */
+      case SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_OVERALL_TST_FAIL:
+      default:
+      {
+         /* Overall startup test is finished */
+         SftyParkLockMgrPrimActrOverAllStrtUpTestFinshd = SFTYPARKLOCKMGR_TEST_STS_DONE;
+
+         /* Overall startup test is failed */
+         SftyParkLockMgrPrimActrOverAllStrtUpTestSts = SFTYPARKLOCKMGR_TEST_STS_FAIL;
+
+         break;
+      }
+   }
+
+   return;
+}
+/***********************************************************************************/
+/*!
+ * \\fn         : SftyParkLockMgr_PrimActrStrtupTstNextSt(void)
+ * \\brief      : This function checks the conditions to switch to other states from
+ * \\           : startup test state and returns the next state of parklock state machine.
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\return     : nextSt: next state of parklock state machine
+ * \\Parent_DD  : SftyParkLockMgr_MainFunction
+ */
+/***********************************************************************************/
+STATIC FUNC(SftyParkLockMgr_OperModType, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_PrimActrStrtupTstNextSt(void)
+{
+   SftyParkLockMgr_OperModType nextSt;
+
+   /* HB startup test is passed AND overall startup test is failed AND calibrate test request is present from BSW */
+   if ((SftyParkLockMgrPrimActrStrtUpTestSts == SFTYPARKLOCKMGR_TEST_STS_PASS) &&
+       (SftyParkLockMgrPrimActrOverAllStrtUpTestSts == SFTYPARKLOCKMGR_TEST_STS_FAIL) &&
+       (BswC2cData.ParkLockMgrCalibTestEna == TRUE))
+   {
+      /* Next state is calibration test state */
+      nextSt = SFTYPARKLOCKMGR_OPERMOD_CALIBRATETEST;
+   }
+   /* Over all startup test is passed */
+   else if (SftyParkLockMgrPrimActrOverAllStrtUpTestSts == SFTYPARKLOCKMGR_TEST_STS_PASS)
+   {
+      /* Next state is idle state */
+      nextSt = SFTYPARKLOCKMGR_OPERMOD_IDLE;
+   }
+   /* Over all startup test is failed or startup test is running */
+   else
+   {
+      /* Stay in startup test state */
+      nextSt = SFTYPARKLOCKMGR_OPERMOD_PRIMACTRSTRTUPTST;
+   }
+
+   return nextSt;
+}
+/***********************************************************************************/
+/*!
+ * \\fn         : SftyParkLockMgr_PrimActrStrtupTstOnEntry(void)
+ * \\brief      : This function initializes the variables used in startup test
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\return     : None
+ * \\Parent_DD  : SftyParkLockMgr_Init
+ */
+/***********************************************************************************/
+STATIC FUNC(void, SFTY_PARKLOCKMGR_CODE) SftyParkLockMgr_PrimActrStrtupTstOnEntry(void)
+{
+   /* Initialize the parklock startup test error monitors */
+   SftyParkLockMgrPrimActrStrtUpTstErrMonrSt = ERR_DEB_MONR_STS_INACTIVE;
+   SftyParkLockMgrDisengEngCRCErrMonrSt = ERR_DEB_MONR_STS_INACTIVE;
+   SftyParkLockMgrEngRangErrMonrSt = ERR_DEB_MONR_STS_INACTIVE;
+   SftyParkLockMgrDisEngRangErrMonrSt = ERR_DEB_MONR_STS_INACTIVE;
+
+   /* Initialize the overall start up test result status */
+   SftyParkLockMgrPrimActrOverAllStrtUpTestSts = SFTYPARKLOCKMGR_TEST_STS_NOTRUN;
+
+   /* Initialize the power stage startup test result status */
+   SftyParkLockMgrPrimActrStrtUpTestSts = SFTYPARKLOCKMGR_TEST_STS_NOTRUN;
+
+   /* Initialize the state of parklock startup test */
+   SftyParkLockMgrPrimActrStrtUpTestSt = SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_INIT;
+
+   /* Initialize the finish status of power stage startup test */
+   SftyParkLockMgrPrimActrStrtUpTestFinshd = SFTYPARKLOCKMGR_TEST_STS_NOTRUN;
+
+   /* Initialize the finish status of overall startup test */
+   SftyParkLockMgrPrimActrOverAllStrtUpTestFinshd = SFTYPARKLOCKMGR_TEST_STS_NOTRUN;
+
+   return;
+}
+
+#define SFTYPARKLOCKMGR_AREA_1_STOP_SEC_CODE_SLOW
+#include "MemMap.h"
+
+/***********************************************************************************/
+/*!
+ * \\fn         : SftyParkLockMgr_GetPlkCanRequest(void)
+ * \\brief      : This function retrieves ParkLock request from CAN
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\return     : None
+ * \\Parent_DD  : SftyParkLockMgr_MainFunction
+ */
+/***********************************************************************************/
+LOCAL_INLINE void SftyParkLockMgr_GetPlkCanRequest(void)
+{
+
+#ifndef SERIES_PRODUCTION
+   /* Replacement value enabled for parklock request validity flag */
+   if( SftyReplcmtParkLockMgrE2ePrkgPosnReqVldStiEna == TRUE)
+   {
+      /* Get replacement value of parklock request validity flag */
+      SftyParkLockMgrPrkgPosnReqVld = SftyReplcmtParkLockMgrE2ePrkgPosnReqVld;
+   }
+   else
+#endif /* SERIES_PRODUCTION */
+   {
+      /* Get actual value of parklock request validity flag */
+      SftyParkLockMgrPrkgPosnReqVld = SftyE2ePhyDataVcuInvCtrl2PrkgPosnReqVld;
+   }
+
+#ifndef SERIES_PRODUCTION
+   /* Replacement value enabled for parklock request */
+   if( SftyReplcmtParkLockMgrE2ePrkgPosnReqStiEna == TRUE)
+   {
+      /* Get replacement value of parklock request */
+      SftyParkLockMgrPrkgPosnReq = SftyReplcmtParkLockMgrE2ePrkgPosnReq;
+   }
+   else
+#endif /* SERIES_PRODUCTION */
+   {
+      /* Get actual value of parklock request */
+      SftyParkLockMgrPrkgPosnReq = SftyE2ePhyDataVcuInvCtrl2PrkgPosnReq;
+   }
+
+   /* PLK position CAN request is valid */
+   if (SftyParkLockMgrPrkgPosnReqVld == TRUE)
+   {
+      /* Requested position is LOCK(i.e PARK/ENGAGE) */
+      if(SftyParkLockMgrPrkgPosnReq == (uint8)SFTYPARKLOCKMGR_REQ_LOCK)
+      {
+         /* Set request as PARK */
+         SftyParkLockMgrPlkCanReq = SFTYPARKLOCKMGR_PRKGPOSN_PARK;
+      }
+      /* Requested position is UNLOCK(i.e DRIVE/DISENGAGE) */
+      else if(SftyParkLockMgrPrkgPosnReq == (uint8)SFTYPARKLOCKMGR_REQ_UNLOCK)
+      {
+         /* Set request as DRIVE */
+         SftyParkLockMgrPlkCanReq = SFTYPARKLOCKMGR_PRKGPOSN_DRIVE;
+      }
+      else
+      {
+         /* Indicates no valid request */
+         SftyParkLockMgrPlkCanReq = SFTYPARKLOCKMGR_PRKGPOSN_IDLE;
+      }
+   }
+   else /* Invalid CAN request */
+   {
+      /* Indicates no valid request */
+      SftyParkLockMgrPlkCanReq = SFTYPARKLOCKMGR_PRKGPOSN_IDLE;
+   }
+
+   return;
+}
+
+/************************************************************************************************************/
+/*!
+ * \\fn         : SftyParkLockMgr_HandlePlkStates(void)
+ * \\brief      : This function handles the different states of parklock state machine
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\return     : None
+ * \\Parent_DD  : SftyParkLockMgr_MainFunction
+ */
+/***********************************************************************************************************/
+LOCAL_INLINE void SftyParkLockMgr_HandlePlkStates(void)
+{
+   SftyParkLockMgr_OperModType nextSt;
+
+   /* Execute next function of current state to evaluate state transition */
+   nextSt = SftyParkLockMgrStTbl[SftyParkLockMgrOperMod].NextSt();
+
+   /* If state changes occurs */
+   if(nextSt != SftyParkLockMgrOperMod)
+   {
+      /* Execute exit function of current state */
+      SftyParkLockMgrStTbl[SftyParkLockMgrOperMod].OnExit();
+
+      /* Execute entry function of new requested state */
+      SftyParkLockMgrStTbl[nextSt].OnEntry();
+
+      /* Update global state variable to the new requested state*/
+      SftyParkLockMgrOperMod = nextSt;
+   }
+   else
+   {
+      /* Do nothing */
+   }
+
+   /* Execute the run function of current state */
+   SftyParkLockMgrStTbl[SftyParkLockMgrOperMod].Run();
+
+   return;
+}
+
+/*======================= [definition of global functions] ==============================================*/
+
+#define SFTYPARKLOCKMGR_AREA_1_START_SEC_CODE_SLOW
+#include "MemMap.h"
+/************************************************************************************************************/
+/*!
+ * \\fn         : SftyParkLockMgr_MainFunction(void)
+ * \\brief      : Cyclic function that runs every 1ms to handle parklock operations
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\return     : None
+ * \\Parent_DD  : SftyParkLockMgr_MainFunction
+ */
+/***********************************************************************************************************/
+FUNC(void,SFTY_PARKLOCK_MGR_CODE) SftyParkLockMgr_MainFunction(void)
+{
+#ifndef SERIES_PRODUCTION
+   /* Replacement value disabled for parklock internal fault status */
+   if(SftyReplcmtParkLockMgrPlkIntFltStiEna == TRUE)
+   {
+      /* Get the replacement value for parklock internal fault status */
+      SftyParkLockMgrPlkIntFlt = SftyReplcmtParkLockMgrPlkIntFlt;
+   }
+   else
+#endif /* SERIES_PRODUCTION */
+   {
+      /* Get the parklock internal fault status from ErrDeb */
+      SftyParkLockMgrPlkIntFlt = SftyErrDebFctInhbnSts.B.FctIdParkLockFault;
+   }
+
+   /* Shutdown is requested from BSW */
+   if(BswC2cData.ReqShtdn == TRUE)
+   {
+      /* Disable PLK position sensor by disabling it\'s power supply */
+      SftyParkLockActr_PosSnsrDi();
+   }
+   else
+   {
+      /* Do nothing */
+   }
+
+   /* Read parklock request from CAN */
+   SftyParkLockMgr_GetPlkCanRequest();
+
+   /* Run parklock manager state machine */
+   SftyParkLockMgr_HandlePlkStates();
+
+   return;
+}
+/************************************************************************************************************/
+/*!
+ * \\fn         : SftyParkLockMgr_Init(void)
+ * \\brief      : This function initializes all variables. And it executes the startup test onEntry function
+ * \\           : to initialize the variables used in startup test
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\return     : None
+ * \\Parent_DD  : SftyParkLockMgr_Init
+ */
+/***********************************************************************************************************/
+FUNC(void,SFTY_PARKLOCK_MGR_CODE) SftyParkLockMgr_Init(void)
+{
+
+   /* Initialize all error monitor status */
+   SftyParkLockMgrPluErrMonrSt = ERR_DEB_MONR_STS_INACTIVE;
+   SftyParkLockMgrEngRangErrMonrSt = ERR_DEB_MONR_STS_INACTIVE;
+   SftyParkLockMgrPrimActrStrtUpTstErrMonrSt = ERR_DEB_MONR_STS_INACTIVE;
+   SftyParkLockMgrPrimActrEngTiOutErrMonrSt = ERR_DEB_MONR_STS_INACTIVE;
+   SftyParkLockMgrPrimActrDisEngTiOutErrMonrSt = ERR_DEB_MONR_STS_INACTIVE;
+   SftyParkLockMgrDisengEngCRCErrMonrSt = ERR_DEB_MONR_STS_INACTIVE;
+   SftyParkLockMgrDisEngRangErrMonrSt = ERR_DEB_MONR_STS_INACTIVE;
+
+   /* Set pause time = 0us for 1st actuation after power on  */
+   SftyParkLockMgrPauseTi = 0UL;
+
+   /* Initialize Pause time timer elapsed flag */
+   SftyParkLockMgrPauseTiTmrElpd = FALSE;
+
+   /* Initialize parklock state to primary actuator start up test */
+   SftyParkLockMgrOperMod = SFTYPARKLOCKMGR_OPERMOD_PRIMACTRSTRTUPTST;
+
+   /* Call on entry function of start up test state */
+   SftyParkLockMgrStTbl[SftyParkLockMgrOperMod].OnEntry();
+
+   return;
+}
+
+#define SFTYPARKLOCKMGR_AREA_1_STOP_SEC_CODE_SLOW
+#include "MemMap.h"
+/*================== [closure] ==============================================*/
+/* ********************************************************************** */
+/* Copyright (C) Valeo Siemens eAutomotive Germany GmbH 2021              */
+/* All Rights Reserved. Confidential                                      */
+/* ********************************************************************** */
+/*==================[end of file]============================================*/
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockMgr/src/SftyParkLockMgr_data.c b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockMgr/src/SftyParkLockMgr_data.c
new file mode 100644
index 000000000..887961076
--- /dev/null
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockMgr/src/SftyParkLockMgr_data.c
@@ -0,0 +1,1152 @@
+/* ***************************************************************** */
+/* Sourcefile: SftyParkLockMgr_data.c                                */
+/* ADD Container: SftyParkLockMgr                                    */
+/* ADD Container Version: 1.0.0                                      */
+/* ***************************************************************** */
+/* ***************************************************************** */
+/* Copyright (C) Valeo-Siemens eAutomotive GmbH 2021                 */
+/* All Rights Reserved. Confidential                                 */
+/* ***************************************************************** */
+
+#include "Std_Types.h"
+#include "SftyParkLockMgr_data.h"  /* PRQA S 0380 #Macro definitions are required to meet the correct functionality */
+#include "AddEnumTypes.h"
+
+
+
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_32 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_32
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrPauseTi
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG
+@@ UNIT = "us"
+@@ DESCRIPTION = " Delay time between two consecutive parklock movements "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+
+/* Delay time between two consecutive parklock movements. Unit \'us\' */
+VAR(uint32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPauseTi = 0UL;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_32 (online) */
+
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrTarEngmtAgNvm
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = FLOAT
+@@ UNIT = "degree"
+@@ DESCRIPTION = " Target engagement angle read from NvM "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+
+/* Target engagement angle read from NvM. Unit \'degree\' */
+VAR (float32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrTarEngmtAgNvm;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrEngmtTiOutTmrVar
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG
+@@ DESCRIPTION = " Engagement timeout timer variable "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Engagement timeout timer variable */
+VAR (uint32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrEngmtTiOutTmrVar;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrDisengmtTiOutTmrVar
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG
+@@ DESCRIPTION = " Disengagement timeout timer variable "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Disengagement timeout timer variable */
+VAR (uint32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrDisengmtTiOutTmrVar;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrPauseTiTmrVar
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG
+@@ DESCRIPTION = " Pause time timer variable "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Pause time timer variable */
+VAR (uint32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPauseTiTmrVar;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrTarDisengmtAgNvm
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = FLOAT
+@@ UNIT = "degree"
+@@ DESCRIPTION = " Target disengagement angle read from NvM "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Target disengagement angle read from NvM. Unit \'degree\' */
+VAR (float32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrTarDisengmtAgNvm;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_16 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_16
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrEngmtAgCrcNvm
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UWORD
+@@ DESCRIPTION = " Target engagement angle CRC read from NvM "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Target engagement angle CRC read from NvM */
+VAR (uint16, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrEngmtAgCrcNvm;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_16
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_16 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_16 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_16
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrDisengmtAgCrcNvm
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UWORD
+@@ DESCRIPTION = " Target disengagement angle CRC read from NvM "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Target disengagement angle CRC read from NvM */
+VAR (uint16, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrDisengmtAgCrcNvm;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_16
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_16 (online) */
+
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrPlkIntFlt
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = " Parklock internal fault "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Parklock internal fault */
+VAR (uint8, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPlkIntFlt;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_8 (online) */
+
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrPauseTiFinshd
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = " Pause time over flag "
+@@ CONVERSION = TABLE 0 "Not Over" 1 "Over"
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Pause time over flag */
+VAR (boolean, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPauseTiFinshd;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrPrkgPosnReqVld
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = " Parklock position request validity flag "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Parklock position request validity flag */
+VAR (boolean, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPrkgPosnReqVld;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrPrkgPosnReq
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = " Parklock position request from CAN "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Parklock position request from CAN */
+VAR (uint8, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPrkgPosnReq;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrFailrSts
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = " Parklock failure status "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Parklock failure status */
+VAR (boolean, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrFailrSts = (boolean)SFTYPARKLOCK_NO_FAULT;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrPauseTiTmrElpd
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ CONVERSION = TABLE 0 "Not Elapsed" 1 "Elapsed"
+@@ DESCRIPTION = " Pause time timer elapsed flag "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Pause time timer elapsed flag */
+VAR (uint8, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPauseTiTmrElpd = FALSE;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrPluErrMonrSt
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ CONVERSION = TABLE 0 "INACTIVE" 1 "PASSED" 2 "FAILED"
+@@ DESCRIPTION = " Parklock mode plausibility check error monitor "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Parklock mode plausibility check error monitor status */
+VAR (uint8, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPluErrMonrSt  = ERR_DEB_MONR_STS_INACTIVE;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrPrimActrStrtUpTstErrMonrSt
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ CONVERSION = TABLE 0 "INACTIVE" 1 "PASSED" 2 "FAILED"
+@@ DESCRIPTION = " Parklock actuator startup test error monitor status "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Parklock actuator startup test error monitor status */
+VAR (uint8, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPrimActrStrtUpTstErrMonrSt = ERR_DEB_MONR_STS_INACTIVE;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrPrimActrEngTiOutErrMonrSt
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ CONVERSION = TABLE 0 "INACTIVE" 1 "PASSED" 2 "FAILED"
+@@ DESCRIPTION = " Time out error monitor for parklock actuator engagement operation "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Time out error monitor for parklock actuator engagement operation */
+VAR (uint8, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPrimActrEngTiOutErrMonrSt = ERR_DEB_MONR_STS_INACTIVE;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrPrimActrDisEngTiOutErrMonrSt
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ CONVERSION = TABLE 0 "INACTIVE" 1 "PASSED" 2 "FAILED"
+@@ DESCRIPTION = " Time out error monitor for parklock actuator disengagement operation "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Time out error monitor for parklock actuator disengagement operation */
+VAR (uint8, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPrimActrDisEngTiOutErrMonrSt = ERR_DEB_MONR_STS_INACTIVE;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrDisengEngCRCErrMonrSt
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ CONVERSION = TABLE 0 "INACTIVE" 1 "PASSED" 2 "FAILED"
+@@ DESCRIPTION = " Disengagement and engagement angel CRC check error monitor "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Disengagement and engagement angel CRC check error monitor status */
+VAR (uint8, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrDisengEngCRCErrMonrSt = ERR_DEB_MONR_STS_INACTIVE;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrEngRangErrMonrSt
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ CONVERSION = TABLE 0 "INACTIVE" 1 "PASSED" 2 "FAILED"
+@@ DESCRIPTION = " Engagement angle range check error monitor "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Engagement angle range check error monitor status */
+VAR (uint8, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrEngRangErrMonrSt = ERR_DEB_MONR_STS_INACTIVE;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrDisEngRangErrMonrSt
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ CONVERSION = TABLE 0 "INACTIVE" 1 "PASSED" 2 "FAILED"
+@@ DESCRIPTION = " Disengagement angle range check error monitor "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Disengagement angle range check error monitor status */
+VAR (uint8, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrDisEngRangErrMonrSt = ERR_DEB_MONR_STS_INACTIVE;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrPlkCanReq
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ CONVERSION = TABLE 0 "SFTYPARKLOCKMGR_PRKGPOSN_IDLE" 1 "SFTYPARKLOCKMGR_PRKGPOSN_PARK" 2 "SFTYPARKLOCKMGR_PRKGPOSN_DRIVE"
+@@ DESCRIPTION = " Parklock request from CAN "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Parklock request from CAN */
+VAR (SftyParkLockMgr_PrkgPosnReqType, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPlkCanReq = SFTYPARKLOCKMGR_PRKGPOSN_IDLE;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrOperMod
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ CONVERSION = TABLE 0 "SFTYPARKLOCKMGR_OPERMOD_PRIMACTRSTRTUPTST" 1 "SFTYPARKLOCKMGR_OPERMOD_IDLE" 2 "SFTYPARKLOCKMGR_OPERMOD_ENG_PRIM_ACTR" 3 "SFTYPARKLOCKMGR_OPERMOD_DISENG" 4 "SFTYPARKLOCKMGR_OPERMOD_FAIL" 5 "SFTYPARKLOCKMGR_OPERMOD_CALIBRATETEST"
+@@ DESCRIPTION = " Current state of parklock state machine "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Current state of parklock state machine */
+VAR (SftyParkLockMgr_OperModType, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrOperMod = SFTYPARKLOCKMGR_OPERMOD_PRIMACTRSTRTUPTST;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrPrimActrOverAllStrtUpTestSts
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ CONVERSION = TABLE 0 "SFTYPARKLOCKMGR_TEST_STS_NOTRUN" 1 "SFTYPARKLOCKMGR_TEST_STS_ACTIVE" 2 "SFTYPARKLOCKMGR_TEST_STS_FAIL" 3 "SFTYPARKLOCKMGR_TEST_STS_PASS" 4 "SFTYPARKLOCKMGR_TEST_STS_DONE"
+@@ DESCRIPTION = " Overall startup test status "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Overall startup test status */
+VAR (SftyParkLockMgr_TestStsType, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPrimActrOverAllStrtUpTestSts = SFTYPARKLOCKMGR_TEST_STS_NOTRUN;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrPrimActrStrtUpTestSts
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ CONVERSION = TABLE 0 "SFTYPARKLOCKMGR_TEST_STS_NOTRUN" 1 "SFTYPARKLOCKMGR_TEST_STS_ACTIVE" 2 "SFTYPARKLOCKMGR_TEST_STS_FAIL" 3 "SFTYPARKLOCKMGR_TEST_STS_PASS" 4 "SFTYPARKLOCKMGR_TEST_STS_DONE"
+@@ DESCRIPTION = " Power stage startup test status "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Power stage startup test status */
+VAR (SftyParkLockMgr_TestStsType, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPrimActrStrtUpTestSts = SFTYPARKLOCKMGR_TEST_STS_NOTRUN;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrPrimActrStrtUpTestSt
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ CONVERSION = TABLE 0 "SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_INIT" 1 "SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_HB1_ENTST" 2 "SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_HB1_DITST" 3 "SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_HB2_ENTST" 4 "SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_HB2_DITST" 5 "SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_PASS" 6 "SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_FAIL" 7 "SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_ANGLE_TST" 8 "SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_OVERALL_TST_FAIL"
+@@ DESCRIPTION = " State of parklock startup test "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* State of parklock startup test */
+VAR (SftyParkLockMgr_PrimActrStrtUpTestStType, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPrimActrStrtUpTestSt = SFTYPARKLOCKMGR_PRIMACTRSTRTUPTST_INIT;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrPrimActrStrtUpTestFinshd
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ CONVERSION = TABLE 0 "SFTYPARKLOCKMGR_TEST_STS_NOTRUN" 1 "SFTYPARKLOCKMGR_TEST_STS_ACTIVE" 2 "SFTYPARKLOCKMGR_TEST_STS_FAIL" 3 "SFTYPARKLOCKMGR_TEST_STS_PASS" 4 "SFTYPARKLOCKMGR_TEST_STS_DONE"
+@@ DESCRIPTION = " Completion status of power stage startup test "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Completion status of power stage startup test */
+VAR (SftyParkLockMgr_TestStsType, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPrimActrStrtUpTestFinshd = SFTYPARKLOCKMGR_TEST_STS_NOTRUN;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrCalibTestFinshd
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ CONVERSION = TABLE 0 "SFTYPARKLOCKMGR_TEST_STS_NOTRUN" 1 "SFTYPARKLOCKMGR_TEST_STS_ACTIVE" 2 "SFTYPARKLOCKMGR_TEST_STS_FAIL" 3 "SFTYPARKLOCKMGR_TEST_STS_PASS" 4 "SFTYPARKLOCKMGR_TEST_STS_DONE"
+@@ DESCRIPTION = " Parklock angle calibration test finish status "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Parklock angle calibration test finish status */
+VAR (SftyParkLockMgr_TestStsType, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrCalibTestFinshd = SFTYPARKLOCKMGR_TEST_STS_NOTRUN;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrCalibTestSts
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ CONVERSION = TABLE 0 "SFTYPARKLOCKMGR_TEST_STS_NOTRUN" 1 "SFTYPARKLOCKMGR_TEST_STS_ACTIVE" 2 "SFTYPARKLOCKMGR_TEST_STS_FAIL" 3 "SFTYPARKLOCKMGR_TEST_STS_PASS" 4 "SFTYPARKLOCKMGR_TEST_STS_DONE"
+@@ DESCRIPTION = " Parklock calibration test result status "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Parklock calibration test result status */
+VAR (SftyParkLockMgr_TestStsType, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrCalibTestSts = SFTYPARKLOCKMGR_TEST_STS_NOTRUN;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrCalibTestSt
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ CONVERSION = TABLE 0 "SFTYPARKLOCKMGR_CALIBTST_INIT" 1 "SFTYPARKLOCKMGR_CALIBTST_ENGAGETST" 2 "SFTYPARKLOCKMGR_CALIBTST_DISENGAGETST" 3 "SFTYPARKLOCKMGR_CALIBTST_ANGLE_CALC" 4 "SFTYPARKLOCKMGR_CALIBTST_RNG_CRC_CHECK" 5 "SFTYPARKLOCKMGR_CALIBTST_PASS" 6 "SFTYPARKLOCKMGR_CALIBTST_FAIL"
+@@ DESCRIPTION = " Parklock calibration test state "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Parklock calibration test state */
+VAR (SftyParkLockMgr_CalibTestStType, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrCalibTestSt = SFTYPARKLOCKMGR_CALIBTST_INIT;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrPrimActrOverAllStrtUpTestFinshd
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ CONVERSION = TABLE 0 "SFTYPARKLOCKMGR_TEST_STS_NOTRUN" 1 "SFTYPARKLOCKMGR_TEST_STS_ACTIVE" 2 "SFTYPARKLOCKMGR_TEST_STS_FAIL" 3 "SFTYPARKLOCKMGR_TEST_STS_PASS" 4 "SFTYPARKLOCKMGR_TEST_STS_DONE"
+@@ DESCRIPTION = " Completion status of overall startup test "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Completion status of overall startup test */
+VAR (SftyParkLockMgr_TestStsType, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPrimActrOverAllStrtUpTestFinshd = SFTYPARKLOCKMGR_TEST_STS_NOTRUN;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrEngmtFinshd
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ CONVERSION = TABLE 0 "SFTYPARKLOCKMGR_TEST_STS_NOTRUN" 1 "SFTYPARKLOCKMGR_TEST_STS_ACTIVE" 2 "SFTYPARKLOCKMGR_TEST_STS_FAIL" 3 "SFTYPARKLOCKMGR_TEST_STS_PASS" 4 "SFTYPARKLOCKMGR_TEST_STS_DONE"
+@@ DESCRIPTION = " Flag that indicates engage operation is finished or not "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Flag that indicates engage operation is finished or not */
+VAR (SftyParkLockMgr_TestStsType, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrEngmtFinshd = SFTYPARKLOCKMGR_TEST_STS_NOTRUN;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrDisengmtFinshd
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ CONVERSION = TABLE 0 "SFTYPARKLOCKMGR_TEST_STS_NOTRUN" 1 "SFTYPARKLOCKMGR_TEST_STS_ACTIVE" 2 "SFTYPARKLOCKMGR_TEST_STS_FAIL" 3 "SFTYPARKLOCKMGR_TEST_STS_PASS" 4 "SFTYPARKLOCKMGR_TEST_STS_DONE"
+@@ DESCRIPTION = " Flag that indicates disengage operation is finished or not "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Flag that indicates disengage operation is finished or not */
+VAR (SftyParkLockMgr_TestStsType, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrDisengmtFinshd = SFTYPARKLOCKMGR_TEST_STS_NOTRUN;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_32 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrPrimActrStrtUpTestTiOutTmrVar
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG
+@@ DESCRIPTION = " Parklock actuator power stage startup test timer variable "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Parklock actuator power stage startup test timer variable */
+VAR(uint32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPrimActrStrtUpTestTiOutTmrVar = 0UL;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_32 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_32 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_INIT_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrCalibTestTiOutTmrVar
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG
+@@ DESCRIPTION = " Parklock actuator calibration test timer variable "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Parklock actuator calibration test timer variable */
+VAR(uint32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrCalibTestTiOutTmrVar = 0UL;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_INIT_32 (online) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrCalibTestTarDisengmtAg
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = FLOAT
+@@ UNIT = "degree"
+@@ DESCRIPTION = " Calibrated target disengagement angle "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Calibrated target disengagement angle. Unit \'degree\' */
+VAR (float32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrCalibTestTarDisengmtAg;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+/* Begin: SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+#define SFTYPARKLOCKMGR_START_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrCalibTestTarEngmtAg
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = FLOAT
+@@ UNIT = "degree"
+@@ DESCRIPTION = " Calibrated target engagement angle "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Calibrated target engagement angle. Unit \'degree\' */
+VAR (float32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrCalibTestTarEngmtAg;
+#define SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_VAR_AREA_1_FAST_NO_INIT_32 (online) */
+
+/************************* CALIBRATION PARAMETERS - BEGIN *****************************/
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_8 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrCalibTestEngCntMax
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = " Maximum number of engage operations in calibration test "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Maximum number of engage operations in calibration test */
+CONST(uint8, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrCalibTestEngCntMax = 3U;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_8 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrCalibTestDisengCntMax
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = " Maximum number of disengage operations in calibration test "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Maximum number of disengage operations in calibration test */
+CONST(uint8, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrCalibTestDisengCntMax = 3U;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrCalibTestTiThd
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = ULONG
+@@ UNIT = "us"
+@@ DESCRIPTION = " Parklock actuator calibration test timeout threshold "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Safety ParkLock Manager primary actuator calibration test time out timer threshold; unit \'us\' */
+CONST(uint32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrCalibTestTiThd = 500000UL;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrPrimActrStrtUpTestTiOutTmrThd
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = ULONG
+@@ UNIT = "us"
+@@ DESCRIPTION = " Parklock actuator startup test timeout threshold "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Safety ParkLock Manager primary actuator startup test time out timer threshold; unit \'us\' */
+CONST(uint32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrPrimActrStrtUpTestTiOutTmrThd = 10000UL;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrPrimActrStrtUpTestHb1EnaTestUTolr
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ UNIT = "Volts"
+@@ DESCRIPTION = " Parklock actuator HB1 enable test voltage tolerance "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Safety ParkLock Manager primary actuator startup test HB1 enable test voltage tolerance; unit \'V\' */
+CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrPrimActrStrtUpTestHb1EnaTestUTolr = 0.5f;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrPrimActrStrtUpTestHb1DiTestUTolr
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ UNIT = "Volts"
+@@ DESCRIPTION = " Parklock actuator HB1 disable test voltage tolerance "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Safety ParkLock Manager primary actuator startup test HB1 disable test voltage tolerance; unit \'V\' */
+CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrPrimActrStrtUpTestHb1DiTestUTolr = 0.5f;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrPrimActrStrtUpTestHb2EnaTestUTolr
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ UNIT = "Volts"
+@@ DESCRIPTION = " Parklock actuator HB2 enable test voltage tolerance "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Safety ParkLock Manager primary actuator startup test HB2 enable test voltage tolerance; unit \'V\' */
+CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrPrimActrStrtUpTestHb2EnaTestUTolr = 0.5f;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrPrimActrStrtUpTestHb2DiTestUTolr
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ UNIT = "Volts"
+@@ DESCRIPTION = " Parklock actuator HB2 disable test voltage tolerance "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Safety ParkLock Manager primary actuator startup test HB2 disable test voltage tolerance; unit \'V\' */
+CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrPrimActrStrtUpTestHb2DiTestUTolr = 0.5f;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrTarEngmtAgLoRng
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ UNIT = "degree"
+@@ DESCRIPTION = " Target engagement angle lower limit "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Safety ParkLock Manager actuator target engagement angle lower limit; unit \'degree\' */
+CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrTarEngmtAgLoRng = 0.0f;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrTarEngmtAgHiRng
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ UNIT = "degree"
+@@ DESCRIPTION = " Target engagement angle upper limit "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Safety ParkLock Manager actuator target engagement angle upper limit; unit \'degree\' */
+CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrTarEngmtAgHiRng = 5.0f;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrTarDisengmtAgLoRng
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ UNIT = "degree"
+@@ DESCRIPTION = " Target disengagement angle lower limit "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Safety ParkLock Manager actuator target disengagement angle lower limit; unit \'degree\' */
+CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrTarDisengmtAgLoRng = 175.0f;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrTarDisengmtAgHiRng
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ UNIT = "degree"
+@@ DESCRIPTION = " Target disengagement angle upper limit "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Safety ParkLock Manager actuator target disengagement angle upper limit; unit \'degree\' */
+CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrTarDisengmtAgHiRng = 180.0f;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrParlockSpdThd
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ UNIT = "rpm"
+@@ DESCRIPTION = " The maximum eAxle speed to allow engagement operation of parklock "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* The maximum eAxle speed to allow engagement operation of parklock.; unit \'rpm\' */
+CONST(float32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrParlockSpdThd = 26.0f;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_8 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_8
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrEngmtDisengmtMaxRetry
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = " Maximum number of retry allowed for engage and disengage operation "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* The maximum retry possible for engagement/disengagement operation */
+CONST(uint8, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrEngmtDisengmtMaxRetry = 3U;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrPrkgPosnMaxTi
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = ULONG
+@@ UNIT = "us"
+@@ DESCRIPTION = " Maximum time allowed for one try "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Maximum time allowed for one try. Unit \'us\' */
+CONST(uint32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPrkgPosnMaxTi = 500000UL;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrPauseTiNorm
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = ULONG
+@@ UNIT = "us"
+@@ DESCRIPTION = " Pause time between two parklock movement if parklock reaches target position in 1st try "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Pause time between two parklock movement if parklock reaches target position in 1st try. Unit \'us\' */
+CONST(uint32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPauseTiNorm = 1000000UL;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrPauseTiStall
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = ULONG
+@@ UNIT = "us"
+@@ DESCRIPTION = " Pause time between two parklock movement if parklock does not reach target position in 1st try "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Pause time between two parklock movement if parklock does not reach target position in 1st try. Unit \'us\' */
+CONST(uint32, SFTYPARKLOCKMGR_VAR) SftyParkLockMgrPauseTiStall = 2000000UL;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrCalibTestEngmtAgMin
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ UNIT = "degree"
+@@ DESCRIPTION = " Minimum engagement angle for performing angle calibration "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Minimum engagement angle for performing angle calibration; unit \'degree\' */
+CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrCalibTestEngmtAgMin = 0.0f;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockMgrCalibTestDisengmtAgMax
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ UNIT = "degree"
+@@ DESCRIPTION = " Maximum disengagement angle for performing angle calibration "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Maximum disengagement angle for performing angle calibration; unit \'degree\' */
+CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrCalibTestDisengmtAgMax = 180.0f;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrCalibTestOffsetAgLo
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ UNIT = "degree"
+@@ DESCRIPTION = " Offset angle lower limit in calibration test "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Offset angle lower limit in calibration test; unit \'degree\' */
+CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrCalibTestOffsetAgLo = 0.0f;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrCalibTestOffsetAgHi
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ UNIT = "degree"
+@@ DESCRIPTION = " Offset angle upper limit in calibration test "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Offset angle upper limit in calibration test; unit \'degree\' */
+CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrCalibTestOffsetAgHi = 90.0f;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrCalibTestOffsetAg
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ UNIT = "degree"
+@@ DESCRIPTION = " Offset angle in calibration test "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Offset angle in calibration test; unit \'degree\' */
+CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrCalibTestOffsetAg = 90.0f;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrPrimActrDisengmtIMeasThd
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ UNIT = "A"
+@@ DESCRIPTION = " Actuator current threshold for disengage operation in calibration test "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Actuator current threshold for disengage operation in calibration test; unit \'A\' */
+CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrPrimActrDisengmtIMeasThd = 15.0f;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+
+
+/* Begin: SFTYPARKLOCKMGR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKMGR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockMgrPrimActrEngmtIMeasThd
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ UNIT = "A"
+@@ DESCRIPTION = " Actuator current threshold for engage operation in calibration test "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+/* Actuator current threshold for engage operation in calibration test; unit \'A\' */
+CONST(float32, SFTYPARKLOCKMGR_CALIB) SftyParkLockMgrPrimActrEngmtIMeasThd = 15.0f;
+#define SFTYPARKLOCKMGR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKMGR_STOP_SEC_CALIB_32 (calib) */
+/************************* CALIBRATION PARAMETERS - END *****************************/
+
+/*================== [closure] ==============================================*/
+
+/* ***************************************************************** */
+/* Copyright (C) Valeo-Siemens eAutomotive GmbH 2021                 */
+/* All Rights Reserved. Confidential                                 */
+/* ***************************************************************** */
+/*==================[end of file]====================================*/
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftySdl/src/SftySdl_cfg.c b/src/fw_cu/Components/Safety/Sfty_Cmn/SftySdl/src/SftySdl_cfg.c
index fd4ce21d2..6bdb6fcaf 100644
--- a/src/fw_cu/Components/Safety/Sfty_Cmn/SftySdl/src/SftySdl_cfg.c
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/SftySdl/src/SftySdl_cfg.c
@@ -100,7 +100,7 @@
 #include "SWIT_Sfty.h"
 #endif
 
-
+#include "SftyParkLockMgr.h"
 
 #ifndef SERIES_PRODUCTION
 #include "SftySdl_MpuTst.h"
@@ -478,28 +478,31 @@ STATIC FUNC(void, SFTYSDL) SftySdl_FinishInit(void)
 @@ INSTANCE = SftySdlTickCntNormRun._42_ SftySdlRunTiNormRun_SftyParkLockActr_MainFast
 @@ STRUCTURE = SftySdl_TickCntType
 @@ END
-@@ INSTANCE = SftySdlTickCntNormRun._43_ SftySdlRunTiNormRun_SftySdl_MPUChkArea1Slow
+@@ INSTANCE = SftySdlTickCntNormRun._43_ SftySdlRunTiNormRun_SftyParkLockMgr_MainFunction
+@@ STRUCTURE = SftySdl_TickCntType
+@@ END
+@@ INSTANCE = SftySdlTickCntNormRun._44_ SftySdlRunTiNormRun_SftySdl_MPUChkArea1Slow
 @@ STRUCTURE = SftySdl_TickCntType
 @@ END
-@@ INSTANCE = SftySdlTickCntNormRun._44_ SftySdlRunTiNormRun_SftySdl_MPUChkArea2Slow
+@@ INSTANCE = SftySdlTickCntNormRun._45_ SftySdlRunTiNormRun_SftySdl_MPUChkArea2Slow
 @@ STRUCTURE = SftySdl_TickCntType
 @@ END
-@@ INSTANCE = SftySdlTickCntNormRun._45_ SftySdlRunTiNormRun_SftySdl_MPUChkAreaCmnSlow
+@@ INSTANCE = SftySdlTickCntNormRun._46_ SftySdlRunTiNormRun_SftySdl_MPUChkAreaCmnSlow
 @@ STRUCTURE = SftySdl_TickCntType
 @@ END
-@@ INSTANCE = SftySdlTickCntNormRun._46_ SftySdlRunTiNormRun_SftySdl_MPUChkArea0
+@@ INSTANCE = SftySdlTickCntNormRun._47_ SftySdlRunTiNormRun_SftySdl_MPUChkArea0
 @@ STRUCTURE = SftySdl_TickCntType
 @@ END
-@@ INSTANCE = SftySdlTickCntNormRun._47_ SftySdlRunTiNormRun_SftySdl_MPUChkArea1
+@@ INSTANCE = SftySdlTickCntNormRun._48_ SftySdlRunTiNormRun_SftySdl_MPUChkArea1
 @@ STRUCTURE = SftySdl_TickCntType
 @@ END
-@@ INSTANCE = SftySdlTickCntNormRun._48_ SftySdlRunTiNormRun_SftySdl_MPUChkArea2
+@@ INSTANCE = SftySdlTickCntNormRun._49_ SftySdlRunTiNormRun_SftySdl_MPUChkArea2
 @@ STRUCTURE = SftySdl_TickCntType
 @@ END
-@@ INSTANCE = SftySdlTickCntNormRun._49_ SftySdlRunTiNormRun_SftySdl_MPUChkAreaCmn
+@@ INSTANCE = SftySdlTickCntNormRun._50_ SftySdlRunTiNormRun_SftySdl_MPUChkAreaCmn
 @@ STRUCTURE = SftySdl_TickCntType
 @@ END
-@@ INSTANCE = SftySdlTickCntNormRun._50_ SftySdlRunTiNormRun_SftySysInit_DebugModChk
+@@ INSTANCE = SftySdlTickCntNormRun._51_ SftySdlRunTiNormRun_SftySysInit_DebugModChk
 @@ STRUCTURE = SftySdl_TickCntType
 @@ END
 */
@@ -568,6 +571,7 @@ CONST(SftySdl_TaskTblType, SFTYSDL) SftySdlNormRunTaskTbl[]=
    ,{ SFTYSDL_AREA_2,   &SftyParkLockEvln_SlowFunctionArea2,     100u,           0u}
    ,{ SFTYSDL_AREA_2,   &SftyParkLockActr_MainSlow,               10u,           0u}   
    ,{ SFTYSDL_AREA_2,   &SftyParkLockActr_MainFast,                2u,           0u} 
+   ,{ SFTYSDL_AREA_1,   &SftyParkLockMgr_MainFunction,            10u,           0u}
 #ifndef SERIES_PRODUCTION
     /* function for testing MPU */
    ,{ SFTYSDL_AREA_1,   &SftySdl_MPUChkArea1Slow,                100u,           0u}
@@ -642,6 +646,7 @@ CONST(SftySdl_InitTblType, SFTYSDL) SftySdlInitNormRunTbl[] =
     ,{ SFTYSDL_AREA_1,   &SftyCrashSigMon_Init}
     ,{ SFTYSDL_AREA_2,   &SftyHvInterlock_Init}
     ,{ SFTYSDL_AREA_2,   &SftyLvSplyEvln_InitArea2}
+\t,{ SFTYSDL_AREA_1,   &SftyParkLockMgr_Init } 
 \t,{ SFTYSDL_AREA_2,   &SftyParkLockActr_Init}
 \t,{ SFTYSDL_AREA_2,   &SftyParkLockPosnAcqn_InitArea2}
 \t,{ SFTYSDL_AREA_2,   &SftyParkLockEvln_Init}
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/Sfty_Common/include/SftyReplcmt_data.h b/src/fw_cu/Components/Safety/Sfty_Cmn/Sfty_Common/include/SftyReplcmt_data.h
index 5da88012c..78fd33fd5 100644
--- a/src/fw_cu/Components/Safety/Sfty_Cmn/Sfty_Common/include/SftyReplcmt_data.h
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/Sfty_Common/include/SftyReplcmt_data.h
@@ -947,6 +947,81 @@ extern CONST(uint16, SFTYREPLCMT_CALIB) SftyReplcmtDcEvlnVadcDcU1PMonVal;
 #include "MemMap.h"
 /* End: SFTYREPLCMT_STOP_SEC_CALIB_16 (calib) */
 
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+
+extern CONST(boolean, SFTYREPLCMT_CALIB) SftyReplcmtSpdMonMeclSpdVldyFlg;
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_32 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_32
+#include "MemMap.h"
+
+extern CONST(float32, SFTYREPLCMT_CALIB) SftyReplcmtSpdMonMeclSpdRpmFild;
+#define SFTYREPLCMT_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_32 (calib) */
+
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+
+extern CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockMgrPlkIntFltStiEna;
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+
+extern CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockMgrPlkIntFlt;
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+
+extern CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockMgrE2ePrkgPosnReqVldStiEna;
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+
+extern CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockMgrE2ePrkgPosnReqVld;
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+
+extern CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockMgrE2ePrkgPosnReqStiEna;
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+
+extern CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockMgrE2ePrkgPosnReq;
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
 /* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
 #define SFTYREPLCMT_START_SEC_CALIB_8
 #include "MemMap.h"
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/Sfty_Common/src/SftyReplcmt_data.c b/src/fw_cu/Components/Safety/Sfty_Cmn/Sfty_Common/src/SftyReplcmt_data.c
index aaa2a7fbe..d4653e592 100644
--- a/src/fw_cu/Components/Safety/Sfty_Cmn/Sfty_Common/src/SftyReplcmt_data.c
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/Sfty_Common/src/SftyReplcmt_data.c
@@ -2468,6 +2468,137 @@ CONST(uint32, SFTYREPLCMT_CALIB) SftyReplcmtGtmRslvrExctTiStampVal = 0UL;
 #include "MemMap.h"
 /* End: SFTYREPLCMT_STOP_SEC_CALIB_32 (calib) */
 
+
+
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyReplcmtSpdMonMeclSpdVldyFlg
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = "Replacement value of motor speed validity flag"
+@@ END
+*/
+CONST(boolean, SFTYREPLCMT_CALIB) SftyReplcmtSpdMonMeclSpdVldyFlg = TRUE;
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+
+#define SFTYREPLCMT_START_SEC_CALIB_32
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyReplcmtSpdMonMeclSpdRpmFild
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Replacement value of\xa0filtered motor speed speed in rpm"
+@@ GROUP = SftyTempEvln
+@@ END
+*/
+CONST(float32, SFTYREPLCMT_CALIB) SftyReplcmtSpdMonMeclSpdRpmFild = 0.0f;
+#define SFTYREPLCMT_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_32 (calib) */
+
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyReplcmtParkLockMgrPlkIntFltStiEna
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = "Replacement value enable flag of parklock internal fault "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockMgrPlkIntFltStiEna = 1U;
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyReplcmtParkLockMgrPlkIntFlt
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = "Replacement value of parklock internal fault"
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockMgrPlkIntFlt = 0U;
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyReplcmtParkLockMgrE2ePrkgPosnReqVldStiEna
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = "Replacement value enable flag of parklock position request validity flag "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockMgrE2ePrkgPosnReqVldStiEna = 0U;
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyReplcmtParkLockMgrE2ePrkgPosnReqVld
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = "Replacement value of parklock position request validity flag "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockMgrE2ePrkgPosnReqVld = 0U;
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyReplcmtParkLockMgrE2ePrkgPosnReqStiEna
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = "Replacement value enable flag of parklock position request from CAN "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockMgrE2ePrkgPosnReqStiEna = 0U;
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyReplcmtParkLockMgrE2ePrkgPosnReq
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = "Replacement value of parklock position request from CAN "
+@@ GROUP = SftyParkLockMgr
+@@ END
+*/
+CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockMgrE2ePrkgPosnReq = 0U;
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
 /* Begin: SFTYREPLCMT_START_SEC_CALIB_16 (calib) */
 #define SFTYREPLCMT_START_SEC_CALIB_16
 #include "MemMap.h"
diff --git a/src/fw_cu/build/a2l/Measurements-to-Timeslices-Mapping.csv b/src/fw_cu/build/a2l/Measurements-to-Timeslices-Mapping.csv
index 98e4c98eb..7cb1bf8e7 100644
--- a/src/fw_cu/build/a2l/Measurements-to-Timeslices-Mapping.csv
+++ b/src/fw_cu/build/a2l/Measurements-to-Timeslices-Mapping.csv
@@ -5,6 +5,7 @@ BswC2cData.CanBatteryMode,Core_0,C0_1ms_TimeTask,1,,,BSW
 BswC2cData.CanTrcvInitSts,Core_0,C0_1ms_TimeTask,1,,,BSW
 BswC2cData.EmmMode,Core_0,C0_1ms_TimeTask,1,,,BSW
 BswC2cData.EngmentValue,Core_0,C0_1ms_TimeTask,1,,,BSW
+BswC2cData.EngmentValueCrc,Core_0,C0_1ms_TimeTask,1,,,BSW
 BswC2cData.ActvDchaReq,Core_0,C0_1ms_TimeTask,1,,,BSW
 BswC2cData.CrashSt,Core_0,C0_1ms_TimeTask,1,,,BSW
 BswC2cData.InterlockEveExt,Core_0,C0_1ms_TimeTask,1,,,BSW
@@ -42,6 +43,7 @@ BswC2cData.InvTempNvm.DcLinkCpTemp,Core_0,C0_1ms_TimeTask,1,,,BSW
 BswC2cData.InvTempNvm.DcLinkI2tCntrVld,Core_0,C0_1ms_TimeTask,1,,,BSW
 BswC2cData.InvTempNvm.DcLinkTempVld,Core_0,C0_1ms_TimeTask,1,,,BSW
 BswC2cData.MotTempU,Core_0,C0_1ms_TimeTask,1,,,BSW
+BswC2cData.ParkLockMgrCalibTestEna,Core_0,C0_1ms_TimeTask,1,,,BSW
 BswC2cData.MotTempIni,Core_0,C0_1ms_TimeTask,1,,,BSW
 BswC2cData.ReqAcIsoMode,Core_0,C0_1ms_TimeTask,10,,,BSW
 BswC2cData.ReqActvDischrgEm,Core_0,C0_1ms_TimeTask,1,,,BSW
@@ -69,6 +71,7 @@ BswC2cData.TqReq,Core_0,C0_1ms_TimeTask,1,,,BSW
 BswC2cData.TqSpSel,Core_0,C0_1ms_TimeTask,1,,,BSW
 BswC2cData.DbgModSts,Core_0,C0_1ms_TimeTask,1,,,BSW
 BswC2cData.DisEngmentValue,Core_0,C0_1ms_TimeTask,1,,,BSW
+BswC2cData.DisEngmentValueCrc,Core_0,C0_1ms_TimeTask,1,,,BSW
 BswC2cData.UDcReq,Core_0,C0_1ms_TimeTask,1,,,BSW
 BswC2cData.VehPrkgTi,Core_0,C0_1ms_TimeTask,1,,,BSW
 BswC2cData.HvDcPwrLimTqGenNoLosses,Core_0,C0_1ms_TimeTask,1,,,BSW
@@ -6057,6 +6060,7 @@ SftyActvDchaCtrlrIfMeasData.actvDchaHwCircFlt1DiTiThd,Core_1,Core_1_200us,0.2,,,
 SftyActvDchaCtrlrIfMeasData.actvDchaHwCircFlt2DiTiThd,Core_1,Core_1_200us,0.2,,,SSW
 SftyC2cData.ActvDchaReq,Core_1,Core_1_200us,0.2,,,SSW
 SftyC2cData.ActvDchaSts,Core_1,Core_1_200us,0.2,,,SSW
+SftyC2cData.CalibTestRngVld,Core_1,Core_1_200us,0.2,,,SSW
 SftyC2cData.CpuLoad,Core_1,Core_1_200us,10,,,SSW
 SftyC2cData.CurMdlId,Core_1,Core_1_200us,500,,,SSW
 SftyC2cData.CurMdlIq,Core_1,Core_1_200us,500,,,SSW
@@ -6066,6 +6070,8 @@ SftyC2cData.EAxleSpd,Core_1,Core_1_200us,0.2,,,SSW
 SftyC2cData.EAxleSpdQM,Core_1,Core_1_200us,0.2,,,SSW
 SftyC2cData.EMX_Status_EoHVL,Core_1,Core_1_200us,0.2,,,SSW
 SftyC2cData.EMX_Status_Spgfreiheit,Core_1,Core_1_200us,0.2,,,SSW
+SftyC2cData.EngmentValue,Core_1,Core_1_200us,0.2,,,SSW
+SftyC2cData.EngmentValueCrc,Core_1,Core_1_200us,0.2,,,SSW
 SftyC2cData.ExtAdcFirstVldRxMsgFlg,Core_1,Core_1_200us,0.2,,,SSW
 SftyC2cData.FltdEstimrElecMotTq,Core_1,Core_1_200us,0.2,,,SSW
 SftyC2cData.FpgaActvDchaReq,Core_1,Core_1_200us,0.2,,,SSW
@@ -6136,6 +6142,7 @@ SftyC2cData.P5PhaV,Core_1,Core_1_200us,0.2,,,SSW
 SftyC2cData.P5PhaW,Core_1,Core_1_200us,0.2,,,SSW
 SftyC2cData.P5UcOvSt,Core_1,Core_1_200us,500,,,SSW
 SftyC2cData.P5UcUvSt,Core_1,Core_1_200us,500,,,SSW
+SftyC2cData.PLKNVMStorReq,Core_1,Core_1_200us,0.2,,,SSW
 SftyC2cData.ReqRslvrCalib,Core_1,Core_1_200us,0.2,,,SSW
 SftyC2cData.RolSoftAscEna,Core_1,Core_1_200us,0.2,,,SSW
 SftyC2cData.RslvrCosAmp,Core_1,Core_1_200us,0.2,,,SSW
@@ -6570,6 +6577,9 @@ SftySdlRunTiNormRun_SftyParkLockEvln_MainFunctionArea2.TickStart,Core_1,Core_1_2
 SftySdlRunTiNormRun_SftyParkLockEvln_SlowFunctionArea2.CycTi,Core_1,Core_1_200us,0.2,,,SSW
 SftySdlRunTiNormRun_SftyParkLockEvln_SlowFunctionArea2.RunTi,Core_1,Core_1_200us,0.2,,,SSW
 SftySdlRunTiNormRun_SftyParkLockEvln_SlowFunctionArea2.TickStart,Core_1,Core_1_200us,0.2,,,SSW
+SftySdlRunTiNormRun_SftyParkLockMgr_MainFunction.CycTi,Core_1,Core_1_200us,0.2,,,SSW
+SftySdlRunTiNormRun_SftyParkLockMgr_MainFunction.RunTi,Core_1,Core_1_200us,0.2,,,SSW
+SftySdlRunTiNormRun_SftyParkLockMgr_MainFunction.TickStart,Core_1,Core_1_200us,0.2,,,SSW
 SftySdlRunTiNormRun_SftyE2eTx_Main.CycTi,Core_1,Core_1_200us,0.2,,,SSW
 SftySdlRunTiNormRun_SftyE2eTx_Main.RunTi,Core_1,Core_1_200us,0.2,,,SSW
 SftySdlRunTiNormRun_SftyE2eTx_Main.TickStart,Core_1,Core_1_200us,0.2,,,SSW
@@ -8231,6 +8241,50 @@ SftyParkLockEvlnSerlDataCurTiStamp,Core_1,Core_1_200us,0.2,,,SSW
 SftyParkLockEvlnSerlDataLstTiStamp,Core_1,Core_1_200us,0.2,,,SSW
 SftyParkLockEvlnSnrDataElecHiErrMonrSt,Core_1,Core_1_200us,0.2,,,SSW
 SftyParkLockEvlnSnrDataElecLoErrMonrSt,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrCalibTestDisengAg,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrCalibTestDisengAgAvg,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrCalibTestDisengCnt,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrCalibTestEngAg,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrCalibTestEngAgAvg,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrCalibTestEngCnt,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrCalibTestFinshd,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrCalibTestSt,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrCalibTestSts,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrCalibTestTarDisengmtAg,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrCalibTestTarEngmtAg,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrCalibTestTiOutTmrVar,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrDisengEngCRCErrMonrSt,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrDisengmtAgCrcNvm,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrDisengmtFinshd,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrDisengmtTiOutTmrVar,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrDisEngRangErrMonrSt,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrEngmtAgCrcNvm,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrEngmtDisengmtRetryCnt,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrEngmtFinshd,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrEngmtTiOutTmrVar,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrEngRangErrMonrSt,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrFailrSts,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrOperMod,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrPauseTi,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrPauseTiFinshd,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrPauseTiTmrElpd,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrPauseTiTmrVar,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrPlkCanReq,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrPlkIntFlt,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrPluErrMonrSt,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrPrimActrDisEngTiOutErrMonrSt,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrPrimActrEngTiOutErrMonrSt,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrPrimActrOverAllStrtUpTestFinshd,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrPrimActrOverAllStrtUpTestSts,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrPrimActrStrtUpTestFinshd,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrPrimActrStrtUpTestSt,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrPrimActrStrtUpTestSts,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrPrimActrStrtUpTestTiOutTmrVar,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrPrimActrStrtUpTstErrMonrSt,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrPrkgPosnReq,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrPrkgPosnReqVld,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrTarDisengmtAgNvm,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockMgrTarEngmtAgNvm,Core_1,Core_1_200us,0.2,,,SSW
 SftyParkLockPosnAcqnCrcVal,Core_1,Core_1_200us,0.2,,,SSW
 SftyParkLockPosnAcqnCurrDmaTiStamp,Core_1,Core_1_200us,0.2,,,SSW
 SftyParkLockPosnAcqnCurrRtsTiStamp,Core_1,Core_1_200us,0.2,,,SSW
@@ -8519,6 +8573,8 @@ SWIT_funcCovInlineSftyHvInterlock,Core_1,Core_1_200us,0.2,,,SWIT
 SWIT_funcCovSftyCrashSigMon,Core_1,Core_1_200us,0.2,,,SWIT
 SWIT_funcCovInlineSftyCrashSigMon,Core_1,Core_1_200us,0.2,,,SWIT
 SftyC2cData.DbgModAllwd,Core_1,Core_1_200us,0.2,,,SSW
+SftyC2cData.DisEngmentValue,Core_1,Core_1_200us,0.2,,,SSW
+SftyC2cData.DisEngmentValueCrc,Core_1,Core_1_200us,0.2,,,SSW
 SftyErrDebFctInhbnSts.B.FCT_ID_ACTV_DCHA_CAN_FAILR,Core_1,Core_1_200us,0.2,,,SSW
 SftyErrDebFctInhbnSts.B.FCT_ID_CANSIGINVLD_EMX_TEMPERATURE_PWR,Core_1,Core_1_200us,0.2,,,SSW
 SftyErrDebFctInhbnSts.B.FCT_ID_CAN_VCU_INV_CTRL_1,Core_1,Core_1_200us,0.2,,,SSW
'

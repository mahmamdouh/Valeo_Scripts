b'commit baafa6d3b1d1d61466aad8003bffd84104203904
Author: David VARGA <david.varga.jv.ext@valeo.com>
Date:   Mon Nov 22 10:56:30 2021 +0100

    $100kW-46429$ - TqMgr P310 Rebase
    
    Change-Id: I4c77f0442509094bb26b8cacf79ef3b4e65cfb4c

diff --git a/src/fw_cu/Components/Inv/LimAndDrt/TqMgr/include/TqMgr.h b/src/fw_cu/Components/Inv/LimAndDrt/TqMgr/include/TqMgr.h
index c8c8762d0..0ffa12fcb 100644
--- a/src/fw_cu/Components/Inv/LimAndDrt/TqMgr/include/TqMgr.h
+++ b/src/fw_cu/Components/Inv/LimAndDrt/TqMgr/include/TqMgr.h
@@ -4,13 +4,13 @@
 /* Project:         eCar project                                          */
 /*                  TriCore Aurix                                         */
 /*                                                                        */
-/* Department:      Valeo Siemens eAutomotive Germany GmbH                */
+/* Department:      Valeo-Siemens eAutomotive GmbH                        */
 /*                  VSeA R&D INV ASW DRCO                                 */
 /*                                                                        */
 /* First author:    <author name>                                         */
 /* Other authors:   -                                                     */
 /* ********************************************************************** */
-/* Copyright (C) Valeo Siemens eAutomotive Germany GmbH 2020              */
+/* Copyright (C) Valeo-Siemens eAutomotive GmbH 2021                      */
 /* All Rights Reserved. Confidential                                      */
 /* ********************************************************************** */
 
@@ -61,7 +61,7 @@ extern boolean ImoWr_PilParkLimSts(void);
 /*! @} doxygen end of group definition                                       */
 #endif /* TQMGR_H_ */
 /* ************************************************************************* */
-/* Copyright (C) Valeo Siemens eAutomotive Germany GmbH 2020                 */
+/* Copyright (C) Valeo-Siemens eAutomotive GmbH 2021                         */
 /* All Rights Reserved. Confidential                                         */
 /* ************************************************************************* */
 /*==================[end of file]============================================*/
diff --git a/src/fw_cu/Components/Inv/LimAndDrt/TqMgr/include/TqMgr_data.h b/src/fw_cu/Components/Inv/LimAndDrt/TqMgr/include/TqMgr_data.h
index 1cb5bcbe3..fccbe77e8 100644
--- a/src/fw_cu/Components/Inv/LimAndDrt/TqMgr/include/TqMgr_data.h
+++ b/src/fw_cu/Components/Inv/LimAndDrt/TqMgr/include/TqMgr_data.h
@@ -22,33 +22,10 @@
 
 #ifndef SW_INTERFACE
 
-/* Begin: Code Variant */
-#if SYSCON_FTR_PERFINDCRCALCN == 1
 
-/* Begin: IPMCTRL_START_SEC_VAR_INIT_32 (online) */
-#define IPMCTRL_START_SEC_VAR_INIT_32
-#include "MemMap.h"
-
-extern VAR(float32, IPMCTRL_VAR) TqCtrlTqAvlMinHvAcIMaxTempDrtg;
-#define IPMCTRL_STOP_SEC_VAR_INIT_32
-#include "MemMap.h"
-/* End: IPMCTRL_STOP_SEC_VAR_INIT_32 (online) */
-
-#endif  /* End: Code Variant */
-
-/* Begin: Code Variant */
-#if SYSCON_FTR_PERFINDCRCALCN == 1
 
-/* Begin: IPMCTRL_START_SEC_VAR_INIT_32 (online) */
-#define IPMCTRL_START_SEC_VAR_INIT_32
-#include "MemMap.h"
 
-extern VAR(float32, IPMCTRL_VAR) TqCtrlTqAvlMaxHvAcIMaxTempDrtg;
-#define IPMCTRL_STOP_SEC_VAR_INIT_32
-#include "MemMap.h"
-/* End: IPMCTRL_STOP_SEC_VAR_INIT_32 (online) */
 
-#endif  /* End: Code Variant */
 
 /* PRQA S 3451 SUP_3451 #external declared global data are autogenerated interfaces which are managed by data dictionary */
 
@@ -513,13 +490,13 @@ extern VAR(float32, IPMCTRL_VAR) TqCtrlTqAvlMax;
 
 
 /* Begin: Code Variant */
-#if SYSCON_FTR_EXTDTQLIM == 1
+#if SYSCON_FTR_PERFINDCRCALCN == 1
 
    /* Begin: IPMCTRL_START_SEC_VAR_INIT_32 (online) */
 #define IPMCTRL_START_SEC_VAR_INIT_32
 #include "MemMap.h"
 
-extern VAR(float32, IPMCTRL_VAR) TqCtrlTqAvlMaxHvAcIMaxExtdTqLim;
+extern VAR(float32, IPMCTRL_VAR) TqCtrlTqAvlMaxHvAcIMaxTempDrtg;
    #define IPMCTRL_STOP_SEC_VAR_INIT_32
 #include "MemMap.h"
 /* End: IPMCTRL_STOP_SEC_VAR_INIT_32 (online) */
@@ -529,6 +506,34 @@ extern VAR(float32, IPMCTRL_VAR) TqCtrlTqAvlMaxHvAcIMaxExtdTqLim;
 
 
 
+   /* Begin: IPMCTRL_START_SEC_VAR_INIT_32 (online) */
+#define IPMCTRL_START_SEC_VAR_INIT_32
+#include "MemMap.h"
+
+extern VAR(float32, IPMCTRL_VAR) TqCtrlTqAvlMaxPrfmncIndcrDenom;
+   #define IPMCTRL_STOP_SEC_VAR_INIT_32
+#include "MemMap.h"
+/* End: IPMCTRL_STOP_SEC_VAR_INIT_32 (online) */
+
+
+
+
+
+
+   /* Begin: IPMCTRL_START_SEC_VAR_INIT_32 (online) */
+#define IPMCTRL_START_SEC_VAR_INIT_32
+#include "MemMap.h"
+
+extern VAR(float32, IPMCTRL_VAR) TqCtrlTqAvlMaxPrfmncIndcrPwr;
+   #define IPMCTRL_STOP_SEC_VAR_INIT_32
+#include "MemMap.h"
+/* End: IPMCTRL_STOP_SEC_VAR_INIT_32 (online) */
+
+
+
+
+
+
    /* Begin: IPMCTRL_START_SEC_VAR_INIT_32 (online) */
 #define IPMCTRL_START_SEC_VAR_INIT_32
 #include "MemMap.h"
@@ -542,13 +547,13 @@ extern VAR(float32, IPMCTRL_VAR) TqCtrlTqAvlMin;
 
 
 /* Begin: Code Variant */
-#if SYSCON_FTR_EXTDTQLIM == 1
+#if SYSCON_FTR_PERFINDCRCALCN == 1
 
    /* Begin: IPMCTRL_START_SEC_VAR_INIT_32 (online) */
 #define IPMCTRL_START_SEC_VAR_INIT_32
 #include "MemMap.h"
 
-extern VAR(float32, IPMCTRL_VAR) TqCtrlTqAvlMinHvAcIMaxExtdTqLim;
+extern VAR(float32, IPMCTRL_VAR) TqCtrlTqAvlMinHvAcIMaxTempDrtg;
    #define IPMCTRL_STOP_SEC_VAR_INIT_32
 #include "MemMap.h"
 /* End: IPMCTRL_STOP_SEC_VAR_INIT_32 (online) */
@@ -558,6 +563,34 @@ extern VAR(float32, IPMCTRL_VAR) TqCtrlTqAvlMinHvAcIMaxExtdTqLim;
 
 
 
+   /* Begin: IPMCTRL_START_SEC_VAR_INIT_32 (online) */
+#define IPMCTRL_START_SEC_VAR_INIT_32
+#include "MemMap.h"
+
+extern VAR(float32, IPMCTRL_VAR) TqCtrlTqAvlMinPrfmncIndcrDenom;
+   #define IPMCTRL_STOP_SEC_VAR_INIT_32
+#include "MemMap.h"
+/* End: IPMCTRL_STOP_SEC_VAR_INIT_32 (online) */
+
+
+
+
+
+
+   /* Begin: IPMCTRL_START_SEC_VAR_INIT_32 (online) */
+#define IPMCTRL_START_SEC_VAR_INIT_32
+#include "MemMap.h"
+
+extern VAR(float32, IPMCTRL_VAR) TqCtrlTqAvlMinPrfmncIndcrPwr;
+   #define IPMCTRL_STOP_SEC_VAR_INIT_32
+#include "MemMap.h"
+/* End: IPMCTRL_STOP_SEC_VAR_INIT_32 (online) */
+
+
+
+
+
+
 #endif
 
 
@@ -876,6 +909,60 @@ extern VAR(float32, TQMGR_VAR) TqMgrTqGrdtPwm;
 #include "MemMap.h"
 /* End: TQMGR_STOP_SEC_VAR_FAST_INIT_32 (online) */
 
+/* Begin: TQMGR_START_SEC_VAR_CLEARED_FAST_32 (online) */
+#define TQMGR_START_SEC_VAR_CLEARED_FAST_32
+#include "MemMap.h"
+
+extern VAR(float32, TQMGR_VAR) TqMgrTqLimMaxPrfmncIndcrDenom;
+#define TQMGR_STOP_SEC_VAR_CLEARED_FAST_32
+#include "MemMap.h"
+/* End: TQMGR_STOP_SEC_VAR_CLEARED_FAST_32 (online) */
+
+/* Begin: TQMGR_START_SEC_VAR_CLEARED_FAST_32 (online) */
+#define TQMGR_START_SEC_VAR_CLEARED_FAST_32
+#include "MemMap.h"
+
+extern VAR(float32, TQMGR_VAR) TqMgrTqLimMaxPrfmncIndcrPwr;
+#define TQMGR_STOP_SEC_VAR_CLEARED_FAST_32
+#include "MemMap.h"
+/* End: TQMGR_STOP_SEC_VAR_CLEARED_FAST_32 (online) */
+
+/* Begin: TQMGR_START_SEC_VAR_CLEARED_FAST_32 (online) */
+#define TQMGR_START_SEC_VAR_CLEARED_FAST_32
+#include "MemMap.h"
+
+extern VAR(float32, TQMGR_VAR) TqMgrTqLimMaxPrfmncIndcrTemp;
+#define TQMGR_STOP_SEC_VAR_CLEARED_FAST_32
+#include "MemMap.h"
+/* End: TQMGR_STOP_SEC_VAR_CLEARED_FAST_32 (online) */
+
+/* Begin: TQMGR_START_SEC_VAR_CLEARED_FAST_32 (online) */
+#define TQMGR_START_SEC_VAR_CLEARED_FAST_32
+#include "MemMap.h"
+
+extern VAR(float32, TQMGR_VAR) TqMgrTqLimMinPrfmncIndcrDenom;
+#define TQMGR_STOP_SEC_VAR_CLEARED_FAST_32
+#include "MemMap.h"
+/* End: TQMGR_STOP_SEC_VAR_CLEARED_FAST_32 (online) */
+
+/* Begin: TQMGR_START_SEC_VAR_CLEARED_FAST_32 (online) */
+#define TQMGR_START_SEC_VAR_CLEARED_FAST_32
+#include "MemMap.h"
+
+extern VAR(float32, TQMGR_VAR) TqMgrTqLimMinPrfmncIndcrPwr;
+#define TQMGR_STOP_SEC_VAR_CLEARED_FAST_32
+#include "MemMap.h"
+/* End: TQMGR_STOP_SEC_VAR_CLEARED_FAST_32 (online) */
+
+/* Begin: TQMGR_START_SEC_VAR_CLEARED_FAST_32 (online) */
+#define TQMGR_START_SEC_VAR_CLEARED_FAST_32
+#include "MemMap.h"
+
+extern VAR(float32, TQMGR_VAR) TqMgrTqLimMinPrfmncIndcrTemp;
+#define TQMGR_STOP_SEC_VAR_CLEARED_FAST_32
+#include "MemMap.h"
+/* End: TQMGR_STOP_SEC_VAR_CLEARED_FAST_32 (online) */
+
 /* Begin: TQMGR_START_SEC_VAR_FAST_INIT_32 (online) */
 #define TQMGR_START_SEC_VAR_FAST_INIT_32
 #include "MemMap.h"
diff --git a/src/fw_cu/Components/Inv/LimAndDrt/TqMgr/src/TqMgr.c b/src/fw_cu/Components/Inv/LimAndDrt/TqMgr/src/TqMgr.c
index 65aacc7dc..22c4e9aac 100644
--- a/src/fw_cu/Components/Inv/LimAndDrt/TqMgr/src/TqMgr.c
+++ b/src/fw_cu/Components/Inv/LimAndDrt/TqMgr/src/TqMgr.c
@@ -5,7 +5,7 @@
 /*                  TriCore Aurix                                         */
 /*                                                                        */
 /* Major SW Version : 01                                                  */
-/* Minor SW Version : 01                                                  */
+/* Minor SW Version : 09                                                  */
 /* VWMEB-Inv-174597 - TqMgr 01                                            */
 /*                                                                        */
 /* Department:      Valeo-Siemens eAutomotive GmbH                        */
@@ -59,9 +59,8 @@
 #include "SWIT_Sfty.h"
 #endif
 
-#include "STUB.h"
+/*   VWMEB-Inv-174598 - TqMgr                                                                     */
 
-/*   VWMEB-Inv-174598 - TqMgr */
 /*================== [defines] ==============================================*/
 #define TQMGR_TQ_THD (1.0e-6F)
 /*================== [type definitions] =====================================*/
@@ -185,11 +184,6 @@ FUNC(void, TQMGR_CORE2_CODE) TqMgr_Run4ms(void)
 /* VWMEB-Inv-174617 - TqMgr_Run10ms (ExtdTqLimCalc)                        */
 FUNC(void, TQMGR_CORE2_CODE) TqMgr_Run10ms(void)
 {
-   float32 extdTqLimMot;
-   float32 extdTqLimGen;
-   float32 extdTqLimMin;
-   float32 extdTqLimMax;
-
    if(FALSE == BswC2cData.ExtdTqLimReq)
    {
       /* Set extended torque limits to neutral values */
@@ -199,17 +193,8 @@ FUNC(void, TQMGR_CORE2_CODE) TqMgr_Run10ms(void)
    else
    {
       /* Comparison against torque Min/Max hard limits */
-      extdTqLimMot = SysPrmTqLimMotMecl * SysPrmExtdTqLimFacTqMot;
-      extdTqLimGen = SysPrmTqLimGenMecl * SysPrmExtdTqLimFacTqGen;
-
-      /* Torque Switch characteristics, min/max limits from mot/gen limits */
-      extdTqLimMin = TqMgr_CalcTqMin(extdTqLimMot, extdTqLimGen, BswC2cData.TqMgrTqMinAlpha);
-      extdTqLimMax = TqMgr_CalcTqMax(extdTqLimMot, extdTqLimGen, BswC2cData.TqMgrTqMaxAlpha);
-
-      /* We will extend the torque to the torque limits calculated from the extended current limits */
-      /* CZ: FIXME: This may have unwanted interaction with self-breaking car feature! */
-      TqMgrExtdTqLimTqMin = TqMgr_Max(TqCtrlTqAvlMin, extdTqLimMin);
-      TqMgrExtdTqLimTqMax = TqMgr_Min(TqCtrlTqAvlMax, extdTqLimMax);
+      TqMgrExtdTqLimTqMax = SysPrmTqLimMotMecl * SysPrmExtdTqLimFacTqMot;
+      TqMgrExtdTqLimTqMin = SysPrmTqLimGenMecl * SysPrmExtdTqLimFacTqGen;
    }
 #ifdef SWIT_Active
  /*  SWIT_TqMgr_Run10ms_EndHook(); */
@@ -234,6 +219,12 @@ FUNC(void, TQMGR_CORE2_CODE) TqMgr_Run(void)
    boolean ActvModEna;
    float32 TqMinLoc;
    float32 TqMaxLoc;
+   float32 TqMinIndcrLoc;
+   float32 TqMaxIndcrLoc;
+   float32 HvDcILimnTqLimGenIntLoc;
+   float32 HvDcILimnTqLimMotIntLoc;
+   float32 HvDcILimnTqLimMinIntLoc;
+   float32 HvDcILimnTqLimMaxIntLoc;
 
    /* torque setpoint from Core 0 */
    TqMgrTqReqCanAct = BswC2cData.TqReq;
@@ -349,6 +340,12 @@ FUNC(void, TQMGR_CORE2_CODE) TqMgr_Run(void)
    TqMgrDrtgLimTqMin = BswC2cData.TqMgrTqDrtgMin;
    TqMgrDrtgLimTqMax = BswC2cData.TqMgrTqDrtgMax;
 
+   HvDcILimnTqLimGenIntLoc = BswC2cData.HvDcILimnTqLimGenInt;
+   HvDcILimnTqLimMotIntLoc = BswC2cData.HvDcILimnTqLimMotInt;
+
+   HvDcILimnTqLimMinIntLoc = TqMgr_CalcTqMin(HvDcILimnTqLimMotIntLoc, HvDcILimnTqLimGenIntLoc, BswC2cData.TqMgrTqMinAlpha);
+   HvDcILimnTqLimMaxIntLoc = TqMgr_CalcTqMax(HvDcILimnTqLimMotIntLoc, HvDcILimnTqLimGenIntLoc, BswC2cData.TqMgrTqMaxAlpha);
+
    /* HvDcULimn */
    if(TRUE == TqMgrHvDcULimnEna)
    {
@@ -367,34 +364,70 @@ FUNC(void, TQMGR_CORE2_CODE) TqMgr_Run(void)
    }
 
    /***************************************************************************/
-   /* CZ: HACK for temperature performance indicator! We need all limitations
-    * and all deratings EXCEPT temperature-based deratings combined! This
-    * information is (conveniently) available at this point. However, we
-    * need to consider the torque available from IpmCtrl which is calculated
-    * from the AC current limitations excluding temperature derating factors.
-    * Also if extended limits are active, we need to extend these partial limits.
-    * Otherwise, they would no more fit to the (extended) performance factor
-    * denominator (which is TqMgrTotLimTqMin/Max).
-    * Is the feature really thought through by VW ? */
-
-   /* CZ: HACK! Provide as proper outputs, write only once */
-   DrvCtrlC2cData.TqMgrTotTqLimExclTempDrtgMin =
-            TqMgr_Min(
-                     TqMgr_Max(
-                              TqMgr_Max(TqMgrDrtgLimTqMin, TqCtrlTqAvlMinHvAcIMaxTempDrtg),
-                              TqMgrIntLimTqMin),
-                     TqMgrExtdTqLimTqMin);
-
-   DrvCtrlC2cData.TqMgrTotTqLimExclTempDrtgMax =
-            TqMgr_Max(
-                     TqMgr_Min(
-                              TqMgr_Min(TqMgrDrtgLimTqMax, TqCtrlTqAvlMaxHvAcIMaxTempDrtg),
-                              TqMgrIntLimTqMax),
-                     TqMgrExtdTqLimTqMax);
+   /* CZ: Temperature performance indicator nominator:
+    * Include all limitations + temperature-based deratings
+    * Use only non-extended torque limits!
+    */
+
+   /* Combine deratings and limitations collected up to this point */
+   TqMinIndcrLoc = TqMgr_Max(TqMgrIntLimTqMin, TqMgrDrtgLimTqMin);
+   TqMaxIndcrLoc = TqMgr_Min(TqMgrIntLimTqMax, TqMgrDrtgLimTqMax);
+
+   /* Add temperature-based deratings (includes non-derating HV AC current limitations) */
+   TqMinIndcrLoc = TqMgr_Max(TqMinIndcrLoc, TqCtrlTqAvlMinHvAcIMaxTempDrtg);
+   TqMaxIndcrLoc = TqMgr_Min(TqMaxIndcrLoc, TqCtrlTqAvlMaxHvAcIMaxTempDrtg);
+
+   TqMgrTqLimMinPrfmncIndcrTemp = TqMinIndcrLoc;
+   TqMgrTqLimMaxPrfmncIndcrTemp = TqMaxIndcrLoc;
+
+   /***************************************************************************/
+
+   /***************************************************************************/
+   /* CZ: power performance indicator nominator:
+    * Include all limitations + I2T deratings
+    * Use only non-extended torque limits!
+    */
+
+   /* Combine deratings and limitations collected up to this point */
+   TqMinIndcrLoc = TqMgr_Max(TqMgrIntLimTqMin, TqMgrDrtgLimTqMin);
+   TqMaxIndcrLoc = TqMgr_Min(TqMgrIntLimTqMax, TqMgrDrtgLimTqMax);
+
+   /* Add I2T deratings (includes non-derating HV AC current limitations) */
+   TqMinIndcrLoc = TqMgr_Max(TqMinIndcrLoc, TqCtrlTqAvlMinPrfmncIndcrPwr);
+   TqMaxIndcrLoc = TqMgr_Min(TqMaxIndcrLoc, TqCtrlTqAvlMaxPrfmncIndcrPwr);
+
+   TqMinIndcrLoc = TqMgr_Max(TqMinIndcrLoc, HvDcILimnTqLimMinIntLoc);
+   TqMaxIndcrLoc = TqMgr_Min(TqMaxIndcrLoc, HvDcILimnTqLimMaxIntLoc);
+
+   TqMgrTqLimMinPrfmncIndcrPwr = TqMinIndcrLoc;
+   TqMgrTqLimMaxPrfmncIndcrPwr = TqMaxIndcrLoc;
 
    /***************************************************************************/
 
-   /* HC AC current limitations */
+
+   /***************************************************************************/
+   /* CZ: performance indicator denominator:
+    * All limitations
+    * Use only non-extended torque limits!
+    */
+
+   /* Combine deratings and limitations collected up to this point */
+   TqMinIndcrLoc = TqMgr_Max(TqMgrIntLimTqMin, TqMgrDrtgLimTqMin);
+   TqMaxIndcrLoc = TqMgr_Min(TqMgrIntLimTqMax, TqMgrDrtgLimTqMax);
+
+   /* Add non-derating HV AC current limitations */
+   TqMinIndcrLoc = TqMgr_Max(TqMinIndcrLoc, TqCtrlTqAvlMinPrfmncIndcrDenom);
+   TqMaxIndcrLoc = TqMgr_Min(TqMaxIndcrLoc, TqCtrlTqAvlMaxPrfmncIndcrDenom);
+
+   TqMgrTqLimMinPrfmncIndcrDenom = TqMinIndcrLoc;
+   TqMgrTqLimMaxPrfmncIndcrDenom = TqMaxIndcrLoc;
+
+   /***************************************************************************/
+
+   TqMgrDrtgLimTqMin = TqMgr_Max(TqMgrDrtgLimTqMin, HvDcILimnTqLimMinIntLoc);
+   TqMgrDrtgLimTqMax = TqMgr_Min(TqMgrDrtgLimTqMax, HvDcILimnTqLimMaxIntLoc);
+
+   /* HV AC current limitations */
    if(TqMgrTqCtrlLimnEna == TRUE)
    {
       /* NOTE: This always goes into the deratings! */
@@ -411,10 +444,6 @@ FUNC(void, TQMGR_CORE2_CODE) TqMgr_Run(void)
    TqMgrTotLimTqMin = TqMgr_Max(TqMgrIntLimTqMin, TqMgrDrtgLimTqMin);
    TqMgrTotLimTqMax = TqMgr_Min(TqMgrIntLimTqMax, TqMgrDrtgLimTqMax);
 
-   /* Extend the limits */
-   TqMgrTotLimTqMin = TqMgr_Min(TqMgrTotLimTqMin, TqMgrExtdTqLimTqMin);
-   TqMgrTotLimTqMax = TqMgr_Max(TqMgrTotLimTqMax, TqMgrExtdTqLimTqMax);
-
    /* Special treatment if TqLimTotMin > TqLimTotMax due to friction torque in IpmCtrl and inaccuracy in TqPth: TqLimIntMin/Max = 0 */
    if(TqMgrTotLimTqMin > TqMgrTotLimTqMax)
    {
@@ -512,13 +541,6 @@ FUNC(void, TQMGR_CORE2_CODE) TqMgr_Run(void)
    /* Communicate to Core 0 : derating torque limits */
    DrvCtrlC2cData.TqMgrDrtgTqLimMin = TqMgrDrtgLimTqMin;
    DrvCtrlC2cData.TqMgrDrtgTqLimMax = TqMgrDrtgLimTqMax;
-
-   /* Communicate to Core 0 : extended torque limits */
-   DrvCtrlC2cData.TqMgrExtdTqLimMin = TqMgrExtdTqLimTqMin;
-   DrvCtrlC2cData.TqMgrExtdTqLimMax = TqMgrExtdTqLimTqMax;
-#ifdef SWIT_Active
- /* SWIT_TqMgr_Run_EndHook(); */
-#endif
 }
 #define TQMGR_CORE2_STOP_SEC_CODE
 #include "MemMap.h"
@@ -569,8 +591,6 @@ FUNC(void, TQMGR_CORE0_CODE) TqMgr_Main(void) /*PRQA S 1503*/
 
    float32 PwrGenLoc;
    float32 PwrMotLoc;
-   float32 TqLimExtdMinLoc;
-   float32 TqLimExtdMaxLoc;
 
    boolean bImoAuthVld;
    boolean PilParkLimActv;
@@ -588,8 +608,6 @@ FUNC(void, TQMGR_CORE0_CODE) TqMgr_Main(void) /*PRQA S 1503*/
    TqLimTotMaxLoc  = DrvCtrlC2cData.TqMgrTotTqLimMax;
    TqLimDrtgMinLoc = DrvCtrlC2cData.TqMgrDrtgTqLimMin;
    TqLimDrtgMaxLoc = DrvCtrlC2cData.TqMgrDrtgTqLimMax;
-   TqLimExtdMinLoc = DrvCtrlC2cData.TqMgrExtdTqLimMin;
-   TqLimExtdMaxLoc = DrvCtrlC2cData.TqMgrExtdTqLimMax;
 
    /* Latch losses (EM/Inv) */
    EmLosses = DrvCtrlC2cData.PwrLossEmAndCable;
@@ -690,10 +708,6 @@ FUNC(void, TQMGR_CORE0_CODE) TqMgr_Main(void) /*PRQA S 1503*/
       }
    }
 
-   /* HvDcILim (internal limits; always derating) */
-   TqGenDrtgLoc = TqMgr_Max(TqGenDrtgLoc, HvDcILimnTqLimGenInt);
-   TqMotDrtgLoc = TqMgr_Min(TqMotDrtgLoc, HvDcILimnTqLimMotInt);
-
    /* Internal power limits */
    if(1U == TqMgrPwrLimnIntEna)
    {
@@ -787,10 +801,6 @@ FUNC(void, TQMGR_CORE0_CODE) TqMgr_Main(void) /*PRQA S 1503*/
      TqMinLoc = TqMgr_Max(TqMinLoc, TqLimDrtgMinLoc);
      TqMaxLoc = TqMgr_Min(TqMaxLoc, TqLimDrtgMaxLoc);
 
-     /* All derating limits, limits extended - max of max/min of min */
-     TqMinLoc = TqMgr_Min(TqMinLoc, TqLimExtdMinLoc);
-     TqMaxLoc = TqMgr_Max(TqMaxLoc, TqLimExtdMaxLoc);
-
      TqMgrTqAvlMinExtPwrLim = TqMinLoc;
      TqMgrTqAvlMaxExtPwrLim = TqMaxLoc;
 
@@ -805,10 +815,6 @@ FUNC(void, TQMGR_CORE0_CODE) TqMgr_Main(void) /*PRQA S 1503*/
      TqMinLoc = TqMgr_Max(TqMinLoc, TqLimDrtgMinLoc);
      TqMaxLoc = TqMgr_Min(TqMaxLoc, TqLimDrtgMaxLoc);
 
-     /* All derating limits, limits extended - max of max/min of min */
-     TqMinLoc = TqMgr_Min(TqMinLoc, TqLimExtdMinLoc);
-     TqMaxLoc = TqMgr_Max(TqMaxLoc, TqLimExtdMaxLoc);
-
      TqMgrTqAvlMinExtPwrTotLim = TqMinLoc;
      TqMgrTqAvlMaxExtPwrTotLim = TqMaxLoc;
 #if SYSCON_FTR_PSM == 1 /* USE_IPMCTRL_CONTROL */
diff --git a/src/fw_cu/Components/Inv/LimAndDrt/TqMgr/src/TqMgr_data.c b/src/fw_cu/Components/Inv/LimAndDrt/TqMgr/src/TqMgr_data.c
index 3ddf5342e..0633431dd 100644
--- a/src/fw_cu/Components/Inv/LimAndDrt/TqMgr/src/TqMgr_data.c
+++ b/src/fw_cu/Components/Inv/LimAndDrt/TqMgr/src/TqMgr_data.c
@@ -1,7 +1,7 @@
 /* ***************************************************************** */
-/* Sourcefile: TqMgr_data.c                                  */
-/* ADD Container: TqMgr                                      */
-/* ADD Container Version: 1.8.0                                      */
+/* Sourcefile: TqMgr_data.c                                          */
+/* ADD Container: TqMgr                                              */
+/* ADD Container Version: 1.9.0                                      */
 /* ***************************************************************** */
 /* Copyright (C) Valeo-Siemens eAutomotive GmbH 2021                 */
 /* All Rights Reserved. Confidential                                 */
@@ -371,6 +371,66 @@ VAR(float32, TQMGR_VAR) TqMgrTqGrdtPwm = 0.f;
 #include "MemMap.h"
 /* End: TQMGR_STOP_SEC_VAR_FAST_INIT_32 (online) */
 
+/* Begin: TQMGR_START_SEC_VAR_CLEARED_FAST_32 (online) */
+#define TQMGR_START_SEC_VAR_CLEARED_FAST_32
+#include "MemMap.h"
+
+/*! \\cvar Maximal torque limit for the performance indicators (denominator); unit \'Nm\' */
+VAR(float32, TQMGR_VAR) TqMgrTqLimMaxPrfmncIndcrDenom;
+#define TQMGR_STOP_SEC_VAR_CLEARED_FAST_32
+#include "MemMap.h"
+/* End: TQMGR_STOP_SEC_VAR_CLEARED_FAST_32 (online) */
+
+/* Begin: TQMGR_START_SEC_VAR_CLEARED_FAST_32 (online) */
+#define TQMGR_START_SEC_VAR_CLEARED_FAST_32
+#include "MemMap.h"
+
+/*! \\cvar Maximal total torque limit for the power performance indicator; unit \'Nm\' */
+VAR(float32, TQMGR_VAR) TqMgrTqLimMaxPrfmncIndcrPwr;
+#define TQMGR_STOP_SEC_VAR_CLEARED_FAST_32
+#include "MemMap.h"
+/* End: TQMGR_STOP_SEC_VAR_CLEARED_FAST_32 (online) */
+
+/* Begin: TQMGR_START_SEC_VAR_CLEARED_FAST_32 (online) */
+#define TQMGR_START_SEC_VAR_CLEARED_FAST_32
+#include "MemMap.h"
+
+/*! \\cvar Maximal total torque limit for the temperature performance indicator; unit \'Nm\' */
+VAR(float32, TQMGR_VAR) TqMgrTqLimMaxPrfmncIndcrTemp;
+#define TQMGR_STOP_SEC_VAR_CLEARED_FAST_32
+#include "MemMap.h"
+/* End: TQMGR_STOP_SEC_VAR_CLEARED_FAST_32 (online) */
+
+/* Begin: TQMGR_START_SEC_VAR_CLEARED_FAST_32 (online) */
+#define TQMGR_START_SEC_VAR_CLEARED_FAST_32
+#include "MemMap.h"
+
+/*! \\cvar Minimal torque limit for the performance indicators (denominator); unit \'Nm\' */
+VAR(float32, TQMGR_VAR) TqMgrTqLimMinPrfmncIndcrDenom;
+#define TQMGR_STOP_SEC_VAR_CLEARED_FAST_32
+#include "MemMap.h"
+/* End: TQMGR_STOP_SEC_VAR_CLEARED_FAST_32 (online) */
+
+/* Begin: TQMGR_START_SEC_VAR_CLEARED_FAST_32 (online) */
+#define TQMGR_START_SEC_VAR_CLEARED_FAST_32
+#include "MemMap.h"
+
+/*! \\cvar Minimal total torque limit for the power performance indicator; unit \'Nm\' */
+VAR(float32, TQMGR_VAR) TqMgrTqLimMinPrfmncIndcrPwr;
+#define TQMGR_STOP_SEC_VAR_CLEARED_FAST_32
+#include "MemMap.h"
+/* End: TQMGR_STOP_SEC_VAR_CLEARED_FAST_32 (online) */
+
+/* Begin: TQMGR_START_SEC_VAR_CLEARED_FAST_32 (online) */
+#define TQMGR_START_SEC_VAR_CLEARED_FAST_32
+#include "MemMap.h"
+
+/*! \\cvar Minimal total torque limit for the temperature performance indicator; unit \'Nm\' */
+VAR(float32, TQMGR_VAR) TqMgrTqLimMinPrfmncIndcrTemp;
+#define TQMGR_STOP_SEC_VAR_CLEARED_FAST_32
+#include "MemMap.h"
+/* End: TQMGR_STOP_SEC_VAR_CLEARED_FAST_32 (online) */
+
 /* Begin: TQMGR_START_SEC_VAR_FAST_INIT_32 (online) */
 #define TQMGR_START_SEC_VAR_FAST_INIT_32
 #include "MemMap.h"
'

b'commit 3c9ec9b0e813647921a92acab5421cce852577ce
Author: Yuping Chen <yuping.chen.jv@valeo.com>
Date:   Mon Mar 28 13:59:52 2022 +0200

    $100kW-51731$ - Update Model PmTempCalcnThermNet with Automation Integration
    
    Change-Id: I5e7c3f0d07429c22d67bbc81cd4f969b0807190f

diff --git a/config/DRCO/model_integration_information.json b/config/DRCO/model_integration_information.json
index 8b9aaf623..8ab930930 100644
--- a/config/DRCO/model_integration_information.json
+++ b/config/DRCO/model_integration_information.json
@@ -1,112 +1,119 @@
-{"ModelKit/MBDExport": {"models": [
-        {
-        "name": "HvAcILimCalcn",
-        "version": "MK-HVACILIMCALCN-2.1.0",
-        "meta":         {
-            "interface_project": "100_KW",
-            "interface_version": "1.1.0",
-            "component_version": "2.1.0",
-            "component_status": "FIXED"
+{
+    "ModelKit/MBDExport": {"models":     [
+                {
+            "name": "HvAcILimCalcn",
+            "version": "MK-HVACILIMCALCN-2.1.0",
+            "meta":             {
+                "interface_project": "100_KW",
+                "interface_version": "1.1.0",
+                "component_version": "2.1.0",
+                "component_status": "FIXED"
+            }
+        },
+                {
+            "name": "IvtrCooltTempDrtg",
+            "version": "MK-IVTRCOOLTTEMPDRTG-2.1.0",
+            "meta":             {
+                "interface_project": "100_KW",
+                "interface_version": "1.1.0",
+                "component_version": "2.1.0",
+                "component_status": "FIXED"
+            }
+        },
+                {
+            "name": "IvtrDcLinkTempDrtg",
+            "version": "MK-IVTRDCLINKTEMPDRTG-2.1.0",
+            "meta":             {
+                "interface_project": "100_KW",
+                "interface_version": "1.1.0",
+                "component_version": "2.1.0",
+                "component_status": "FIXED"
+            }
+        },
+                {
+            "name": "IvtrDcLinkThermMdl",
+            "version": "MK-IVTRDCLINKTHERMMDL-2.1.0",
+            "meta":             {
+                "interface_project": "100_KW",
+                "interface_version": "1.1.0",
+                "component_version": "2.1.0",
+                "component_status": "FIXED"
+            }
+        },
+                {
+            "name": "IvtrHvAcBusBarTempDrtg",
+            "version": "MK-IVTRHVACBUSBARTEMPDRTG-1.1.0",
+            "meta":             {
+                "interface_project": "100_KW",
+                "interface_version": "1.1.0",
+                "component_version": "1.1.0",
+                "component_status": "FIXED"
+            }
+        },
+                {
+            "name": "IvtrHvAcBusBarThermMdl",
+            "version": "MK-IVTRHVACBUSBARTHERMMDL-2.1.0",
+            "meta":             {
+                "interface_project": "100_KW",
+                "interface_version": "1.1.0",
+                "component_version": "2.1.0",
+                "component_status": "FIXED"
+            }
+        },
+                {
+            "name": "IvtrHvDcBusBarTempDrtg",
+            "version": "MK-IVTRHVDCBUSBARTEMPDRTG-1.1.0",
+            "meta":             {
+                "interface_project": "100_KW",
+                "interface_version": "1.1.0",
+                "component_version": "1.1.0",
+                "component_status": "FIXED"
+            }
+        },
+                {
+            "name": "IvtrIgbtJcnCooltDeltaTempDrtg",
+            "version": "MK-IVTRIGBTJCNCOOLTDELTATEMPDRTG-1.1.0",
+            "meta":             {
+                "interface_project": "100_KW",
+                "interface_version": "1.1.0",
+                "component_version": "1.1.0",
+                "component_status": "FIXED"
+            }
+        },
+                {
+            "name": "IvtrIgbtJcnTempDrtg",
+            "version": "MK-IVTRIGBTJCNTEMPDRTG-2.1.0",
+            "meta":             {
+                "interface_project": "100_KW",
+                "interface_version": "1.1.0",
+                "component_version": "2.1.0",
+                "component_status": "FIXED"
+            }
+        },
+                {
+            "name": "IvtrIgbtNtcTempDrtg",
+            "version": "MK-IVTRIGBTNTCTEMPDRTG-2.1.0",
+            "meta":             {
+                "interface_project": "100_KW",
+                "interface_version": "1.1.0",
+                "component_version": "2.1.0",
+                "component_status": "FIXED"
+            }
+        },
+                {
+            "name": "IvtrThermMdl",
+            "version": "MK-IVTRTHERMMDL-2.1.0",
+            "meta":             {
+                "interface_project": "100_KW",
+                "interface_version": "1.1.0",
+                "component_version": "2.1.0",
+                "component_status": "FIXED"
+            }
         }
-    },
-        {
-        "name": "IvtrCooltTempDrtg",
-        "version": "MK-IVTRCOOLTTEMPDRTG-2.1.0",
-        "meta":         {
-            "interface_project": "100_KW",
-            "interface_version": "1.1.0",
-            "component_version": "2.1.0",
-            "component_status": "FIXED"
-        }
-    },
-        {
-        "name": "IvtrDcLinkTempDrtg",
-        "version": "MK-IVTRDCLINKTEMPDRTG-2.1.0",
-        "meta":         {
-            "interface_project": "100_KW",
-            "interface_version": "1.1.0",
-            "component_version": "2.1.0",
-            "component_status": "FIXED"
-        }
-    },
-        {
-        "name": "IvtrDcLinkThermMdl",
-        "version": "MK-IVTRDCLINKTHERMMDL-2.1.0",
-        "meta":         {
-            "interface_project": "100_KW",
-            "interface_version": "1.1.0",
-            "component_version": "2.1.0",
-            "component_status": "FIXED"
-        }
-    },
-        {
-        "name": "IvtrHvAcBusBarTempDrtg",
-        "version": "MK-IVTRHVACBUSBARTEMPDRTG-1.1.0",
-        "meta":         {
-            "interface_project": "100_KW",
-            "interface_version": "1.1.0",
-            "component_version": "1.1.0",
-            "component_status": "FIXED"
-        }
-    },
-        {
-        "name": "IvtrHvAcBusBarThermMdl",
-        "version": "MK-IVTRHVACBUSBARTHERMMDL-2.1.0",
-        "meta":         {
-            "interface_project": "100_KW",
-            "interface_version": "1.1.0",
-            "component_version": "2.1.0",
-            "component_status": "FIXED"
-        }
-    },
-        {
-        "name": "IvtrHvDcBusBarTempDrtg",
-        "version": "MK-IVTRHVDCBUSBARTEMPDRTG-1.1.0",
-        "meta":         {
-            "interface_project": "100_KW",
-            "interface_version": "1.1.0",
-            "component_version": "1.1.0",
-            "component_status": "FIXED"
-        }
-    },
-        {
-        "name": "IvtrIgbtJcnCooltDeltaTempDrtg",
-        "version": "MK-IVTRIGBTJCNCOOLTDELTATEMPDRTG-1.1.0",
-        "meta":         {
-            "interface_project": "100_KW",
-            "interface_version": "1.1.0",
-            "component_version": "1.1.0",
-            "component_status": "FIXED"
-        }
-    },
-        {
-        "name": "IvtrIgbtJcnTempDrtg",
-        "version": "MK-IVTRIGBTJCNTEMPDRTG-2.1.0",
-        "meta":         {
-            "interface_project": "100_KW",
-            "interface_version": "1.1.0",
-            "component_version": "2.1.0",
-            "component_status": "FIXED"
-        }
-    },
-        {
-        "name": "IvtrIgbtNtcTempDrtg",
-        "version": "MK-IVTRIGBTNTCTEMPDRTG-2.1.0",
-        "meta":         {
-            "interface_project": "100_KW",
-            "interface_version": "1.1.0",
-            "component_version": "2.1.0",
-            "component_status": "FIXED"
-        }
-    },
-        {
-        "name": "IvtrThermMdl",
-        "version": "MK-IVTRTHERMMDL-2.1.0",
-        "meta":         {
-            "interface_project": "100_KW",
-            "interface_version": "1.1.0",
-            "component_version": "2.1.0",
-            "component_status": "FIXED"
-        }
-    }
-]}}
\\ No newline at end of file
+    ]},
+    "ec_models": {"models": [    {
+        "name": "PmTempCalcnThermNet",
+        "version": "refs/tags/DRCO_PMTEMPCALCNTHERMNET_BASIS_V01900",
+        "meta": {"ec_models_pub_scripts_version": "e2bdc89c5b3c0481106bee2a9da930bb38475a1c"}
+    }]}
+}
\\ No newline at end of file
diff --git a/src/fw_cu/Components/Cmn/Com/C2cCom/src/C2cComDrvCtrl.c b/src/fw_cu/Components/Cmn/Com/C2cCom/src/C2cComDrvCtrl.c
index f509a775f..e3475e61e 100644
--- a/src/fw_cu/Components/Cmn/Com/C2cCom/src/C2cComDrvCtrl.c
+++ b/src/fw_cu/Components/Cmn/Com/C2cCom/src/C2cComDrvCtrl.c
@@ -154,8 +154,6 @@ FUNC(void, DRVCTRL_C2C_COM_CODE) DrvCtrlC2c_Send1ms(void)
    DrvCtrlC2cData.EmCableRPha = TqCtrlRPhaEmCable; /* Actual motor cable resistance */
 
 #if SYSCON_FTR_PSM == 1 /* USE_IPMCTRL_CONTROL */
-   /* Current state of the PmTempCalcnStateChart */
-   DrvCtrlC2cData.PmTempCalcnSt = PmTempCalcnThermNetState;
 
    /* Actual absolute value of the maximum allowed mechanical speed in pulse off state */
    DrvCtrlC2cData.SpoMaxSpdAllwd = SpoMaxEmSpdCalcnSpdLim * SYSCON_RAD_TO_RPM;
@@ -283,9 +281,6 @@ FUNC(void, DRVCTRL_C2C_COM_CODE) DrvCtrlC2c_Send10ms(void)
    /* Actual measured winding temperature using winding temperature sensor */
    DrvCtrlC2cData.InvTempAct.EmTemp2 = PmTempCalcnThermNetWindgTempCalcn;
 
-   /* Estimated Em Airgap temperature  */
-   DrvCtrlC2cData.InvTempAct.EmTemp3 = PmTempCalcnThermNetWindgTempSnrAvg;
-
    /* Thermal netwok fault */
    DrvCtrlC2cData.InvTempAct.EmTempVld = PmTempCalcnThermNetPmTempVld;
 #endif /* SYSCON_FTR_PSM == 1 */
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/a2l/PmTempCalcnThermNet.a2l b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/a2l/PmTempCalcnThermNet.a2l
index 66322fa6d..d4d93e778 100644
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/a2l/PmTempCalcnThermNet.a2l
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/a2l/PmTempCalcnThermNet.a2l
@@ -1,3169 +1,2770 @@
-\xef\xbb\xbf
-
-/begin PROJECT
-    PmTempCalcnThermNet\t/* Name */
-    ""\t/* LongIdentifier */
-    /begin HEADER
-        "General project description"\t/* Comment */
-        VERSION "2021-11-08 12:32:38"
-        PROJECT_NO PRJ1
-    /end HEADER
-
-    /begin MODULE
-        PmTempCalcnThermNet\t/* Name */
-        ""\t/* LongIdentifier */
-
-        /begin A2ML
-            block "IF_DATA" taggedunion if_data {
-            };
-        /end A2ML
-
-        /begin MOD_PAR
-            ""\t/* Comment */
-            NO_OF_INTERFACES 0
-        /end MOD_PAR 
-
-        /begin MOD_COMMON
-            ""
-            ALIGNMENT_BYTE 1
-            ALIGNMENT_WORD 2
-            ALIGNMENT_LONG 2
-            ALIGNMENT_FLOAT32_IEEE 2
-            ALIGNMENT_FLOAT64_IEEE 4
-            BYTE_ORDER MSB_LAST
-            DEPOSIT ABSOLUTE
-        /end MOD_COMMON 
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.ClckCntMax\t/* Name */
-            "Maximum counter size after which the internal clock resets to Zero"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            ULONG_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_s\t/* Conversion */
-            0\t/* LowerLimit */
-            1000000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.ClckCntStep\t/* Name */
-            "Step size which represents the incremental counter of internal clock"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            ULONG_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_s\t/* Conversion */
-            0\t/* LowerLimit */
-            1000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.CompareTimeConstFacPm\t/* Name */
-            "Constant Factor to decide if initial value calc. algorithm shall be triggered."\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */
-            0\t/* LowerLimit */
-            1000000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.CompareTimeConstFacPmAmb\t/* Name */
-            "Constant Factor to decide which temperature shall be used as ambient temperature for initial value calc. Algorithm."\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */
-            0\t/* LowerLimit */
-            1000000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.CompareTimeConstFacWindg\t/* Name */
-            "Cooling time constant for winding end thermal node."\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */
-            0\t/* LowerLimit */
-            100000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.CompareTimeConstFacWindgAmb\t/* Name */
-            "Constant Factor to decide which temperature shall be used as ambient temperature for initial value calc. Algorithm."\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */
-            0\t/* LowerLimit */
-            1000000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.ConvTimeOff_Secs\t/* Name */
-            "conversion parameter to convert Off time from minutes to secs. (Set value = 60: CAN_VehPrkgTi / CAN_HvOffTi is in minutes; 1: CAN_VehPrkgTi / CAN_HvOffTi is in seconds )"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-            0\t/* LowerLimit */
-            100000000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.CoolDownTimeConstPm\t/* Name */
-            "Constant Factor to decide if initial value calc. algorithm shall be triggered for Rotor"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */
-            -1000\t/* LowerLimit */
-            100000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.CoolDownTimeWindg\t/* Name */
-            "Cooling time constant for winding end thermal node."\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */
-            -1000\t/* LowerLimit */
-            100000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.CooltTemp2_CoolTemp1Fac_LuTYaxis\t/* Name */
-            "Factor to calculate Air gap temperature (dependency can be made on coolant flow rate if required)"\t/* LongIdentifier */
-            CURVE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-            /begin AXIS_DESCR
-                COM_AXIS\t/* Attribute */
-                PmTempCalcnThermNet_InputData.EmCooltFlow\t/* InputQuantity */
-                PmTempCalcnThermNet_VOID_SCALING_l_p_min\t/* Conversion */
-                16\t/* MaxAxisPoints */
-                0\t/* LowerLimit */
-                10\t/* UpperLimit */
-                BYTE_ORDER MSB_LAST
-                AXIS_PTS_REF PmTempCalcnThermNet_CalibParam.CoolFlowRate_LuTXaxis
-            /end AXIS_DESCR
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.CooltTemp2_PmTempFac_LuTYaxis\t/* Name */
-            "Factor to calculate Air gap temperature (dependency can be made on coolant flow rate if required)"\t/* LongIdentifier */
-            CURVE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-            /begin AXIS_DESCR
-                COM_AXIS\t/* Attribute */
-                PmTempCalcnThermNet_InputData.EmCooltFlow\t/* InputQuantity */
-                PmTempCalcnThermNet_VOID_SCALING_l_p_min\t/* Conversion */
-                16\t/* MaxAxisPoints */
-                0\t/* LowerLimit */
-                10\t/* UpperLimit */
-                BYTE_ORDER MSB_LAST
-                AXIS_PTS_REF PmTempCalcnThermNet_CalibParam.CoolFlowRate_LuTXaxis
-            /end AXIS_DESCR
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.CuResist_TempRef\t/* Name */
-            "copper resistance used to calculate copper losses"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-            -100\t/* LowerLimit */
-            100\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.CuResistSpdCoeff2\t/* Name */
-            "The coefficient which is used to adapt AC copper resistance to actual rotor speed"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-            -10\t/* LowerLimit */
-            10\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.CuWikoFac\t/* Name */
-            "Factor to divide the copper losses in stator winding and in winding-end"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.DiHwFltCheckStMachn\t/* Name */
-            "Disable Bit to deactivate Fault check of winding temperature sensor (NTC\'s)"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.DiIntClkCntr\t/* Name */
-            "Disable Bit to deactivate the  internal clock which is used to calculate time duration after RotTempFlt occurs (1: Disabled 0: Enabled )"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.DiSelAmbTempPm\t/* Name */
-            "Disable Bit to deactivate the selection of ambient temperature (stator winding or airgap) used for initial value calc. (1: Disabled 0: Enabled )"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.DiSelAmbTempWindg\t/* Name */
-            "Disable Bit to deactivate the selection of ambient temperature (stator winding or airgap) used for initial value calc. (1: Disabled 0: Enabled )"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.DiSimnPmTemp\t/* Name */
-            "Disable Simulation Mode (Test Purpose Only) of Thermal Network via Calibration parameter (1: Disabled 0: Enabled )"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.DiSimnPmTemp_HwFlt\t/* Name */
-            "Disable winding sensor HW fault Simulation Mode (Test Purpose Only) of Thermal Network via Calibration parameter (1: Disabled 0: Enabled )"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.DiThermNetCalcn\t/* Name */
-            "Deactivate PM temperature calculation. Thermal Network will switch to replacement value \'State1\'."\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.DiThermNetCalcn_UseTempWindgSnsr\t/* Name */
-            "Bit to select the replacement value for PM temperature. 
-(1: Winding sensor temperature; 0: Calibratable value  \'PmTempRplcVal\' )"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.EnaAvgWindTempCalc\t/* Name */
-            "Enable Bit to activate calculation of average winding temperature using 2 winding sensors "\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.EnaCoolInp2TempCalc\t/* Name */
-            "Enable Bit to activate calculation of coolant temperature at rotor outlet"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.EnaHvOffTime\t/* Name */
-            "Enable Bit to select the use HV Off time or Vehicle Off time in exponential function initial value calc. Algorithm (0: Disabled 1: Enabled )"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.EnaStandStillOp\t/* Name */
-            "Enable Bit to activate calculation of copper losses at standstill operation"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.EnaStaWindg_CuLossEstim\t/* Name */
-            "Enable Bit to activate calculation of copper losses"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.EnaTempWndgRplcmntVal\t/* Name */
-            "Enable Bit to activate replacement value of winding temperature (NTC\'s)"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.EnaVehSpdChck\t/* Name */
-            "Enable bit to activate vehicle speed check used in Rotor temperature fault."\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.FeLossRotDistbnFac_LuTYaxis\t/* Name */
-            "LUT values of rotor iron loss distribution factor depending on rotor speed"\t/* LongIdentifier */
-            CURVE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-            0\t/* LowerLimit */
-            10\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-            /begin AXIS_DESCR
-                COM_AXIS\t/* Attribute */
-                PmTempCalcnThermNet_InputData.SpdAct\t/* InputQuantity */
-                PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */
-                16\t/* MaxAxisPoints */
-                -18000\t/* LowerLimit */
-                18000\t/* UpperLimit */
-                BYTE_ORDER MSB_LAST
-                AXIS_PTS_REF PmTempCalcnThermNet_CalibParam.FeLossSpdAct_LUTXaxis
-            /end AXIS_DESCR
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.FuncTiSlc\t/* Name */
-            "time slice in which the function PmTempCalcnThermNetVw is called"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */
-            0\t/* LowerLimit */
-            20\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.GearRatioInvs\t/* Name */
-            "Conversion ratio to convert speed from rpm to kmph: \\"InvsGearRatio*2*Pi*WheelRadius*1e-6*60\\""\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.IdIvsStep\t/* Name */
-            "Inverse of equidistant steps between two Id current vector elements"\t/* LongIdentifier */
-            VAL_BLK\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_1_p_A\t/* Conversion */
-            0.00038461538461538462\t/* LowerLimit */
-            1\t/* UpperLimit */
-            MATRIX_DIM 1
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.IdMaxIdx\t/* Name */
-            "Maximal index of Id current vector (dimension-1)"\t/* LongIdentifier */
-            VAL_BLK\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___c\t/* Conversion */
-            1\t/* LowerLimit */
-            255\t/* UpperLimit */
-            MATRIX_DIM 1
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.IdMin\t/* Name */
-            "Minimal value of Id (direct axis) current for all LuTs"\t/* LongIdentifier */
-            VAL_BLK\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_A\t/* Conversion */
-            -1300\t/* LowerLimit */
-            1300\t/* UpperLimit */
-            MATRIX_DIM 1
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.IniPmTempRplcVal\t/* Name */
-            "calibratable value for initial PM temperature"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.IniValCalcnMod\t/* Name */
-            "Mode to select Initial value for PM temperature. 
-Default: Calib param \'IniPmTempRplcVal\'
-1: Measured winding temperature  \'TempWindgSnsr_PmTempLimn\'
-2: Initial value calculated via \'IniPMTemp\' algorithm 
-3: Calib param \'IniPmTempRplcVal\'"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___c\t/* Conversion */
-            0\t/* LowerLimit */
-            4\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.IniWindgTempRplcVal\t/* Name */
-            "calibratable value for initial PM temperature"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.IntgTiSampleRot\t/* Name */
-            "Integrator time constant for Rotor"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */
-            0\t/* LowerLimit */
-            1000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.IntgTiSampleWik\t/* Name */
-            "Integrator time constant for winding"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */
-            0\t/* LowerLimit */
-            100\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.IntgTiSampleWiko\t/* Name */
-            "Integrator time constant for winding end"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */
-            0\t/* LowerLimit */
-            100\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.IqIvsStep\t/* Name */
-            "Inverse of equidistant steps between two Iq current vector elements"\t/* LongIdentifier */
-            VAL_BLK\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_1_p_A\t/* Conversion */
-            0.00038461538461538462\t/* LowerLimit */
-            1\t/* UpperLimit */
-            MATRIX_DIM 1
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.IqMaxIdx\t/* Name */
-            "Maximal index of Iq current vector (dimension-1)"\t/* LongIdentifier */
-            VAL_BLK\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___c\t/* Conversion */
-            1\t/* LowerLimit */
-            255\t/* UpperLimit */
-            MATRIX_DIM 1
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.IqMin\t/* Name */
-            "Minimal value of Iq (direct axis) current for all LuTs"\t/* LongIdentifier */
-            VAL_BLK\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_A\t/* Conversion */
-            -1300\t/* LowerLimit */
-            1300\t/* UpperLimit */
-            MATRIX_DIM 1
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.MotorPhaseNum_NomOp\t/* Name */
-            "Total number of motor phases to be multiplied during normal operation"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-            0\t/* LowerLimit */
-            6\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.MotorPhaseNum_StandStill\t/* Name */
-            "Total number of motor phases to be multiplied during stand still operation"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-            0\t/* LowerLimit */
-            6\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.MotSpdThd\t/* Name */
-            "Threshold value of speed at which stand still operation will be switched on"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_Hz\t/* Conversion */
-            -5\t/* LowerLimit */
-            5\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.PlossFric_LuTYaxis\t/* Name */
-            "Losses generated in rotor due to Friction"\t/* LongIdentifier */
-            CURVE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
-            0\t/* LowerLimit */
-            20000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-            /begin AXIS_DESCR
-                COM_AXIS\t/* Attribute */
-                PmTempCalcnThermNet_InputData.SpdAct\t/* InputQuantity */
-                PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */
-                16\t/* MaxAxisPoints */
-                -18000\t/* LowerLimit */
-                18000\t/* UpperLimit */
-                BYTE_ORDER MSB_LAST
-                AXIS_PTS_REF PmTempCalcnThermNet_CalibParam.SpdActFric_LuTXaxis
-            /end AXIS_DESCR
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.PlossIdFlatTop_map\t/* Name */
-            "Losses generated in rotor due to d Current when Flat top modulation is active (Frq dependent)"\t/* LongIdentifier */
-            MAP\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
-            0\t/* LowerLimit */
-            20000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-            /begin AXIS_DESCR
-                FIX_AXIS\t/* Attribute */
-                NO_INPUT_QUANTITY\t/* InputQuantity */
-                EQ_LSB_1_OFF_0\t/* Conversion */
-                16\t/* MaxAxisPoints */
-                0\t/* LowerLimit */
-                16\t/* UpperLimit */
-                FIX_AXIS_PAR_DIST 0 1 16
-            /end AXIS_DESCR
-            /begin AXIS_DESCR
-                FIX_AXIS\t/* Attribute */
-                NO_INPUT_QUANTITY\t/* InputQuantity */
-                EQ_LSB_1_OFF_0\t/* Conversion */
-                4\t/* MaxAxisPoints */
-                0\t/* LowerLimit */
-                4\t/* UpperLimit */
-                FIX_AXIS_PAR_DIST 0 1 4
-            /end AXIS_DESCR
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.PlossIdSpcVec_map\t/* Name */
-            "Losses generated in rotor due to d Current when space vector modulation is active (Frq dependent)"\t/* LongIdentifier */
-            MAP\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
-            0\t/* LowerLimit */
-            20000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-            /begin AXIS_DESCR
-                FIX_AXIS\t/* Attribute */
-                NO_INPUT_QUANTITY\t/* InputQuantity */
-                EQ_LSB_1_OFF_0\t/* Conversion */
-                16\t/* MaxAxisPoints */
-                0\t/* LowerLimit */
-                16\t/* UpperLimit */
-                FIX_AXIS_PAR_DIST 0 1 16
-            /end AXIS_DESCR
-            /begin AXIS_DESCR
-                FIX_AXIS\t/* Attribute */
-                NO_INPUT_QUANTITY\t/* InputQuantity */
-                EQ_LSB_1_OFF_0\t/* Conversion */
-                4\t/* MaxAxisPoints */
-                0\t/* LowerLimit */
-                4\t/* UpperLimit */
-                FIX_AXIS_PAR_DIST 0 1 4
-            /end AXIS_DESCR
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.PlossIqFlatTop_map\t/* Name */
-            "Losses generated in rotor due to q Current when Flat top modulation is active (Frq dependent)"\t/* LongIdentifier */
-            MAP\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
-            0\t/* LowerLimit */
-            20000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-            /begin AXIS_DESCR
-                FIX_AXIS\t/* Attribute */
-                NO_INPUT_QUANTITY\t/* InputQuantity */
-                EQ_LSB_1_OFF_0\t/* Conversion */
-                16\t/* MaxAxisPoints */
-                0\t/* LowerLimit */
-                16\t/* UpperLimit */
-                FIX_AXIS_PAR_DIST 0 1 16
-            /end AXIS_DESCR
-            /begin AXIS_DESCR
-                FIX_AXIS\t/* Attribute */
-                NO_INPUT_QUANTITY\t/* InputQuantity */
-                EQ_LSB_1_OFF_0\t/* Conversion */
-                4\t/* MaxAxisPoints */
-                0\t/* LowerLimit */
-                4\t/* UpperLimit */
-                FIX_AXIS_PAR_DIST 0 1 4
-            /end AXIS_DESCR
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.PlossIqSpcVec_map\t/* Name */
-            "Losses generated in rotor due to q Current when space vector modulation is active (Frq dependent)"\t/* LongIdentifier */
-            MAP\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
-            0\t/* LowerLimit */
-            20000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-            /begin AXIS_DESCR
-                FIX_AXIS\t/* Attribute */
-                NO_INPUT_QUANTITY\t/* InputQuantity */
-                EQ_LSB_1_OFF_0\t/* Conversion */
-                16\t/* MaxAxisPoints */
-                0\t/* LowerLimit */
-                16\t/* UpperLimit */
-                FIX_AXIS_PAR_DIST 0 1 16
-            /end AXIS_DESCR
-            /begin AXIS_DESCR
-                FIX_AXIS\t/* Attribute */
-                NO_INPUT_QUANTITY\t/* InputQuantity */
-                EQ_LSB_1_OFF_0\t/* Conversion */
-                4\t/* MaxAxisPoints */
-                0\t/* LowerLimit */
-                4\t/* UpperLimit */
-                FIX_AXIS_PAR_DIST 0 1 4
-            /end AXIS_DESCR
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.PlossNac_LuTYaxis\t/* Name */
-            "Current losses generated in rotor due to rotor speed"\t/* LongIdentifier */
-            CURVE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
-            0\t/* LowerLimit */
-            10\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-            /begin AXIS_DESCR
-                COM_AXIS\t/* Attribute */
-                PmTempCalcnThermNet_InputData.SpdAct\t/* InputQuantity */
-                PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */
-                16\t/* MaxAxisPoints */
-                -18000\t/* LowerLimit */
-                18000\t/* UpperLimit */
-                BYTE_ORDER MSB_LAST
-                AXIS_PTS_REF PmTempCalcnThermNet_CalibParam.SpdActNac_LuTXaxis
-            /end AXIS_DESCR
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.PmTempMaxVal\t/* Name */
-            "Maximum Threshold value for limiting the measured winding temperature, where measured winding temp. is used as a replacement value for following: 
-1) Output PM temperature in State 1
-2) Initial PM temperature in State 2"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            -80\t/* LowerLimit */
-            300\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.PmTempMinVal\t/* Name */
-            "Maximum Threshold value for limiting the measured winding temperature, where measured winding temp. is used as a replacement value for following: 
-1) Output PM temperature in State 1
-2) Initial PM temperature in State 2"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            -80\t/* LowerLimit */
-            300\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.PmTempRplcVal\t/* Name */
-            "Replacement value of temperature used either for initialisation of Thermal Network or as PM Temperature ouput value "\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.PwmFreqActIvsStep\t/* Name */
-            "Inverse of equidistant steps between two PWM frequency vector elements"\t/* LongIdentifier */
-            VAL_BLK\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */
-            8.3340278356529705e-05\t/* LowerLimit */
-            1\t/* UpperLimit */
-            MATRIX_DIM 1
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.PwmFreqActMaxIdx\t/* Name */
-            "Maximal index of PWM frequency vector (dimension-1)"\t/* LongIdentifier */
-            VAL_BLK\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___c\t/* Conversion */
-            1\t/* LowerLimit */
-            255\t/* UpperLimit */
-            MATRIX_DIM 1
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.PwmFreqActMin\t/* Name */
-            "Minimal value of PWM frequency for all LuTs"\t/* LongIdentifier */
-            VAL_BLK\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_Hz\t/* Conversion */
-            1\t/* LowerLimit */
-            12000\t/* UpperLimit */
-            MATRIX_DIM 1
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.RotorCpTherm\t/* Name */
-            "Thermal capacitance of Rotor-PM"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_W_s_p_K\t/* Conversion */
-            0\t/* LowerLimit */
-            100000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.RotTimeConstFac_RotTempIniFlt\t/* Name */
-            "A time factor which is a multiple of Thermal time constant of Permanent Magnet (Rotor)"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */
-            0\t/* LowerLimit */
-            200000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.RThermRotorAirgap_LuTYaxis\t/* Name */
-            "Thermal resistivity of Rotor"\t/* LongIdentifier */
-            CURVE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_K_p_W\t/* Conversion */
-            -2000\t/* LowerLimit */
-            2000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-            /begin AXIS_DESCR
-                COM_AXIS\t/* Attribute */
-                PmTempCalcnThermNet_InputData.SpdAct\t/* InputQuantity */
-                PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */
-                16\t/* MaxAxisPoints */
-                -19000\t/* LowerLimit */
-                19000\t/* UpperLimit */
-                BYTE_ORDER MSB_LAST
-                AXIS_PTS_REF PmTempCalcnThermNet_CalibParam.SpdActRTherm_LuTXaxis
-            /end AXIS_DESCR
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.RThermRotorCoolt_LuTYaxis\t/* Name */
-            "Look-Up table for thermal resistivity of rotor"\t/* LongIdentifier */
-            CURVE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-            -2000\t/* LowerLimit */
-            2000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-            /begin AXIS_DESCR
-                COM_AXIS\t/* Attribute */
-                PmTempCalcnThermNet_InputData.EmCooltFlow\t/* InputQuantity */
-                PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-                16\t/* MaxAxisPoints */
-                0\t/* LowerLimit */
-                20\t/* UpperLimit */
-                BYTE_ORDER MSB_LAST
-                AXIS_PTS_REF PmTempCalcnThermNet_CalibParam.CooltFlowRateRtherm_LuTXaxis
-            /end AXIS_DESCR
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.RThermStatorWindg_LuTYaxis\t/* Name */
-            "Look-Up table for thermal resistivity of winding"\t/* LongIdentifier */
-            CURVE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-            -2000\t/* LowerLimit */
-            2000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-            /begin AXIS_DESCR
-                COM_AXIS\t/* Attribute */
-                PmTempCalcnThermNet_InputData.EmCooltFlow\t/* InputQuantity */
-                PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-                16\t/* MaxAxisPoints */
-                0\t/* LowerLimit */
-                20\t/* UpperLimit */
-                BYTE_ORDER MSB_LAST
-                AXIS_PTS_REF PmTempCalcnThermNet_CalibParam.CooltFlowRateRtherm_LuTXaxis
-            /end AXIS_DESCR
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.RThermStatorWindgEnd\t/* Name */
-            "Thermal resistivity of winding end"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-            -2000\t/* LowerLimit */
-            2000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.SimnPmTemp_CAN_HvOffTi\t/* Name */
-            "Test Purpose Only: Time during which the HV connection is switched off"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_min\t/* Conversion */
-            0\t/* LowerLimit */
-            100000000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.SimnPmTemp_CAN_VehPrkgTi\t/* Name */
-            "Test Purpose Only: Time during which the vehicle stays switched off, If is in minutes set \'\'"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_min\t/* Conversion */
-            0\t/* LowerLimit */
-            100000000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_ErrHvOff\t/* Name */
-            "Test Purpose Only: Validity Bit which denotes validity of HV Offtime Signal (1: Not Valid 0: Signal Valid )"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_ErrNvm\t/* Name */
-            "Test Purpose Only: Validity Bit which denotes validity of variables stored NVM (1: Not Valid 0: Signal Valid )"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_ErrPrkgTi\t/* Name */
-            "Test Purpose Only: Validity Bit which denotes validity of Vehicle Offtime Signal (1: Not Valid 0: Signal Valid )"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_IniHvOff\t/* Name */
-            "Test Purpose Only: Initialisation Bit which denotes availability of HV Offtime Signal (1: Not Available; 0: Signal Available)"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_IniNvm\t/* Name */
-            "Test Purpose Only: Initialisation Bit which denotes availability of variables stored in NVM (1: Not Available; 0: Signal Available)"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_IniPrkgTi\t/* Name */
-            "Test Purpose Only: Initialisation Bit which denotes availability of Vehicle Offtime Signal (1: Not Available; 0: Signal Available)"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.SimnPmTemp_HwFlt_WindgSnsr1\t/* Name */
-            "Test Purpose Only: Fault Bit which denotes if measured tempeture using winding sensor 1 is a faulty signal (0: No Fault ; 1: Fault Signal )"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.SimnPmTemp_HwFlt_WindgSnsr2\t/* Name */
-            "Test Purpose Only: Fault Bit which denotes if measured tempeture using winding sensor 2 is a faulty signal (0: No Fault ; 1: Fault Signal )"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.SimnPmTemp_HwFlt_WindgSnsr3\t/* Name */
-            "Test Purpose Only: Fault Bit which denotes if measured tempeture using winding sensor 3 is a faulty signal (0: No Fault ; 1: Fault Signal )"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.SimnPmTemp_NVM_Temp1\t/* Name */
-            "Test Purpose Only: Temperature saved in NVM memory block 1 at the time of vehicle switch-off (during last operating cycle)"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.SimnPmTemp_NVM_Temp2\t/* Name */
-            "Test Purpose Only:Temperature saved in NVM memory block 2 at the time of vehicle switch-off (during last operating cycle)"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.SimnPmTemp_NVM_Temp3\t/* Name */
-            "Test Purpose Only: Temperature saved in NVM memory block 3 at the time of vehicle switch-off (during last operating cycle)"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.StatorWindgCpTherm\t/* Name */
-            "Thermal capacitance of winding"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-            -10000000\t/* LowerLimit */
-            1000000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.StatorWindgEndCpTherm\t/* Name */
-            "Thermal capacitance of winding end"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-            -10000000\t/* LowerLimit */
-            1000000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.StatorWindgEndTempMaxVal\t/* Name */
-            "Maximum Threshold value for limiting the measured winding temperature, where measured winding temp. is used as a replacement value for following: 
-1) Output PM temperature in State 1
-2) Initial PM temperature in State 2"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            -80\t/* LowerLimit */
-            300\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.StatorWindgEndTempMinVal\t/* Name */
-            "Maximum Threshold value for limiting the measured winding temperature, where measured winding temp. is used as a replacement value for following: 
-1) Output PM temperature in State 1
-2) Initial PM temperature in State 2"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            -80\t/* LowerLimit */
-            300\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.StatorWindgTempMaxVal\t/* Name */
-            "Maximum Threshold value for limiting the measured winding temperature, where measured winding temp. is used as a replacement value for following: 
-1) Output PM temperature in State 1
-2) Initial PM temperature in State 2"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            -80\t/* LowerLimit */
-            300\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.StatorWindgTempMinVal\t/* Name */
-            "Maximum Threshold value for limiting the measured winding temperature, where measured winding temp. is used as a replacement value for following: 
-1) Output PM temperature in State 1
-2) Initial PM temperature in State 2"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            -80\t/* LowerLimit */
-            300\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.StaWindgSnsrReplcmtVal\t/* Name */
-            "Replacement value of stator temperature when all NTC sensor deliver faluty inputs."\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.TempCoeff_CuResist\t/* Name */
-            "Temperature coefficient to adapt temperature dependent copper resistance"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-            -100\t/* LowerLimit */
-            100\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.TempRef_CuResist\t/* Name */
-            "Reference temperature to adapt temperature dependent copper resistance"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            -50\t/* LowerLimit */
-            200\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.TempWindgSnsr_PmTempMax\t/* Name */
-            "Maximum Threshold value for limiting the measured winding temperature, where measured winding temp. is used as a replacement value for following: 
-1) Output PM temperature in State 1
-2) Initial PM temperature in State 2"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            -80\t/* LowerLimit */
-            500\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.ThreeValAvgFacInvs\t/* Name */
-            "Factor to calculate average of winding temperature (0.5: two sensors, 0.3333: for 3 sensors) "\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.TwoValAvgFacInvs\t/* Name */
-            "Factor to calculate average of winding temperature (0.5: two sensors )"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.UseSnsrValAsWindgEndTemp\t/* Name */
-            "Use Winding NTC sensor value as Winding-end node temperature of thermal network"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.VehMovmnt_MinSpdThd\t/* Name */
-            "minimum speed in kmph to check if vehicle is moving, only in this case the RotTempFlt will be disabled once internal clock overshoot the Rotor time constant threshold "\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_kmph\t/* Conversion */
-            0\t/* LowerLimit */
-            250\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PmTempCalcnThermNet_CalibParam.WindgIniValCalcnMod\t/* Name */
-            "Mode to select Init value for Winding End temp. 
-Default: Calibparam \'IniWndgEndTempRplcVal\'
-1: Average winding temp or Maximum of available NTC\'s
-2: Initial Value algorithm exp func
-3: Calib param \'IniWndgEndTempRplcVal\'"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING___c\t/* Conversion */
-            0\t/* LowerLimit */
-            4\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin AXIS_PTS
-            PmTempCalcnThermNet_CalibParam.CoolFlowRate_LuTXaxis\t/* Name */
-            "Estimated flowrate at Inverter coolant outlet (served as input to electric motor coolant inlet)"\t/* LongIdentifier */
-            0x0000\t/* Address */
-            PmTempCalcnThermNet_InputData.EmCooltFlow\t/* InputQuantity */
-            FLOAT32_IEEE_X_INCR_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_l_p_min\t/* Conversion */
-            16\t/* MaxAxisPoints */
-            0\t/* LowerLimit */
-            10\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end AXIS_PTS
-
-        /begin AXIS_PTS
-            PmTempCalcnThermNet_CalibParam.CooltFlowRateRtherm_LuTXaxis\t/* Name */
-            "Actual coolant flow rate at motor inlet."\t/* LongIdentifier */
-            0x0000\t/* Address */
-            PmTempCalcnThermNet_InputData.EmCooltFlow\t/* InputQuantity */
-            FLOAT32_IEEE_X_INCR_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-            16\t/* MaxAxisPoints */
-            0\t/* LowerLimit */
-            20\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end AXIS_PTS
-
-        /begin AXIS_PTS
-            PmTempCalcnThermNet_CalibParam.FeLossSpdAct_LUTXaxis\t/* Name */
-            "Mechanical rotor speed array which is used as x-axis breakpoints of LUT for calculation of rotor iron loss distribution factor"\t/* LongIdentifier */
-            0x0000\t/* Address */
-            PmTempCalcnThermNet_InputData.SpdAct\t/* InputQuantity */
-            FLOAT32_IEEE_X_INCR_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */
-            16\t/* MaxAxisPoints */
-            -18000\t/* LowerLimit */
-            18000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end AXIS_PTS
-
-        /begin AXIS_PTS
-            PmTempCalcnThermNet_CalibParam.SpdActFric_LuTXaxis\t/* Name */
-            "Actual mechanical speed of PM synchronous motor used to set up Friction losses LuT"\t/* LongIdentifier */
-            0x0000\t/* Address */
-            PmTempCalcnThermNet_InputData.SpdAct\t/* InputQuantity */
-            FLOAT32_IEEE_X_INCR_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */
-            16\t/* MaxAxisPoints */
-            -18000\t/* LowerLimit */
-            18000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end AXIS_PTS
-
-        /begin AXIS_PTS
-            PmTempCalcnThermNet_CalibParam.SpdActNac_LuTXaxis\t/* Name */
-            "Actual mechanical speed of PM synchronous motor used to set up Rotor losses dependent on AC currents"\t/* LongIdentifier */
-            0x0000\t/* Address */
-            PmTempCalcnThermNet_InputData.SpdAct\t/* InputQuantity */
-            FLOAT32_IEEE_X_INCR_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */
-            16\t/* MaxAxisPoints */
-            -18000\t/* LowerLimit */
-            18000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end AXIS_PTS
-
-        /begin AXIS_PTS
-            PmTempCalcnThermNet_CalibParam.SpdActRTherm_LuTXaxis\t/* Name */
-            "Mechanical speed of electric motor used to calculate thermal resistivity via LuT"\t/* LongIdentifier */
-            0x0000\t/* Address */
-            PmTempCalcnThermNet_InputData.SpdAct\t/* InputQuantity */
-            FLOAT32_IEEE_X_INCR_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */
-            16\t/* MaxAxisPoints */
-            -19000\t/* LowerLimit */
-            19000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end AXIS_PTS
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_AlvCntr\t/* Name */
-            "AliveCounter"\t/* LongIdentifier */
-            ULONG\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___a\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            4294967295\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_InputData.CAN_HvOffTi\t/* Name */
-            "Time during which the HV connection is switched off"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING_min\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            100000000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_InputData.CAN_VehPrkgTi\t/* Name */
-            "Time during which the vehicle stays switched off (wheel speed is below certain threshold ~ 0 bis 3 kmph)"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING_min\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            100000000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_InputData.EmCooltFlow\t/* Name */
-            "Estimated flowrate at Inverter coolant outlet  (served as input to electric motor coolant inlet)"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING_l_p_min\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            15\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_InputData.EmTempCooltInlet\t/* Name */
-            "Estimated temperature of Inverter coolant outlet (served as input to electric motor coolant inlet)"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_InputData.FID_ErrHvOff\t/* Name */
-            "Validity Bit which denotes validity of HV Offtime Signal (1: Not Valid 0: Signal Valid )"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_InputData.FID_ErrNvm\t/* Name */
-            "Validity Bit which denotes validity of variables stored NVM (1: Not Valid 0: Signal Valid )"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_InputData.FID_ErrPrkgTi\t/* Name */
-            "Validity Bit which denotes validity of Vehicle Offtime Signal (1: Not Valid 0: Signal Valid )"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_InputData.FID_IniHvOff\t/* Name */
-            "Initialisation Bit which denotes availability of HV Offtime Signal (1: Not Available; 0: Signal Available)"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_InputData.FID_IniNvm\t/* Name */
-            "Initialisation Bit which denotes availability of variables stored in NVM (1: Not Available; 0: Signal Available)"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_InputData.FID_IniPrkgTi\t/* Name */
-            "Initialisation Bit which denotes availability of Vehicle Offtime Signal (1: Not Available; 0: Signal Available)"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_InputData.HwFlt_WindSnsr1\t/* Name */
-            "Fault Bit of measured stator tempeture using winding sensor 1 (0: No Fault ; 1: Fault Signal )"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_InputData.HwFlt_WindSnsr2\t/* Name */
-            "Fault Bit of measured stator tempeture using winding sensor 2 (0: No Fault ; 1: Fault Signal )"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_InputData.HwFlt_WindSnsr3\t/* Name */
-            "Fault Bit of measured stator tempeture using winding sensor 3 (0: No Fault ; 1: Fault Signal )"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_InputData.IdActFlt\t/* Name */
-            "Actual d current filtered"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING_A\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -800\t/* LowerLimit */
-            800\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_InputData.IqActFlt\t/* Name */
-            "Actual q current filtered"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING_A\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -800\t/* LowerLimit */
-            800\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_InputData.ModlnModAct\t/* Name */
-            "Modulation type actually used in Inverter modulator function. (Flat Top or Space Vector Modulation)"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___c\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            5\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_InputData.NVM_Temp1\t/* Name */
-            "Temperature saved in NVM memory block 1 at the time of vehicle switch-off (during last operating cycle)"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -200\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_InputData.NVM_Temp2\t/* Name */
-            "Temperature saved in NVM memory block 2 at the time of vehicle switch-off (during last operating cycle)"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -200\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_InputData.NVM_Temp3\t/* Name */
-            "Temperature saved in NVM memory block 3 at the time of vehicle switch-off (during last operating cycle)"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -200\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_InputData.PwmFrqAct\t/* Name */
-            "Current PWM frequency of motor control"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING_Hz\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            12000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_InputData.SpdAct\t/* Name */
-            "Actual mechanical speed of electric motor"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -16000\t/* LowerLimit */
-            16000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_InputData.TempWindgSnsr1\t/* Name */
-            "Actual measured stator winding temperature by using winding temperature sensor (NTC 1 in stator winding)"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_InputData.TempWindgSnsr2\t/* Name */
-            "Actual measured stator winding temperature by using winding temperature sensor (NTC 2 in stator winding)"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_InputData.TempWindgSnsr3\t/* Name */
-            "Actual measured stator winding temperature by using winding temperature sensor (NTC 3 in stator winding)"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.ClckCntRslt\t/* Name */
-            "Internal Clock ticks "\t/* LongIdentifier */
-            ULONG\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING_s\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            10000000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.DeltaLossTN\t/* Name */
-            "Value of heat exchange between rotor and airgap (mathematical model)"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -100000\t/* LowerLimit */
-            100000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.DeltaTempTN\t/* Name */
-            "When thermal network is active, the difference between the estimated PM temperature (previous function call) and the actual calcualted air gap temperature(current function call).  "\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -100000\t/* LowerLimit */
-            100000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.EmCoolInp2Temp\t/* Name */
-            "Estimated Second Coolant Input Temperature"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -100000\t/* LowerLimit */
-            100000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.IdActFlt_f\t/* Name */
-            "Fraction of Prelook-up function of IdActFlt"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.IdActFlt_k\t/* Name */
-            "Index of Prelook-up function of IdActFlt"\t/* LongIdentifier */
-            ULONG\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___a\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            4294967295\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.IniPmTemp\t/* Name */
-            "Estimated initial value of PM temperature when the vehicle is switched On (either exponential function output or stator winding sensor value)"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.IniPmTempEfunc\t/* Name */
-            "Estimated initial value of PM temperature from exponential function"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.IniWindgTempEfunc\t/* Name */
-            "Estimated initial value of stator winding temperature when the vehicle is switched On (either exponential function output or stator winding sensor value)"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.IntgNodeTempRotor\t/* Name */
-            "Thermal network rotor node temperature"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -3.4028234663852886e38\t/* LowerLimit */
-            3.4028234663852886e38\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.IntgNodeTempStatorWindg\t/* Name */
-            "Thermal network stator winding node temperature"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -3.4028234663852886e38\t/* LowerLimit */
-            3.4028234663852886e38\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.IntgNodeTempStatorWindgEnd\t/* Name */
-            "Thermal network stator winding end node temperature"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -3.4028234663852886e38\t/* LowerLimit */
-            3.4028234663852886e38\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.IqActFlt_f\t/* Name */
-            "Fraction of Prelook-up function of IqActFlt"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.IqActFlt_k\t/* Name */
-            "Index of Prelook-up function of IqActFlt"\t/* LongIdentifier */
-            ULONG\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___a\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            4294967295\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.MotorIronLoss\t/* Name */
-            "Total Losses generated in the machine"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            400000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.PlossCurrD\t/* Name */
-            "Losses generated in rotor due to d Current"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            20000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.PlossCurrQ\t/* Name */
-            "Losses generated in rotor due to q Current"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            20000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.PlossFric\t/* Name */
-            "Losses generated in rotor due to bearing friction"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            20000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.PlossNac\t/* Name */
-            "Factor for rotor current losses generated in rotor due to rotor speed"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            10\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.PlossRotor\t/* Name */
-            "Rotor losses estimated analytically"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -1000000\t/* LowerLimit */
-            1000000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.PlossTotCalcd\t/* Name */
-            "Total Losses generated in Rotor"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            100000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.PmTempCalcnState\t/* Name */
-            "State 1 or State 3: Use replacement value instead of estimated temperature value of Permanent magnet.
-State 2: Use the estimated value of Permanent magnet temperature calculated via Thermal Network."\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___c\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            1\t/* LowerLimit */
-            2\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.PmTempEstLimn\t/* Name */
-            "Saturated  value of PM temperature in State 2"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.PmTempReplcmtVal\t/* Name */
-            "Replacement temperature value \\"PmTempRplcVal\\" used as PM Temperature ouput when the function execution state = 1 
-( when faults are active or thermal network disabled or signals not available to calculate initial PM temperature)"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.PmTempReplcmtVal_DftSt\t/* Name */
-            "Replacement temperature value \\"PmTempRplcVal\\" used as PM Temperature ouput when the function is executing in default state"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.PmTempSatFlg\t/* Name */
-            "A status Bit which is enabled if the Pm temperature overshoots maximum or minimum allowed (PM )rotor temperature"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.PmTempStsWord\t/* Name */
-            "Status bit which corresponds to output availability and its validity"\t/* LongIdentifier */
-            ULONG\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___a\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            10000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.PmTempUnitDly\t/* Name */
-            "delayed value of estimated PM temperature by 1 time slice"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.PwmFrqAct_f\t/* Name */
-            "Fraction of Prelook-up function of PwmFrqAct"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.PwmFrqAct_k\t/* Name */
-            "Index of Prelook-up function of PwmFrqAct"\t/* LongIdentifier */
-            ULONG\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___a\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            4294967295\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.PwrLossCuEstm\t/* Name */
-            "Copper losses estimated analytically"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -1000000\t/* LowerLimit */
-            1000000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.PwrLossFeRot\t/* Name */
-            "Rotor Iron losses estimated analytically"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -1000000\t/* LowerLimit */
-            1000000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.PwrLossFeSta\t/* Name */
-            "Stator Iron  losses estimated analytically"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -1000000\t/* LowerLimit */
-            1000000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.PwrLossWikNut\t/* Name */
-            "Winding Nut Copper losses estimated analytically"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -1000000\t/* LowerLimit */
-            1000000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.PwrLossWiko\t/* Name */
-            "Winding End Copper losses estimated analytically"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -1000000\t/* LowerLimit */
-            1000000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.ResFeLossRotDistbnFac\t/* Name */
-            "distribution factor of rotor iron loss to overall motor iron loss depending on rotor speed"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            10\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.ResRotLutOutput\t/* Name */
-            "actual thermal resistance of rotor-airgap which is dependent on actual mechanical speed of rotor."\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING_K_p_W\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            100\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.RotorLongSwtOffTimeSts\t/* Name */
-            "Status Bit which denotes the vehicle was switched off for a time longer than the cooling thermal time constant of rotor 
-(1: Offtime longer, 0: Offtime shorter )"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.RThermRotorCooltFlow\t/* Name */
-            "output of LuT based on variable rotor Resistance v/s actual coolant flow rate"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -10000001\t/* LowerLimit */
-            100000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.RThermRotorSpd\t/* Name */
-            "output of LuT based on variable rotor Resistance v/s actual spd"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -10000000\t/* LowerLimit */
-            10000000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.RThermStatorWindg\t/* Name */
-            "output of LuT based on variable Winding Nut Resistance v/s actual coolant flow rate"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -10000000\t/* LowerLimit */
-            10000000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.SelAmbTempSts\t/* Name */
-            "A status Bit which is enabled if the stator winding sensor value overshoots maximum allowed (PM )rotor temperature"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.SelWndgAmbTempSts\t/* Name */
-            "A status Bit which is enabled if the coolant inlet temperature is used as ambient f\xc3\xbcr stator winding "\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.StatortWindgEndTempEstLimn\t/* Name */
-            "Saturated  value of Stator winding end temperature in State 2"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.StatortWindgEndTempSatFlg\t/* Name */
-            "A status Bit which is enabled if the stator winding-end temperature overshoots maximum or minimum allowed  threshold value"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.StatorWindgTempSatFlg\t/* Name */
-            "A status Bit which is enabled if the stator winding temperature overshoots maximum or minimum allowed threshold value"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.StattorWindgTempEstLimn\t/* Name */
-            "Saturated  value of Stator winding temperature in State 2"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.TempAmbPm\t/* Name */
-            "Actual measured temperature by winding sesnor or actual air gap temperature calculated during first system start (first function call). This is used as input to exponential function "\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.TempAmbWindg\t/* Name */
-            "estimated temperature of stator winding end calculated during first system start (first function call). This is used as input to exponential function "\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.TempOffPm\t/* Name */
-            "estimated value PMTempThermNet saved in NVM ram during last system cycle time.This is used as input to exponential function during next system start. "\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -200\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.TempWindgSnsr_PmTempLimn\t/* Name */
-            "Maximum limited value of measured winding sensor temperature which is used as a replacement value for permanent magnet (rotor) temperature in State 3"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.TempWindgSnsr_PmTempLimnSts\t/* Name */
-            "A status Bit which is enabled if the stator winding sensor value overshoots maximum allowed (PM )rotor temperature"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.TempWindgSnsrAvgVal\t/* Name */
-            "Average value of stator winding temperature sensors"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.TiDurn_PostRotTempIniFlt\t/* Name */
-            "Time duration after faults occur (FID_ErrNvm or FID_ErrPrkgTi or FID_ErrHvOff ) "\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            2000000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.TimeOut_NvmDataValidityFlag\t/* Name */
-            "Validity flag for stored temperature in NVM and CAN timeout value"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.TrigDetmnIniVal\t/* Name */
-            "Trigger condition to execute intial PM temperature calculation algorithm, only once every (State = 2) execution (1: triggered, 0 : not triggered )"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.TrigRotorIniValCalc\t/* Name */
-            "Trigger condition further processed within intial PM temperature calculation algorithm to execute exponential function algortihm. (1: exponential function, 0: Stator winding sensor)"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.TrigWndgIniValCalc\t/* Name */
-            "Trigger condition further processed within intial PM temperature calculation algorithm to execute exponential function algortihm. (1: exponential function, 0: Stator winding sensor)"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.WindgLongSwtOffTimeSts\t/* Name */
-            "Status Bit which denotes the vehicle was switched off for a time longer than the cooling thermal time constant of stator winding end 
-(1: Offtime longer, 0: Offtime shorter)"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.WindgSnsrFlt_SfChart\t/* Name */
-            "Actual state of winding sensor average value calculation "\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___c\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            8\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_MeasSig.WndgEndTempEstUnitDly\t/* Name */
-            "delayed value of estimated winding end temperature by 1 time slice"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_OutputData.PmTempEst\t/* Name */
-            "Estimated value of actual PM temperature received from either of the State (1,2 or 3). This can be either 1) replacement value or 2) estimated value of PM temperature. "\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_OutputData.PmTempIniFlt\t/* Name */
-            "Fault is active if PM temperature is incorrectly initialized or a winding sensor fault is active. (0: Disabled 1: Enabled )"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_OutputData.PmTempThermNetVld\t/* Name */
-            "Thermal network calculated PM Temperature validity flag. Calculated temperature is valid, if thermal network is in \\"operating\\" state 2, else not valid. (1: when State = 2 0: State =! 2 )
-"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_OutputData.StatorWindgEndTemp\t/* Name */
-            "Stator winding end temperature in degree celcius"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_OutputData.StatorWindgTemp\t/* Name */
-            "Stator winding temperature in degree celcius"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PmTempCalcnThermNet_OutputData.TempWindgSnsrAvgVal\t/* Name */
-            "Average value of stator winding temperature measured via NTC sensor (3 or 2 number of sensor)"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            X_SPmTempCalc4__atorUnit_Delay1\t/* Name */
-            ""\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            VOID_SCALING\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            X_SPmTempCalc5___WindingEndTemp\t/* Name */
-            ""\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            VOID_SCALING\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin COMPU_METHOD
-            EQ_LSB_1_OFF_0\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%8.0"\t/* Format */
-            ""\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PmTempCalcnThermNet_VOID_SCALING__\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%12.6"\t/* Format */
-            "-"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PmTempCalcnThermNet_VOID_SCALING___a\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%10.0"\t/* Format */
-            "-"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PmTempCalcnThermNet_VOID_SCALING___c\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%3.0"\t/* Format */
-            "-"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PmTempCalcnThermNet_VOID_SCALING___d\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%1.0"\t/* Format */
-            "-"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PmTempCalcnThermNet_VOID_SCALING__C\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%12.6"\t/* Format */
-            "\xc2\xb0C"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PmTempCalcnThermNet_VOID_SCALING_1_p_A\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%12.6"\t/* Format */
-            "1/A"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PmTempCalcnThermNet_VOID_SCALING_A\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%12.6"\t/* Format */
-            "A"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PmTempCalcnThermNet_VOID_SCALING_Hz\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%12.6"\t/* Format */
-            "Hz"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PmTempCalcnThermNet_VOID_SCALING_K_p_W\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%12.6"\t/* Format */
-            "K/W"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PmTempCalcnThermNet_VOID_SCALING_kmph\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%12.6"\t/* Format */
-            "kmph"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PmTempCalcnThermNet_VOID_SCALING_l_p_min\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%12.6"\t/* Format */
-            "l/min"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PmTempCalcnThermNet_VOID_SCALING_min\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%12.6"\t/* Format */
-            "min"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%12.6"\t/* Format */
-            "rpm"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PmTempCalcnThermNet_VOID_SCALING_s\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%10.0"\t/* Format */
-            "s"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%12.6"\t/* Format */
-            "s"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PmTempCalcnThermNet_VOID_SCALING_W\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%12.6"\t/* Format */
-            "W"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PmTempCalcnThermNet_VOID_SCALING_W_s_p_K\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%12.6"\t/* Format */
-            "W-s/K"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            VOID_SCALING\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%12.6"\t/* Format */
-            ""\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin FUNCTION
-            PmTempCalcnThermNet\t/* Name */
-            ""\t/* LongIdentifier */
-            /begin DEF_CHARACTERISTIC
-                PmTempCalcnThermNet_CalibParam.PlossNac_LuTYaxis\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.SpdActNac_LuTXaxis\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.PlossFric_LuTYaxis\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.SpdActFric_LuTXaxis\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.FeLossRotDistbnFac_LuTYaxis\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.FeLossSpdAct_LUTXaxis\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.RThermStatorWindg_LuTYaxis\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.CooltFlowRateRtherm_LuTXaxis\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.RThermRotorCoolt_LuTYaxis\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.RThermRotorAirgap_LuTYaxis\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.SpdActRTherm_LuTXaxis\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.CooltTemp2_CoolTemp1Fac_LuTYaxis\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.CoolFlowRate_LuTXaxis\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.CooltTemp2_PmTempFac_LuTYaxis\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.RThermStatorWindgEnd\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.StatorWindgCpTherm\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.StatorWindgEndCpTherm\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.RotorCpTherm\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.IntgTiSampleRot\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.IntgTiSampleWiko\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.IntgTiSampleWik\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.EnaStaWindg_CuLossEstim\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.CuResist_TempRef\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.MotorPhaseNum_StandStill\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.MotorPhaseNum_NomOp\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.TempCoeff_CuResist\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.TempRef_CuResist\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.EnaStandStillOp\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.MotSpdThd\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.CuWikoFac\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.IdMin\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.IdIvsStep\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.IdMaxIdx\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.IqMin\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.IqIvsStep\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.IqMaxIdx\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.PwmFreqActMin\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.PwmFreqActIvsStep\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.PwmFreqActMaxIdx\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.EnaCoolInp2TempCalc\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.StatorWindgTempMaxVal\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.StatorWindgTempMinVal\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.StatorWindgEndTempMaxVal\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.StatorWindgEndTempMinVal\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.PmTempMaxVal\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.PmTempMinVal\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.UseSnsrValAsWindgEndTemp\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.CuResistSpdCoeff2\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.DiHwFltCheckStMachn\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.EnaTempWndgRplcmntVal\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.TwoValAvgFacInvs\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.ThreeValAvgFacInvs\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.EnaAvgWindTempCalc\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.EnaHvOffTime\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.DiThermNetCalcn\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.PmTempRplcVal\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.StaWindgSnsrReplcmtVal\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.TempWindgSnsr_PmTempMax\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.DiSimnPmTemp\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_IniHvOff\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_IniPrkgTi\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_IniNvm\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.SimnPmTemp_HwFlt_WindgSnsr1\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.SimnPmTemp_HwFlt_WindgSnsr2\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.SimnPmTemp_HwFlt_WindgSnsr3\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_ErrHvOff\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_ErrPrkgTi\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_ErrNvm\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.SimnPmTemp_NVM_Temp1\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.SimnPmTemp_NVM_Temp2\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.SimnPmTemp_NVM_Temp3\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.SimnPmTemp_CAN_VehPrkgTi\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.SimnPmTemp_CAN_HvOffTi\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.GearRatioInvs\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.VehMovmnt_MinSpdThd\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.EnaVehSpdChck\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.DiSimnPmTemp_HwFlt\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.PlossIdSpcVec_map\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.PlossIqSpcVec_map\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.PlossIdFlatTop_map\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.PlossIqFlatTop_map\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.DiSelAmbTempPm\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.CoolDownTimeConstPm\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.CompareTimeConstFacPmAmb\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.IniPmTempRplcVal\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.IniValCalcnMod\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.CompareTimeConstFacWindg\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.CompareTimeConstFacPm\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.IniWindgTempRplcVal\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.WindgIniValCalcnMod\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.ConvTimeOff_Secs\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.DiSelAmbTempWindg\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.CoolDownTimeWindg\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.CompareTimeConstFacWindgAmb\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.RotTimeConstFac_RotTempIniFlt\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.FuncTiSlc\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.DiIntClkCntr\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.ClckCntStep\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.ClckCntMax\t/* Identifier */
-                PmTempCalcnThermNet_CalibParam.DiThermNetCalcn_UseTempWindgSnsr\t/* Identifier */
-            /end DEF_CHARACTERISTIC
-            /begin IN_MEASUREMENT
-                PmTempCalcnThermNet_InputData.TempWindgSnsr1\t/* Identifier */
-                PmTempCalcnThermNet_InputData.TempWindgSnsr2\t/* Identifier */
-                PmTempCalcnThermNet_InputData.TempWindgSnsr3\t/* Identifier */
-                PmTempCalcnThermNet_InputData.NVM_Temp1\t/* Identifier */
-                PmTempCalcnThermNet_InputData.NVM_Temp2\t/* Identifier */
-                PmTempCalcnThermNet_InputData.NVM_Temp3\t/* Identifier */
-                PmTempCalcnThermNet_InputData.CAN_VehPrkgTi\t/* Identifier */
-                PmTempCalcnThermNet_InputData.CAN_HvOffTi\t/* Identifier */
-                PmTempCalcnThermNet_InputData.EmCooltFlow\t/* Identifier */
-                PmTempCalcnThermNet_InputData.EmTempCooltInlet\t/* Identifier */
-                PmTempCalcnThermNet_InputData.SpdAct\t/* Identifier */
-                PmTempCalcnThermNet_InputData.IdActFlt\t/* Identifier */
-                PmTempCalcnThermNet_InputData.IqActFlt\t/* Identifier */
-                PmTempCalcnThermNet_InputData.ModlnModAct\t/* Identifier */
-                PmTempCalcnThermNet_InputData.FID_IniHvOff\t/* Identifier */
-                PmTempCalcnThermNet_InputData.FID_IniPrkgTi\t/* Identifier */
-                PmTempCalcnThermNet_InputData.FID_IniNvm\t/* Identifier */
-                PmTempCalcnThermNet_InputData.HwFlt_WindSnsr3\t/* Identifier */
-                PmTempCalcnThermNet_InputData.FID_ErrHvOff\t/* Identifier */
-                PmTempCalcnThermNet_InputData.FID_ErrPrkgTi\t/* Identifier */
-                PmTempCalcnThermNet_InputData.FID_ErrNvm\t/* Identifier */
-                PmTempCalcnThermNet_InputData.HwFlt_WindSnsr1\t/* Identifier */
-                PmTempCalcnThermNet_InputData.HwFlt_WindSnsr2\t/* Identifier */
-                PmTempCalcnThermNet_InputData.PwmFrqAct\t/* Identifier */
-            /end IN_MEASUREMENT
-            /begin OUT_MEASUREMENT
-                PmTempCalcnThermNet_MeasSig.EmCoolInp2Temp\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.PmTempStsWord\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.PmTempCalcnState\t/* Identifier */
-                PmTempCalcnThermNet_OutputData.TempWindgSnsrAvgVal\t/* Identifier */
-                PmTempCalcnThermNet_OutputData.StatorWindgTemp\t/* Identifier */
-                PmTempCalcnThermNet_OutputData.StatorWindgEndTemp\t/* Identifier */
-                PmTempCalcnThermNet_OutputData.PmTempEst\t/* Identifier */
-                PmTempCalcnThermNet_OutputData.PmTempIniFlt\t/* Identifier */
-                PmTempCalcnThermNet_OutputData.PmTempThermNetVld\t/* Identifier */
-            /end OUT_MEASUREMENT 
-            /begin LOC_MEASUREMENT
-                X_SPmTempCalc4__atorUnit_Delay1\t/* Identifier */
-                X_SPmTempCalc5___WindingEndTemp\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.RThermRotorCooltFlow\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.RThermRotorSpd\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.RThermStatorWindg\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.PwrLossCuEstm\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.PlossRotor\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.PwrLossWiko\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.PwrLossWikNut\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.PlossCurrD\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.PlossCurrQ\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.PlossFric\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.PlossNac\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.WndgEndTempEstUnitDly\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.PmTempUnitDly\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.IniPmTemp\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.PmTempEstLimn\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.StatortWindgEndTempEstLimn\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.StattorWindgTempEstLimn\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.TempWindgSnsrAvgVal\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.IdActFlt_k\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.IdActFlt_f\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.IqActFlt_k\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.IqActFlt_f\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.PwmFrqAct_k\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.PwmFrqAct_f\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.MotorIronLoss\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.IntgNodeTempRotor\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.IntgNodeTempStatorWindg\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.IntgNodeTempStatorWindgEnd\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.ResFeLossRotDistbnFac\t/* Identifier */
-                PmTempCalcnThermNet_InputData.EmCooltFlow\t/* Identifier */
-                PmTempCalcnThermNet_InputData.EmTempCooltInlet\t/* Identifier */
-                PmTempCalcnThermNet_InputData.SpdAct\t/* Identifier */
-                PmTempCalcnThermNet_InputData.IdActFlt\t/* Identifier */
-                PmTempCalcnThermNet_InputData.IqActFlt\t/* Identifier */
-                PmTempCalcnThermNet_InputData.ModlnModAct\t/* Identifier */
-                PmTempCalcnThermNet_InputData.PwmFrqAct\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.TrigDetmnIniVal\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.WindgLongSwtOffTimeSts\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.RotorLongSwtOffTimeSts\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.SelWndgAmbTempSts\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.SelAmbTempSts\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.PmTempSatFlg\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.StatortWindgEndTempSatFlg\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.StatorWindgTempSatFlg\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.TimeOut_NvmDataValidityFlag\t/* Identifier */
-                PmTempCalcnThermNet_AlvCntr\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.TempWindgSnsr_PmTempLimn\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.PmTempReplcmtVal_DftSt\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.PmTempReplcmtVal\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.WindgSnsrFlt_SfChart\t/* Identifier */
-                PmTempCalcnThermNet_InputData.TempWindgSnsr1\t/* Identifier */
-                PmTempCalcnThermNet_InputData.TempWindgSnsr2\t/* Identifier */
-                PmTempCalcnThermNet_InputData.TempWindgSnsr3\t/* Identifier */
-                PmTempCalcnThermNet_InputData.NVM_Temp1\t/* Identifier */
-                PmTempCalcnThermNet_InputData.NVM_Temp2\t/* Identifier */
-                PmTempCalcnThermNet_InputData.NVM_Temp3\t/* Identifier */
-                PmTempCalcnThermNet_InputData.CAN_VehPrkgTi\t/* Identifier */
-                PmTempCalcnThermNet_InputData.CAN_HvOffTi\t/* Identifier */
-                PmTempCalcnThermNet_InputData.FID_IniHvOff\t/* Identifier */
-                PmTempCalcnThermNet_InputData.FID_IniPrkgTi\t/* Identifier */
-                PmTempCalcnThermNet_InputData.FID_IniNvm\t/* Identifier */
-                PmTempCalcnThermNet_InputData.HwFlt_WindSnsr3\t/* Identifier */
-                PmTempCalcnThermNet_InputData.FID_ErrHvOff\t/* Identifier */
-                PmTempCalcnThermNet_InputData.FID_ErrPrkgTi\t/* Identifier */
-                PmTempCalcnThermNet_InputData.FID_ErrNvm\t/* Identifier */
-                PmTempCalcnThermNet_InputData.HwFlt_WindSnsr1\t/* Identifier */
-                PmTempCalcnThermNet_InputData.HwFlt_WindSnsr2\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.TempWindgSnsr_PmTempLimnSts\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.IniPmTempEfunc\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.TempAmbPm\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.IniWindgTempEfunc\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.TrigRotorIniValCalc\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.TrigWndgIniValCalc\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.TempAmbWindg\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.ClckCntRslt\t/* Identifier */
-                PmTempCalcnThermNet_MeasSig.TiDurn_PostRotTempIniFlt\t/* Identifier */
-            /end LOC_MEASUREMENT
-        /end FUNCTION
-
-        /begin RECORD_LAYOUT
-            FLOAT32_IEEE_COL_DIRECT\t/* Name */
-            FNC_VALUES 1 FLOAT32_IEEE COLUMN_DIR DIRECT
-        /end RECORD_LAYOUT
-
-        /begin RECORD_LAYOUT
-            FLOAT32_IEEE_X_INCR_DIRECT\t/* Name */
-            AXIS_PTS_X 1 FLOAT32_IEEE INDEX_INCR DIRECT
-        /end RECORD_LAYOUT
-
-        /begin RECORD_LAYOUT
-            UBYTE_COL_DIRECT\t/* Name */
-            FNC_VALUES 1 UBYTE COLUMN_DIR DIRECT
-        /end RECORD_LAYOUT
-
-        /begin RECORD_LAYOUT
-            ULONG_COL_DIRECT\t/* Name */
-            FNC_VALUES 1 ULONG COLUMN_DIR DIRECT
-        /end RECORD_LAYOUT
-    /end MODULE 
+\xef\xbb\xbf\r
+\r
+/begin PROJECT\r
+    PmTempCalcnThermNet\t/* Name */\r
+    ""\t/* LongIdentifier */\r
+    /begin HEADER\r
+        "General project description"\t/* Comment */\r
+        VERSION "2022-03-31 16:12:13"\r
+        PROJECT_NO PRJ1\r
+    /end HEADER\r
+\r
+    /begin MODULE\r
+        PmTempCalcnThermNet\t/* Name */\r
+        ""\t/* LongIdentifier */\r
+\r
+        /begin A2ML\r
+            block "IF_DATA" taggedunion if_data {\r
+            };\r
+        /end A2ML\r
+\r
+        /begin MOD_PAR\r
+            ""\t/* Comment */\r
+            NO_OF_INTERFACES 0\r
+        /end MOD_PAR \r
+\r
+        /begin MOD_COMMON\r
+            ""\r
+            ALIGNMENT_BYTE 1\r
+            ALIGNMENT_WORD 2\r
+            ALIGNMENT_LONG 2\r
+            ALIGNMENT_FLOAT32_IEEE 2\r
+            ALIGNMENT_FLOAT64_IEEE 4\r
+            BYTE_ORDER MSB_LAST\r
+            DEPOSIT ABSOLUTE\r
+        /end MOD_COMMON \r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.ClckCntMax\t/* Name */\r
+            "Maximum counter size after which the internal clock resets to Zero"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            ULONG_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_s\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            1000000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.ClckCntStep\t/* Name */\r
+            "Step size which represents the incremental counter of internal clock"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            ULONG_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_s\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            1000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.CompareTimeConstFacPm\t/* Name */\r
+            "Constant Factor to decide if initial value calc. algorithm shall be triggered."\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            1000000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.CompareTimeConstFacPmAmb\t/* Name */\r
+            "Constant Factor to decide which temperature shall be used as ambient temperature for initial value calc. Algorithm."\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            1000000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.CompareTimeConstFacWindg\t/* Name */\r
+            "Cooling time constant for winding end thermal node."\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            100000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.CompareTimeConstFacWindgAmb\t/* Name */\r
+            "Constant Factor to decide which temperature shall be used as ambient temperature for initial value calc. Algorithm."\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            1000000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.ConvTimeOff_Secs\t/* Name */\r
+            "conversion parameter to convert Off time from minutes to secs. (Set value = 60: CAN_VehPrkgTi / CAN_HvOffTi is in minutes; 1: CAN_VehPrkgTi / CAN_HvOffTi is in seconds )"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            100000000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.CoolDownTimeConstPm\t/* Name */\r
+            "Constant Factor to decide if initial value calc. algorithm shall be triggered for Rotor"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */\r
+            -1000\t/* LowerLimit */\r
+            100000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.CoolDownTimeWindg\t/* Name */\r
+            "Cooling time constant for winding end thermal node."\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */\r
+            -1000\t/* LowerLimit */\r
+            100000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.CooltTemp2_CoolTemp1Fac_LuTYaxis\t/* Name */\r
+            "Factor to calculate Air gap temperature (dependency can be made on coolant flow rate if required)"\t/* LongIdentifier */\r
+            CURVE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+            /begin AXIS_DESCR\r
+                COM_AXIS\t/* Attribute */\r
+                PmTempCalcnThermNet_InputData.EmCooltFlow\t/* InputQuantity */\r
+                PmTempCalcnThermNet_VOID_SCALING_l_p_min\t/* Conversion */\r
+                16\t/* MaxAxisPoints */\r
+                0\t/* LowerLimit */\r
+                10\t/* UpperLimit */\r
+                BYTE_ORDER MSB_LAST\r
+                AXIS_PTS_REF PmTempCalcnThermNet_CalibParam.CoolFlowRate_LuTXaxis\r
+            /end AXIS_DESCR\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.CooltTemp2_PmTempFac_LuTYaxis\t/* Name */\r
+            "Factor to calculate Air gap temperature (dependency can be made on coolant flow rate if required)"\t/* LongIdentifier */\r
+            CURVE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+            /begin AXIS_DESCR\r
+                COM_AXIS\t/* Attribute */\r
+                PmTempCalcnThermNet_InputData.EmCooltFlow\t/* InputQuantity */\r
+                PmTempCalcnThermNet_VOID_SCALING_l_p_min\t/* Conversion */\r
+                16\t/* MaxAxisPoints */\r
+                0\t/* LowerLimit */\r
+                10\t/* UpperLimit */\r
+                BYTE_ORDER MSB_LAST\r
+                AXIS_PTS_REF PmTempCalcnThermNet_CalibParam.CoolFlowRate_LuTXaxis\r
+            /end AXIS_DESCR\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.CuResist_TempRef\t/* Name */\r
+            "copper resistance used to calculate copper losses"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */\r
+            -100\t/* LowerLimit */\r
+            100\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.CuResistSpdCoeff2\t/* Name */\r
+            "The coefficient which is used to adapt AC copper resistance to actual rotor speed"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */\r
+            -10\t/* LowerLimit */\r
+            10\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.CuWikoFac\t/* Name */\r
+            "Factor to divide the copper losses in stator winding and in winding-end"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.DiIntClkCntr\t/* Name */\r
+            "Disable Bit to deactivate the  internal clock which is used to calculate time duration after RotTempFlt occurs (1: Disabled 0: Enabled )"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            UBYTE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.DiSelAmbTempPm\t/* Name */\r
+            "Disable Bit to deactivate the selection of ambient temperature (stator winding or airgap) used for initial value calc. (1: Disabled 0: Enabled )"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            UBYTE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.DiSelAmbTempWindg\t/* Name */\r
+            "Disable Bit to deactivate the selection of ambient temperature (stator winding or airgap) used for initial value calc. (1: Disabled 0: Enabled )"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            UBYTE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.DiThermNetCalcn\t/* Name */\r
+            "Deactivate PM temperature calculation. Thermal Network will switch to replacement value \'State1\'."\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            UBYTE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.DiThermNetCalcn_UseTempWindgSnsr\t/* Name */\r
+            "Bit to select the replacement value for PM temperature. \r
+(1: Winding sensor temperature; 0: Calibratable value  \'PmTempRplcVal\' )"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            UBYTE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.EnaAvgWindTempCalc\t/* Name */\r
+            "Enable Bit to activate calculation of average winding temperature using 2 winding sensors "\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            UBYTE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.EnaCoolInp2TempCalc\t/* Name */\r
+            "Enable Bit to activate calculation of coolant temperature at rotor outlet"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            UBYTE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.EnaHvOffTime\t/* Name */\r
+            "Enable Bit to select the use HV Off time or Vehicle Off time in exponential function initial value calc. Algorithm (0: Disabled 1: Enabled )"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            UBYTE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.EnaStandStillOp\t/* Name */\r
+            "Enable Bit to activate calculation of copper losses at standstill operation"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            UBYTE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.EnaStaWindg_CuLossEstim\t/* Name */\r
+            "Enable Bit to activate calculation of copper losses"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            UBYTE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.EnaTempWndgRplcmntVal\t/* Name */\r
+            "Enable Bit to activate replacement value of winding temperature (NTC\'s)"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            UBYTE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.EnaVehSpdChck\t/* Name */\r
+            "Enable bit to activate vehicle speed check used in Rotor temperature fault."\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            UBYTE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.FeLossRotDistbnFac_LuTYaxis\t/* Name */\r
+            "LUT values of rotor iron loss distribution factor depending on rotor speed"\t/* LongIdentifier */\r
+            CURVE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            10\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+            /begin AXIS_DESCR\r
+                COM_AXIS\t/* Attribute */\r
+                PmTempCalcnThermNet_InputData.SpdAct\t/* InputQuantity */\r
+                PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */\r
+                16\t/* MaxAxisPoints */\r
+                -18000\t/* LowerLimit */\r
+                18000\t/* UpperLimit */\r
+                BYTE_ORDER MSB_LAST\r
+                AXIS_PTS_REF PmTempCalcnThermNet_CalibParam.FeLossSpdAct_LUTXaxis\r
+            /end AXIS_DESCR\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.FuncTiSlc\t/* Name */\r
+            "time slice in which the function PmTempCalcnThermNetVw is called"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            20\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.GearRatioInvs\t/* Name */\r
+            "Conversion ratio to convert speed from rpm to kmph: \\"InvsGearRatio*2*Pi*WheelRadius*1e-6*60\\""\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.IdIvsStep\t/* Name */\r
+            "Inverse of equidistant steps between two Id current vector elements"\t/* LongIdentifier */\r
+            VAL_BLK\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_1_p_A\t/* Conversion */\r
+            0.00038461538461538462\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            MATRIX_DIM 1\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.IdMaxIdx\t/* Name */\r
+            "Maximal index of Id current vector (dimension-1)"\t/* LongIdentifier */\r
+            VAL_BLK\t/* Type */\r
+            0x0000\t/* Address */\r
+            UBYTE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING___c\t/* Conversion */\r
+            1\t/* LowerLimit */\r
+            255\t/* UpperLimit */\r
+            MATRIX_DIM 1\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.IdMin\t/* Name */\r
+            "Minimal value of Id (direct axis) current for all LuTs"\t/* LongIdentifier */\r
+            VAL_BLK\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_A\t/* Conversion */\r
+            -1300\t/* LowerLimit */\r
+            1300\t/* UpperLimit */\r
+            MATRIX_DIM 1\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.IniPmTempRplcVal\t/* Name */\r
+            "calibratable value for initial PM temperature"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            -80\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.IniValCalcnMod\t/* Name */\r
+            "Mode to select Initial value for PM temperature. \r
+Default: Calib param \'IniPmTempRplcVal\'\r
+1: Measured winding temperature  \'TempWindgSnsr_PmTempLimn\'\r
+2: Initial value calculated via \'IniPMTemp\' algorithm \r
+3: Calib param \'IniPmTempRplcVal\'"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            UBYTE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING___c\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            4\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.IniWindgTempRplcVal\t/* Name */\r
+            "calibratable value for initial PM temperature"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            -80\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.IntgTiSampleRot\t/* Name */\r
+            "Integrator time constant for Rotor"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            1000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.IntgTiSampleWik\t/* Name */\r
+            "Integrator time constant for winding"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            100\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.IntgTiSampleWiko\t/* Name */\r
+            "Integrator time constant for winding end"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            100\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.IqIvsStep\t/* Name */\r
+            "Inverse of equidistant steps between two Iq current vector elements"\t/* LongIdentifier */\r
+            VAL_BLK\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_1_p_A\t/* Conversion */\r
+            0.00038461538461538462\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            MATRIX_DIM 1\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.IqMaxIdx\t/* Name */\r
+            "Maximal index of Iq current vector (dimension-1)"\t/* LongIdentifier */\r
+            VAL_BLK\t/* Type */\r
+            0x0000\t/* Address */\r
+            UBYTE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING___c\t/* Conversion */\r
+            1\t/* LowerLimit */\r
+            255\t/* UpperLimit */\r
+            MATRIX_DIM 1\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.IqMin\t/* Name */\r
+            "Minimal value of Iq (direct axis) current for all LuTs"\t/* LongIdentifier */\r
+            VAL_BLK\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_A\t/* Conversion */\r
+            -1300\t/* LowerLimit */\r
+            1300\t/* UpperLimit */\r
+            MATRIX_DIM 1\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.MotorPhaseNum_NomOp\t/* Name */\r
+            "Total number of motor phases to be multiplied during normal operation"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            6\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.MotorPhaseNum_StandStill\t/* Name */\r
+            "Total number of motor phases to be multiplied during stand still operation"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            6\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.MotSpdThd\t/* Name */\r
+            "Threshold value of speed at which stand still operation will be switched on"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_Hz\t/* Conversion */\r
+            -5\t/* LowerLimit */\r
+            5\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.PlossFric_LuTYaxis\t/* Name */\r
+            "Losses generated in rotor due to Friction"\t/* LongIdentifier */\r
+            CURVE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            20000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+            /begin AXIS_DESCR\r
+                COM_AXIS\t/* Attribute */\r
+                PmTempCalcnThermNet_InputData.SpdAct\t/* InputQuantity */\r
+                PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */\r
+                16\t/* MaxAxisPoints */\r
+                -18000\t/* LowerLimit */\r
+                18000\t/* UpperLimit */\r
+                BYTE_ORDER MSB_LAST\r
+                AXIS_PTS_REF PmTempCalcnThermNet_CalibParam.SpdActFric_LuTXaxis\r
+            /end AXIS_DESCR\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.PlossIdFlatTop_map\t/* Name */\r
+            "Losses generated in rotor due to d Current when Flat top modulation is active (Frq dependent)"\t/* LongIdentifier */\r
+            MAP\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            20000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+            /begin AXIS_DESCR\r
+                FIX_AXIS\t/* Attribute */\r
+                NO_INPUT_QUANTITY\t/* InputQuantity */\r
+                EQ_LSB_1_OFF_0\t/* Conversion */\r
+                16\t/* MaxAxisPoints */\r
+                0\t/* LowerLimit */\r
+                16\t/* UpperLimit */\r
+                FIX_AXIS_PAR_DIST 0 1 16\r
+            /end AXIS_DESCR\r
+            /begin AXIS_DESCR\r
+                FIX_AXIS\t/* Attribute */\r
+                NO_INPUT_QUANTITY\t/* InputQuantity */\r
+                EQ_LSB_1_OFF_0\t/* Conversion */\r
+                4\t/* MaxAxisPoints */\r
+                0\t/* LowerLimit */\r
+                4\t/* UpperLimit */\r
+                FIX_AXIS_PAR_DIST 0 1 4\r
+            /end AXIS_DESCR\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.PlossIdSpcVec_map\t/* Name */\r
+            "Losses generated in rotor due to d Current when space vector modulation is active (Frq dependent)"\t/* LongIdentifier */\r
+            MAP\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            20000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+            /begin AXIS_DESCR\r
+                FIX_AXIS\t/* Attribute */\r
+                NO_INPUT_QUANTITY\t/* InputQuantity */\r
+                EQ_LSB_1_OFF_0\t/* Conversion */\r
+                16\t/* MaxAxisPoints */\r
+                0\t/* LowerLimit */\r
+                16\t/* UpperLimit */\r
+                FIX_AXIS_PAR_DIST 0 1 16\r
+            /end AXIS_DESCR\r
+            /begin AXIS_DESCR\r
+                FIX_AXIS\t/* Attribute */\r
+                NO_INPUT_QUANTITY\t/* InputQuantity */\r
+                EQ_LSB_1_OFF_0\t/* Conversion */\r
+                4\t/* MaxAxisPoints */\r
+                0\t/* LowerLimit */\r
+                4\t/* UpperLimit */\r
+                FIX_AXIS_PAR_DIST 0 1 4\r
+            /end AXIS_DESCR\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.PlossIqFlatTop_map\t/* Name */\r
+            "Losses generated in rotor due to q Current when Flat top modulation is active (Frq dependent)"\t/* LongIdentifier */\r
+            MAP\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            20000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+            /begin AXIS_DESCR\r
+                FIX_AXIS\t/* Attribute */\r
+                NO_INPUT_QUANTITY\t/* InputQuantity */\r
+                EQ_LSB_1_OFF_0\t/* Conversion */\r
+                16\t/* MaxAxisPoints */\r
+                0\t/* LowerLimit */\r
+                16\t/* UpperLimit */\r
+                FIX_AXIS_PAR_DIST 0 1 16\r
+            /end AXIS_DESCR\r
+            /begin AXIS_DESCR\r
+                FIX_AXIS\t/* Attribute */\r
+                NO_INPUT_QUANTITY\t/* InputQuantity */\r
+                EQ_LSB_1_OFF_0\t/* Conversion */\r
+                4\t/* MaxAxisPoints */\r
+                0\t/* LowerLimit */\r
+                4\t/* UpperLimit */\r
+                FIX_AXIS_PAR_DIST 0 1 4\r
+            /end AXIS_DESCR\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.PlossIqSpcVec_map\t/* Name */\r
+            "Losses generated in rotor due to q Current when space vector modulation is active (Frq dependent)"\t/* LongIdentifier */\r
+            MAP\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            20000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+            /begin AXIS_DESCR\r
+                FIX_AXIS\t/* Attribute */\r
+                NO_INPUT_QUANTITY\t/* InputQuantity */\r
+                EQ_LSB_1_OFF_0\t/* Conversion */\r
+                16\t/* MaxAxisPoints */\r
+                0\t/* LowerLimit */\r
+                16\t/* UpperLimit */\r
+                FIX_AXIS_PAR_DIST 0 1 16\r
+            /end AXIS_DESCR\r
+            /begin AXIS_DESCR\r
+                FIX_AXIS\t/* Attribute */\r
+                NO_INPUT_QUANTITY\t/* InputQuantity */\r
+                EQ_LSB_1_OFF_0\t/* Conversion */\r
+                4\t/* MaxAxisPoints */\r
+                0\t/* LowerLimit */\r
+                4\t/* UpperLimit */\r
+                FIX_AXIS_PAR_DIST 0 1 4\r
+            /end AXIS_DESCR\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.PlossNac_LuTYaxis\t/* Name */\r
+            "Current losses generated in rotor due to rotor speed"\t/* LongIdentifier */\r
+            CURVE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            10\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+            /begin AXIS_DESCR\r
+                COM_AXIS\t/* Attribute */\r
+                PmTempCalcnThermNet_InputData.SpdAct\t/* InputQuantity */\r
+                PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */\r
+                16\t/* MaxAxisPoints */\r
+                -18000\t/* LowerLimit */\r
+                18000\t/* UpperLimit */\r
+                BYTE_ORDER MSB_LAST\r
+                AXIS_PTS_REF PmTempCalcnThermNet_CalibParam.SpdActNac_LuTXaxis\r
+            /end AXIS_DESCR\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.PmTempMaxVal\t/* Name */\r
+            "Maximum Threshold value for limiting the measured winding temperature, where measured winding temp. is used as a replacement value for following: \r
+1) Output PM temperature in State 1\r
+2) Initial PM temperature in State 2"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            -80\t/* LowerLimit */\r
+            300\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.PmTempMinVal\t/* Name */\r
+            "Maximum Threshold value for limiting the measured winding temperature, where measured winding temp. is used as a replacement value for following: \r
+1) Output PM temperature in State 1\r
+2) Initial PM temperature in State 2"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            -80\t/* LowerLimit */\r
+            300\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.PmTempRplcVal\t/* Name */\r
+            "Replacement value of temperature used either for initialisation of Thermal Network or as PM Temperature ouput value "\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            -80\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.PwmFreqActIvsStep\t/* Name */\r
+            "Inverse of equidistant steps between two PWM frequency vector elements"\t/* LongIdentifier */\r
+            VAL_BLK\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */\r
+            8.3340278356529705e-05\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            MATRIX_DIM 1\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.PwmFreqActMaxIdx\t/* Name */\r
+            "Maximal index of PWM frequency vector (dimension-1)"\t/* LongIdentifier */\r
+            VAL_BLK\t/* Type */\r
+            0x0000\t/* Address */\r
+            UBYTE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING___c\t/* Conversion */\r
+            1\t/* LowerLimit */\r
+            255\t/* UpperLimit */\r
+            MATRIX_DIM 1\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.PwmFreqActMin\t/* Name */\r
+            "Minimal value of PWM frequency for all LuTs"\t/* LongIdentifier */\r
+            VAL_BLK\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_Hz\t/* Conversion */\r
+            1\t/* LowerLimit */\r
+            12000\t/* UpperLimit */\r
+            MATRIX_DIM 1\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.RotorCpTherm\t/* Name */\r
+            "Thermal capacitance of Rotor-PM"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_W_s_p_K\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            100000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.RotTimeConstFac_RotTempIniFlt\t/* Name */\r
+            "A time factor which is a multiple of Thermal time constant of Permanent Magnet (Rotor)"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            200000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.RThermRotorAirgap_LuTYaxis\t/* Name */\r
+            "Thermal resistivity of Rotor"\t/* LongIdentifier */\r
+            CURVE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_K_p_W\t/* Conversion */\r
+            -2000\t/* LowerLimit */\r
+            2000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+            /begin AXIS_DESCR\r
+                COM_AXIS\t/* Attribute */\r
+                PmTempCalcnThermNet_InputData.SpdAct\t/* InputQuantity */\r
+                PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */\r
+                16\t/* MaxAxisPoints */\r
+                -19000\t/* LowerLimit */\r
+                19000\t/* UpperLimit */\r
+                BYTE_ORDER MSB_LAST\r
+                AXIS_PTS_REF PmTempCalcnThermNet_CalibParam.SpdActRTherm_LuTXaxis\r
+            /end AXIS_DESCR\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.RThermRotorCoolt_LuTYaxis\t/* Name */\r
+            "Look-Up table for thermal resistivity of rotor"\t/* LongIdentifier */\r
+            CURVE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */\r
+            -2000\t/* LowerLimit */\r
+            2000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+            /begin AXIS_DESCR\r
+                COM_AXIS\t/* Attribute */\r
+                PmTempCalcnThermNet_InputData.EmCooltFlow\t/* InputQuantity */\r
+                PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */\r
+                16\t/* MaxAxisPoints */\r
+                0\t/* LowerLimit */\r
+                20\t/* UpperLimit */\r
+                BYTE_ORDER MSB_LAST\r
+                AXIS_PTS_REF PmTempCalcnThermNet_CalibParam.CooltFlowRateRtherm_LuTXaxis\r
+            /end AXIS_DESCR\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.RThermStatorWindg_LuTYaxis\t/* Name */\r
+            "Look-Up table for thermal resistivity of winding"\t/* LongIdentifier */\r
+            CURVE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */\r
+            -2000\t/* LowerLimit */\r
+            2000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+            /begin AXIS_DESCR\r
+                COM_AXIS\t/* Attribute */\r
+                PmTempCalcnThermNet_InputData.EmCooltFlow\t/* InputQuantity */\r
+                PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */\r
+                16\t/* MaxAxisPoints */\r
+                0\t/* LowerLimit */\r
+                20\t/* UpperLimit */\r
+                BYTE_ORDER MSB_LAST\r
+                AXIS_PTS_REF PmTempCalcnThermNet_CalibParam.CooltFlowRateRtherm_LuTXaxis\r
+            /end AXIS_DESCR\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.RThermStatorWindgEnd\t/* Name */\r
+            "Thermal resistivity of winding end"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */\r
+            -2000\t/* LowerLimit */\r
+            2000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.StatorWindgCpTherm\t/* Name */\r
+            "Thermal capacitance of winding"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */\r
+            -10000000\t/* LowerLimit */\r
+            1000000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.StatorWindgEndCpTherm\t/* Name */\r
+            "Thermal capacitance of winding end"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */\r
+            -10000000\t/* LowerLimit */\r
+            1000000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.StatorWindgEndTempMaxVal\t/* Name */\r
+            "Maximum Threshold value for limiting the measured winding temperature, where measured winding temp. is used as a replacement value for following: \r
+1) Output PM temperature in State 1\r
+2) Initial PM temperature in State 2"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            -80\t/* LowerLimit */\r
+            300\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.StatorWindgEndTempMinVal\t/* Name */\r
+            "Maximum Threshold value for limiting the measured winding temperature, where measured winding temp. is used as a replacement value for following: \r
+1) Output PM temperature in State 1\r
+2) Initial PM temperature in State 2"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            -80\t/* LowerLimit */\r
+            300\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.StatorWindgTempMaxVal\t/* Name */\r
+            "Maximum Threshold value for limiting the measured winding temperature, where measured winding temp. is used as a replacement value for following: \r
+1) Output PM temperature in State 1\r
+2) Initial PM temperature in State 2"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            -80\t/* LowerLimit */\r
+            300\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.StatorWindgTempMinVal\t/* Name */\r
+            "Maximum Threshold value for limiting the measured winding temperature, where measured winding temp. is used as a replacement value for following: \r
+1) Output PM temperature in State 1\r
+2) Initial PM temperature in State 2"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            -80\t/* LowerLimit */\r
+            300\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.TempCoeff_CuResist\t/* Name */\r
+            "Temperature coefficient to adapt temperature dependent copper resistance"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */\r
+            -100\t/* LowerLimit */\r
+            100\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.TempRef_CuResist\t/* Name */\r
+            "Reference temperature to adapt temperature dependent copper resistance"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            -50\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.TempWindgSnsr_PmTempMax\t/* Name */\r
+            "Maximum Threshold value for limiting the measured winding temperature, where measured winding temp. is used as a replacement value for following: \r
+1) Output PM temperature in State 1\r
+2) Initial PM temperature in State 2"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            -80\t/* LowerLimit */\r
+            500\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.UseSnsrValAsWindgEndTemp\t/* Name */\r
+            "Use Winding NTC sensor value as Winding-end node temperature of thermal network"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            UBYTE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.VehMovmnt_MinSpdThd\t/* Name */\r
+            "minimum speed in kmph to check if vehicle is moving, only in this case the RotTempFlt will be disabled once internal clock overshoot the Rotor time constant threshold "\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_kmph\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            250\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin CHARACTERISTIC\r
+            PmTempCalcnThermNet_CalibParam.WindgIniValCalcnMod\t/* Name */\r
+            "Mode to select Init value for Winding End temp. \r
+Default: Calibparam \'IniWndgEndTempRplcVal\'\r
+1: Average winding temp or Maximum of available NTC\'s\r
+2: Initial Value algorithm exp func\r
+3: Calib param \'IniWndgEndTempRplcVal\'"\t/* LongIdentifier */\r
+            VALUE\t/* Type */\r
+            0x0000\t/* Address */\r
+            UBYTE_COL_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING___c\t/* Conversion */\r
+            0\t/* LowerLimit */\r
+            4\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end CHARACTERISTIC\r
+\r
+        /begin AXIS_PTS\r
+            PmTempCalcnThermNet_CalibParam.CoolFlowRate_LuTXaxis\t/* Name */\r
+            "Estimated flowrate at Inverter coolant outlet (served as input to electric motor coolant inlet)"\t/* LongIdentifier */\r
+            0x0000\t/* Address */\r
+            PmTempCalcnThermNet_InputData.EmCooltFlow\t/* InputQuantity */\r
+            FLOAT32_IEEE_X_INCR_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_l_p_min\t/* Conversion */\r
+            16\t/* MaxAxisPoints */\r
+            0\t/* LowerLimit */\r
+            10\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end AXIS_PTS\r
+\r
+        /begin AXIS_PTS\r
+            PmTempCalcnThermNet_CalibParam.CooltFlowRateRtherm_LuTXaxis\t/* Name */\r
+            "Actual coolant flow rate at motor inlet."\t/* LongIdentifier */\r
+            0x0000\t/* Address */\r
+            PmTempCalcnThermNet_InputData.EmCooltFlow\t/* InputQuantity */\r
+            FLOAT32_IEEE_X_INCR_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */\r
+            16\t/* MaxAxisPoints */\r
+            0\t/* LowerLimit */\r
+            20\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end AXIS_PTS\r
+\r
+        /begin AXIS_PTS\r
+            PmTempCalcnThermNet_CalibParam.FeLossSpdAct_LUTXaxis\t/* Name */\r
+            "Mechanical rotor speed array which is used as x-axis breakpoints of LUT for calculation of rotor iron loss distribution factor"\t/* LongIdentifier */\r
+            0x0000\t/* Address */\r
+            PmTempCalcnThermNet_InputData.SpdAct\t/* InputQuantity */\r
+            FLOAT32_IEEE_X_INCR_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */\r
+            16\t/* MaxAxisPoints */\r
+            -18000\t/* LowerLimit */\r
+            18000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end AXIS_PTS\r
+\r
+        /begin AXIS_PTS\r
+            PmTempCalcnThermNet_CalibParam.SpdActFric_LuTXaxis\t/* Name */\r
+            "Actual mechanical speed of PM synchronous motor used to set up Friction losses LuT"\t/* LongIdentifier */\r
+            0x0000\t/* Address */\r
+            PmTempCalcnThermNet_InputData.SpdAct\t/* InputQuantity */\r
+            FLOAT32_IEEE_X_INCR_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */\r
+            16\t/* MaxAxisPoints */\r
+            -18000\t/* LowerLimit */\r
+            18000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end AXIS_PTS\r
+\r
+        /begin AXIS_PTS\r
+            PmTempCalcnThermNet_CalibParam.SpdActNac_LuTXaxis\t/* Name */\r
+            "Actual mechanical speed of PM synchronous motor used to set up Rotor losses dependent on AC currents"\t/* LongIdentifier */\r
+            0x0000\t/* Address */\r
+            PmTempCalcnThermNet_InputData.SpdAct\t/* InputQuantity */\r
+            FLOAT32_IEEE_X_INCR_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */\r
+            16\t/* MaxAxisPoints */\r
+            -18000\t/* LowerLimit */\r
+            18000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end AXIS_PTS\r
+\r
+        /begin AXIS_PTS\r
+            PmTempCalcnThermNet_CalibParam.SpdActRTherm_LuTXaxis\t/* Name */\r
+            "Mechanical speed of electric motor used to calculate thermal resistivity via LuT"\t/* LongIdentifier */\r
+            0x0000\t/* Address */\r
+            PmTempCalcnThermNet_InputData.SpdAct\t/* InputQuantity */\r
+            FLOAT32_IEEE_X_INCR_DIRECT\t/* Deposit */\r
+            0\t/* MaxDiff */\r
+            PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */\r
+            16\t/* MaxAxisPoints */\r
+            -19000\t/* LowerLimit */\r
+            19000\t/* UpperLimit */\r
+            BYTE_ORDER MSB_LAST\r
+        /end AXIS_PTS\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_AlvCntr\t/* Name */\r
+            "AliveCounter"\t/* LongIdentifier */\r
+            ULONG\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___a\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            4294967295\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_InputData.CAN_HvOffTi\t/* Name */\r
+            "Time during which the HV connection is switched off"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING_min\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            100000000\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_InputData.CAN_VehPrkgTi\t/* Name */\r
+            "Time during which the vehicle stays switched off (wheel speed is below certain threshold ~ 0 bis 3 kmph)"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING_min\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            100000000\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_InputData.EmCooltFlow\t/* Name */\r
+            "Estimated flowrate at Inverter coolant outlet  (served as input to electric motor coolant inlet)"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING_l_p_min\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            15\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_InputData.EmTempCooltInlet\t/* Name */\r
+            "Estimated temperature of Inverter coolant outlet (served as input to electric motor coolant inlet)"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -80\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_InputData.FID_ErrHvOff\t/* Name */\r
+            "Validity Bit which denotes validity of HV Offtime Signal (1: Not Valid 0: Signal Valid )"\t/* LongIdentifier */\r
+            UBYTE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_InputData.FID_ErrNvm\t/* Name */\r
+            "Validity Bit which denotes validity of variables stored NVM (1: Not Valid 0: Signal Valid )"\t/* LongIdentifier */\r
+            UBYTE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_InputData.FID_ErrPrkgTi\t/* Name */\r
+            "Validity Bit which denotes validity of Vehicle Offtime Signal (1: Not Valid 0: Signal Valid )"\t/* LongIdentifier */\r
+            UBYTE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_InputData.FID_IniHvOff\t/* Name */\r
+            "Initialisation Bit which denotes availability of HV Offtime Signal (1: Not Available; 0: Signal Available)"\t/* LongIdentifier */\r
+            UBYTE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_InputData.FID_IniNvm\t/* Name */\r
+            "Initialisation Bit which denotes availability of variables stored in NVM (1: Not Available; 0: Signal Available)"\t/* LongIdentifier */\r
+            UBYTE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_InputData.FID_IniPrkgTi\t/* Name */\r
+            "Initialisation Bit which denotes availability of Vehicle Offtime Signal (1: Not Available; 0: Signal Available)"\t/* LongIdentifier */\r
+            UBYTE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_InputData.HwFlt_WindSnsr1\t/* Name */\r
+            "Fault Bit of measured stator tempeture using winding sensor 1 (0: No Fault ; 1: Fault Signal )"\t/* LongIdentifier */\r
+            UBYTE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_InputData.HwFlt_WindSnsr2\t/* Name */\r
+            "Fault Bit of measured stator tempeture using winding sensor 2 (0: No Fault ; 1: Fault Signal )"\t/* LongIdentifier */\r
+            UBYTE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_InputData.HwFlt_WindSnsr3\t/* Name */\r
+            "Fault Bit of measured stator tempeture using winding sensor 3 (0: No Fault ; 1: Fault Signal )"\t/* LongIdentifier */\r
+            UBYTE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_InputData.IdActFlt\t/* Name */\r
+            "Actual d current filtered"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING_A\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -800\t/* LowerLimit */\r
+            800\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_InputData.IqActFlt\t/* Name */\r
+            "Actual q current filtered"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING_A\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -800\t/* LowerLimit */\r
+            800\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_InputData.ModlnModAct\t/* Name */\r
+            "Modulation type actually used in Inverter modulator function. (Flat Top or Space Vector Modulation)"\t/* LongIdentifier */\r
+            UBYTE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___c\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            5\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_InputData.NVM_Temp1\t/* Name */\r
+            "Temperature saved in NVM memory block 1 at the time of vehicle switch-off (during last operating cycle)"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -200\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_InputData.NVM_Temp2\t/* Name */\r
+            "Temperature saved in NVM memory block 2 at the time of vehicle switch-off (during last operating cycle)"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -200\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_InputData.PwmFrqAct\t/* Name */\r
+            "Current PWM frequency of motor control"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING_Hz\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            12000\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_InputData.SpdAct\t/* Name */\r
+            "Actual mechanical speed of electric motor"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -16000\t/* LowerLimit */\r
+            16000\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_InputData.TempWindgSnsr1\t/* Name */\r
+            "Actual measured stator winding temperature by using winding temperature sensor (NTC 1 in stator winding)"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -80\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_InputData.TempWindgSnsr2\t/* Name */\r
+            "Actual measured stator winding temperature by using winding temperature sensor (NTC 2 in stator winding)"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -80\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_InputData.TempWindgSnsr3\t/* Name */\r
+            "Actual measured stator winding temperature by using winding temperature sensor (NTC 3 in stator winding)"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -80\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.ClckCntRslt\t/* Name */\r
+            "Internal Clock ticks "\t/* LongIdentifier */\r
+            ULONG\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING_s\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            10000000\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.DeltaLossTN\t/* Name */\r
+            "Value of heat exchange between rotor and airgap (mathematical model)"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -100000\t/* LowerLimit */\r
+            100000\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.DeltaTempTN\t/* Name */\r
+            "When thermal network is active, the difference between the estimated PM temperature (previous function call) and the actual calcualted air gap temperature(current function call).  "\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -100000\t/* LowerLimit */\r
+            100000\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.EmCoolInp2Temp\t/* Name */\r
+            "Estimated Second Coolant Input Temperature"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -100000\t/* LowerLimit */\r
+            100000\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.IdActFlt_f\t/* Name */\r
+            "Fraction of Prelook-up function of IdActFlt"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.IdActFlt_k\t/* Name */\r
+            "Index of Prelook-up function of IdActFlt"\t/* LongIdentifier */\r
+            ULONG\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___a\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            4294967295\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.IniPmTemp\t/* Name */\r
+            "Estimated initial value of PM temperature when the vehicle is switched On (either exponential function output or stator winding sensor value)"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -80\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.IniPmTempEfunc\t/* Name */\r
+            "Estimated initial value of PM temperature from exponential function"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -80\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.IniWindgTempEfunc\t/* Name */\r
+            "Estimated initial value of stator winding temperature when the vehicle is switched On (either exponential function output or stator winding sensor value)"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -80\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.IntgNodeTempRotor\t/* Name */\r
+            "Thermal network rotor node temperature"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -3.4028234663852886e38\t/* LowerLimit */\r
+            3.4028234663852886e38\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.IntgNodeTempStatorWindg\t/* Name */\r
+            "Thermal network stator winding node temperature"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -3.4028234663852886e38\t/* LowerLimit */\r
+            3.4028234663852886e38\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.IntgNodeTempStatorWindgEnd\t/* Name */\r
+            "Thermal network stator winding end node temperature"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -3.4028234663852886e38\t/* LowerLimit */\r
+            3.4028234663852886e38\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.IqActFlt_f\t/* Name */\r
+            "Fraction of Prelook-up function of IqActFlt"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.IqActFlt_k\t/* Name */\r
+            "Index of Prelook-up function of IqActFlt"\t/* LongIdentifier */\r
+            ULONG\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___a\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            4294967295\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.MotorIronLoss\t/* Name */\r
+            "Total Losses generated in the machine"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            400000\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.PlossCurrD\t/* Name */\r
+            "Losses generated in rotor due to d Current"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            20000\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.PlossCurrQ\t/* Name */\r
+            "Losses generated in rotor due to q Current"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            20000\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.PlossFric\t/* Name */\r
+            "Losses generated in rotor due to bearing friction"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            20000\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.PlossNac\t/* Name */\r
+            "Factor for rotor current losses generated in rotor due to rotor speed"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            10\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.PlossRotor\t/* Name */\r
+            "Rotor losses estimated analytically"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -1000000\t/* LowerLimit */\r
+            1000000\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.PlossTotCalcd\t/* Name */\r
+            "Total Losses generated in Rotor"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            100000\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.PmTempCalcnState\t/* Name */\r
+            "State 1 or State 3: Use replacement value instead of estimated temperature value of Permanent magnet.\r
+State 2: Use the estimated value of Permanent magnet temperature calculated via Thermal Network."\t/* LongIdentifier */\r
+            UBYTE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___c\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            5\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.PmTempEstLimn\t/* Name */\r
+            "Saturated  value of PM temperature in State 2"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -80\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.PmTempReplcmtVal\t/* Name */\r
+            "Replacement temperature value \\"PmTempRplcVal\\" used as PM Temperature ouput when the function execution state = 1 \r
+( when faults are active or thermal network disabled or signals not available to calculate initial PM temperature)"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -80\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.PmTempReplcmtVal_DftSt\t/* Name */\r
+            "Replacement temperature value \\"PmTempRplcVal\\" used as PM Temperature ouput when the function is executing in default state"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -80\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.PmTempSatFlg\t/* Name */\r
+            "A status Bit which is enabled if the Pm temperature overshoots maximum or minimum allowed (PM )rotor temperature"\t/* LongIdentifier */\r
+            UBYTE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.PmTempUnitDly\t/* Name */\r
+            "delayed value of estimated PM temperature by 1 time slice"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -80\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.PwmFrqAct_f\t/* Name */\r
+            "Fraction of Prelook-up function of PwmFrqAct"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.PwmFrqAct_k\t/* Name */\r
+            "Index of Prelook-up function of PwmFrqAct"\t/* LongIdentifier */\r
+            ULONG\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___a\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            4294967295\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.PwrLossCuEstm\t/* Name */\r
+            "Copper losses estimated analytically"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -1000000\t/* LowerLimit */\r
+            1000000\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.PwrLossFeRot\t/* Name */\r
+            "Rotor Iron losses estimated analytically"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -1000000\t/* LowerLimit */\r
+            1000000\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.PwrLossFeSta\t/* Name */\r
+            "Stator Iron  losses estimated analytically"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -1000000\t/* LowerLimit */\r
+            1000000\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.PwrLossWikNut\t/* Name */\r
+            "Winding Nut Copper losses estimated analytically"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -1000000\t/* LowerLimit */\r
+            1000000\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.PwrLossWiko\t/* Name */\r
+            "Winding End Copper losses estimated analytically"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -1000000\t/* LowerLimit */\r
+            1000000\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.ResFeLossRotDistbnFac\t/* Name */\r
+            "distribution factor of rotor iron loss to overall motor iron loss depending on rotor speed"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            10\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.ResRotLutOutput\t/* Name */\r
+            "actual thermal resistance of rotor-airgap which is dependent on actual mechanical speed of rotor."\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING_K_p_W\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            100\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.RotorLongSwtOffTimeSts\t/* Name */\r
+            "Status Bit which denotes the vehicle was switched off for a time longer than the cooling thermal time constant of rotor \r
+(0: Offtime longer, 1: Offtime shorter )"\t/* LongIdentifier */\r
+            UBYTE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.RThermRotorCooltFlow\t/* Name */\r
+            "output of LuT based on variable rotor Resistance v/s actual coolant flow rate"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -10000001\t/* LowerLimit */\r
+            100000\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.RThermRotorSpd\t/* Name */\r
+            "output of LuT based on variable rotor Resistance v/s actual spd"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -10000000\t/* LowerLimit */\r
+            10000000\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.RThermStatorWindg\t/* Name */\r
+            "output of LuT based on variable Winding Nut Resistance v/s actual coolant flow rate"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -10000000\t/* LowerLimit */\r
+            10000000\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.SelAmbTempSts\t/* Name */\r
+            "A status Bit which is enabled if the stator winding sensor value overshoots maximum allowed (PM )rotor temperature"\t/* LongIdentifier */\r
+            UBYTE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.SelWndgAmbTempSts\t/* Name */\r
+            "A status Bit which is enabled if the coolant inlet temperature is used as ambient f\xc3\xbcr stator winding "\t/* LongIdentifier */\r
+            UBYTE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.StatortWindgEndTempEstLimn\t/* Name */\r
+            "Saturated  value of Stator winding end temperature in State 2"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -80\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.StatortWindgEndTempSatFlg\t/* Name */\r
+            "A status Bit which is enabled if the stator winding-end temperature overshoots maximum or minimum allowed  threshold value"\t/* LongIdentifier */\r
+            UBYTE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.StatorWindgTempSatFlg\t/* Name */\r
+            "A status Bit which is enabled if the stator winding temperature overshoots maximum or minimum allowed threshold value"\t/* LongIdentifier */\r
+            UBYTE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.StattorWindgTempEstLimn\t/* Name */\r
+            "Saturated  value of Stator winding temperature in State 2"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -80\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.TempAmbPm\t/* Name */\r
+            "Actual measured temperature by winding sesnor or actual air gap temperature calculated during first system start (first function call). This is used as input to exponential function "\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -80\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.TempAmbWindg\t/* Name */\r
+            "estimated temperature of stator winding end calculated during first system start (first function call). This is used as input to exponential function "\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -80\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.TempOffPm\t/* Name */\r
+            "estimated value PMTempThermNet saved in NVM ram during last system cycle time.This is used as input to exponential function during next system start. "\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -200\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.TempWindgSnsr_PmTempLimn\t/* Name */\r
+            "Maximum limited value of measured winding sensor temperature which is used as a replacement value for permanent magnet (rotor) temperature in State 3"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -80\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.TempWindgSnsrAvgVal\t/* Name */\r
+            "Average value of stator winding temperature sensors"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -80\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.TiDurn_PostRotTempIniFlt\t/* Name */\r
+            "Time duration after faults occur (FID_ErrNvm or FID_ErrPrkgTi or FID_ErrHvOff ) "\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            2000000\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.TimeOut_NvmDataValidityFlag\t/* Name */\r
+            "Validity flag for stored temperature in NVM and CAN timeout value"\t/* LongIdentifier */\r
+            UBYTE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.TrigDetmnIniVal\t/* Name */\r
+            "Trigger condition to execute intial PM temperature calculation algorithm, only once every (State = 2) execution (1: triggered, 0 : not triggered )"\t/* LongIdentifier */\r
+            UBYTE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.TrigRotorIniValCalc\t/* Name */\r
+            "Trigger condition further processed within intial PM temperature calculation algorithm to execute exponential function algortihm. (1: exponential function, 0: Stator winding sensor)"\t/* LongIdentifier */\r
+            UBYTE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.TrigWndgIniValCalc\t/* Name */\r
+            "Trigger condition further processed within intial PM temperature calculation algorithm to execute exponential function algortihm. (1: exponential function, 0: Stator winding sensor)"\t/* LongIdentifier */\r
+            UBYTE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.WindgLongSwtOffTimeSts\t/* Name */\r
+            "Status Bit which denotes the vehicle was switched off for a time longer than the cooling thermal time constant of stator winding end \r
+(0: Offtime longer, 1: Offtime shorter)"\t/* LongIdentifier */\r
+            UBYTE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_MeasSig.WndgEndTempEstUnitDly\t/* Name */\r
+            "delayed value of estimated winding end temperature by 1 time slice"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -80\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_OutputData.PmTempEst\t/* Name */\r
+            "Estimated value of actual PM temperature received from either of the State (1,2 or 3). This can be either 1) replacement value or 2) estimated value of PM temperature. "\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -80\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_OutputData.PmTempThermNetVld\t/* Name */\r
+            "Thermal network calculated PM Temperature validity flag. Calculated temperature is valid, if thermal network is in \\"operating\\" state 2, else not valid. (1: when State = 2 0: State =! 2 )\r
+"\t/* LongIdentifier */\r
+            UBYTE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            0\t/* LowerLimit */\r
+            1\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_OutputData.StatorWindgEndTemp\t/* Name */\r
+            "Stator winding end temperature in degree celcius"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -80\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin MEASUREMENT\r
+            PmTempCalcnThermNet_OutputData.StatorWindgTemp\t/* Name */\r
+            "Stator winding temperature in degree celcius"\t/* LongIdentifier */\r
+            FLOAT32_IEEE\t/* Datatype */\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */\r
+            1\t/* Resolution */\r
+            100\t/* Accuracy */\r
+            -80\t/* LowerLimit */\r
+            200\t/* UpperLimit */\r
+            ECU_ADDRESS 0x0000\r
+            BYTE_ORDER MSB_LAST\r
+        /end MEASUREMENT\r
+\r
+        /begin COMPU_METHOD\r
+            EQ_LSB_1_OFF_0\t/* Name */\r
+            "Void scaling for unscaled variables"\t/* LongIdentifier */\r
+            RAT_FUNC\t/* ConversionType */\r
+            "%8"\t/* Format */\r
+            ""\t/* Unit */\r
+            COEFFS 0 1 0 0 0 1\r
+        /end COMPU_METHOD\r
+\r
+        /begin COMPU_METHOD\r
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Name */\r
+            "Void scaling for unscaled variables"\t/* LongIdentifier */\r
+            RAT_FUNC\t/* ConversionType */\r
+            "%12.6"\t/* Format */\r
+            "-"\t/* Unit */\r
+            COEFFS 0 1 0 0 0 1\r
+        /end COMPU_METHOD\r
+\r
+        /begin COMPU_METHOD\r
+            PmTempCalcnThermNet_VOID_SCALING___a\t/* Name */\r
+            "Void scaling for unscaled variables"\t/* LongIdentifier */\r
+            RAT_FUNC\t/* ConversionType */\r
+            "%10.0"\t/* Format */\r
+            "-"\t/* Unit */\r
+            COEFFS 0 1 0 0 0 1\r
+        /end COMPU_METHOD\r
+\r
+        /begin COMPU_METHOD\r
+            PmTempCalcnThermNet_VOID_SCALING___c\t/* Name */\r
+            "Void scaling for unscaled variables"\t/* LongIdentifier */\r
+            RAT_FUNC\t/* ConversionType */\r
+            "%3.0"\t/* Format */\r
+            "-"\t/* Unit */\r
+            COEFFS 0 1 0 0 0 1\r
+        /end COMPU_METHOD\r
+\r
+        /begin COMPU_METHOD\r
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Name */\r
+            "Void scaling for unscaled variables"\t/* LongIdentifier */\r
+            RAT_FUNC\t/* ConversionType */\r
+            "%1.0"\t/* Format */\r
+            "-"\t/* Unit */\r
+            COEFFS 0 1 0 0 0 1\r
+        /end COMPU_METHOD\r
+\r
+        /begin COMPU_METHOD\r
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Name */\r
+            "Void scaling for unscaled variables"\t/* LongIdentifier */\r
+            RAT_FUNC\t/* ConversionType */\r
+            "%12.6"\t/* Format */\r
+            "\xc2\xb0C"\t/* Unit */\r
+            COEFFS 0 1 0 0 0 1\r
+        /end COMPU_METHOD\r
+\r
+        /begin COMPU_METHOD\r
+            PmTempCalcnThermNet_VOID_SCALING_1_p_A\t/* Name */\r
+            "Void scaling for unscaled variables"\t/* LongIdentifier */\r
+            RAT_FUNC\t/* ConversionType */\r
+            "%12.6"\t/* Format */\r
+            "1/A"\t/* Unit */\r
+            COEFFS 0 1 0 0 0 1\r
+        /end COMPU_METHOD\r
+\r
+        /begin COMPU_METHOD\r
+            PmTempCalcnThermNet_VOID_SCALING_A\t/* Name */\r
+            "Void scaling for unscaled variables"\t/* LongIdentifier */\r
+            RAT_FUNC\t/* ConversionType */\r
+            "%12.6"\t/* Format */\r
+            "A"\t/* Unit */\r
+            COEFFS 0 1 0 0 0 1\r
+        /end COMPU_METHOD\r
+\r
+        /begin COMPU_METHOD\r
+            PmTempCalcnThermNet_VOID_SCALING_Hz\t/* Name */\r
+            "Void scaling for unscaled variables"\t/* LongIdentifier */\r
+            RAT_FUNC\t/* ConversionType */\r
+            "%12.6"\t/* Format */\r
+            "Hz"\t/* Unit */\r
+            COEFFS 0 1 0 0 0 1\r
+        /end COMPU_METHOD\r
+\r
+        /begin COMPU_METHOD\r
+            PmTempCalcnThermNet_VOID_SCALING_K_p_W\t/* Name */\r
+            "Void scaling for unscaled variables"\t/* LongIdentifier */\r
+            RAT_FUNC\t/* ConversionType */\r
+            "%12.6"\t/* Format */\r
+            "K/W"\t/* Unit */\r
+            COEFFS 0 1 0 0 0 1\r
+        /end COMPU_METHOD\r
+\r
+        /begin COMPU_METHOD\r
+            PmTempCalcnThermNet_VOID_SCALING_kmph\t/* Name */\r
+            "Void scaling for unscaled variables"\t/* LongIdentifier */\r
+            RAT_FUNC\t/* ConversionType */\r
+            "%12.6"\t/* Format */\r
+            "kmph"\t/* Unit */\r
+            COEFFS 0 1 0 0 0 1\r
+        /end COMPU_METHOD\r
+\r
+        /begin COMPU_METHOD\r
+            PmTempCalcnThermNet_VOID_SCALING_l_p_min\t/* Name */\r
+            "Void scaling for unscaled variables"\t/* LongIdentifier */\r
+            RAT_FUNC\t/* ConversionType */\r
+            "%12.6"\t/* Format */\r
+            "l/min"\t/* Unit */\r
+            COEFFS 0 1 0 0 0 1\r
+        /end COMPU_METHOD\r
+\r
+        /begin COMPU_METHOD\r
+            PmTempCalcnThermNet_VOID_SCALING_min\t/* Name */\r
+            "Void scaling for unscaled variables"\t/* LongIdentifier */\r
+            RAT_FUNC\t/* ConversionType */\r
+            "%12.6"\t/* Format */\r
+            "min"\t/* Unit */\r
+            COEFFS 0 1 0 0 0 1\r
+        /end COMPU_METHOD\r
+\r
+        /begin COMPU_METHOD\r
+            PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Name */\r
+            "Void scaling for unscaled variables"\t/* LongIdentifier */\r
+            RAT_FUNC\t/* ConversionType */\r
+            "%12.6"\t/* Format */\r
+            "rpm"\t/* Unit */\r
+            COEFFS 0 1 0 0 0 1\r
+        /end COMPU_METHOD\r
+\r
+        /begin COMPU_METHOD\r
+            PmTempCalcnThermNet_VOID_SCALING_s\t/* Name */\r
+            "Void scaling for unscaled variables"\t/* LongIdentifier */\r
+            RAT_FUNC\t/* ConversionType */\r
+            "%10.0"\t/* Format */\r
+            "s"\t/* Unit */\r
+            COEFFS 0 1 0 0 0 1\r
+        /end COMPU_METHOD\r
+\r
+        /begin COMPU_METHOD\r
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Name */\r
+            "Void scaling for unscaled variables"\t/* LongIdentifier */\r
+            RAT_FUNC\t/* ConversionType */\r
+            "%12.6"\t/* Format */\r
+            "s"\t/* Unit */\r
+            COEFFS 0 1 0 0 0 1\r
+        /end COMPU_METHOD\r
+\r
+        /begin COMPU_METHOD\r
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Name */\r
+            "Void scaling for unscaled variables"\t/* LongIdentifier */\r
+            RAT_FUNC\t/* ConversionType */\r
+            "%12.6"\t/* Format */\r
+            "W"\t/* Unit */\r
+            COEFFS 0 1 0 0 0 1\r
+        /end COMPU_METHOD\r
+\r
+        /begin COMPU_METHOD\r
+            PmTempCalcnThermNet_VOID_SCALING_W_s_p_K\t/* Name */\r
+            "Void scaling for unscaled variables"\t/* LongIdentifier */\r
+            RAT_FUNC\t/* ConversionType */\r
+            "%12.6"\t/* Format */\r
+            "W-s/K"\t/* Unit */\r
+            COEFFS 0 1 0 0 0 1\r
+        /end COMPU_METHOD\r
+\r
+        /begin FUNCTION\r
+            PmTempCalcnThermNet\t/* Name */\r
+            ""\t/* LongIdentifier */\r
+            /begin DEF_CHARACTERISTIC\r
+                PmTempCalcnThermNet_CalibParam.PlossNac_LuTYaxis\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.SpdActNac_LuTXaxis\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.PlossFric_LuTYaxis\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.SpdActFric_LuTXaxis\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.FeLossRotDistbnFac_LuTYaxis\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.FeLossSpdAct_LUTXaxis\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.RThermStatorWindg_LuTYaxis\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.CooltFlowRateRtherm_LuTXaxis\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.RThermRotorCoolt_LuTYaxis\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.RThermRotorAirgap_LuTYaxis\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.SpdActRTherm_LuTXaxis\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.CooltTemp2_CoolTemp1Fac_LuTYaxis\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.CoolFlowRate_LuTXaxis\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.CooltTemp2_PmTempFac_LuTYaxis\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.RThermStatorWindgEnd\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.StatorWindgCpTherm\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.StatorWindgEndCpTherm\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.RotorCpTherm\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.IntgTiSampleRot\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.IntgTiSampleWiko\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.IntgTiSampleWik\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.EnaStaWindg_CuLossEstim\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.CuResist_TempRef\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.MotorPhaseNum_StandStill\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.MotorPhaseNum_NomOp\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.TempCoeff_CuResist\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.TempRef_CuResist\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.EnaStandStillOp\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.MotSpdThd\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.CuWikoFac\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.IdMin\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.IdIvsStep\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.IdMaxIdx\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.IqMin\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.IqIvsStep\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.IqMaxIdx\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.PwmFreqActMin\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.PwmFreqActIvsStep\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.PwmFreqActMaxIdx\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.EnaCoolInp2TempCalc\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.StatorWindgTempMaxVal\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.StatorWindgTempMinVal\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.StatorWindgEndTempMaxVal\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.StatorWindgEndTempMinVal\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.PmTempMaxVal\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.PmTempMinVal\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.UseSnsrValAsWindgEndTemp\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.CuResistSpdCoeff2\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.PmTempRplcVal\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.EnaTempWndgRplcmntVal\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.EnaAvgWindTempCalc\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.EnaHvOffTime\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.DiThermNetCalcn\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.TempWindgSnsr_PmTempMax\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.GearRatioInvs\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.VehMovmnt_MinSpdThd\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.EnaVehSpdChck\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.PlossIdSpcVec_map\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.PlossIqSpcVec_map\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.PlossIdFlatTop_map\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.PlossIqFlatTop_map\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.DiSelAmbTempPm\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.CoolDownTimeConstPm\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.CompareTimeConstFacPmAmb\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.IniPmTempRplcVal\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.IniValCalcnMod\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.CompareTimeConstFacWindg\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.CompareTimeConstFacPm\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.IniWindgTempRplcVal\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.WindgIniValCalcnMod\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.ConvTimeOff_Secs\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.DiSelAmbTempWindg\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.CoolDownTimeWindg\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.CompareTimeConstFacWindgAmb\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.RotTimeConstFac_RotTempIniFlt\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.FuncTiSlc\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.DiIntClkCntr\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.ClckCntStep\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.ClckCntMax\t/* Identifier */\r
+                PmTempCalcnThermNet_CalibParam.DiThermNetCalcn_UseTempWindgSnsr\t/* Identifier */\r
+            /end DEF_CHARACTERISTIC\r
+            /begin IN_MEASUREMENT\r
+                PmTempCalcnThermNet_InputData.TempWindgSnsr1\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.TempWindgSnsr2\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.TempWindgSnsr3\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.NVM_Temp1\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.NVM_Temp2\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.CAN_VehPrkgTi\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.CAN_HvOffTi\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.EmCooltFlow\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.EmTempCooltInlet\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.SpdAct\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.IdActFlt\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.IqActFlt\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.ModlnModAct\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.FID_IniHvOff\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.FID_IniPrkgTi\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.FID_IniNvm\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.HwFlt_WindSnsr3\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.FID_ErrHvOff\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.FID_ErrPrkgTi\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.FID_ErrNvm\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.HwFlt_WindSnsr1\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.HwFlt_WindSnsr2\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.PwmFrqAct\t/* Identifier */\r
+            /end IN_MEASUREMENT\r
+            /begin OUT_MEASUREMENT\r
+                PmTempCalcnThermNet_OutputData.StatorWindgTemp\t/* Identifier */\r
+                PmTempCalcnThermNet_OutputData.StatorWindgEndTemp\t/* Identifier */\r
+                PmTempCalcnThermNet_OutputData.PmTempEst\t/* Identifier */\r
+                PmTempCalcnThermNet_OutputData.PmTempThermNetVld\t/* Identifier */\r
+            /end OUT_MEASUREMENT \r
+            /begin LOC_MEASUREMENT\r
+                PmTempCalcnThermNet_MeasSig.EmCoolInp2Temp\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.RThermRotorCooltFlow\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.RThermRotorSpd\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.RThermStatorWindg\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.PwrLossCuEstm\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.PlossRotor\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.PwrLossFeRot\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.PwrLossFeSta\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.PwrLossWiko\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.PwrLossWikNut\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.PlossCurrD\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.PlossCurrQ\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.PlossFric\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.PlossNac\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.WndgEndTempEstUnitDly\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.PmTempUnitDly\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.IniPmTemp\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.PmTempEstLimn\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.StatortWindgEndTempEstLimn\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.StattorWindgTempEstLimn\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.TempWindgSnsrAvgVal\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.IdActFlt_k\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.IdActFlt_f\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.IqActFlt_k\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.IqActFlt_f\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.PwmFrqAct_k\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.PwmFrqAct_f\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.MotorIronLoss\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.IntgNodeTempRotor\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.IntgNodeTempStatorWindg\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.IntgNodeTempStatorWindgEnd\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.ResFeLossRotDistbnFac\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.NVM_Temp1\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.NVM_Temp2\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.EmCooltFlow\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.EmTempCooltInlet\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.SpdAct\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.IdActFlt\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.IqActFlt\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.ModlnModAct\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.PwmFrqAct\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.TrigDetmnIniVal\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.PmTempSatFlg\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.StatortWindgEndTempSatFlg\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.StatorWindgTempSatFlg\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.TimeOut_NvmDataValidityFlag\t/* Identifier */\r
+                PmTempCalcnThermNet_AlvCntr\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.TempWindgSnsr_PmTempLimn\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.PmTempReplcmtVal_DftSt\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.PmTempReplcmtVal\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.TempWindgSnsr1\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.TempWindgSnsr2\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.TempWindgSnsr3\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.CAN_VehPrkgTi\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.CAN_HvOffTi\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.FID_IniHvOff\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.FID_IniPrkgTi\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.FID_IniNvm\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.HwFlt_WindSnsr3\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.FID_ErrHvOff\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.FID_ErrPrkgTi\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.FID_ErrNvm\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.HwFlt_WindSnsr1\t/* Identifier */\r
+                PmTempCalcnThermNet_InputData.HwFlt_WindSnsr2\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.PmTempCalcnState\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.IniPmTempEfunc\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.TempOffPm\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.TempAmbPm\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.SelAmbTempSts\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.IniWindgTempEfunc\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.TrigRotorIniValCalc\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.TrigWndgIniValCalc\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.WindgLongSwtOffTimeSts\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.RotorLongSwtOffTimeSts\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.TempAmbWindg\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.SelWndgAmbTempSts\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.ClckCntRslt\t/* Identifier */\r
+                PmTempCalcnThermNet_MeasSig.TiDurn_PostRotTempIniFlt\t/* Identifier */\r
+            /end LOC_MEASUREMENT\r
+        /end FUNCTION\r
+\r
+        /begin RECORD_LAYOUT\r
+            FLOAT32_IEEE_COL_DIRECT\t/* Name */\r
+            FNC_VALUES 1 FLOAT32_IEEE COLUMN_DIR DIRECT\r
+        /end RECORD_LAYOUT\r
+\r
+        /begin RECORD_LAYOUT\r
+            FLOAT32_IEEE_X_INCR_DIRECT\t/* Name */\r
+            AXIS_PTS_X 1 FLOAT32_IEEE INDEX_INCR DIRECT\r
+        /end RECORD_LAYOUT\r
+\r
+        /begin RECORD_LAYOUT\r
+            UBYTE_COL_DIRECT\t/* Name */\r
+            FNC_VALUES 1 UBYTE COLUMN_DIR DIRECT\r
+        /end RECORD_LAYOUT\r
+\r
+        /begin RECORD_LAYOUT\r
+            ULONG_COL_DIRECT\t/* Name */\r
+            FNC_VALUES 1 ULONG COLUMN_DIR DIRECT\r
+        /end RECORD_LAYOUT\r
+    /end MODULE \r
 /end PROJECT 
\\ No newline at end of file
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet.h b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet.h
index 4f0f32d11..6ce3807b0 100644
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet.h
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet.h
@@ -1,372 +1,352 @@
-/**************************************************************************************************\\
- *** 
- *** Simulink model       : PmTempCalcnThermNet
- *** TargetLink subsystem : PmTempCalcnThermNet
- *** Codefile             : PmTempCalcnThermNet.h
- ***
- *** Generated by TargetLink, the dSPACE production quality code generator
- *** Generation date: 2021-11-08 12:32:25
- ***
- *** CODE GENERATOR OPTIONS:
- *** Code generation mode                     : Standard
- *** Compiler                                 : <unknown>
- *** Target                                   : Generic
- *** ANSI-C compatible code                   : yes
- *** Code Optimization                        : enabled
- *** Constant style                           : decimal
- *** Clean code option                        : enabled
- *** Logging mode                             : Do not log anything
- *** Code Coverage                            : disabled
- *** Generate empty conditional branches      : disabled
- *** Efficient vector handling                : enabled
- *** Loop unroll threshold                    : 5
- *** Variable vector widths                   : enabled
- *** Shift mode                               : automatic
- *** Handle unscaled SF expr. with TL type    : enabled
- *** No assignment of boolean expressions     : disabled
- *** Scope reduction only to function level   : disabled
- *** Exploit ranges if not erasable           : disabled
- *** Exploit Compute Through Overflow         : optimized
- *** Linker sections                          : enabled
- *** Enable Assembler                         : disabled
- *** Variable name length                     : 31 chars
- *** Use global bitfields                     : disabled
- *** Stateflow: use of bitfields              : enabled
- *** State activity encoding limit            : 5
- *** Omit zero inits in restart function      : disabled
- *** Share functions between TL subsystems    : disabled
- *** Generate 64bit functions                 : disabled
- *** Inlining Threshold                       : 6
- *** Line break limit                         : 100
- *** Target optimized boolean data type       : enabled
- *** Keep saturation elements                 : disabled
- *** Extended variable sharing                : enabled
- *** Extended lifetime optimization           : enabled
- *** Style definition file                    : D:\\Git\\100kw\\ec_models_pub\\lib\\targetlink\\StyleSheet
- ***                                            s\\config\\cconfig.xml
- *** Root style sheet                         : D:\\Git\\100kw\\ec_models_pub\\lib\\targetlink\\StyleSheet
- ***                                            s\\StyleSheets_DPR\\TL_CSourceCodeSS_MISRA_config.xsl
- ***
- *** TargetLink version      : 3.5p2 from 14-Aug-2014
- *** Code generator version  : Build Id 3.5.0.28 from 2014-08-20 16:45:15
- *** Copyright (C) Siemens AG 2015 (All Rights Reserved. Confidential)
-\\**************************************************************************************************/
-
-/*----------------------------------------------------------------------------*\\
- Supression of QAC MISRA findings for automatic generated Code by TargetLink 
- Documentation: W:ec 
-\\*----------------------------------------------------------------------------*/
-/* PRQA S 160,161,162,163,164,165,166,167,168,169 EOF*/
-/* PRQA S 170,171,172,173,174,175,176,177,178,179 EOF*/
-/* PRQA S 184,185,186,190,191,192,193,194,195,196 EOF*/
-/* PRQA S 197,198,199,200,201,203,204,206,207,208 EOF*/
-/* PRQA S 232,233,235,240,241,244,246,268,275,301 EOF*/
-/* PRQA S 302,304,307,309,310,311,312,321,322,327 EOF*/
-/* PRQA S 337,338,341,342,400,401,402,403,404,405 EOF*/
-/* PRQA S 422,423,426,427,429,430,431,432,435,436 EOF*/
-/* PRQA S 437,446,447,448,449,450,451,452,453,454 EOF*/
-/* PRQA S 456,457,458,460,461,462,463,466,467,468 EOF*/
-/* PRQA S 469,475,476,477,478,481,482,483,484,485 EOF*/
-/* PRQA S 486,487,488,493,494,495,496,513,514,515 EOF*/
-/* PRQA S 536,537,540,541,542,543,544,545,546,547 EOF*/
-/* PRQA S 550,551,554,555,556,557,558,559,560,561 EOF*/
-/* PRQA S 562,563,564,565,570,572,580,588,589,590 EOF*/
-/* PRQA S 591,594,601,602,603,605,616,619,620,621 EOF*/
-/* PRQA S 622,623,625,626,627,628,629,630,631,632 EOF*/
-/* PRQA S 633,634,635,636,638,640,641,642,643,644 EOF*/
-/* PRQA S 645,646,649,650,651,653,654,655,656,657 EOF*/
-/* PRQA S 658,659,660,661,662,664,665,667,668,669 EOF*/
-/* PRQA S 671,672,673,674,675,676,677,678,680,682 EOF*/
-/* PRQA S 683,684,685,690,698,699,706,708,709,736 EOF*/
-/* PRQA S 737,738,745,746,747,750,755,756,757,758 EOF*/
-/* PRQA S 759,766,767,768,774,775,777,779,784,785 EOF*/
-/* PRQA S 786,787,788,791,795,801,802,803,804,811 EOF*/
-/* PRQA S 812,813,814,817,818,821,830,831,834,835 EOF*/
-/* PRQA S 836,837,840,841,844,845,848,851,852,853 EOF*/
-/* PRQA S 854,864,865,866,867,872,873,874,877,883 EOF*/
-/* PRQA S 885,887,888,899,914,915,940,941,942,943 EOF*/
-/* PRQA S 944,981,1001,1002,1003,1006,1008,1012,1014,1015 EOF*/
-/* PRQA S 1019,1020,1021,1022,1023,1024,1025,1026,1028,1029 EOF*/
-/* PRQA S 1033,1034,1035,1036,1037,1038,1039,1041,1042,1043 EOF*/
-/* PRQA S 1044,1045,1046,1047,1048,1049,1050,1051,1052,1057 EOF*/
-/* PRQA S 1058,1060,1061,1062,1257,1264,1265,1266,1281,1291 EOF*/
-/* PRQA S 1292,1293,1294,1295,1296,1297,1298,1299,1331,1332 EOF*/
-/* PRQA S 1333,1397,1398,1399,1460,1503,1504,1505,1506,1507 EOF*/
-/* PRQA S 1508,1513,1514,1520,1525,1526,1527,1528,1531,1532 EOF*/
-/* PRQA S 1533,1750,1756,1800,1802,1803,1804,1820,1821,1822 EOF*/
-/* PRQA S 1823,1824,1830,1831,1832,1833,1834,1840,1841,1842 EOF*/
-/* PRQA S 1843,1844,1850,1851,1852,1853,1854,1860,1861,1862 EOF*/
-/* PRQA S 1863,1864,1880,1881,1882,1890,1891,1892,1893,1894 EOF*/
-/* PRQA S 1895,2547,2741,2742,2744,2791,2792,2800,2801,2802 EOF*/
-/* PRQA S 2810,2811,2812,2820,2821,2822,2830,2831,2832,2840 EOF*/
-/* PRQA S 2841,2842,2845,2846,2847,2850,2871,2872,2877,2880 EOF*/
-/* PRQA S 2882,2889,2890,2900,2930,2931,2932,2990,2991,2992 EOF*/
-/* PRQA S 2993,2994,2997,2998,3006,3008,3101,3102,3113,3114 EOF*/
-/* PRQA S 3200,3218,3219,3224,3236,3237,3238,3239,3240,3243 EOF*/
-/* PRQA S 3244,3305,3311,3312,3319,3320,3334,3344,3389,3391 EOF*/
-/* PRQA S 3392,3394,3395,3396,3397,3408,3415,3421,3430,3432 EOF*/
-/* PRQA S 3437,3438,3440,3445,3449,3451,3453,3493,3494,3660 EOF*/
-/* PRQA S 3664,3670,3673,3676,4301,4302,4303,4304,4305,4310 EOF*/
-/* PRQA S 4312,4315,4320,4322,4330,4332,4340,4342,4350,4351 EOF*/
-/* PRQA S 4352,4389,4390,4391,4392,4393,4394,4395,4398,4399 EOF*/
-/* PRQA S 4401,4402,4403,4404,4405,4410,4412,4413,4414,4415 EOF*/
-/* PRQA S 4420,4421,4422,4423,4424,4425,4430,4431,4432,4434 EOF*/
-/* PRQA S 4435,4437,4440,4441,4442,4443,4445,4446,4447,4450 EOF*/
-/* PRQA S 4451,4452,4453,4454,4460,4461,4462,4463,4464,4465 EOF*/
-/* PRQA S 4490,4491,4492,4499,4500,4501,4502,4503,4504,4505 EOF*/
-/* PRQA S 4507,4510,4511,4512,4513,4514,4518,4519,4521,4522 EOF*/
-/* PRQA S 4523,4524,4527,4528,4529,4532,4533,4534,4538,4539 EOF*/
-/* PRQA S 4542,4543,4548,4549,4558,4559,4568,4569,4600,4601 EOF*/
-/* PRQA S 4602,4603,4604,4605,4606,4607,4608,4620,4621,5087 EOF*/
-/* PRQA S 5131,5134,5136,5209 EOF*/
-/*----------------------------------------------------------------------------*/
-#ifndef PMTEMPCALCNTHERMNET_H
-#define PMTEMPCALCNTHERMNET_H
-
-/*----------------------------------------------------------------------------*\\
-  DEFINES (OPT)
-\\*----------------------------------------------------------------------------*/
-/*----------------------------------------------------------------------------*\\
-  INCLUDES
-\\*----------------------------------------------------------------------------*/
-#include "tl_defines_PmTempCalcnThermNet.h"
-#include "Platform_Types.h"
-/*----------------------------------------------------------------------------*\\
-  DEFINES
-\\*----------------------------------------------------------------------------*/
-/*----------------------------------------------------------------------------*\\
-  TYPEDEFS
-\\*----------------------------------------------------------------------------*/
-
-struct tag_PmTempCalcnThermNet_MeasSig {
-   float32 EmCoolInp2Temp /* Description: Estimated Second Coolant Input Temperature */;
-   float32 RThermRotorCooltFlow /* Description: output of LuT based on variable rotor Resistance v/s
-    actual coolant flow rate */;
-   float32 RThermRotorSpd /* Description: output of LuT based on variable rotor Resistance v/s actua
-   l spd */;
-   float32 RThermStatorWindg /* Description: output of LuT based on variable Winding Nut Resistance 
-   v/s actual coolant flow rate */;
-   float32 PwrLossCuEstm /* Description: Copper losses estimated analytically */;
-   float32 PlossRotor /* Description: Rotor losses estimated analytically */;
-   float32 PwrLossFeRot /* Description: Rotor Iron losses estimated analytically */;
-   float32 PwrLossFeSta /* Description: Stator Iron  losses estimated analytically */;
-   float32 PwrLossWiko /* Description: Winding End Copper losses estimated analytically */;
-   float32 PwrLossWikNut /* Description: Winding Nut Copper losses estimated analytically */;
-   float32 IniPmTempEfunc /* Description: Estimated initial value of PM temperature from exponential
-    function */;
-   float32 PlossCurrD /* Description: Losses generated in rotor due to d Current */;
-   float32 PlossCurrQ /* Description: Losses generated in rotor due to q Current */;
-   float32 PlossFric /* Description: Losses generated in rotor due to bearing friction */;
-   float32 PlossNac /* Description: Factor for rotor current losses generated in rotor due to rotor 
-   speed */;
-   float32 PlossTotCalcd /* Description: Total Losses generated in Rotor */;
-   boolean TrigDetmnIniVal /* Description: Trigger condition to execute intial PM temperature calcul
-   ation algorithm, only once every (State = 2) execution (1: triggered, 0 : not triggered ) */;
-   boolean TrigRotorIniValCalc /* Description: Trigger condition further processed within intial PM 
-   temperature calculation algorithm to execute exponential function algortihm. (1: exponential func
-   tion, 0: Stator winding sensor) */;
-   boolean TrigWndgIniValCalc /* Description: Trigger condition further processed within intial PM t
-   emperature calculation algorithm to execute exponential function algortihm. (1: exponential funct
-   ion, 0: Stator winding sensor) */;
-   float32 TempAmbWindg /* Description: estimated temperature of stator winding end calculated durin
-   g first system start (first function call). This is used as input to exponential function  */;
-   float32 TempOffPm /* Description: estimated value PMTempThermNet saved in NVM ram during last sys
-   tem cycle time.This is used as input to exponential function during next system start.  */;
-   float32 TempAmbPm /* Description: Actual measured temperature by winding sesnor or actual air gap
-    temperature calculated during first system start (first function call). This is used as input to
-    exponential function  */;
-   float32 DeltaTempTN /* Description: When thermal network is active, the difference between the es
-   timated PM temperature (previous function call) and the actual calcualted air gap temperature(cur
-   rent function call).   */;
-   float32 DeltaLossTN /* Description: Value of heat exchange between rotor and airgap (mathematical
-    model) */;
-   float32 WndgEndTempEstUnitDly /* Description: delayed value of estimated winding end temperature 
-   by 1 time slice */;
-   float32 PmTempUnitDly /* Description: delayed value of estimated PM temperature by 1 time slice */
-   ;
-   float32 ResRotLutOutput /* Description: actual thermal resistance of rotor-airgap which is depend
-   ent on actual mechanical speed of rotor. */;
-   boolean WindgLongSwtOffTimeSts /* Description: Status Bit which denotes the vehicle was switched 
-   off for a time longer than the cooling thermal time constant of stator winding end 
-(1: Offtime longer, 0: Offtime shorter) */;
-   boolean RotorLongSwtOffTimeSts /* Description: Status Bit which denotes the vehicle was switched 
-   off for a time longer than the cooling thermal time constant of rotor 
-(1: Offtime longer, 0: Offtime shorter ) */;
-   boolean TempWindgSnsr_PmTempLimnSts /* Description: A status Bit which is enabled if the stator w
-   inding sensor value overshoots maximum allowed (PM )rotor temperature */;
-   float32 TempWindgSnsr_PmTempLimn /* Description: Maximum limited value of measured winding sensor
-    temperature which is used as a replacement value for permanent magnet (rotor) temperature in Sta
-   te 3 */;
-   uint32 ClckCntRslt /* Description: Internal Clock ticks  */;
-   float32 TiDurn_PostRotTempIniFlt /* Description: Time duration after faults occur (FID_ErrNvm or 
-   FID_ErrPrkgTi or FID_ErrHvOff )  */;
-   boolean SelWndgAmbTempSts /* Description: A status Bit which is enabled if the coolant inlet temp
-   erature is used as ambient for stator winding  */;
-   boolean SelAmbTempSts /* Description: A status Bit which is enabled if the stator winding sensor 
-   value overshoots maximum allowed (PM )rotor temperature */;
-   float32 PmTempReplcmtVal_DftSt /* Description: Replacement temperature value "PmTempRplcVal" used
-    as PM Temperature ouput when the function is executing in default state */;
-   float32 PmTempReplcmtVal /* Description: Replacement temperature value "PmTempRplcVal" used as PM
-    Temperature ouput when the function execution state = 1 
-( when faults are active or thermal network disabled or signals not available to calculate initial P
-   M temperature) */;
-   float32 IniWindgTempEfunc /* Description: Estimated initial value of stator winding temperature w
-   hen the vehicle is switched On (either exponential function output or stator winding sensor value
-   ) */;
-   float32 IniPmTemp /* Description: Estimated initial value of PM temperature when the vehicle is s
-   witched On (either exponential function output or stator winding sensor value) */;
-   uint8 WindgSnsrFlt_SfChart /* Description: Actual state of winding sensor average value calculati
-   on  */;
-   uint8 PmTempCalcnState /* Description: State 1 or State 3: Use replacement value instead of estim
-   ated temperature value of Permanent magnet.
-State 2: Use the estimated value of Permanent magnet temperature calculated via Thermal Network. */;
-   uint32 PmTempStsWord /* Description: Status bit which corresponds to output availability and its 
-   validity */;
-   boolean PmTempSatFlg /* Description: A status Bit which is enabled if the Pm temperature overshoo
-   ts maximum or minimum allowed (PM )rotor temperature */;
-   float32 PmTempEstLimn /* Description: Saturated  value of PM temperature in State 2 */;
-   boolean StatortWindgEndTempSatFlg /* Description: A status Bit which is enabled if the stator win
-   ding-end temperature overshoots maximum or minimum allowed  threshold value */;
-   float32 StatortWindgEndTempEstLimn /* Description: Saturated  value of Stator winding end tempera
-   ture in State 2 */;
-   boolean StatorWindgTempSatFlg /* Description: A status Bit which is enabled if the stator winding
-    temperature overshoots maximum or minimum allowed threshold value */;
-   float32 StattorWindgTempEstLimn /* Description: Saturated  value of Stator winding temperature in
-    State 2 */;
-   boolean TimeOut_NvmDataValidityFlag /* Description: Validity flag for stored temperature in NVM a
-   nd CAN timeout value */;
-   float32 TempWindgSnsrAvgVal /* Description: Average value of stator winding temperature sensors */
-   ;
-   uint32 IdActFlt_k /* Description: Index of Prelook-up function of IdActFlt */;
-   float32 IdActFlt_f /* Description: Fraction of Prelook-up function of IdActFlt */;
-   uint32 IqActFlt_k /* Description: Index of Prelook-up function of IqActFlt */;
-   float32 IqActFlt_f /* Description: Fraction of Prelook-up function of IqActFlt */;
-   uint32 PwmFrqAct_k /* Description: Index of Prelook-up function of PwmFrqAct */;
-   float32 PwmFrqAct_f /* Description: Fraction of Prelook-up function of PwmFrqAct */;
-   float32 MotorIronLoss /* Description: Total Losses generated in the machine */;
-   float32 IntgNodeTempRotor /* Description: Thermal network rotor node temperature */;
-   float32 IntgNodeTempStatorWindg /* Description: Thermal network stator winding node temperature */
-   ;
-   float32 IntgNodeTempStatorWindgEnd /* Description: Thermal network stator winding end node temper
-   ature */;
-   float32 ResFeLossRotDistbnFac /* Description: distribution factor of rotor iron loss to overall m
-   otor iron loss depending on rotor speed */;
-}; /* struct type created for variable: PmTempCalcnThermNet_MeasSig */
-struct tag_SIBFS_PmTempCalcnStateChart_PmTempCalc_tp {
-   unsigned int CPmTempCalc2_I__ReplcmtValState : 1;
-   unsigned int CPmTempCalc3_D__l_PmTempTNCalcn : 1;
-   unsigned int CPmTempCalc4_W__Flt_InOperation : 1;
-}; /* Type of structure containing bitfields for Stateflow chart  */
-struct tag_SIBFS_WindgSnsrFltCheckStateChart_PmTempCalc_tp {
-   unsigned int CPmTempCalc5_W__ckStateChart_ns : 4;
-}; /* Type of structure containing bitfields for Stateflow chart  */
-/*----------------------------------------------------------------------------*\\
-  ENUMS
-\\*----------------------------------------------------------------------------*/
-/*----------------------------------------------------------------------------*\\
-  VARIABLES
-\\*----------------------------------------------------------------------------*/
-
-#define PMTEMPCALCNTHERMNET_START_SEC_VAR_CLEARED_32
-#include "MemMap.h"
-/******************************************************************************\\
-   UserSLGlobal: SLGlobal = { MemMap_GLOBAL_CLEARED_32_EXCLFROMA2L } | Width: 32
-\\******************************************************************************/
-extern float32 SPmTempCalc15_TimeOff_Switch1;
-extern float32 SPmTempCalc4_S__atBlck_WndgSnsr;
-extern float32 SPmTempCalc59_Switch;
-
-/******************************************************************************\\
-   UserSLGlobal: SLGlobal = { MemMap_GLOBAL_CLEARED_32_EXCLFROMA2L } | Width: 8
-\\******************************************************************************/
-extern boolean SPmTempCalc15_TimeOff_Switch1_a /* LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 1 */;
-#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_CLEARED_32
-#include "MemMap.h"
-#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32
-#include "MemMap.h"
-
-/******************************************************************************\\
-   MemMap_DISP_INIT_32: global observable variables (RAM) | Width: 32
-\\******************************************************************************/
-extern MemMap_DISP_INIT_32 uint32 PmTempCalcnThermNet_AlvCntr /* 
-   Unit       : -
-   Description: AliveCounter
-   LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 4294967295 */;
-extern MemMap_DISP_INIT_32 float32 X_SPmTempCalc4__atorUnit_Delay1;
-extern MemMap_DISP_INIT_32 float32 X_SPmTempCalc5___WindingEndTemp;
-
-/******************************************************************************\\
-   MemMap_DISP_INIT_32: global observable variables (RAM) | Width: N.A.
-\\******************************************************************************/
-extern MemMap_DISP_INIT_32 struct tag_PmTempCalcnThermNet_MeasSig PmTempCalcnThermNet_MeasSig /* Des
-   cription: dummy structure */;
-#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32
-#include "MemMap.h"
-#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32
-#include "MemMap.h"
-
-/******************************************************************************\\
-   UserSFGlobalInit: SFGlobalInit = { MemMap_GLOBAL_INIT_32_EXCLFROMA2L } | Width: 8
-\\******************************************************************************/
-extern uint8 CPmTempCalc1_P__cnState_SfChart /* LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 5 */;
-extern boolean CPmTempCalc1_PmTempThermNetVld /* LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 1 */;
-extern boolean CPmTempCalc1_TrigDetmnIniVal /* LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 1 */;
-extern boolean CPmTempCalc5_T__mntValWindgSnsr /* LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 1 */;
-extern uint8 CPmTempCalc5_W__SnsrFlt_SfChart /* LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 8 */;
-
-/******************************************************************************\\
-   UserSFGlobalInit: SFGlobalInit = { MemMap_GLOBAL_INIT_32_EXCLFROMA2L } | Width: N.A.
-\\******************************************************************************/
-extern struct tag_SIBFS_PmTempCalcnStateChart_PmTempCalc_tp SIBFS_PmTempCa__hart_PmTempCalc /* Descr
-   iption: Structure containing bitfields for Stateflow chart  */;
-
-extern struct tag_SIBFS_WindgSnsrFltCheckStateChart_PmTempCalc_tp SIBFS_WindgSns__hart_PmTempCalc /*
-    Description: Structure containing bitfields for Stateflow chart  */;
-#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32
-#include "MemMap.h"
-#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32
-#include "MemMap.h"
-
-/******************************************************************************\\
-   UserSLGlobalInit: SLGlobalInit = { MemMap_GLOBAL_INIT_32_EXCLFROMA2L } | Width: 32
-\\******************************************************************************/
-extern float32 SPmTempCalc31___IniValCalcnMod1;
-extern uint32 X_SPmTempCalc1__IncrmntClckCntr /* LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 10000000 */;
-extern uint32 X_SPmTempCalc2_AliveCount /* 
-   Unit       : -
-   LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 4294967295 */;
-extern float32 X_SPmTempCalc4___WindingEndTemp;
-extern float32 X_SPmTempCalc59_Unit_Delay;
-
-/******************************************************************************\\
-   UserSLGlobalInit: SLGlobalInit = { MemMap_GLOBAL_INIT_32_EXCLFROMA2L } | Width: 8
-\\******************************************************************************/
-extern boolean SPmTempCalc10_RSWE;
-extern boolean SPmTempCalc10___stRotTempIniFlt;
-extern uint8 SPmTempCalc1_S__Case_LastSystem;
-extern boolean X_SPmTempCalc1__ay_ResetIntClck;
-extern boolean X_SPmTempCalc1__lay_TrigIntClck;
-extern boolean X_SPmTempCalc59_oldHysOutp;
-#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32
-#include "MemMap.h"
-
-/*----------------------------------------------------------------------------*\\
-  PARAMETERIZED MACROS
-\\*----------------------------------------------------------------------------*/
-/*----------------------------------------------------------------------------*\\
-  FUNCTION PROTOTYPES
-\\*----------------------------------------------------------------------------*/
-/******************************************************************************\\
-   MemMap_GLOBAL_FCN: global function(s) (exported to other modules)
-\\******************************************************************************/
-#define PMTEMPCALCNTHERMNET_START_SEC_CODE
-#include "MemMap.h"
-extern void PmTempCalcnThermNet(void);
-#define PMTEMPCALCNTHERMNET_STOP_SEC_CODE
-#include "MemMap.h"
-
-
-#endif/*PMTEMPCALCNTHERMNET_H */
-/*----------------------------------------------------------------------------*\\
-  END OF FILE
-\\*----------------------------------------------------------------------------*/
+/**************************************************************************************************\\\r
+ *** \r
+ *** Simulink model       : PmTempCalcnThermNet\r
+ *** TargetLink subsystem : PmTempCalcnThermNet\r
+ *** Codefile             : PmTempCalcnThermNet.h\r
+ ***\r
+ *** Generated by TargetLink, the dSPACE production quality code generator\r
+ *** Generation date: 2022-03-31 16:11:59\r
+ ***\r
+ *** CODE GENERATOR OPTIONS:\r
+ *** Code generation mode                     : Standard\r
+ *** Compiler                                 : <unknown>\r
+ *** Target                                   : Generic\r
+ *** ANSI-C compatible code                   : yes\r
+ *** Code Optimization                        : enabled\r
+ *** Constant style                           : decimal\r
+ *** Clean code option                        : enabled\r
+ *** Logging mode                             : Do not log anything\r
+ *** Code Coverage                            : disabled\r
+ *** Generate empty conditional branches      : disabled\r
+ *** Efficient vector handling                : enabled\r
+ *** Loop unroll threshold                    : 5\r
+ *** Variable vector widths                   : enabled\r
+ *** Shift mode                               : automatic\r
+ *** Handle unscaled SF expr. with TL type    : enabled\r
+ *** No assignment of boolean expressions     : disabled\r
+ *** Scope reduction only to function level   : disabled\r
+ *** Exploit ranges if not erasable           : disabled\r
+ *** Exploit Compute Through Overflow         : optimized\r
+ *** Linker sections                          : enabled\r
+ *** Enable Assembler                         : disabled\r
+ *** Variable name length                     : 31 chars\r
+ *** Use global bitfields                     : disabled\r
+ *** Stateflow: use of bitfields              : enabled\r
+ *** State activity encoding limit            : 5\r
+ *** Omit zero inits in restart function      : disabled\r
+ *** Share functions between TL subsystems    : disabled\r
+ *** Generate 64bit functions                 : disabled\r
+ *** Inlining Threshold                       : 6\r
+ *** Line break limit                         : 100\r
+ *** Target optimized boolean data type       : enabled\r
+ *** Keep saturation elements                 : disabled\r
+ *** Extended variable sharing                : enabled\r
+ *** Extended lifetime optimization           : enabled\r
+ *** Style definition file                    : D:\\ai\\ec_models_pub\\lib\\targetlink\\StyleSheets\\confi\r
+ ***                                            g\\cconfig.xml\r
+ *** Root style sheet                         : D:\\ai\\ec_models_pub\\lib\\targetlink\\StyleSheets\\Style\r
+ ***                                            Sheets_DPR\\TL_CSourceCodeSS_MISRA_config.xsl\r
+ ***\r
+ *** TargetLink version      : 3.5 from 30-Oct-2013\r
+ *** Code generator version  : Build Id 3.5.0.22 from 2013-10-07 16:59:57\r
+ *** Copyright (C) Siemens AG 2015 (All Rights Reserved. Confidential)\r
+\\**************************************************************************************************/\r
+\r
+/*----------------------------------------------------------------------------*\\\r
+ Supression of QAC MISRA findings for automatic generated Code by TargetLink \r
+ Documentation: W:ec \r
+\\*----------------------------------------------------------------------------*/\r
+/* PRQA S 160,161,162,163,164,165,166,167,168,169 EOF*/\r
+/* PRQA S 170,171,172,173,174,175,176,177,178,179 EOF*/\r
+/* PRQA S 184,185,186,190,191,192,193,194,195,196 EOF*/\r
+/* PRQA S 197,198,199,200,201,203,204,206,207,208 EOF*/\r
+/* PRQA S 232,233,235,240,241,244,246,268,275,301 EOF*/\r
+/* PRQA S 302,304,307,309,310,311,312,321,322,327 EOF*/\r
+/* PRQA S 337,338,341,342,400,401,402,403,404,405 EOF*/\r
+/* PRQA S 422,423,426,427,429,430,431,432,435,436 EOF*/\r
+/* PRQA S 437,446,447,448,449,450,451,452,453,454 EOF*/\r
+/* PRQA S 456,457,458,460,461,462,463,466,467,468 EOF*/\r
+/* PRQA S 469,475,476,477,478,481,482,483,484,485 EOF*/\r
+/* PRQA S 486,487,488,493,494,495,496,513,514,515 EOF*/\r
+/* PRQA S 536,537,540,541,542,543,544,545,546,547 EOF*/\r
+/* PRQA S 550,551,554,555,556,557,558,559,560,561 EOF*/\r
+/* PRQA S 562,563,564,565,570,572,580,588,589,590 EOF*/\r
+/* PRQA S 591,594,601,602,603,605,616,619,620,621 EOF*/\r
+/* PRQA S 622,623,625,626,627,628,629,630,631,632 EOF*/\r
+/* PRQA S 633,634,635,636,638,640,641,642,643,644 EOF*/\r
+/* PRQA S 645,646,649,650,651,653,654,655,656,657 EOF*/\r
+/* PRQA S 658,659,660,661,662,664,665,667,668,669 EOF*/\r
+/* PRQA S 671,672,673,674,675,676,677,678,680,682 EOF*/\r
+/* PRQA S 683,684,685,690,698,699,706,708,709,736 EOF*/\r
+/* PRQA S 737,738,745,746,747,750,755,756,757,758 EOF*/\r
+/* PRQA S 759,766,767,768,774,775,777,779,784,785 EOF*/\r
+/* PRQA S 786,787,788,791,795,801,802,803,804,811 EOF*/\r
+/* PRQA S 812,813,814,817,818,821,830,831,834,835 EOF*/\r
+/* PRQA S 836,837,840,841,844,845,848,851,852,853 EOF*/\r
+/* PRQA S 854,864,865,866,867,872,873,874,877,883 EOF*/\r
+/* PRQA S 885,887,888,899,914,915,940,941,942,943 EOF*/\r
+/* PRQA S 944,981,1001,1002,1003,1006,1008,1012,1014,1015 EOF*/\r
+/* PRQA S 1019,1020,1021,1022,1023,1024,1025,1026,1028,1029 EOF*/\r
+/* PRQA S 1033,1034,1035,1036,1037,1038,1039,1041,1042,1043 EOF*/\r
+/* PRQA S 1044,1045,1046,1047,1048,1049,1050,1051,1052,1057 EOF*/\r
+/* PRQA S 1058,1060,1061,1062,1257,1264,1265,1266,1281,1291 EOF*/\r
+/* PRQA S 1292,1293,1294,1295,1296,1297,1298,1299,1331,1332 EOF*/\r
+/* PRQA S 1333,1397,1398,1399,1460,1503,1504,1505,1506,1507 EOF*/\r
+/* PRQA S 1508,1513,1514,1520,1525,1526,1527,1528,1531,1532 EOF*/\r
+/* PRQA S 1533,1750,1756,1800,1802,1803,1804,1820,1821,1822 EOF*/\r
+/* PRQA S 1823,1824,1830,1831,1832,1833,1834,1840,1841,1842 EOF*/\r
+/* PRQA S 1843,1844,1850,1851,1852,1853,1854,1860,1861,1862 EOF*/\r
+/* PRQA S 1863,1864,1880,1881,1882,1890,1891,1892,1893,1894 EOF*/\r
+/* PRQA S 1895,2547,2741,2742,2744,2791,2792,2800,2801,2802 EOF*/\r
+/* PRQA S 2810,2811,2812,2820,2821,2822,2830,2831,2832,2840 EOF*/\r
+/* PRQA S 2841,2842,2845,2846,2847,2850,2871,2872,2877,2880 EOF*/\r
+/* PRQA S 2882,2889,2890,2900,2930,2931,2932,2990,2991,2992 EOF*/\r
+/* PRQA S 2993,2994,2997,2998,3006,3008,3101,3102,3113,3114 EOF*/\r
+/* PRQA S 3200,3218,3219,3224,3236,3237,3238,3239,3240,3243 EOF*/\r
+/* PRQA S 3244,3305,3311,3312,3319,3320,3334,3344,3389,3391 EOF*/\r
+/* PRQA S 3392,3394,3395,3396,3397,3408,3415,3421,3430,3432 EOF*/\r
+/* PRQA S 3437,3438,3440,3445,3449,3451,3453,3493,3494,3660 EOF*/\r
+/* PRQA S 3664,3670,3673,3676,4301,4302,4303,4304,4305,4310 EOF*/\r
+/* PRQA S 4312,4315,4320,4322,4330,4332,4340,4342,4350,4351 EOF*/\r
+/* PRQA S 4352,4389,4390,4391,4392,4393,4394,4395,4398,4399 EOF*/\r
+/* PRQA S 4401,4402,4403,4404,4405,4410,4412,4413,4414,4415 EOF*/\r
+/* PRQA S 4420,4421,4422,4423,4424,4425,4430,4431,4432,4434 EOF*/\r
+/* PRQA S 4435,4437,4440,4441,4442,4443,4445,4446,4447,4450 EOF*/\r
+/* PRQA S 4451,4452,4453,4454,4460,4461,4462,4463,4464,4465 EOF*/\r
+/* PRQA S 4490,4491,4492,4499,4500,4501,4502,4503,4504,4505 EOF*/\r
+/* PRQA S 4507,4510,4511,4512,4513,4514,4518,4519,4521,4522 EOF*/\r
+/* PRQA S 4523,4524,4527,4528,4529,4532,4533,4534,4538,4539 EOF*/\r
+/* PRQA S 4542,4543,4548,4549,4558,4559,4568,4569,4600,4601 EOF*/\r
+/* PRQA S 4602,4603,4604,4605,4606,4607,4608,4620,4621,5087 EOF*/\r
+/* PRQA S 5131,5134,5136,5209 EOF*/\r
+/*----------------------------------------------------------------------------*/\r
+#ifndef PMTEMPCALCNTHERMNET_H\r
+#define PMTEMPCALCNTHERMNET_H\r
+\r
+/*----------------------------------------------------------------------------*\\\r
+  DEFINES (OPT)\r
+\\*----------------------------------------------------------------------------*/\r
+/*----------------------------------------------------------------------------*\\\r
+  INCLUDES\r
+\\*----------------------------------------------------------------------------*/\r
+#include "Platform_Types.h"\r
+/*----------------------------------------------------------------------------*\\\r
+  DEFINES\r
+\\*----------------------------------------------------------------------------*/\r
+/*----------------------------------------------------------------------------*\\\r
+  TYPEDEFS\r
+\\*----------------------------------------------------------------------------*/\r
+\r
+struct tag_PmTempCalcnThermNet_MeasSig {\r
+   float32 EmCoolInp2Temp /* Description: Estimated Second Coolant Input Temperature */;\r
+   float32 RThermRotorCooltFlow /* Description: output of LuT based on variable rotor Resistance v/s\r
+    actual coolant flow rate */;\r
+   float32 RThermRotorSpd /* Description: output of LuT based on variable rotor Resistance v/s actua\r
+   l spd */;\r
+   float32 RThermStatorWindg /* Description: output of LuT based on variable Winding Nut Resistance \r
+   v/s actual coolant flow rate */;\r
+   float32 PwrLossCuEstm /* Description: Copper losses estimated analytically */;\r
+   float32 PlossRotor /* Description: Rotor losses estimated analytically */;\r
+   float32 PwrLossFeRot /* Description: Rotor Iron losses estimated analytically */;\r
+   float32 PwrLossFeSta /* Description: Stator Iron  losses estimated analytically */;\r
+   float32 PwrLossWiko /* Description: Winding End Copper losses estimated analytically */;\r
+   float32 PwrLossWikNut /* Description: Winding Nut Copper losses estimated analytically */;\r
+   float32 IniPmTempEfunc /* Description: Estimated initial value of PM temperature from exponential\r
+    function */;\r
+   float32 PlossCurrD /* Description: Losses generated in rotor due to d Current */;\r
+   float32 PlossCurrQ /* Description: Losses generated in rotor due to q Current */;\r
+   float32 PlossFric /* Description: Losses generated in rotor due to bearing friction */;\r
+   float32 PlossNac /* Description: Factor for rotor current losses generated in rotor due to rotor \r
+   speed */;\r
+   float32 PlossTotCalcd /* Description: Total Losses generated in Rotor */;\r
+   boolean TrigDetmnIniVal /* Description: Trigger condition to execute intial PM temperature calcul\r
+   ation algorithm, only once every (State = 2) execution (1: triggered, 0 : not triggered ) */;\r
+   boolean TrigRotorIniValCalc /* Description: Trigger condition further processed within intial PM \r
+   temperature calculation algorithm to execute exponential function algortihm. (1: exponential func\r
+   tion, 0: Stator winding sensor) */;\r
+   boolean TrigWndgIniValCalc /* Description: Trigger condition further processed within intial PM t\r
+   emperature calculation algorithm to execute exponential function algortihm. (1: exponential funct\r
+   ion, 0: Stator winding sensor) */;\r
+   float32 TempAmbWindg /* Description: estimated temperature of stator winding end calculated durin\r
+   g first system start (first function call). This is used as input to exponential function  */;\r
+   float32 TempOffPm /* Description: estimated value PMTempThermNet saved in NVM ram during last sys\r
+   tem cycle time.This is used as input to exponential function during next system start.  */;\r
+   float32 TempAmbPm /* Description: Actual measured temperature by winding sesnor or actual air gap\r
+    temperature calculated during first system start (first function call). This is used as input to\r
+    exponential function  */;\r
+   float32 DeltaTempTN /* Description: When thermal network is active, the difference between the es\r
+   timated PM temperature (previous function call) and the actual calcualted air gap temperature(cur\r
+   rent function call).   */;\r
+   float32 DeltaLossTN /* Description: Value of heat exchange between rotor and airgap (mathematical\r
+    model) */;\r
+   float32 WndgEndTempEstUnitDly /* Description: delayed value of estimated winding end temperature \r
+   by 1 time slice */;\r
+   float32 PmTempUnitDly /* Description: delayed value of estimated PM temperature by 1 time slice */\r
+   ;\r
+   float32 ResRotLutOutput /* Description: actual thermal resistance of rotor-airgap which is depend\r
+   ent on actual mechanical speed of rotor. */;\r
+   boolean WindgLongSwtOffTimeSts /* Description: Status Bit which denotes the vehicle was switched \r
+   off for a time longer than the cooling thermal time constant of stator winding end \r
+(0: Offtime longer, 1: Offtime shorter) */;\r
+   boolean RotorLongSwtOffTimeSts /* Description: Status Bit which denotes the vehicle was switched \r
+   off for a time longer than the cooling thermal time constant of rotor \r
+(0: Offtime longer, 1: Offtime shorter ) */;\r
+   float32 TempWindgSnsr_PmTempLimn /* Description: Maximum limited value of measured winding sensor\r
+    temperature which is used as a replacement value for permanent magnet (rotor) temperature in Sta\r
+   te 3 */;\r
+   uint32 ClckCntRslt /* Description: Internal Clock ticks  */;\r
+   float32 TiDurn_PostRotTempIniFlt /* Description: Time duration after faults occur (FID_ErrNvm or \r
+   FID_ErrPrkgTi or FID_ErrHvOff )  */;\r
+   boolean SelWndgAmbTempSts /* Description: A status Bit which is enabled if the coolant inlet temp\r
+   erature is used as ambient f\xc3\xbcr stator winding  */;\r
+   boolean SelAmbTempSts /* Description: A status Bit which is enabled if the stator winding sensor \r
+   value overshoots maximum allowed (PM )rotor temperature */;\r
+   float32 PmTempReplcmtVal_DftSt /* Description: Replacement temperature value "PmTempRplcVal" used\r
+    as PM Temperature ouput when the function is executing in default state */;\r
+   float32 PmTempReplcmtVal /* Description: Replacement temperature value "PmTempRplcVal" used as PM\r
+    Temperature ouput when the function execution state = 1 \r
+( when faults are active or thermal network disabled or signals not available to calculate initial P\r
+   M temperature) */;\r
+   float32 IniWindgTempEfunc /* Description: Estimated initial value of stator winding temperature w\r
+   hen the vehicle is switched On (either exponential function output or stator winding sensor value\r
+   ) */;\r
+   float32 IniPmTemp /* Description: Estimated initial value of PM temperature when the vehicle is s\r
+   witched On (either exponential function output or stator winding sensor value) */;\r
+   uint8 PmTempCalcnState /* Description: State 1 or State 3: Use replacement value instead of estim\r
+   ated temperature value of Permanent magnet.\r
+State 2: Use the estimated value of Permanent magnet temperature calculated via Thermal Network. */;\r
+   boolean PmTempSatFlg /* Description: A status Bit which is enabled if the Pm temperature overshoo\r
+   ts maximum or minimum allowed (PM )rotor temperature */;\r
+   float32 PmTempEstLimn /* Description: Saturated  value of PM temperature in State 2 */;\r
+   boolean StatortWindgEndTempSatFlg /* Description: A status Bit which is enabled if the stator win\r
+   ding-end temperature overshoots maximum or minimum allowed  threshold value */;\r
+   float32 StatortWindgEndTempEstLimn /* Description: Saturated  value of Stator winding end tempera\r
+   ture in State 2 */;\r
+   boolean StatorWindgTempSatFlg /* Description: A status Bit which is enabled if the stator winding\r
+    temperature overshoots maximum or minimum allowed threshold value */;\r
+   float32 StattorWindgTempEstLimn /* Description: Saturated  value of Stator winding temperature in\r
+    State 2 */;\r
+   boolean TimeOut_NvmDataValidityFlag /* Description: Validity flag for stored temperature in NVM a\r
+   nd CAN timeout value */;\r
+   float32 TempWindgSnsrAvgVal /* Description: Average value of stator winding temperature sensors */\r
+   ;\r
+   uint32 IdActFlt_k /* Description: Index of Prelook-up function of IdActFlt */;\r
+   float32 IdActFlt_f /* Description: Fraction of Prelook-up function of IdActFlt */;\r
+   uint32 IqActFlt_k /* Description: Index of Prelook-up function of IqActFlt */;\r
+   float32 IqActFlt_f /* Description: Fraction of Prelook-up function of IqActFlt */;\r
+   uint32 PwmFrqAct_k /* Description: Index of Prelook-up function of PwmFrqAct */;\r
+   float32 PwmFrqAct_f /* Description: Fraction of Prelook-up function of PwmFrqAct */;\r
+   float32 MotorIronLoss /* Description: Total Losses generated in the machine */;\r
+   float32 IntgNodeTempRotor /* Description: Thermal network rotor node temperature */;\r
+   float32 IntgNodeTempStatorWindg /* Description: Thermal network stator winding node temperature */\r
+   ;\r
+   float32 IntgNodeTempStatorWindgEnd /* Description: Thermal network stator winding end node temper\r
+   ature */;\r
+   float32 ResFeLossRotDistbnFac /* Description: distribution factor of rotor iron loss to overall m\r
+   otor iron loss depending on rotor speed */;\r
+}; /* struct type created for variable: PmTempCalcnThermNet_MeasSig */\r
+struct tag_SIBFS_PmTempCalcnStateChart_PmTempCalc_tp {\r
+   unsigned int CPmTempCalc2_I__ReplcmtValState : 1;\r
+   unsigned int CPmTempCalc3_D__l_PmTempTNCalcn : 1;\r
+   unsigned int CPmTempCalc4_W__Flt_InOperation : 1;\r
+}; /* Type of structure containing bitfields for Stateflow chart  */\r
+/*----------------------------------------------------------------------------*\\\r
+  ENUMS\r
+\\*----------------------------------------------------------------------------*/\r
+/*----------------------------------------------------------------------------*\\\r
+  VARIABLES\r
+\\*----------------------------------------------------------------------------*/\r
+\r
+#define PMTEMPCALCNTHERMNET_START_SEC_VAR_CLEARED_32\r
+#include "MemMap.h"\r
+/******************************************************************************\\\r
+   UserSLGlobal: SLGlobal = { MEMMAP_GLOBAL_CLEARED_32_EXCLFROMA2L } | Width: 32\r
+\\******************************************************************************/\r
+extern float32 SPmTempCalc17_TimeOff_Switch1;\r
+extern float32 SPmTempCalc6_S__atBlck_WndgSnsr;\r
+\r
+/******************************************************************************\\\r
+   UserSLGlobal: SLGlobal = { MEMMAP_GLOBAL_CLEARED_32_EXCLFROMA2L } | Width: 8\r
+\\******************************************************************************/\r
+extern boolean SPmTempCalc17_TimeOff_Switch1_a /* LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 1 */;\r
+#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_CLEARED_32\r
+#include "MemMap.h"\r
+#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32\r
+#include "MemMap.h"\r
+\r
+/******************************************************************************\\\r
+   MEMMAP_DISP_INIT_32: global observable variables (RAM) | Width: 32\r
+\\******************************************************************************/\r
+extern uint32 PmTempCalcnThermNet_AlvCntr /* \r
+   Unit       : -\r
+   Description: AliveCounter\r
+   LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 4294967295 */;\r
+\r
+/******************************************************************************\\\r
+   MEMMAP_DISP_INIT_32: global observable variables (RAM) | Width: N.A.\r
+\\******************************************************************************/\r
+extern struct tag_PmTempCalcnThermNet_MeasSig PmTempCalcnThermNet_MeasSig /* Description: dummy stru\r
+   cture */;\r
+#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32\r
+#include "MemMap.h"\r
+#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32\r
+#include "MemMap.h"\r
+\r
+/******************************************************************************\\\r
+   UserSFGlobalInit: SFGlobalInit = { MEMMAP_GLOBAL_INIT_32_EXCLFROMA2L } | Width: 8\r
+\\******************************************************************************/\r
+extern boolean CPmTempCalc1_PmTempThermNetVld /* LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 1 */;\r
+\r
+/******************************************************************************\\\r
+   UserSFGlobalInit: SFGlobalInit = { MEMMAP_GLOBAL_INIT_32_EXCLFROMA2L } | Width: N.A.\r
+\\******************************************************************************/\r
+extern struct tag_SIBFS_PmTempCalcnStateChart_PmTempCalc_tp SIBFS_PmTempCa__hart_PmTempCalc /* Descr\r
+   iption: Structure containing bitfields for Stateflow chart  */;\r
+#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32\r
+#include "MemMap.h"\r
+#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32\r
+#include "MemMap.h"\r
+\r
+/******************************************************************************\\\r
+   UserSLGlobalInit: SLGlobalInit = { MEMMAP_GLOBAL_INIT_32_EXCLFROMA2L } | Width: 32\r
+\\******************************************************************************/\r
+extern float32 SPmTempCalc22_SelMax;\r
+extern float32 SPmTempCalc30___IniValCalcnMod1;\r
+extern uint32 X_SPmTempCalc1__IncrmntClckCntr /* LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 10000000 */;\r
+extern uint32 X_SPmTempCalc2_AliveCount /* \r
+   Unit       : -\r
+   LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 4294967295 */;\r
+extern float32 X_SPmTempCalc51_RotorIntDelay;\r
+extern float32 X_SPmTempCalc55_dlyIntWiko;\r
+extern float32 X_SPmTempCalc5___WindingEndTemp;\r
+\r
+/******************************************************************************\\\r
+   UserSLGlobalInit: SLGlobalInit = { MEMMAP_GLOBAL_INIT_32_EXCLFROMA2L } | Width: 8\r
+\\******************************************************************************/\r
+extern boolean SPmTempCalc12_RSWE;\r
+extern uint8 SPmTempCalc1_S__Case_LastSystem;\r
+extern boolean X_SPmTempCalc1__ay_ResetIntClck;\r
+extern boolean X_SPmTempCalc1__lay_TrigIntClck;\r
+#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32\r
+#include "MemMap.h"\r
+\r
+/*----------------------------------------------------------------------------*\\\r
+  PARAMETERIZED MACROS\r
+\\*----------------------------------------------------------------------------*/\r
+/*----------------------------------------------------------------------------*\\\r
+  FUNCTION PROTOTYPES\r
+\\*----------------------------------------------------------------------------*/\r
+/******************************************************************************\\\r
+   MEMMAP_GLOBAL_FCN: global function(s) (exported to other modules)\r
+\\******************************************************************************/\r
+#define PMTEMPCALCNTHERMNET_START_SEC_CODE\r
+#include "MemMap.h"\r
+extern void PmTempCalcnThermNet(void);\r
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CODE\r
+#include "MemMap.h"\r
+\r
+\r
+#endif/*PMTEMPCALCNTHERMNET_H */\r
+/*----------------------------------------------------------------------------*\\\r
+  END OF FILE\r
+\\*----------------------------------------------------------------------------*/\r
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_Data.h b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_Data.h
index 70aa97508..c5dedab4f 100644
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_Data.h
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_Data.h
@@ -1,388 +1,344 @@
-/**************************************************************************************************\\
- *** 
- *** Simulink model       : PmTempCalcnThermNet
- *** TargetLink subsystem : PmTempCalcnThermNet
- *** Codefile             : PmTempCalcnThermNet_Data.h
- ***
- *** Generated by TargetLink, the dSPACE production quality code generator
- *** Generation date: 2021-11-08 12:32:25
- ***
- *** CODE GENERATOR OPTIONS:
- *** Code generation mode                     : Standard
- *** Compiler                                 : <unknown>
- *** Target                                   : Generic
- *** ANSI-C compatible code                   : yes
- *** Code Optimization                        : enabled
- *** Constant style                           : decimal
- *** Clean code option                        : enabled
- *** Logging mode                             : Do not log anything
- *** Code Coverage                            : disabled
- *** Generate empty conditional branches      : disabled
- *** Efficient vector handling                : enabled
- *** Loop unroll threshold                    : 5
- *** Variable vector widths                   : enabled
- *** Shift mode                               : automatic
- *** Handle unscaled SF expr. with TL type    : enabled
- *** No assignment of boolean expressions     : disabled
- *** Scope reduction only to function level   : disabled
- *** Exploit ranges if not erasable           : disabled
- *** Exploit Compute Through Overflow         : optimized
- *** Linker sections                          : enabled
- *** Enable Assembler                         : disabled
- *** Variable name length                     : 31 chars
- *** Use global bitfields                     : disabled
- *** Stateflow: use of bitfields              : enabled
- *** State activity encoding limit            : 5
- *** Omit zero inits in restart function      : disabled
- *** Share functions between TL subsystems    : disabled
- *** Generate 64bit functions                 : disabled
- *** Inlining Threshold                       : 6
- *** Line break limit                         : 100
- *** Target optimized boolean data type       : enabled
- *** Keep saturation elements                 : disabled
- *** Extended variable sharing                : enabled
- *** Extended lifetime optimization           : enabled
- *** Style definition file                    : D:\\Git\\100kw\\ec_models_pub\\lib\\targetlink\\StyleSheet
- ***                                            s\\config\\cconfig.xml
- *** Root style sheet                         : D:\\Git\\100kw\\ec_models_pub\\lib\\targetlink\\StyleSheet
- ***                                            s\\StyleSheets_DPR\\TL_CSourceCodeSS_MISRA_config.xsl
- ***
- *** TargetLink version      : 3.5p2 from 14-Aug-2014
- *** Code generator version  : Build Id 3.5.0.28 from 2014-08-20 16:45:15
- *** Copyright (C) Siemens AG 2015 (All Rights Reserved. Confidential)
-\\**************************************************************************************************/
-
-/*----------------------------------------------------------------------------*\\
- Supression of QAC MISRA findings for automatic generated Code by TargetLink 
- Documentation: W:ec 
-\\*----------------------------------------------------------------------------*/
-/* PRQA S 160,161,162,163,164,165,166,167,168,169 EOF*/
-/* PRQA S 170,171,172,173,174,175,176,177,178,179 EOF*/
-/* PRQA S 184,185,186,190,191,192,193,194,195,196 EOF*/
-/* PRQA S 197,198,199,200,201,203,204,206,207,208 EOF*/
-/* PRQA S 232,233,235,240,241,244,246,268,275,301 EOF*/
-/* PRQA S 302,304,307,309,310,311,312,321,322,327 EOF*/
-/* PRQA S 337,338,341,342,400,401,402,403,404,405 EOF*/
-/* PRQA S 422,423,426,427,429,430,431,432,435,436 EOF*/
-/* PRQA S 437,446,447,448,449,450,451,452,453,454 EOF*/
-/* PRQA S 456,457,458,460,461,462,463,466,467,468 EOF*/
-/* PRQA S 469,475,476,477,478,481,482,483,484,485 EOF*/
-/* PRQA S 486,487,488,493,494,495,496,513,514,515 EOF*/
-/* PRQA S 536,537,540,541,542,543,544,545,546,547 EOF*/
-/* PRQA S 550,551,554,555,556,557,558,559,560,561 EOF*/
-/* PRQA S 562,563,564,565,570,572,580,588,589,590 EOF*/
-/* PRQA S 591,594,601,602,603,605,616,619,620,621 EOF*/
-/* PRQA S 622,623,625,626,627,628,629,630,631,632 EOF*/
-/* PRQA S 633,634,635,636,638,640,641,642,643,644 EOF*/
-/* PRQA S 645,646,649,650,651,653,654,655,656,657 EOF*/
-/* PRQA S 658,659,660,661,662,664,665,667,668,669 EOF*/
-/* PRQA S 671,672,673,674,675,676,677,678,680,682 EOF*/
-/* PRQA S 683,684,685,690,698,699,706,708,709,736 EOF*/
-/* PRQA S 737,738,745,746,747,750,755,756,757,758 EOF*/
-/* PRQA S 759,766,767,768,774,775,777,779,784,785 EOF*/
-/* PRQA S 786,787,788,791,795,801,802,803,804,811 EOF*/
-/* PRQA S 812,813,814,817,818,821,830,831,834,835 EOF*/
-/* PRQA S 836,837,840,841,844,845,848,851,852,853 EOF*/
-/* PRQA S 854,864,865,866,867,872,873,874,877,883 EOF*/
-/* PRQA S 885,887,888,899,914,915,940,941,942,943 EOF*/
-/* PRQA S 944,981,1001,1002,1003,1006,1008,1012,1014,1015 EOF*/
-/* PRQA S 1019,1020,1021,1022,1023,1024,1025,1026,1028,1029 EOF*/
-/* PRQA S 1033,1034,1035,1036,1037,1038,1039,1041,1042,1043 EOF*/
-/* PRQA S 1044,1045,1046,1047,1048,1049,1050,1051,1052,1057 EOF*/
-/* PRQA S 1058,1060,1061,1062,1257,1264,1265,1266,1281,1291 EOF*/
-/* PRQA S 1292,1293,1294,1295,1296,1297,1298,1299,1331,1332 EOF*/
-/* PRQA S 1333,1397,1398,1399,1460,1503,1504,1505,1506,1507 EOF*/
-/* PRQA S 1508,1513,1514,1520,1525,1526,1527,1528,1531,1532 EOF*/
-/* PRQA S 1533,1750,1756,1800,1802,1803,1804,1820,1821,1822 EOF*/
-/* PRQA S 1823,1824,1830,1831,1832,1833,1834,1840,1841,1842 EOF*/
-/* PRQA S 1843,1844,1850,1851,1852,1853,1854,1860,1861,1862 EOF*/
-/* PRQA S 1863,1864,1880,1881,1882,1890,1891,1892,1893,1894 EOF*/
-/* PRQA S 1895,2547,2741,2742,2744,2791,2792,2800,2801,2802 EOF*/
-/* PRQA S 2810,2811,2812,2820,2821,2822,2830,2831,2832,2840 EOF*/
-/* PRQA S 2841,2842,2845,2846,2847,2850,2871,2872,2877,2880 EOF*/
-/* PRQA S 2882,2889,2890,2900,2930,2931,2932,2990,2991,2992 EOF*/
-/* PRQA S 2993,2994,2997,2998,3006,3008,3101,3102,3113,3114 EOF*/
-/* PRQA S 3200,3218,3219,3224,3236,3237,3238,3239,3240,3243 EOF*/
-/* PRQA S 3244,3305,3311,3312,3319,3320,3334,3344,3389,3391 EOF*/
-/* PRQA S 3392,3394,3395,3396,3397,3408,3415,3421,3430,3432 EOF*/
-/* PRQA S 3437,3438,3440,3445,3449,3451,3453,3493,3494,3660 EOF*/
-/* PRQA S 3664,3670,3673,3676,4301,4302,4303,4304,4305,4310 EOF*/
-/* PRQA S 4312,4315,4320,4322,4330,4332,4340,4342,4350,4351 EOF*/
-/* PRQA S 4352,4389,4390,4391,4392,4393,4394,4395,4398,4399 EOF*/
-/* PRQA S 4401,4402,4403,4404,4405,4410,4412,4413,4414,4415 EOF*/
-/* PRQA S 4420,4421,4422,4423,4424,4425,4430,4431,4432,4434 EOF*/
-/* PRQA S 4435,4437,4440,4441,4442,4443,4445,4446,4447,4450 EOF*/
-/* PRQA S 4451,4452,4453,4454,4460,4461,4462,4463,4464,4465 EOF*/
-/* PRQA S 4490,4491,4492,4499,4500,4501,4502,4503,4504,4505 EOF*/
-/* PRQA S 4507,4510,4511,4512,4513,4514,4518,4519,4521,4522 EOF*/
-/* PRQA S 4523,4524,4527,4528,4529,4532,4533,4534,4538,4539 EOF*/
-/* PRQA S 4542,4543,4548,4549,4558,4559,4568,4569,4600,4601 EOF*/
-/* PRQA S 4602,4603,4604,4605,4606,4607,4608,4620,4621,5087 EOF*/
-/* PRQA S 5131,5134,5136,5209 EOF*/
-/*----------------------------------------------------------------------------*/
-#ifndef PMTEMPCALCNTHERMNET_DATA_H
-#define PMTEMPCALCNTHERMNET_DATA_H
-
-/*----------------------------------------------------------------------------*\\
-  DEFINES (OPT)
-\\*----------------------------------------------------------------------------*/
-/*----------------------------------------------------------------------------*\\
-  INCLUDES
-\\*----------------------------------------------------------------------------*/
-#include "tl_defines_PmTempCalcnThermNet.h"
-#include "Platform_Types.h"
-/*----------------------------------------------------------------------------*\\
-  DEFINES
-\\*----------------------------------------------------------------------------*/
-/*----------------------------------------------------------------------------*\\
-  TYPEDEFS
-\\*----------------------------------------------------------------------------*/
-
-struct tag_PmTempCalcnThermNet_CalibParam {
-   const float32 RThermRotorAirgap_LuTYaxis[16] /* Description: Thermal resistivity of Rotor */;
-   const float32 SpdActRTherm_LuTXaxis[16] /* Description: Mechanical speed of electric motor used t
-   o calculate thermal resistivity via LuT */;
-   const float32 CooltFlowRateRtherm_LuTXaxis[16] /* Description: Actual coolant flow rate at motor 
-   inlet. */;
-   const float32 RThermRotorCoolt_LuTYaxis[16] /* Description: Look-Up table for thermal resistivity
-    of rotor */;
-   const float32 RThermStatorWindgEnd /* Description: Thermal resistivity of winding end */;
-   const float32 RThermStatorWindg_LuTYaxis[16] /* Description: Look-Up table for thermal resistivit
-   y of winding */;
-   const float32 StatorWindgCpTherm /* Description: Thermal capacitance of winding */;
-   const float32 StatorWindgEndCpTherm /* Description: Thermal capacitance of winding end */;
-   const float32 RotorCpTherm /* Description: Thermal capacitance of Rotor-PM */;
-   const float32 IntgTiSampleRot /* Description: Integrator time constant for Rotor */;
-   const float32 IntgTiSampleWiko /* Description: Integrator time constant for winding end */;
-   const float32 IntgTiSampleWik /* Description: Integrator time constant for winding */;
-   const boolean EnaStaWindg_CuLossEstim /* Description: Enable Bit to activate calculation of coppe
-   r losses */;
-   const float32 CuResist_TempRef /* Description: copper resistance used to calculate copper losses */
-   ;
-   const float32 MotorPhaseNum_StandStill /* Description: Total number of motor phases to be multipl
-   ied during stand still operation */;
-   const float32 MotorPhaseNum_NomOp /* Description: Total number of motor phases to be multiplied d
-   uring normal operation */;
-   const float32 TempCoeff_CuResist /* Description: Temperature coefficient to adapt temperature dep
-   endent copper resistance */;
-   const float32 TempRef_CuResist /* Description: Reference temperature to adapt temperature depende
-   nt copper resistance */;
-   const boolean EnaStandStillOp /* Description: Enable Bit to activate calculation of copper losses
-    at standstill operation */;
-   const float32 MotSpdThd /* Description: Threshold value of speed at which stand still operation w
-   ill be switched on */;
-   const float32 CuWikoFac /* Description: Factor to divide the copper losses in stator winding and 
-   in winding-end */;
-   const float32 PlossIdFlatTop_map[16][4] /* Description: Losses generated in rotor due to d Curren
-   t when Flat top modulation is active (Frq dependent) */;
-   const float32 PlossIqFlatTop_map[16][4] /* Description: Losses generated in rotor due to q Curren
-   t when Flat top modulation is active (Frq dependent) */;
-   const float32 IdMin[1] /* Description: Minimal value of Id (direct axis) current for all LuTs */;
-   const float32 IdIvsStep[1] /* Description: Inverse of equidistant steps between two Id current ve
-   ctor elements */;
-   const uint8 IdMaxIdx[1] /* Description: Maximal index of Id current vector (dimension-1) */;
-   const float32 IqMin[1] /* Description: Minimal value of Iq (direct axis) current for all LuTs */;
-   const float32 IqIvsStep[1] /* Description: Inverse of equidistant steps between two Iq current ve
-   ctor elements */;
-   const uint8 IqMaxIdx[1] /* Description: Maximal index of Iq current vector (dimension-1) */;
-   const float32 PlossIdSpcVec_map[16][4] /* Description: Losses generated in rotor due to d Current
-    when space vector modulation is active (Frq dependent) */;
-   const float32 PlossIqSpcVec_map[16][4] /* Description: Losses generated in rotor due to q Current
-    when space vector modulation is active (Frq dependent) */;
-   const float32 PwmFreqActMin[1] /* Description: Minimal value of PWM frequency for all LuTs */;
-   const float32 PwmFreqActIvsStep[1] /* Description: Inverse of equidistant steps between two PWM f
-   requency vector elements */;
-   const uint8 PwmFreqActMaxIdx[1] /* Description: Maximal index of PWM frequency vector (dimension-
-   1) */;
-   const float32 PlossFric_LuTYaxis[16] /* Description: Losses generated in rotor due to Friction */
-    ;
-   const float32 SpdActFric_LuTXaxis[16] /* Description: Actual mechanical speed of PM synchronous m
-   otor used to set up Friction losses LuT */;
-   const float32 PlossNac_LuTYaxis[16] /* Description: Current losses generated in rotor due to roto
-   r speed */;
-   const float32 SpdActNac_LuTXaxis[16] /* Description: Actual mechanical speed of PM synchronous mo
-   tor used to set up Rotor losses dependent on AC currents */;
-   const boolean DiHwFltCheckStMachn /* Description: Disable Bit to deactivate Fault check of windin
-   g temperature sensor (NTC\'s) */;
-   const boolean EnaTempWndgRplcmntVal /* Description: Enable Bit to activate replacement value of w
-   inding temperature (NTC\'s) */;
-   const float32 TwoValAvgFacInvs /* Description: Factor to calculate average of winding temperature
-    (0.5: two sensors ) */;
-   const float32 ThreeValAvgFacInvs /* Description: Factor to calculate average of winding temperatu
-   re (0.5: two sensors, 0.3333: for 3 sensors)  */;
-   const boolean EnaAvgWindTempCalc /* Description: Enable Bit to activate calculation of average wi
-   nding temperature using 2 winding sensors  */;
-   const boolean EnaCoolInp2TempCalc /* Description: Enable Bit to activate calculation of coolant t
-   emperature at rotor outlet */;
-   const float32 CoolFlowRate_LuTXaxis[16] /* Description: Estimated flowrate at Inverter coolant ou
-   tlet (served as input to electric motor coolant inlet) */;
-   const float32 CooltTemp2_CoolTemp1Fac_LuTYaxis[16] /* Description: Factor to calculate Air gap te
-   mperature (dependency can be made on coolant flow rate if required) */;
-   const float32 CooltTemp2_PmTempFac_LuTYaxis[16] /* Description: Factor to calculate Air gap tempe
-   rature (dependency can be made on coolant flow rate if required) */;
-   const float32 IniPmTempRplcVal /* Description: calibratable value for initial PM temperature */;
-   const uint8 IniValCalcnMod /* Description: Mode to select Initial value for PM temperature. 
-Default: Calib param \'IniPmTempRplcVal\'
-1: Measured winding temperature  \'TempWindgSnsr_PmTempLimn\'
-2: Initial value calculated via \'IniPMTemp\' algorithm 
-3: Calib param \'IniPmTempRplcVal\' */;
-   const boolean EnaHvOffTime /* Description: Enable Bit to select the use HV Off time or Vehicle Of
-   f time in exponential function initial value calc. Algorithm (0: Disabled 1: Enabled ) */;
-   const boolean DiSelAmbTempWindg /* Description: Disable Bit to deactivate the selection of ambien
-   t temperature (stator winding or airgap) used for initial value calc. (1: Disabled 0: Enabled ) */
-   ;
-   const boolean DiSelAmbTempPm /* Description: Disable Bit to deactivate the selection of ambient t
-   emperature (stator winding or airgap) used for initial value calc. (1: Disabled 0: Enabled ) */;
-   const float32 CoolDownTimeConstPm /* Description: Constant Factor to decide if initial value calc
-   . algorithm shall be triggered for Rotor */;
-   const float32 CoolDownTimeWindg /* Description: Cooling time constant for winding end thermal nod
-   e. */;
-   const float32 CompareTimeConstFacWindg /* Description: Cooling time constant for winding end ther
-   mal node. */;
-   const float32 CompareTimeConstFacWindgAmb /* Description: Constant Factor to decide which tempera
-   ture shall be used as ambient temperature for initial value calc. Algorithm. */;
-   const float32 CompareTimeConstFacPmAmb /* Description: Constant Factor to decide which temperatur
-   e shall be used as ambient temperature for initial value calc. Algorithm. */;
-   const float32 CompareTimeConstFacPm /* Description: Constant Factor to decide if initial value ca
-   lc. algorithm shall be triggered. */;
-   const float32 IniWindgTempRplcVal /* Description: calibratable value for initial PM temperature */
-   ;
-   const uint8 WindgIniValCalcnMod /* Description: Mode to select Init value for Winding End temp. 
-Default: Calibparam \'IniWndgEndTempRplcVal\'
-1: Average winding temp or Maximum of available NTC\'s
-2: Initial Value algorithm exp func
-3: Calib param \'IniWndgEndTempRplcVal\' */;
-   const float32 RotTimeConstFac_RotTempIniFlt /* Description: A time factor which is a multiple of 
-   Thermal time constant of Permanent Magnet (Rotor) */;
-   const float32 FuncTiSlc /* Description: time slice in which the function PmTempCalcnThermNetVw is
-    called */;
-   const boolean DiIntClkCntr /* Description: Disable Bit to deactivate the  internal clock which is
-    used to calculate time duration after RotTempFlt occurs (1: Disabled 0: Enabled ) */;
-   const uint32 ClckCntStep /* Description: Step size which represents the incremental counter of in
-   ternal clock */;
-   const uint32 ClckCntMax /* Description: Maximum counter size after which the internal clock reset
-   s to Zero */;
-   const boolean DiThermNetCalcn /* Description: Deactivate PM temperature calculation. Thermal Netw
-   ork will switch to replacement value \'State1\'. */;
-   const float32 PmTempRplcVal /* Description: Replacement value of temperature used either for init
-   ialisation of Thermal Network or as PM Temperature ouput value  */;
-   const float32 StaWindgSnsrReplcmtVal /* Description: Replacement value of stator temperature when
-    all NTC sensor deliver faluty inputs. */;
-   const boolean DiThermNetCalcn_UseTempWindgSnsr /* Description: Bit to select the replacement valu
-   e for PM temperature. 
-(1: Winding sensor temperature; 0: Calibratable value  \'PmTempRplcVal\' ) */;
-   const float32 TempWindgSnsr_PmTempMax /* Description: Maximum Threshold value for limiting the me
-   asured winding temperature, where measured winding temp. is used as a replacement value for follo
-   wing: 
-1) Output PM temperature in State 1
-2) Initial PM temperature in State 2 */;
-   const boolean DiSimnPmTemp /* Description: Disable Simulation Mode (Test Purpose Only) of Thermal
-    Network via Calibration parameter (1: Disabled 0: Enabled ) */;
-   const boolean SimnPmTemp_FID_IniHvOff /* Description: Test Purpose Only: Initialisation Bit which
-    denotes availability of HV Offtime Signal (1: Not Available; 0: Signal Available) */;
-   const boolean SimnPmTemp_FID_IniPrkgTi /* Description: Test Purpose Only: Initialisation Bit whic
-   h denotes availability of Vehicle Offtime Signal (1: Not Available; 0: Signal Available) */;
-   const boolean SimnPmTemp_FID_IniNvm /* Description: Test Purpose Only: Initialisation Bit which d
-   enotes availability of variables stored in NVM (1: Not Available; 0: Signal Available) */;
-   const boolean SimnPmTemp_HwFlt_WindgSnsr1 /* Description: Test Purpose Only: Fault Bit which deno
-   tes if measured tempeture using winding sensor 1 is a faulty signal (0: No Fault ; 1: Fault Signa
-   l ) */;
-   const boolean SimnPmTemp_HwFlt_WindgSnsr2 /* Description: Test Purpose Only: Fault Bit which deno
-   tes if measured tempeture using winding sensor 2 is a faulty signal (0: No Fault ; 1: Fault Signa
-   l ) */;
-   const boolean SimnPmTemp_HwFlt_WindgSnsr3 /* Description: Test Purpose Only: Fault Bit which deno
-   tes if measured tempeture using winding sensor 3 is a faulty signal (0: No Fault ; 1: Fault Signa
-   l ) */;
-   const boolean SimnPmTemp_FID_ErrHvOff /* Description: Test Purpose Only: Validity Bit which denot
-   es validity of HV Offtime Signal (1: Not Valid 0: Signal Valid ) */;
-   const boolean SimnPmTemp_FID_ErrPrkgTi /* Description: Test Purpose Only: Validity Bit which deno
-   tes validity of Vehicle Offtime Signal (1: Not Valid 0: Signal Valid ) */;
-   const boolean SimnPmTemp_FID_ErrNvm /* Description: Test Purpose Only: Validity Bit which denotes
-    validity of variables stored NVM (1: Not Valid 0: Signal Valid ) */;
-   const float32 SimnPmTemp_NVM_Temp1 /* Description: Test Purpose Only: Temperature saved in NVM me
-   mory block 1 at the time of vehicle switch-off (during last operating cycle) */;
-   const float32 SimnPmTemp_NVM_Temp2 /* Description: Test Purpose Only:Temperature saved in NVM mem
-   ory block 2 at the time of vehicle switch-off (during last operating cycle) */;
-   const float32 SimnPmTemp_NVM_Temp3 /* Description: Test Purpose Only: Temperature saved in NVM me
-   mory block 3 at the time of vehicle switch-off (during last operating cycle) */;
-   const float32 SimnPmTemp_CAN_VehPrkgTi /* Description: Test Purpose Only: Time during which the v
-   ehicle stays switched off, If is in minutes set \'\' */;
-   const float32 SimnPmTemp_CAN_HvOffTi /* Description: Test Purpose Only: Time during which the HV 
-   connection is switched off */;
-   const float32 ConvTimeOff_Secs /* Description: conversion parameter to convert Off time from minu
-   tes to secs. (Set value = 60: CAN_VehPrkgTi / CAN_HvOffTi is in minutes; 1: CAN_VehPrkgTi / CAN_H
-   vOffTi is in seconds ) */;
-   const float32 GearRatioInvs /* Description: Conversion ratio to convert speed from rpm to kmph: "
-   InvsGearRatio*2*Pi*WheelRadius*1e-6*60" */;
-   const float32 VehMovmnt_MinSpdThd /* Description: minimum speed in kmph to check if vehicle is mo
-   ving, only in this case the RotTempFlt will be disabled once internal clock overshoot the Rotor t
-   ime constant threshold  */;
-   const boolean EnaVehSpdChck /* Description: Enable bit to activate vehicle speed check used in Ro
-   tor temperature fault. */;
-   const boolean DiSimnPmTemp_HwFlt /* Description: Disable winding sensor HW fault Simulation Mode 
-   (Test Purpose Only) of Thermal Network via Calibration parameter (1: Disabled 0: Enabled ) */;
-   const float32 StatorWindgTempMaxVal /* Description: Maximum Threshold value for limiting the meas
-   ured winding temperature, where measured winding temp. is used as a replacement value for followi
-   ng: 
-1) Output PM temperature in State 1
-2) Initial PM temperature in State 2 */;
-   const float32 StatorWindgTempMinVal /* Description: Maximum Threshold value for limiting the meas
-   ured winding temperature, where measured winding temp. is used as a replacement value for followi
-   ng: 
-1) Output PM temperature in State 1
-2) Initial PM temperature in State 2 */;
-   const float32 StatorWindgEndTempMaxVal /* Description: Maximum Threshold value for limiting the m
-   easured winding temperature, where measured winding temp. is used as a replacement value for foll
-   owing: 
-1) Output PM temperature in State 1
-2) Initial PM temperature in State 2 */;
-   const float32 StatorWindgEndTempMinVal /* Description: Maximum Threshold value for limiting the m
-   easured winding temperature, where measured winding temp. is used as a replacement value for foll
-   owing: 
-1) Output PM temperature in State 1
-2) Initial PM temperature in State 2 */;
-   const float32 PmTempMaxVal /* Description: Maximum Threshold value for limiting the measured wind
-   ing temperature, where measured winding temp. is used as a replacement value for following: 
-1) Output PM temperature in State 1
-2) Initial PM temperature in State 2 */;
-   const float32 PmTempMinVal /* Description: Maximum Threshold value for limiting the measured wind
-   ing temperature, where measured winding temp. is used as a replacement value for following: 
-1) Output PM temperature in State 1
-2) Initial PM temperature in State 2 */;
-   const boolean UseSnsrValAsWindgEndTemp /* Description: Use Winding NTC sensor value as Winding-en
-   d node temperature of thermal network */;
-   const float32 FeLossSpdAct_LUTXaxis[16] /* Description: Mechanical rotor speed array which is use
-   d as x-axis breakpoints of LUT for calculation of rotor iron loss distribution factor */;
-   const float32 FeLossRotDistbnFac_LuTYaxis[16] /* Description: LUT values of rotor iron loss distr
-   ibution factor depending on rotor speed */;
-   const float32 CuResistSpdCoeff2 /* Description: The coefficient which is used to adapt AC copper 
-   resistance to actual rotor speed */;
-}; /* struct type created for variable: PmTempCalcnThermNet_CalibParam */
-/*----------------------------------------------------------------------------*\\
-  ENUMS
-\\*----------------------------------------------------------------------------*/
-/*----------------------------------------------------------------------------*\\
-  VARIABLES
-\\*----------------------------------------------------------------------------*/
-
-#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_32
-#include "MemMap.h"
-/******************************************************************************\\
-   MemMap_CAL_NON_VOL_32: global calibratable parameters (ROM) | Width: N.A.
-\\******************************************************************************/
-extern MemMap_CAL_NON_VOL_32 struct tag_PmTempCalcnThermNet_CalibParam
-    PmTempCalcnThermNet_CalibParam /* Description: dummy structure */;
-#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32
-#include "MemMap.h"
-
-/*----------------------------------------------------------------------------*\\
-  PARAMETERIZED MACROS
-\\*----------------------------------------------------------------------------*/
-/*----------------------------------------------------------------------------*\\
-  FUNCTION PROTOTYPES
-\\*----------------------------------------------------------------------------*/
-
-#endif/*PMTEMPCALCNTHERMNET_DATA_H */
-/*----------------------------------------------------------------------------*\\
-  END OF FILE
-\\*----------------------------------------------------------------------------*/
+/**************************************************************************************************\\\r
+ *** \r
+ *** Simulink model       : PmTempCalcnThermNet\r
+ *** TargetLink subsystem : PmTempCalcnThermNet\r
+ *** Codefile             : PmTempCalcnThermNet_Data.h\r
+ ***\r
+ *** Generated by TargetLink, the dSPACE production quality code generator\r
+ *** Generation date: 2022-03-31 16:11:59\r
+ ***\r
+ *** CODE GENERATOR OPTIONS:\r
+ *** Code generation mode                     : Standard\r
+ *** Compiler                                 : <unknown>\r
+ *** Target                                   : Generic\r
+ *** ANSI-C compatible code                   : yes\r
+ *** Code Optimization                        : enabled\r
+ *** Constant style                           : decimal\r
+ *** Clean code option                        : enabled\r
+ *** Logging mode                             : Do not log anything\r
+ *** Code Coverage                            : disabled\r
+ *** Generate empty conditional branches      : disabled\r
+ *** Efficient vector handling                : enabled\r
+ *** Loop unroll threshold                    : 5\r
+ *** Variable vector widths                   : enabled\r
+ *** Shift mode                               : automatic\r
+ *** Handle unscaled SF expr. with TL type    : enabled\r
+ *** No assignment of boolean expressions     : disabled\r
+ *** Scope reduction only to function level   : disabled\r
+ *** Exploit ranges if not erasable           : disabled\r
+ *** Exploit Compute Through Overflow         : optimized\r
+ *** Linker sections                          : enabled\r
+ *** Enable Assembler                         : disabled\r
+ *** Variable name length                     : 31 chars\r
+ *** Use global bitfields                     : disabled\r
+ *** Stateflow: use of bitfields              : enabled\r
+ *** State activity encoding limit            : 5\r
+ *** Omit zero inits in restart function      : disabled\r
+ *** Share functions between TL subsystems    : disabled\r
+ *** Generate 64bit functions                 : disabled\r
+ *** Inlining Threshold                       : 6\r
+ *** Line break limit                         : 100\r
+ *** Target optimized boolean data type       : enabled\r
+ *** Keep saturation elements                 : disabled\r
+ *** Extended variable sharing                : enabled\r
+ *** Extended lifetime optimization           : enabled\r
+ *** Style definition file                    : D:\\ai\\ec_models_pub\\lib\\targetlink\\StyleSheets\\confi\r
+ ***                                            g\\cconfig.xml\r
+ *** Root style sheet                         : D:\\ai\\ec_models_pub\\lib\\targetlink\\StyleSheets\\Style\r
+ ***                                            Sheets_DPR\\TL_CSourceCodeSS_MISRA_config.xsl\r
+ ***\r
+ *** TargetLink version      : 3.5 from 30-Oct-2013\r
+ *** Code generator version  : Build Id 3.5.0.22 from 2013-10-07 16:59:57\r
+ *** Copyright (C) Siemens AG 2015 (All Rights Reserved. Confidential)\r
+\\**************************************************************************************************/\r
+\r
+/*----------------------------------------------------------------------------*\\\r
+ Supression of QAC MISRA findings for automatic generated Code by TargetLink \r
+ Documentation: W:ec \r
+\\*----------------------------------------------------------------------------*/\r
+/* PRQA S 160,161,162,163,164,165,166,167,168,169 EOF*/\r
+/* PRQA S 170,171,172,173,174,175,176,177,178,179 EOF*/\r
+/* PRQA S 184,185,186,190,191,192,193,194,195,196 EOF*/\r
+/* PRQA S 197,198,199,200,201,203,204,206,207,208 EOF*/\r
+/* PRQA S 232,233,235,240,241,244,246,268,275,301 EOF*/\r
+/* PRQA S 302,304,307,309,310,311,312,321,322,327 EOF*/\r
+/* PRQA S 337,338,341,342,400,401,402,403,404,405 EOF*/\r
+/* PRQA S 422,423,426,427,429,430,431,432,435,436 EOF*/\r
+/* PRQA S 437,446,447,448,449,450,451,452,453,454 EOF*/\r
+/* PRQA S 456,457,458,460,461,462,463,466,467,468 EOF*/\r
+/* PRQA S 469,475,476,477,478,481,482,483,484,485 EOF*/\r
+/* PRQA S 486,487,488,493,494,495,496,513,514,515 EOF*/\r
+/* PRQA S 536,537,540,541,542,543,544,545,546,547 EOF*/\r
+/* PRQA S 550,551,554,555,556,557,558,559,560,561 EOF*/\r
+/* PRQA S 562,563,564,565,570,572,580,588,589,590 EOF*/\r
+/* PRQA S 591,594,601,602,603,605,616,619,620,621 EOF*/\r
+/* PRQA S 622,623,625,626,627,628,629,630,631,632 EOF*/\r
+/* PRQA S 633,634,635,636,638,640,641,642,643,644 EOF*/\r
+/* PRQA S 645,646,649,650,651,653,654,655,656,657 EOF*/\r
+/* PRQA S 658,659,660,661,662,664,665,667,668,669 EOF*/\r
+/* PRQA S 671,672,673,674,675,676,677,678,680,682 EOF*/\r
+/* PRQA S 683,684,685,690,698,699,706,708,709,736 EOF*/\r
+/* PRQA S 737,738,745,746,747,750,755,756,757,758 EOF*/\r
+/* PRQA S 759,766,767,768,774,775,777,779,784,785 EOF*/\r
+/* PRQA S 786,787,788,791,795,801,802,803,804,811 EOF*/\r
+/* PRQA S 812,813,814,817,818,821,830,831,834,835 EOF*/\r
+/* PRQA S 836,837,840,841,844,845,848,851,852,853 EOF*/\r
+/* PRQA S 854,864,865,866,867,872,873,874,877,883 EOF*/\r
+/* PRQA S 885,887,888,899,914,915,940,941,942,943 EOF*/\r
+/* PRQA S 944,981,1001,1002,1003,1006,1008,1012,1014,1015 EOF*/\r
+/* PRQA S 1019,1020,1021,1022,1023,1024,1025,1026,1028,1029 EOF*/\r
+/* PRQA S 1033,1034,1035,1036,1037,1038,1039,1041,1042,1043 EOF*/\r
+/* PRQA S 1044,1045,1046,1047,1048,1049,1050,1051,1052,1057 EOF*/\r
+/* PRQA S 1058,1060,1061,1062,1257,1264,1265,1266,1281,1291 EOF*/\r
+/* PRQA S 1292,1293,1294,1295,1296,1297,1298,1299,1331,1332 EOF*/\r
+/* PRQA S 1333,1397,1398,1399,1460,1503,1504,1505,1506,1507 EOF*/\r
+/* PRQA S 1508,1513,1514,1520,1525,1526,1527,1528,1531,1532 EOF*/\r
+/* PRQA S 1533,1750,1756,1800,1802,1803,1804,1820,1821,1822 EOF*/\r
+/* PRQA S 1823,1824,1830,1831,1832,1833,1834,1840,1841,1842 EOF*/\r
+/* PRQA S 1843,1844,1850,1851,1852,1853,1854,1860,1861,1862 EOF*/\r
+/* PRQA S 1863,1864,1880,1881,1882,1890,1891,1892,1893,1894 EOF*/\r
+/* PRQA S 1895,2547,2741,2742,2744,2791,2792,2800,2801,2802 EOF*/\r
+/* PRQA S 2810,2811,2812,2820,2821,2822,2830,2831,2832,2840 EOF*/\r
+/* PRQA S 2841,2842,2845,2846,2847,2850,2871,2872,2877,2880 EOF*/\r
+/* PRQA S 2882,2889,2890,2900,2930,2931,2932,2990,2991,2992 EOF*/\r
+/* PRQA S 2993,2994,2997,2998,3006,3008,3101,3102,3113,3114 EOF*/\r
+/* PRQA S 3200,3218,3219,3224,3236,3237,3238,3239,3240,3243 EOF*/\r
+/* PRQA S 3244,3305,3311,3312,3319,3320,3334,3344,3389,3391 EOF*/\r
+/* PRQA S 3392,3394,3395,3396,3397,3408,3415,3421,3430,3432 EOF*/\r
+/* PRQA S 3437,3438,3440,3445,3449,3451,3453,3493,3494,3660 EOF*/\r
+/* PRQA S 3664,3670,3673,3676,4301,4302,4303,4304,4305,4310 EOF*/\r
+/* PRQA S 4312,4315,4320,4322,4330,4332,4340,4342,4350,4351 EOF*/\r
+/* PRQA S 4352,4389,4390,4391,4392,4393,4394,4395,4398,4399 EOF*/\r
+/* PRQA S 4401,4402,4403,4404,4405,4410,4412,4413,4414,4415 EOF*/\r
+/* PRQA S 4420,4421,4422,4423,4424,4425,4430,4431,4432,4434 EOF*/\r
+/* PRQA S 4435,4437,4440,4441,4442,4443,4445,4446,4447,4450 EOF*/\r
+/* PRQA S 4451,4452,4453,4454,4460,4461,4462,4463,4464,4465 EOF*/\r
+/* PRQA S 4490,4491,4492,4499,4500,4501,4502,4503,4504,4505 EOF*/\r
+/* PRQA S 4507,4510,4511,4512,4513,4514,4518,4519,4521,4522 EOF*/\r
+/* PRQA S 4523,4524,4527,4528,4529,4532,4533,4534,4538,4539 EOF*/\r
+/* PRQA S 4542,4543,4548,4549,4558,4559,4568,4569,4600,4601 EOF*/\r
+/* PRQA S 4602,4603,4604,4605,4606,4607,4608,4620,4621,5087 EOF*/\r
+/* PRQA S 5131,5134,5136,5209 EOF*/\r
+/*----------------------------------------------------------------------------*/\r
+#ifndef PMTEMPCALCNTHERMNET_DATA_H\r
+#define PMTEMPCALCNTHERMNET_DATA_H\r
+\r
+/*----------------------------------------------------------------------------*\\\r
+  DEFINES (OPT)\r
+\\*----------------------------------------------------------------------------*/\r
+/*----------------------------------------------------------------------------*\\\r
+  INCLUDES\r
+\\*----------------------------------------------------------------------------*/\r
+#include "Platform_Types.h"\r
+/*----------------------------------------------------------------------------*\\\r
+  DEFINES\r
+\\*----------------------------------------------------------------------------*/\r
+/*----------------------------------------------------------------------------*\\\r
+  TYPEDEFS\r
+\\*----------------------------------------------------------------------------*/\r
+\r
+struct tag_PmTempCalcnThermNet_CalibParam {\r
+   const float32 RThermRotorAirgap_LuTYaxis[16] /* Description: Thermal resistivity of Rotor */;\r
+   const float32 SpdActRTherm_LuTXaxis[16] /* Description: Mechanical speed of electric motor used t\r
+   o calculate thermal resistivity via LuT */;\r
+   const float32 CooltFlowRateRtherm_LuTXaxis[16] /* Description: Actual coolant flow rate at motor \r
+   inlet. */;\r
+   const float32 RThermRotorCoolt_LuTYaxis[16] /* Description: Look-Up table for thermal resistivity\r
+    of rotor */;\r
+   const float32 RThermStatorWindgEnd /* Description: Thermal resistivity of winding end */;\r
+   const float32 RThermStatorWindg_LuTYaxis[16] /* Description: Look-Up table for thermal resistivit\r
+   y of winding */;\r
+   const float32 StatorWindgCpTherm /* Description: Thermal capacitance of winding */;\r
+   const float32 StatorWindgEndCpTherm /* Description: Thermal capacitance of winding end */;\r
+   const float32 RotorCpTherm /* Description: Thermal capacitance of Rotor-PM */;\r
+   const float32 IntgTiSampleRot /* Description: Integrator time constant for Rotor */;\r
+   const float32 IntgTiSampleWiko /* Description: Integrator time constant for winding end */;\r
+   const float32 IntgTiSampleWik /* Description: Integrator time constant for winding */;\r
+   const boolean EnaStaWindg_CuLossEstim /* Description: Enable Bit to activate calculation of coppe\r
+   r losses */;\r
+   const float32 CuResist_TempRef /* Description: copper resistance used to calculate copper losses */\r
+   ;\r
+   const float32 MotorPhaseNum_StandStill /* Description: Total number of motor phases to be multipl\r
+   ied during stand still operation */;\r
+   const float32 MotorPhaseNum_NomOp /* Description: Total number of motor phases to be multiplied d\r
+   uring normal operation */;\r
+   const float32 TempCoeff_CuResist /* Description: Temperature coefficient to adapt temperature dep\r
+   endent copper resistance */;\r
+   const float32 TempRef_CuResist /* Description: Reference temperature to adapt temperature depende\r
+   nt copper resistance */;\r
+   const boolean EnaStandStillOp /* Description: Enable Bit to activate calculation of copper losses\r
+    at standstill operation */;\r
+   const float32 MotSpdThd /* Description: Threshold value of speed at which stand still operation w\r
+   ill be switched on */;\r
+   const float32 CuWikoFac /* Description: Factor to divide the copper losses in stator winding and \r
+   in winding-end */;\r
+   const float32 PlossIdFlatTop_map[16][4] /* Description: Losses generated in rotor due to d Curren\r
+   t when Flat top modulation is active (Frq dependent) */;\r
+   const float32 PlossIqFlatTop_map[16][4] /* Description: Losses generated in rotor due to q Curren\r
+   t when Flat top modulation is active (Frq dependent) */;\r
+   const float32 IdMin[1] /* Description: Minimal value of Id (direct axis) current for all LuTs */;\r
+   const float32 IdIvsStep[1] /* Description: Inverse of equidistant steps between two Id current ve\r
+   ctor elements */;\r
+   const uint8 IdMaxIdx[1] /* Description: Maximal index of Id current vector (dimension-1) */;\r
+   const float32 IqMin[1] /* Description: Minimal value of Iq (direct axis) current for all LuTs */;\r
+   const float32 IqIvsStep[1] /* Description: Inverse of equidistant steps between two Iq current ve\r
+   ctor elements */;\r
+   const uint8 IqMaxIdx[1] /* Description: Maximal index of Iq current vector (dimension-1) */;\r
+   const float32 PlossIdSpcVec_map[16][4] /* Description: Losses generated in rotor due to d Current\r
+    when space vector modulation is active (Frq dependent) */;\r
+   const float32 PlossIqSpcVec_map[16][4] /* Description: Losses generated in rotor due to q Current\r
+    when space vector modulation is active (Frq dependent) */;\r
+   const float32 PwmFreqActMin[1] /* Description: Minimal value of PWM frequency for all LuTs */;\r
+   const float32 PwmFreqActIvsStep[1] /* Description: Inverse of equidistant steps between two PWM f\r
+   requency vector elements */;\r
+   const uint8 PwmFreqActMaxIdx[1] /* Description: Maximal index of PWM frequency vector (dimension-\r
+   1) */;\r
+   const float32 PlossFric_LuTYaxis[16] /* Description: Losses generated in rotor due to Friction */\r
+    ;\r
+   const float32 SpdActFric_LuTXaxis[16] /* Description: Actual mechanical speed of PM synchronous m\r
+   otor used to set up Friction losses LuT */;\r
+   const float32 PlossNac_LuTYaxis[16] /* Description: Current losses generated in rotor due to roto\r
+   r speed */;\r
+   const float32 SpdActNac_LuTXaxis[16] /* Description: Actual mechanical speed of PM synchronous mo\r
+   tor used to set up Rotor losses dependent on AC currents */;\r
+   const boolean EnaTempWndgRplcmntVal /* Description: Enable Bit to activate replacement value of w\r
+   inding temperature (NTC\'s) */;\r
+   const boolean EnaAvgWindTempCalc /* Description: Enable Bit to activate calculation of average wi\r
+   nding temperature using 2 winding sensors  */;\r
+   const boolean EnaCoolInp2TempCalc /* Description: Enable Bit to activate calculation of coolant t\r
+   emperature at rotor outlet */;\r
+   const float32 CoolFlowRate_LuTXaxis[16] /* Description: Estimated flowrate at Inverter coolant ou\r
+   tlet (served as input to electric motor coolant inlet) */;\r
+   const float32 CooltTemp2_CoolTemp1Fac_LuTYaxis[16] /* Description: Factor to calculate Air gap te\r
+   mperature (dependency can be made on coolant flow rate if required) */;\r
+   const float32 CooltTemp2_PmTempFac_LuTYaxis[16] /* Description: Factor to calculate Air gap tempe\r
+   rature (dependency can be made on coolant flow rate if required) */;\r
+   const float32 IniPmTempRplcVal /* Description: calibratable value for initial PM temperature */;\r
+   const uint8 IniValCalcnMod /* Description: Mode to select Initial value for PM temperature. \r
+Default: Calib param \'IniPmTempRplcVal\'\r
+1: Measured winding temperature  \'TempWindgSnsr_PmTempLimn\'\r
+2: Initial value calculated via \'IniPMTemp\' algorithm \r
+3: Calib param \'IniPmTempRplcVal\' */;\r
+   const boolean EnaHvOffTime /* Description: Enable Bit to select the use HV Off time or Vehicle Of\r
+   f time in exponential function initial value calc. Algorithm (0: Disabled 1: Enabled ) */;\r
+   const boolean DiSelAmbTempWindg /* Description: Disable Bit to deactivate the selection of ambien\r
+   t temperature (stator winding or airgap) used for initial value calc. (1: Disabled 0: Enabled ) */\r
+   ;\r
+   const boolean DiSelAmbTempPm /* Description: Disable Bit to deactivate the selection of ambient t\r
+   emperature (stator winding or airgap) used for initial value calc. (1: Disabled 0: Enabled ) */;\r
+   const float32 CoolDownTimeConstPm /* Description: Constant Factor to decide if initial value calc\r
+   . algorithm shall be triggered for Rotor */;\r
+   const float32 CoolDownTimeWindg /* Description: Cooling time constant for winding end thermal nod\r
+   e. */;\r
+   const float32 CompareTimeConstFacWindg /* Description: Cooling time constant for winding end ther\r
+   mal node. */;\r
+   const float32 CompareTimeConstFacWindgAmb /* Description: Constant Factor to decide which tempera\r
+   ture shall be used as ambient temperature for initial value calc. Algorithm. */;\r
+   const float32 CompareTimeConstFacPmAmb /* Description: Constant Factor to decide which temperatur\r
+   e shall be used as ambient temperature for initial value calc. Algorithm. */;\r
+   const float32 CompareTimeConstFacPm /* Description: Constant Factor to decide if initial value ca\r
+   lc. algorithm shall be triggered. */;\r
+   const float32 IniWindgTempRplcVal /* Description: calibratable value for initial PM temperature */\r
+   ;\r
+   const uint8 WindgIniValCalcnMod /* Description: Mode to select Init value for Winding End temp. \r
+Default: Calibparam \'IniWndgEndTempRplcVal\'\r
+1: Average winding temp or Maximum of available NTC\'s\r
+2: Initial Value algorithm exp func\r
+3: Calib param \'IniWndgEndTempRplcVal\' */;\r
+   const float32 RotTimeConstFac_RotTempIniFlt /* Description: A time factor which is a multiple of \r
+   Thermal time constant of Permanent Magnet (Rotor) */;\r
+   const float32 FuncTiSlc /* Description: time slice in which the function PmTempCalcnThermNetVw is\r
+    called */;\r
+   const boolean DiIntClkCntr /* Description: Disable Bit to deactivate the  internal clock which is\r
+    used to calculate time duration after RotTempFlt occurs (1: Disabled 0: Enabled ) */;\r
+   const uint32 ClckCntStep /* Description: Step size which represents the incremental counter of in\r
+   ternal clock */;\r
+   const uint32 ClckCntMax /* Description: Maximum counter size after which the internal clock reset\r
+   s to Zero */;\r
+   const boolean DiThermNetCalcn /* Description: Deactivate PM temperature calculation. Thermal Netw\r
+   ork will switch to replacement value \'State1\'. */;\r
+   const float32 PmTempRplcVal /* Description: Replacement value of temperature used either for init\r
+   ialisation of Thermal Network or as PM Temperature ouput value  */;\r
+   const boolean DiThermNetCalcn_UseTempWindgSnsr /* Description: Bit to select the replacement valu\r
+   e for PM temperature. \r
+(1: Winding sensor temperature; 0: Calibratable value  \'PmTempRplcVal\' ) */;\r
+   const float32 TempWindgSnsr_PmTempMax /* Description: Maximum Threshold value for limiting the me\r
+   asured winding temperature, where measured winding temp. is used as a replacement value for follo\r
+   wing: \r
+1) Output PM temperature in State 1\r
+2) Initial PM temperature in State 2 */;\r
+   const float32 ConvTimeOff_Secs /* Description: conversion parameter to convert Off time from minu\r
+   tes to secs. (Set value = 60: CAN_VehPrkgTi / CAN_HvOffTi is in minutes; 1: CAN_VehPrkgTi / CAN_H\r
+   vOffTi is in seconds ) */;\r
+   const float32 GearRatioInvs /* Description: Conversion ratio to convert speed from rpm to kmph: "\r
+   InvsGearRatio*2*Pi*WheelRadius*1e-6*60" */;\r
+   const float32 VehMovmnt_MinSpdThd /* Description: minimum speed in kmph to check if vehicle is mo\r
+   ving, only in this case the RotTempFlt will be disabled once internal clock overshoot the Rotor t\r
+   ime constant threshold  */;\r
+   const boolean EnaVehSpdChck /* Description: Enable bit to activate vehicle speed check used in Ro\r
+   tor temperature fault. */;\r
+   const float32 StatorWindgTempMaxVal /* Description: Maximum Threshold value for limiting the meas\r
+   ured winding temperature, where measured winding temp. is used as a replacement value for followi\r
+   ng: \r
+1) Output PM temperature in State 1\r
+2) Initial PM temperature in State 2 */;\r
+   const float32 StatorWindgTempMinVal /* Description: Maximum Threshold value for limiting the meas\r
+   ured winding temperature, where measured winding temp. is used as a replacement value for followi\r
+   ng: \r
+1) Output PM temperature in State 1\r
+2) Initial PM temperature in State 2 */;\r
+   const float32 StatorWindgEndTempMaxVal /* Description: Maximum Threshold value for limiting the m\r
+   easured winding temperature, where measured winding temp. is used as a replacement value for foll\r
+   owing: \r
+1) Output PM temperature in State 1\r
+2) Initial PM temperature in State 2 */;\r
+   const float32 StatorWindgEndTempMinVal /* Description: Maximum Threshold value for limiting the m\r
+   easured winding temperature, where measured winding temp. is used as a replacement value for foll\r
+   owing: \r
+1) Output PM temperature in State 1\r
+2) Initial PM temperature in State 2 */;\r
+   const float32 PmTempMaxVal /* Description: Maximum Threshold value for limiting the measured wind\r
+   ing temperature, where measured winding temp. is used as a replacement value for following: \r
+1) Output PM temperature in State 1\r
+2) Initial PM temperature in State 2 */;\r
+   const float32 PmTempMinVal /* Description: Maximum Threshold value for limiting the measured wind\r
+   ing temperature, where measured winding temp. is used as a replacement value for following: \r
+1) Output PM temperature in State 1\r
+2) Initial PM temperature in State 2 */;\r
+   const boolean UseSnsrValAsWindgEndTemp /* Description: Use Winding NTC sensor value as Winding-en\r
+   d node temperature of thermal network */;\r
+   const float32 FeLossSpdAct_LUTXaxis[16] /* Description: Mechanical rotor speed array which is use\r
+   d as x-axis breakpoints of LUT for calculation of rotor iron loss distribution factor */;\r
+   const float32 FeLossRotDistbnFac_LuTYaxis[16] /* Description: LUT values of rotor iron loss distr\r
+   ibution factor depending on rotor speed */;\r
+   const float32 CuResistSpdCoeff2 /* Description: The coefficient which is used to adapt AC copper \r
+   resistance to actual rotor speed */;\r
+}; /* struct type created for variable: PmTempCalcnThermNet_CalibParam */\r
+/*----------------------------------------------------------------------------*\\\r
+  ENUMS\r
+\\*----------------------------------------------------------------------------*/\r
+/*----------------------------------------------------------------------------*\\\r
+  VARIABLES\r
+\\*----------------------------------------------------------------------------*/\r
+\r
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_32\r
+#include "MemMap.h"\r
+/******************************************************************************\\\r
+   MEMMAP_CAL_NON_VOL_32: global calibratable parameters (ROM) | Width: N.A.\r
+\\******************************************************************************/\r
+extern const struct tag_PmTempCalcnThermNet_CalibParam PmTempCalcnThermNet_CalibParam /* Description\r
+   : dummy structure */;\r
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32\r
+#include "MemMap.h"\r
+\r
+/*----------------------------------------------------------------------------*\\\r
+  PARAMETERIZED MACROS\r
+\\*----------------------------------------------------------------------------*/\r
+/*----------------------------------------------------------------------------*\\\r
+  FUNCTION PROTOTYPES\r
+\\*----------------------------------------------------------------------------*/\r
+\r
+#endif/*PMTEMPCALCNTHERMNET_DATA_H */\r
+/*----------------------------------------------------------------------------*\\\r
+  END OF FILE\r
+\\*----------------------------------------------------------------------------*/\r
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_Inputs.h b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_Inputs.h
index 9e91105c2..9b534cbf9 100644
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_Inputs.h
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_Inputs.h
@@ -1,213 +1,210 @@
-/**************************************************************************************************\\
- *** 
- *** Simulink model       : PmTempCalcnThermNet
- *** TargetLink subsystem : PmTempCalcnThermNet
- *** Codefile             : PmTempCalcnThermNet_Inputs.h
- ***
- *** Generated by TargetLink, the dSPACE production quality code generator
- *** Generation date: 2021-11-08 12:32:25
- ***
- *** CODE GENERATOR OPTIONS:
- *** Code generation mode                     : Standard
- *** Compiler                                 : <unknown>
- *** Target                                   : Generic
- *** ANSI-C compatible code                   : yes
- *** Code Optimization                        : enabled
- *** Constant style                           : decimal
- *** Clean code option                        : enabled
- *** Logging mode                             : Do not log anything
- *** Code Coverage                            : disabled
- *** Generate empty conditional branches      : disabled
- *** Efficient vector handling                : enabled
- *** Loop unroll threshold                    : 5
- *** Variable vector widths                   : enabled
- *** Shift mode                               : automatic
- *** Handle unscaled SF expr. with TL type    : enabled
- *** No assignment of boolean expressions     : disabled
- *** Scope reduction only to function level   : disabled
- *** Exploit ranges if not erasable           : disabled
- *** Exploit Compute Through Overflow         : optimized
- *** Linker sections                          : enabled
- *** Enable Assembler                         : disabled
- *** Variable name length                     : 31 chars
- *** Use global bitfields                     : disabled
- *** Stateflow: use of bitfields              : enabled
- *** State activity encoding limit            : 5
- *** Omit zero inits in restart function      : disabled
- *** Share functions between TL subsystems    : disabled
- *** Generate 64bit functions                 : disabled
- *** Inlining Threshold                       : 6
- *** Line break limit                         : 100
- *** Target optimized boolean data type       : enabled
- *** Keep saturation elements                 : disabled
- *** Extended variable sharing                : enabled
- *** Extended lifetime optimization           : enabled
- *** Style definition file                    : D:\\Git\\100kw\\ec_models_pub\\lib\\targetlink\\StyleSheet
- ***                                            s\\config\\cconfig.xml
- *** Root style sheet                         : D:\\Git\\100kw\\ec_models_pub\\lib\\targetlink\\StyleSheet
- ***                                            s\\StyleSheets_DPR\\TL_CSourceCodeSS_MISRA_config.xsl
- ***
- *** TargetLink version      : 3.5p2 from 14-Aug-2014
- *** Code generator version  : Build Id 3.5.0.28 from 2014-08-20 16:45:15
- *** Copyright (C) Siemens AG 2015 (All Rights Reserved. Confidential)
-\\**************************************************************************************************/
-
-/*----------------------------------------------------------------------------*\\
- Supression of QAC MISRA findings for automatic generated Code by TargetLink 
- Documentation: W:ec 
-\\*----------------------------------------------------------------------------*/
-/* PRQA S 160,161,162,163,164,165,166,167,168,169 EOF*/
-/* PRQA S 170,171,172,173,174,175,176,177,178,179 EOF*/
-/* PRQA S 184,185,186,190,191,192,193,194,195,196 EOF*/
-/* PRQA S 197,198,199,200,201,203,204,206,207,208 EOF*/
-/* PRQA S 232,233,235,240,241,244,246,268,275,301 EOF*/
-/* PRQA S 302,304,307,309,310,311,312,321,322,327 EOF*/
-/* PRQA S 337,338,341,342,400,401,402,403,404,405 EOF*/
-/* PRQA S 422,423,426,427,429,430,431,432,435,436 EOF*/
-/* PRQA S 437,446,447,448,449,450,451,452,453,454 EOF*/
-/* PRQA S 456,457,458,460,461,462,463,466,467,468 EOF*/
-/* PRQA S 469,475,476,477,478,481,482,483,484,485 EOF*/
-/* PRQA S 486,487,488,493,494,495,496,513,514,515 EOF*/
-/* PRQA S 536,537,540,541,542,543,544,545,546,547 EOF*/
-/* PRQA S 550,551,554,555,556,557,558,559,560,561 EOF*/
-/* PRQA S 562,563,564,565,570,572,580,588,589,590 EOF*/
-/* PRQA S 591,594,601,602,603,605,616,619,620,621 EOF*/
-/* PRQA S 622,623,625,626,627,628,629,630,631,632 EOF*/
-/* PRQA S 633,634,635,636,638,640,641,642,643,644 EOF*/
-/* PRQA S 645,646,649,650,651,653,654,655,656,657 EOF*/
-/* PRQA S 658,659,660,661,662,664,665,667,668,669 EOF*/
-/* PRQA S 671,672,673,674,675,676,677,678,680,682 EOF*/
-/* PRQA S 683,684,685,690,698,699,706,708,709,736 EOF*/
-/* PRQA S 737,738,745,746,747,750,755,756,757,758 EOF*/
-/* PRQA S 759,766,767,768,774,775,777,779,784,785 EOF*/
-/* PRQA S 786,787,788,791,795,801,802,803,804,811 EOF*/
-/* PRQA S 812,813,814,817,818,821,830,831,834,835 EOF*/
-/* PRQA S 836,837,840,841,844,845,848,851,852,853 EOF*/
-/* PRQA S 854,864,865,866,867,872,873,874,877,883 EOF*/
-/* PRQA S 885,887,888,899,914,915,940,941,942,943 EOF*/
-/* PRQA S 944,981,1001,1002,1003,1006,1008,1012,1014,1015 EOF*/
-/* PRQA S 1019,1020,1021,1022,1023,1024,1025,1026,1028,1029 EOF*/
-/* PRQA S 1033,1034,1035,1036,1037,1038,1039,1041,1042,1043 EOF*/
-/* PRQA S 1044,1045,1046,1047,1048,1049,1050,1051,1052,1057 EOF*/
-/* PRQA S 1058,1060,1061,1062,1257,1264,1265,1266,1281,1291 EOF*/
-/* PRQA S 1292,1293,1294,1295,1296,1297,1298,1299,1331,1332 EOF*/
-/* PRQA S 1333,1397,1398,1399,1460,1503,1504,1505,1506,1507 EOF*/
-/* PRQA S 1508,1513,1514,1520,1525,1526,1527,1528,1531,1532 EOF*/
-/* PRQA S 1533,1750,1756,1800,1802,1803,1804,1820,1821,1822 EOF*/
-/* PRQA S 1823,1824,1830,1831,1832,1833,1834,1840,1841,1842 EOF*/
-/* PRQA S 1843,1844,1850,1851,1852,1853,1854,1860,1861,1862 EOF*/
-/* PRQA S 1863,1864,1880,1881,1882,1890,1891,1892,1893,1894 EOF*/
-/* PRQA S 1895,2547,2741,2742,2744,2791,2792,2800,2801,2802 EOF*/
-/* PRQA S 2810,2811,2812,2820,2821,2822,2830,2831,2832,2840 EOF*/
-/* PRQA S 2841,2842,2845,2846,2847,2850,2871,2872,2877,2880 EOF*/
-/* PRQA S 2882,2889,2890,2900,2930,2931,2932,2990,2991,2992 EOF*/
-/* PRQA S 2993,2994,2997,2998,3006,3008,3101,3102,3113,3114 EOF*/
-/* PRQA S 3200,3218,3219,3224,3236,3237,3238,3239,3240,3243 EOF*/
-/* PRQA S 3244,3305,3311,3312,3319,3320,3334,3344,3389,3391 EOF*/
-/* PRQA S 3392,3394,3395,3396,3397,3408,3415,3421,3430,3432 EOF*/
-/* PRQA S 3437,3438,3440,3445,3449,3451,3453,3493,3494,3660 EOF*/
-/* PRQA S 3664,3670,3673,3676,4301,4302,4303,4304,4305,4310 EOF*/
-/* PRQA S 4312,4315,4320,4322,4330,4332,4340,4342,4350,4351 EOF*/
-/* PRQA S 4352,4389,4390,4391,4392,4393,4394,4395,4398,4399 EOF*/
-/* PRQA S 4401,4402,4403,4404,4405,4410,4412,4413,4414,4415 EOF*/
-/* PRQA S 4420,4421,4422,4423,4424,4425,4430,4431,4432,4434 EOF*/
-/* PRQA S 4435,4437,4440,4441,4442,4443,4445,4446,4447,4450 EOF*/
-/* PRQA S 4451,4452,4453,4454,4460,4461,4462,4463,4464,4465 EOF*/
-/* PRQA S 4490,4491,4492,4499,4500,4501,4502,4503,4504,4505 EOF*/
-/* PRQA S 4507,4510,4511,4512,4513,4514,4518,4519,4521,4522 EOF*/
-/* PRQA S 4523,4524,4527,4528,4529,4532,4533,4534,4538,4539 EOF*/
-/* PRQA S 4542,4543,4548,4549,4558,4559,4568,4569,4600,4601 EOF*/
-/* PRQA S 4602,4603,4604,4605,4606,4607,4608,4620,4621,5087 EOF*/
-/* PRQA S 5131,5134,5136,5209 EOF*/
-/*----------------------------------------------------------------------------*/
-#ifndef PMTEMPCALCNTHERMNET_INPUTS_H
-#define PMTEMPCALCNTHERMNET_INPUTS_H
-
-/*----------------------------------------------------------------------------*\\
-  DEFINES (OPT)
-\\*----------------------------------------------------------------------------*/
-/*----------------------------------------------------------------------------*\\
-  INCLUDES
-\\*----------------------------------------------------------------------------*/
-#include "tl_defines_PmTempCalcnThermNet.h"
-#include "Platform_Types.h"
-/*----------------------------------------------------------------------------*\\
-  DEFINES
-\\*----------------------------------------------------------------------------*/
-/*----------------------------------------------------------------------------*\\
-  TYPEDEFS
-\\*----------------------------------------------------------------------------*/
-
-struct tag_PmTempCalcnThermNet_InputData {
-   float32 TempWindgSnsr1 /* Description: Actual measured stator winding temperature by using windin
-   g temperature sensor (NTC 1 in stator winding) */;
-   float32 TempWindgSnsr2 /* Description: Actual measured stator winding temperature by using windin
-   g temperature sensor (NTC 2 in stator winding) */;
-   float32 TempWindgSnsr3 /* Description: Actual measured stator winding temperature by using windin
-   g temperature sensor (NTC 3 in stator winding) */;
-   float32 NVM_Temp1 /* Description: Temperature saved in NVM memory block 1 at the time of vehicle 
-   switch-off (during last operating cycle) */;
-   float32 NVM_Temp2 /* Description: Temperature saved in NVM memory block 2 at the time of vehicle 
-   switch-off (during last operating cycle) */;
-   float32 NVM_Temp3 /* Description: Temperature saved in NVM memory block 3 at the time of vehicle 
-   switch-off (during last operating cycle) */;
-   float32 CAN_VehPrkgTi /* Description: Time during which the vehicle stays switched off (wheel spe
-   ed is below certain threshold ~ 0 bis 3 kmph) */;
-   float32 CAN_HvOffTi /* Description: Time during which the HV connection is switched off */;
-   float32 EmCooltFlow /* Description: Estimated flowrate at Inverter coolant outlet  (served as inp
-   ut to electric motor coolant inlet) */;
-   float32 EmTempCooltInlet /* Description: Estimated temperature of Inverter coolant outlet (served
-    as input to electric motor coolant inlet) */;
-   float32 SpdAct /* Description: Actual mechanical speed of electric motor */;
-   float32 IdActFlt /* Description: Actual d current filtered */;
-   float32 IqActFlt /* Description: Actual q current filtered */;
-   uint8 ModlnModAct /* Description: Modulation type actually used in Inverter modulator function. (
-   Flat Top or Space Vector Modulation) */;
-   boolean FID_IniHvOff /* Description: Initialisation Bit which denotes availability of HV Offtime 
-   Signal (1: Not Available; 0: Signal Available) */;
-   boolean FID_IniPrkgTi /* Description: Initialisation Bit which denotes availability of Vehicle Of
-   ftime Signal (1: Not Available; 0: Signal Available) */;
-   boolean FID_IniNvm /* Description: Initialisation Bit which denotes availability of variables sto
-   red in NVM (1: Not Available; 0: Signal Available) */;
-   boolean HwFlt_WindSnsr3 /* Description: Fault Bit of measured stator tempeture using winding sens
-   or 3 (0: No Fault ; 1: Fault Signal ) */;
-   boolean FID_ErrHvOff /* Description: Validity Bit which denotes validity of HV Offtime Signal (1:
-    Not Valid 0: Signal Valid ) */;
-   boolean FID_ErrPrkgTi /* Description: Validity Bit which denotes validity of Vehicle Offtime Sign
-   al (1: Not Valid 0: Signal Valid ) */;
-   boolean FID_ErrNvm /* Description: Validity Bit which denotes validity of variables stored NVM (1
-   : Not Valid 0: Signal Valid ) */;
-   boolean HwFlt_WindSnsr1 /* Description: Fault Bit of measured stator tempeture using winding sens
-   or 1 (0: No Fault ; 1: Fault Signal ) */;
-   boolean HwFlt_WindSnsr2 /* Description: Fault Bit of measured stator tempeture using winding sens
-   or 2 (0: No Fault ; 1: Fault Signal ) */;
-   float32 PwmFrqAct /* Description: Current PWM frequency of motor control */;
-}; /* struct type created for variable: PmTempCalcnThermNet_InputData */
-/*----------------------------------------------------------------------------*\\
-  ENUMS
-\\*----------------------------------------------------------------------------*/
-/*----------------------------------------------------------------------------*\\
-  VARIABLES
-\\*----------------------------------------------------------------------------*/
-
-#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32
-#include "MemMap.h"
-/******************************************************************************\\
-   MemMap_DISP_INIT_32: global observable variables (RAM) | Width: N.A.
-\\******************************************************************************/
-extern MemMap_DISP_INIT_32 struct tag_PmTempCalcnThermNet_InputData PmTempCalcnThermNet_InputData /*
-    Description: Input structure for PmTempCalcnThermNet */;
-#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32
-#include "MemMap.h"
-
-/*----------------------------------------------------------------------------*\\
-  PARAMETERIZED MACROS
-\\*----------------------------------------------------------------------------*/
-/*----------------------------------------------------------------------------*\\
-  FUNCTION PROTOTYPES
-\\*----------------------------------------------------------------------------*/
-
-#endif/*PMTEMPCALCNTHERMNET_INPUTS_H */
-/*----------------------------------------------------------------------------*\\
-  END OF FILE
-\\*----------------------------------------------------------------------------*/
+/**************************************************************************************************\\\r
+ *** \r
+ *** Simulink model       : PmTempCalcnThermNet\r
+ *** TargetLink subsystem : PmTempCalcnThermNet\r
+ *** Codefile             : PmTempCalcnThermNet_Inputs.h\r
+ ***\r
+ *** Generated by TargetLink, the dSPACE production quality code generator\r
+ *** Generation date: 2022-03-31 16:11:59\r
+ ***\r
+ *** CODE GENERATOR OPTIONS:\r
+ *** Code generation mode                     : Standard\r
+ *** Compiler                                 : <unknown>\r
+ *** Target                                   : Generic\r
+ *** ANSI-C compatible code                   : yes\r
+ *** Code Optimization                        : enabled\r
+ *** Constant style                           : decimal\r
+ *** Clean code option                        : enabled\r
+ *** Logging mode                             : Do not log anything\r
+ *** Code Coverage                            : disabled\r
+ *** Generate empty conditional branches      : disabled\r
+ *** Efficient vector handling                : enabled\r
+ *** Loop unroll threshold                    : 5\r
+ *** Variable vector widths                   : enabled\r
+ *** Shift mode                               : automatic\r
+ *** Handle unscaled SF expr. with TL type    : enabled\r
+ *** No assignment of boolean expressions     : disabled\r
+ *** Scope reduction only to function level   : disabled\r
+ *** Exploit ranges if not erasable           : disabled\r
+ *** Exploit Compute Through Overflow         : optimized\r
+ *** Linker sections                          : enabled\r
+ *** Enable Assembler                         : disabled\r
+ *** Variable name length                     : 31 chars\r
+ *** Use global bitfields                     : disabled\r
+ *** Stateflow: use of bitfields              : enabled\r
+ *** State activity encoding limit            : 5\r
+ *** Omit zero inits in restart function      : disabled\r
+ *** Share functions between TL subsystems    : disabled\r
+ *** Generate 64bit functions                 : disabled\r
+ *** Inlining Threshold                       : 6\r
+ *** Line break limit                         : 100\r
+ *** Target optimized boolean data type       : enabled\r
+ *** Keep saturation elements                 : disabled\r
+ *** Extended variable sharing                : enabled\r
+ *** Extended lifetime optimization           : enabled\r
+ *** Style definition file                    : D:\\ai\\ec_models_pub\\lib\\targetlink\\StyleSheets\\confi\r
+ ***                                            g\\cconfig.xml\r
+ *** Root style sheet                         : D:\\ai\\ec_models_pub\\lib\\targetlink\\StyleSheets\\Style\r
+ ***                                            Sheets_DPR\\TL_CSourceCodeSS_MISRA_config.xsl\r
+ ***\r
+ *** TargetLink version      : 3.5 from 30-Oct-2013\r
+ *** Code generator version  : Build Id 3.5.0.22 from 2013-10-07 16:59:57\r
+ *** Copyright (C) Siemens AG 2015 (All Rights Reserved. Confidential)\r
+\\**************************************************************************************************/\r
+\r
+/*----------------------------------------------------------------------------*\\\r
+ Supression of QAC MISRA findings for automatic generated Code by TargetLink \r
+ Documentation: W:ec \r
+\\*----------------------------------------------------------------------------*/\r
+/* PRQA S 160,161,162,163,164,165,166,167,168,169 EOF*/\r
+/* PRQA S 170,171,172,173,174,175,176,177,178,179 EOF*/\r
+/* PRQA S 184,185,186,190,191,192,193,194,195,196 EOF*/\r
+/* PRQA S 197,198,199,200,201,203,204,206,207,208 EOF*/\r
+/* PRQA S 232,233,235,240,241,244,246,268,275,301 EOF*/\r
+/* PRQA S 302,304,307,309,310,311,312,321,322,327 EOF*/\r
+/* PRQA S 337,338,341,342,400,401,402,403,404,405 EOF*/\r
+/* PRQA S 422,423,426,427,429,430,431,432,435,436 EOF*/\r
+/* PRQA S 437,446,447,448,449,450,451,452,453,454 EOF*/\r
+/* PRQA S 456,457,458,460,461,462,463,466,467,468 EOF*/\r
+/* PRQA S 469,475,476,477,478,481,482,483,484,485 EOF*/\r
+/* PRQA S 486,487,488,493,494,495,496,513,514,515 EOF*/\r
+/* PRQA S 536,537,540,541,542,543,544,545,546,547 EOF*/\r
+/* PRQA S 550,551,554,555,556,557,558,559,560,561 EOF*/\r
+/* PRQA S 562,563,564,565,570,572,580,588,589,590 EOF*/\r
+/* PRQA S 591,594,601,602,603,605,616,619,620,621 EOF*/\r
+/* PRQA S 622,623,625,626,627,628,629,630,631,632 EOF*/\r
+/* PRQA S 633,634,635,636,638,640,641,642,643,644 EOF*/\r
+/* PRQA S 645,646,649,650,651,653,654,655,656,657 EOF*/\r
+/* PRQA S 658,659,660,661,662,664,665,667,668,669 EOF*/\r
+/* PRQA S 671,672,673,674,675,676,677,678,680,682 EOF*/\r
+/* PRQA S 683,684,685,690,698,699,706,708,709,736 EOF*/\r
+/* PRQA S 737,738,745,746,747,750,755,756,757,758 EOF*/\r
+/* PRQA S 759,766,767,768,774,775,777,779,784,785 EOF*/\r
+/* PRQA S 786,787,788,791,795,801,802,803,804,811 EOF*/\r
+/* PRQA S 812,813,814,817,818,821,830,831,834,835 EOF*/\r
+/* PRQA S 836,837,840,841,844,845,848,851,852,853 EOF*/\r
+/* PRQA S 854,864,865,866,867,872,873,874,877,883 EOF*/\r
+/* PRQA S 885,887,888,899,914,915,940,941,942,943 EOF*/\r
+/* PRQA S 944,981,1001,1002,1003,1006,1008,1012,1014,1015 EOF*/\r
+/* PRQA S 1019,1020,1021,1022,1023,1024,1025,1026,1028,1029 EOF*/\r
+/* PRQA S 1033,1034,1035,1036,1037,1038,1039,1041,1042,1043 EOF*/\r
+/* PRQA S 1044,1045,1046,1047,1048,1049,1050,1051,1052,1057 EOF*/\r
+/* PRQA S 1058,1060,1061,1062,1257,1264,1265,1266,1281,1291 EOF*/\r
+/* PRQA S 1292,1293,1294,1295,1296,1297,1298,1299,1331,1332 EOF*/\r
+/* PRQA S 1333,1397,1398,1399,1460,1503,1504,1505,1506,1507 EOF*/\r
+/* PRQA S 1508,1513,1514,1520,1525,1526,1527,1528,1531,1532 EOF*/\r
+/* PRQA S 1533,1750,1756,1800,1802,1803,1804,1820,1821,1822 EOF*/\r
+/* PRQA S 1823,1824,1830,1831,1832,1833,1834,1840,1841,1842 EOF*/\r
+/* PRQA S 1843,1844,1850,1851,1852,1853,1854,1860,1861,1862 EOF*/\r
+/* PRQA S 1863,1864,1880,1881,1882,1890,1891,1892,1893,1894 EOF*/\r
+/* PRQA S 1895,2547,2741,2742,2744,2791,2792,2800,2801,2802 EOF*/\r
+/* PRQA S 2810,2811,2812,2820,2821,2822,2830,2831,2832,2840 EOF*/\r
+/* PRQA S 2841,2842,2845,2846,2847,2850,2871,2872,2877,2880 EOF*/\r
+/* PRQA S 2882,2889,2890,2900,2930,2931,2932,2990,2991,2992 EOF*/\r
+/* PRQA S 2993,2994,2997,2998,3006,3008,3101,3102,3113,3114 EOF*/\r
+/* PRQA S 3200,3218,3219,3224,3236,3237,3238,3239,3240,3243 EOF*/\r
+/* PRQA S 3244,3305,3311,3312,3319,3320,3334,3344,3389,3391 EOF*/\r
+/* PRQA S 3392,3394,3395,3396,3397,3408,3415,3421,3430,3432 EOF*/\r
+/* PRQA S 3437,3438,3440,3445,3449,3451,3453,3493,3494,3660 EOF*/\r
+/* PRQA S 3664,3670,3673,3676,4301,4302,4303,4304,4305,4310 EOF*/\r
+/* PRQA S 4312,4315,4320,4322,4330,4332,4340,4342,4350,4351 EOF*/\r
+/* PRQA S 4352,4389,4390,4391,4392,4393,4394,4395,4398,4399 EOF*/\r
+/* PRQA S 4401,4402,4403,4404,4405,4410,4412,4413,4414,4415 EOF*/\r
+/* PRQA S 4420,4421,4422,4423,4424,4425,4430,4431,4432,4434 EOF*/\r
+/* PRQA S 4435,4437,4440,4441,4442,4443,4445,4446,4447,4450 EOF*/\r
+/* PRQA S 4451,4452,4453,4454,4460,4461,4462,4463,4464,4465 EOF*/\r
+/* PRQA S 4490,4491,4492,4499,4500,4501,4502,4503,4504,4505 EOF*/\r
+/* PRQA S 4507,4510,4511,4512,4513,4514,4518,4519,4521,4522 EOF*/\r
+/* PRQA S 4523,4524,4527,4528,4529,4532,4533,4534,4538,4539 EOF*/\r
+/* PRQA S 4542,4543,4548,4549,4558,4559,4568,4569,4600,4601 EOF*/\r
+/* PRQA S 4602,4603,4604,4605,4606,4607,4608,4620,4621,5087 EOF*/\r
+/* PRQA S 5131,5134,5136,5209 EOF*/\r
+/*----------------------------------------------------------------------------*/\r
+#ifndef PMTEMPCALCNTHERMNET_INPUTS_H\r
+#define PMTEMPCALCNTHERMNET_INPUTS_H\r
+\r
+/*----------------------------------------------------------------------------*\\\r
+  DEFINES (OPT)\r
+\\*----------------------------------------------------------------------------*/\r
+/*----------------------------------------------------------------------------*\\\r
+  INCLUDES\r
+\\*----------------------------------------------------------------------------*/\r
+#include "Platform_Types.h"\r
+/*----------------------------------------------------------------------------*\\\r
+  DEFINES\r
+\\*----------------------------------------------------------------------------*/\r
+/*----------------------------------------------------------------------------*\\\r
+  TYPEDEFS\r
+\\*----------------------------------------------------------------------------*/\r
+\r
+struct tag_PmTempCalcnThermNet_InputData {\r
+   float32 TempWindgSnsr1 /* Description: Actual measured stator winding temperature by using windin\r
+   g temperature sensor (NTC 1 in stator winding) */;\r
+   float32 TempWindgSnsr2 /* Description: Actual measured stator winding temperature by using windin\r
+   g temperature sensor (NTC 2 in stator winding) */;\r
+   float32 TempWindgSnsr3 /* Description: Actual measured stator winding temperature by using windin\r
+   g temperature sensor (NTC 3 in stator winding) */;\r
+   float32 NVM_Temp1 /* Description: Temperature saved in NVM memory block 1 at the time of vehicle \r
+   switch-off (during last operating cycle) */;\r
+   float32 NVM_Temp2 /* Description: Temperature saved in NVM memory block 2 at the time of vehicle \r
+   switch-off (during last operating cycle) */;\r
+   float32 CAN_VehPrkgTi /* Description: Time during which the vehicle stays switched off (wheel spe\r
+   ed is below certain threshold ~ 0 bis 3 kmph) */;\r
+   float32 CAN_HvOffTi /* Description: Time during which the HV connection is switched off */;\r
+   float32 EmCooltFlow /* Description: Estimated flowrate at Inverter coolant outlet  (served as inp\r
+   ut to electric motor coolant inlet) */;\r
+   float32 EmTempCooltInlet /* Description: Estimated temperature of Inverter coolant outlet (served\r
+    as input to electric motor coolant inlet) */;\r
+   float32 SpdAct /* Description: Actual mechanical speed of electric motor */;\r
+   float32 IdActFlt /* Description: Actual d current filtered */;\r
+   float32 IqActFlt /* Description: Actual q current filtered */;\r
+   uint8 ModlnModAct /* Description: Modulation type actually used in Inverter modulator function. (\r
+   Flat Top or Space Vector Modulation) */;\r
+   boolean FID_IniHvOff /* Description: Initialisation Bit which denotes availability of HV Offtime \r
+   Signal (1: Not Available; 0: Signal Available) */;\r
+   boolean FID_IniPrkgTi /* Description: Initialisation Bit which denotes availability of Vehicle Of\r
+   ftime Signal (1: Not Available; 0: Signal Available) */;\r
+   boolean FID_IniNvm /* Description: Initialisation Bit which denotes availability of variables sto\r
+   red in NVM (1: Not Available; 0: Signal Available) */;\r
+   boolean HwFlt_WindSnsr3 /* Description: Fault Bit of measured stator tempeture using winding sens\r
+   or 3 (0: No Fault ; 1: Fault Signal ) */;\r
+   boolean FID_ErrHvOff /* Description: Validity Bit which denotes validity of HV Offtime Signal (1:\r
+    Not Valid 0: Signal Valid ) */;\r
+   boolean FID_ErrPrkgTi /* Description: Validity Bit which denotes validity of Vehicle Offtime Sign\r
+   al (1: Not Valid 0: Signal Valid ) */;\r
+   boolean FID_ErrNvm /* Description: Validity Bit which denotes validity of variables stored NVM (1\r
+   : Not Valid 0: Signal Valid ) */;\r
+   boolean HwFlt_WindSnsr1 /* Description: Fault Bit of measured stator tempeture using winding sens\r
+   or 1 (0: No Fault ; 1: Fault Signal ) */;\r
+   boolean HwFlt_WindSnsr2 /* Description: Fault Bit of measured stator tempeture using winding sens\r
+   or 2 (0: No Fault ; 1: Fault Signal ) */;\r
+   float32 PwmFrqAct /* Description: Current PWM frequency of motor control */;\r
+}; /* struct type created for variable: PmTempCalcnThermNet_InputData */\r
+/*----------------------------------------------------------------------------*\\\r
+  ENUMS\r
+\\*----------------------------------------------------------------------------*/\r
+/*----------------------------------------------------------------------------*\\\r
+  VARIABLES\r
+\\*----------------------------------------------------------------------------*/\r
+\r
+#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32\r
+#include "MemMap.h"\r
+/******************************************************************************\\\r
+   MEMMAP_DISP_INIT_32: global observable variables (RAM) | Width: N.A.\r
+\\******************************************************************************/\r
+extern struct tag_PmTempCalcnThermNet_InputData PmTempCalcnThermNet_InputData /* Description: Input \r
+   structure for PmTempCalcnThermNet */;\r
+#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32\r
+#include "MemMap.h"\r
+\r
+/*----------------------------------------------------------------------------*\\\r
+  PARAMETERIZED MACROS\r
+\\*----------------------------------------------------------------------------*/\r
+/*----------------------------------------------------------------------------*\\\r
+  FUNCTION PROTOTYPES\r
+\\*----------------------------------------------------------------------------*/\r
+\r
+#endif/*PMTEMPCALCNTHERMNET_INPUTS_H */\r
+/*----------------------------------------------------------------------------*\\\r
+  END OF FILE\r
+\\*----------------------------------------------------------------------------*/\r
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_Outputs.h b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_Outputs.h
index 8926675c7..4096b88a7 100644
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_Outputs.h
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_Outputs.h
@@ -1,183 +1,178 @@
-/**************************************************************************************************\\
- *** 
- *** Simulink model       : PmTempCalcnThermNet
- *** TargetLink subsystem : PmTempCalcnThermNet
- *** Codefile             : PmTempCalcnThermNet_Outputs.h
- ***
- *** Generated by TargetLink, the dSPACE production quality code generator
- *** Generation date: 2021-11-08 12:32:25
- ***
- *** CODE GENERATOR OPTIONS:
- *** Code generation mode                     : Standard
- *** Compiler                                 : <unknown>
- *** Target                                   : Generic
- *** ANSI-C compatible code                   : yes
- *** Code Optimization                        : enabled
- *** Constant style                           : decimal
- *** Clean code option                        : enabled
- *** Logging mode                             : Do not log anything
- *** Code Coverage                            : disabled
- *** Generate empty conditional branches      : disabled
- *** Efficient vector handling                : enabled
- *** Loop unroll threshold                    : 5
- *** Variable vector widths                   : enabled
- *** Shift mode                               : automatic
- *** Handle unscaled SF expr. with TL type    : enabled
- *** No assignment of boolean expressions     : disabled
- *** Scope reduction only to function level   : disabled
- *** Exploit ranges if not erasable           : disabled
- *** Exploit Compute Through Overflow         : optimized
- *** Linker sections                          : enabled
- *** Enable Assembler                         : disabled
- *** Variable name length                     : 31 chars
- *** Use global bitfields                     : disabled
- *** Stateflow: use of bitfields              : enabled
- *** State activity encoding limit            : 5
- *** Omit zero inits in restart function      : disabled
- *** Share functions between TL subsystems    : disabled
- *** Generate 64bit functions                 : disabled
- *** Inlining Threshold                       : 6
- *** Line break limit                         : 100
- *** Target optimized boolean data type       : enabled
- *** Keep saturation elements                 : disabled
- *** Extended variable sharing                : enabled
- *** Extended lifetime optimization           : enabled
- *** Style definition file                    : D:\\Git\\100kw\\ec_models_pub\\lib\\targetlink\\StyleSheet
- ***                                            s\\config\\cconfig.xml
- *** Root style sheet                         : D:\\Git\\100kw\\ec_models_pub\\lib\\targetlink\\StyleSheet
- ***                                            s\\StyleSheets_DPR\\TL_CSourceCodeSS_MISRA_config.xsl
- ***
- *** TargetLink version      : 3.5p2 from 14-Aug-2014
- *** Code generator version  : Build Id 3.5.0.28 from 2014-08-20 16:45:15
- *** Copyright (C) Siemens AG 2015 (All Rights Reserved. Confidential)
-\\**************************************************************************************************/
-
-/*----------------------------------------------------------------------------*\\
- Supression of QAC MISRA findings for automatic generated Code by TargetLink 
- Documentation: W:ec 
-\\*----------------------------------------------------------------------------*/
-/* PRQA S 160,161,162,163,164,165,166,167,168,169 EOF*/
-/* PRQA S 170,171,172,173,174,175,176,177,178,179 EOF*/
-/* PRQA S 184,185,186,190,191,192,193,194,195,196 EOF*/
-/* PRQA S 197,198,199,200,201,203,204,206,207,208 EOF*/
-/* PRQA S 232,233,235,240,241,244,246,268,275,301 EOF*/
-/* PRQA S 302,304,307,309,310,311,312,321,322,327 EOF*/
-/* PRQA S 337,338,341,342,400,401,402,403,404,405 EOF*/
-/* PRQA S 422,423,426,427,429,430,431,432,435,436 EOF*/
-/* PRQA S 437,446,447,448,449,450,451,452,453,454 EOF*/
-/* PRQA S 456,457,458,460,461,462,463,466,467,468 EOF*/
-/* PRQA S 469,475,476,477,478,481,482,483,484,485 EOF*/
-/* PRQA S 486,487,488,493,494,495,496,513,514,515 EOF*/
-/* PRQA S 536,537,540,541,542,543,544,545,546,547 EOF*/
-/* PRQA S 550,551,554,555,556,557,558,559,560,561 EOF*/
-/* PRQA S 562,563,564,565,570,572,580,588,589,590 EOF*/
-/* PRQA S 591,594,601,602,603,605,616,619,620,621 EOF*/
-/* PRQA S 622,623,625,626,627,628,629,630,631,632 EOF*/
-/* PRQA S 633,634,635,636,638,640,641,642,643,644 EOF*/
-/* PRQA S 645,646,649,650,651,653,654,655,656,657 EOF*/
-/* PRQA S 658,659,660,661,662,664,665,667,668,669 EOF*/
-/* PRQA S 671,672,673,674,675,676,677,678,680,682 EOF*/
-/* PRQA S 683,684,685,690,698,699,706,708,709,736 EOF*/
-/* PRQA S 737,738,745,746,747,750,755,756,757,758 EOF*/
-/* PRQA S 759,766,767,768,774,775,777,779,784,785 EOF*/
-/* PRQA S 786,787,788,791,795,801,802,803,804,811 EOF*/
-/* PRQA S 812,813,814,817,818,821,830,831,834,835 EOF*/
-/* PRQA S 836,837,840,841,844,845,848,851,852,853 EOF*/
-/* PRQA S 854,864,865,866,867,872,873,874,877,883 EOF*/
-/* PRQA S 885,887,888,899,914,915,940,941,942,943 EOF*/
-/* PRQA S 944,981,1001,1002,1003,1006,1008,1012,1014,1015 EOF*/
-/* PRQA S 1019,1020,1021,1022,1023,1024,1025,1026,1028,1029 EOF*/
-/* PRQA S 1033,1034,1035,1036,1037,1038,1039,1041,1042,1043 EOF*/
-/* PRQA S 1044,1045,1046,1047,1048,1049,1050,1051,1052,1057 EOF*/
-/* PRQA S 1058,1060,1061,1062,1257,1264,1265,1266,1281,1291 EOF*/
-/* PRQA S 1292,1293,1294,1295,1296,1297,1298,1299,1331,1332 EOF*/
-/* PRQA S 1333,1397,1398,1399,1460,1503,1504,1505,1506,1507 EOF*/
-/* PRQA S 1508,1513,1514,1520,1525,1526,1527,1528,1531,1532 EOF*/
-/* PRQA S 1533,1750,1756,1800,1802,1803,1804,1820,1821,1822 EOF*/
-/* PRQA S 1823,1824,1830,1831,1832,1833,1834,1840,1841,1842 EOF*/
-/* PRQA S 1843,1844,1850,1851,1852,1853,1854,1860,1861,1862 EOF*/
-/* PRQA S 1863,1864,1880,1881,1882,1890,1891,1892,1893,1894 EOF*/
-/* PRQA S 1895,2547,2741,2742,2744,2791,2792,2800,2801,2802 EOF*/
-/* PRQA S 2810,2811,2812,2820,2821,2822,2830,2831,2832,2840 EOF*/
-/* PRQA S 2841,2842,2845,2846,2847,2850,2871,2872,2877,2880 EOF*/
-/* PRQA S 2882,2889,2890,2900,2930,2931,2932,2990,2991,2992 EOF*/
-/* PRQA S 2993,2994,2997,2998,3006,3008,3101,3102,3113,3114 EOF*/
-/* PRQA S 3200,3218,3219,3224,3236,3237,3238,3239,3240,3243 EOF*/
-/* PRQA S 3244,3305,3311,3312,3319,3320,3334,3344,3389,3391 EOF*/
-/* PRQA S 3392,3394,3395,3396,3397,3408,3415,3421,3430,3432 EOF*/
-/* PRQA S 3437,3438,3440,3445,3449,3451,3453,3493,3494,3660 EOF*/
-/* PRQA S 3664,3670,3673,3676,4301,4302,4303,4304,4305,4310 EOF*/
-/* PRQA S 4312,4315,4320,4322,4330,4332,4340,4342,4350,4351 EOF*/
-/* PRQA S 4352,4389,4390,4391,4392,4393,4394,4395,4398,4399 EOF*/
-/* PRQA S 4401,4402,4403,4404,4405,4410,4412,4413,4414,4415 EOF*/
-/* PRQA S 4420,4421,4422,4423,4424,4425,4430,4431,4432,4434 EOF*/
-/* PRQA S 4435,4437,4440,4441,4442,4443,4445,4446,4447,4450 EOF*/
-/* PRQA S 4451,4452,4453,4454,4460,4461,4462,4463,4464,4465 EOF*/
-/* PRQA S 4490,4491,4492,4499,4500,4501,4502,4503,4504,4505 EOF*/
-/* PRQA S 4507,4510,4511,4512,4513,4514,4518,4519,4521,4522 EOF*/
-/* PRQA S 4523,4524,4527,4528,4529,4532,4533,4534,4538,4539 EOF*/
-/* PRQA S 4542,4543,4548,4549,4558,4559,4568,4569,4600,4601 EOF*/
-/* PRQA S 4602,4603,4604,4605,4606,4607,4608,4620,4621,5087 EOF*/
-/* PRQA S 5131,5134,5136,5209 EOF*/
-/*----------------------------------------------------------------------------*/
-#ifndef PMTEMPCALCNTHERMNET_OUTPUTS_H
-#define PMTEMPCALCNTHERMNET_OUTPUTS_H
-
-/*----------------------------------------------------------------------------*\\
-  DEFINES (OPT)
-\\*----------------------------------------------------------------------------*/
-/*----------------------------------------------------------------------------*\\
-  INCLUDES
-\\*----------------------------------------------------------------------------*/
-#include "tl_defines_PmTempCalcnThermNet.h"
-#include "Platform_Types.h"
-/*----------------------------------------------------------------------------*\\
-  DEFINES
-\\*----------------------------------------------------------------------------*/
-/*----------------------------------------------------------------------------*\\
-  TYPEDEFS
-\\*----------------------------------------------------------------------------*/
-
-struct tag_PmTempCalcnThermNet_OutputData {
-   float32 TempWindgSnsrAvgVal /* Description: Average value of stator winding temperature measured 
-   via NTC sensor (3 or 2 number of sensor) */;
-   float32 StatorWindgTemp /* Description: Stator winding temperature in degree celcius */;
-   float32 StatorWindgEndTemp /* Description: Stator winding end temperature in degree celcius */;
-   float32 PmTempEst /* Description: Estimated value of actual PM temperature received from either o
-   f the State (1,2 or 3). This can be either 1) replacement value or 2) estimated value of PM tempe
-   rature.  */;
-   boolean PmTempIniFlt /* Description: Fault is active if PM temperature is incorrectly initialized
-    or a winding sensor fault is active. (0: Disabled 1: Enabled ) */;
-   boolean PmTempThermNetVld /* Description: Thermal network calculated PM Temperature validity flag
-   . Calculated temperature is valid, if thermal network is in "operating" state 2, else not valid. 
-   (1: when State = 2 0: State =! 2 )
- */;
-}; /* struct type created for variable: PmTempCalcnThermNet_OutputData */
-/*----------------------------------------------------------------------------*\\
-  ENUMS
-\\*----------------------------------------------------------------------------*/
-/*----------------------------------------------------------------------------*\\
-  VARIABLES
-\\*----------------------------------------------------------------------------*/
-
-#define PMTEMPCALCNTHERMNET_START_SEC_VAR_CLEARED_32
-#include "MemMap.h"
-/******************************************************************************\\
-   MemMap_DISP_CLEARED_32: global observable variables (RAM) | Width: N.A.
-\\******************************************************************************/
-extern MemMap_DISP_CLEARED_32 struct tag_PmTempCalcnThermNet_OutputData
-    PmTempCalcnThermNet_OutputData /* Description: Output structure for PmTempCalcnThermNet */;
-#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_CLEARED_32
-#include "MemMap.h"
-
-/*----------------------------------------------------------------------------*\\
-  PARAMETERIZED MACROS
-\\*----------------------------------------------------------------------------*/
-/*----------------------------------------------------------------------------*\\
-  FUNCTION PROTOTYPES
-\\*----------------------------------------------------------------------------*/
-
-#endif/*PMTEMPCALCNTHERMNET_OUTPUTS_H */
-/*----------------------------------------------------------------------------*\\
-  END OF FILE
-\\*----------------------------------------------------------------------------*/
+/**************************************************************************************************\\\r
+ *** \r
+ *** Simulink model       : PmTempCalcnThermNet\r
+ *** TargetLink subsystem : PmTempCalcnThermNet\r
+ *** Codefile             : PmTempCalcnThermNet_Outputs.h\r
+ ***\r
+ *** Generated by TargetLink, the dSPACE production quality code generator\r
+ *** Generation date: 2022-03-31 16:11:59\r
+ ***\r
+ *** CODE GENERATOR OPTIONS:\r
+ *** Code generation mode                     : Standard\r
+ *** Compiler                                 : <unknown>\r
+ *** Target                                   : Generic\r
+ *** ANSI-C compatible code                   : yes\r
+ *** Code Optimization                        : enabled\r
+ *** Constant style                           : decimal\r
+ *** Clean code option                        : enabled\r
+ *** Logging mode                             : Do not log anything\r
+ *** Code Coverage                            : disabled\r
+ *** Generate empty conditional branches      : disabled\r
+ *** Efficient vector handling                : enabled\r
+ *** Loop unroll threshold                    : 5\r
+ *** Variable vector widths                   : enabled\r
+ *** Shift mode                               : automatic\r
+ *** Handle unscaled SF expr. with TL type    : enabled\r
+ *** No assignment of boolean expressions     : disabled\r
+ *** Scope reduction only to function level   : disabled\r
+ *** Exploit ranges if not erasable           : disabled\r
+ *** Exploit Compute Through Overflow         : optimized\r
+ *** Linker sections                          : enabled\r
+ *** Enable Assembler                         : disabled\r
+ *** Variable name length                     : 31 chars\r
+ *** Use global bitfields                     : disabled\r
+ *** Stateflow: use of bitfields              : enabled\r
+ *** State activity encoding limit            : 5\r
+ *** Omit zero inits in restart function      : disabled\r
+ *** Share functions between TL subsystems    : disabled\r
+ *** Generate 64bit functions                 : disabled\r
+ *** Inlining Threshold                       : 6\r
+ *** Line break limit                         : 100\r
+ *** Target optimized boolean data type       : enabled\r
+ *** Keep saturation elements                 : disabled\r
+ *** Extended variable sharing                : enabled\r
+ *** Extended lifetime optimization           : enabled\r
+ *** Style definition file                    : D:\\ai\\ec_models_pub\\lib\\targetlink\\StyleSheets\\confi\r
+ ***                                            g\\cconfig.xml\r
+ *** Root style sheet                         : D:\\ai\\ec_models_pub\\lib\\targetlink\\StyleSheets\\Style\r
+ ***                                            Sheets_DPR\\TL_CSourceCodeSS_MISRA_config.xsl\r
+ ***\r
+ *** TargetLink version      : 3.5 from 30-Oct-2013\r
+ *** Code generator version  : Build Id 3.5.0.22 from 2013-10-07 16:59:57\r
+ *** Copyright (C) Siemens AG 2015 (All Rights Reserved. Confidential)\r
+\\**************************************************************************************************/\r
+\r
+/*----------------------------------------------------------------------------*\\\r
+ Supression of QAC MISRA findings for automatic generated Code by TargetLink \r
+ Documentation: W:ec \r
+\\*----------------------------------------------------------------------------*/\r
+/* PRQA S 160,161,162,163,164,165,166,167,168,169 EOF*/\r
+/* PRQA S 170,171,172,173,174,175,176,177,178,179 EOF*/\r
+/* PRQA S 184,185,186,190,191,192,193,194,195,196 EOF*/\r
+/* PRQA S 197,198,199,200,201,203,204,206,207,208 EOF*/\r
+/* PRQA S 232,233,235,240,241,244,246,268,275,301 EOF*/\r
+/* PRQA S 302,304,307,309,310,311,312,321,322,327 EOF*/\r
+/* PRQA S 337,338,341,342,400,401,402,403,404,405 EOF*/\r
+/* PRQA S 422,423,426,427,429,430,431,432,435,436 EOF*/\r
+/* PRQA S 437,446,447,448,449,450,451,452,453,454 EOF*/\r
+/* PRQA S 456,457,458,460,461,462,463,466,467,468 EOF*/\r
+/* PRQA S 469,475,476,477,478,481,482,483,484,485 EOF*/\r
+/* PRQA S 486,487,488,493,494,495,496,513,514,515 EOF*/\r
+/* PRQA S 536,537,540,541,542,543,544,545,546,547 EOF*/\r
+/* PRQA S 550,551,554,555,556,557,558,559,560,561 EOF*/\r
+/* PRQA S 562,563,564,565,570,572,580,588,589,590 EOF*/\r
+/* PRQA S 591,594,601,602,603,605,616,619,620,621 EOF*/\r
+/* PRQA S 622,623,625,626,627,628,629,630,631,632 EOF*/\r
+/* PRQA S 633,634,635,636,638,640,641,642,643,644 EOF*/\r
+/* PRQA S 645,646,649,650,651,653,654,655,656,657 EOF*/\r
+/* PRQA S 658,659,660,661,662,664,665,667,668,669 EOF*/\r
+/* PRQA S 671,672,673,674,675,676,677,678,680,682 EOF*/\r
+/* PRQA S 683,684,685,690,698,699,706,708,709,736 EOF*/\r
+/* PRQA S 737,738,745,746,747,750,755,756,757,758 EOF*/\r
+/* PRQA S 759,766,767,768,774,775,777,779,784,785 EOF*/\r
+/* PRQA S 786,787,788,791,795,801,802,803,804,811 EOF*/\r
+/* PRQA S 812,813,814,817,818,821,830,831,834,835 EOF*/\r
+/* PRQA S 836,837,840,841,844,845,848,851,852,853 EOF*/\r
+/* PRQA S 854,864,865,866,867,872,873,874,877,883 EOF*/\r
+/* PRQA S 885,887,888,899,914,915,940,941,942,943 EOF*/\r
+/* PRQA S 944,981,1001,1002,1003,1006,1008,1012,1014,1015 EOF*/\r
+/* PRQA S 1019,1020,1021,1022,1023,1024,1025,1026,1028,1029 EOF*/\r
+/* PRQA S 1033,1034,1035,1036,1037,1038,1039,1041,1042,1043 EOF*/\r
+/* PRQA S 1044,1045,1046,1047,1048,1049,1050,1051,1052,1057 EOF*/\r
+/* PRQA S 1058,1060,1061,1062,1257,1264,1265,1266,1281,1291 EOF*/\r
+/* PRQA S 1292,1293,1294,1295,1296,1297,1298,1299,1331,1332 EOF*/\r
+/* PRQA S 1333,1397,1398,1399,1460,1503,1504,1505,1506,1507 EOF*/\r
+/* PRQA S 1508,1513,1514,1520,1525,1526,1527,1528,1531,1532 EOF*/\r
+/* PRQA S 1533,1750,1756,1800,1802,1803,1804,1820,1821,1822 EOF*/\r
+/* PRQA S 1823,1824,1830,1831,1832,1833,1834,1840,1841,1842 EOF*/\r
+/* PRQA S 1843,1844,1850,1851,1852,1853,1854,1860,1861,1862 EOF*/\r
+/* PRQA S 1863,1864,1880,1881,1882,1890,1891,1892,1893,1894 EOF*/\r
+/* PRQA S 1895,2547,2741,2742,2744,2791,2792,2800,2801,2802 EOF*/\r
+/* PRQA S 2810,2811,2812,2820,2821,2822,2830,2831,2832,2840 EOF*/\r
+/* PRQA S 2841,2842,2845,2846,2847,2850,2871,2872,2877,2880 EOF*/\r
+/* PRQA S 2882,2889,2890,2900,2930,2931,2932,2990,2991,2992 EOF*/\r
+/* PRQA S 2993,2994,2997,2998,3006,3008,3101,3102,3113,3114 EOF*/\r
+/* PRQA S 3200,3218,3219,3224,3236,3237,3238,3239,3240,3243 EOF*/\r
+/* PRQA S 3244,3305,3311,3312,3319,3320,3334,3344,3389,3391 EOF*/\r
+/* PRQA S 3392,3394,3395,3396,3397,3408,3415,3421,3430,3432 EOF*/\r
+/* PRQA S 3437,3438,3440,3445,3449,3451,3453,3493,3494,3660 EOF*/\r
+/* PRQA S 3664,3670,3673,3676,4301,4302,4303,4304,4305,4310 EOF*/\r
+/* PRQA S 4312,4315,4320,4322,4330,4332,4340,4342,4350,4351 EOF*/\r
+/* PRQA S 4352,4389,4390,4391,4392,4393,4394,4395,4398,4399 EOF*/\r
+/* PRQA S 4401,4402,4403,4404,4405,4410,4412,4413,4414,4415 EOF*/\r
+/* PRQA S 4420,4421,4422,4423,4424,4425,4430,4431,4432,4434 EOF*/\r
+/* PRQA S 4435,4437,4440,4441,4442,4443,4445,4446,4447,4450 EOF*/\r
+/* PRQA S 4451,4452,4453,4454,4460,4461,4462,4463,4464,4465 EOF*/\r
+/* PRQA S 4490,4491,4492,4499,4500,4501,4502,4503,4504,4505 EOF*/\r
+/* PRQA S 4507,4510,4511,4512,4513,4514,4518,4519,4521,4522 EOF*/\r
+/* PRQA S 4523,4524,4527,4528,4529,4532,4533,4534,4538,4539 EOF*/\r
+/* PRQA S 4542,4543,4548,4549,4558,4559,4568,4569,4600,4601 EOF*/\r
+/* PRQA S 4602,4603,4604,4605,4606,4607,4608,4620,4621,5087 EOF*/\r
+/* PRQA S 5131,5134,5136,5209 EOF*/\r
+/*----------------------------------------------------------------------------*/\r
+#ifndef PMTEMPCALCNTHERMNET_OUTPUTS_H\r
+#define PMTEMPCALCNTHERMNET_OUTPUTS_H\r
+\r
+/*----------------------------------------------------------------------------*\\\r
+  DEFINES (OPT)\r
+\\*----------------------------------------------------------------------------*/\r
+/*----------------------------------------------------------------------------*\\\r
+  INCLUDES\r
+\\*----------------------------------------------------------------------------*/\r
+#include "Platform_Types.h"\r
+/*----------------------------------------------------------------------------*\\\r
+  DEFINES\r
+\\*----------------------------------------------------------------------------*/\r
+/*----------------------------------------------------------------------------*\\\r
+  TYPEDEFS\r
+\\*----------------------------------------------------------------------------*/\r
+\r
+struct tag_PmTempCalcnThermNet_OutputData {\r
+   float32 StatorWindgTemp /* Description: Stator winding temperature in degree celcius */;\r
+   float32 StatorWindgEndTemp /* Description: Stator winding end temperature in degree celcius */;\r
+   float32 PmTempEst /* Description: Estimated value of actual PM temperature received from either o\r
+   f the State (1,2 or 3). This can be either 1) replacement value or 2) estimated value of PM tempe\r
+   rature.  */;\r
+   boolean PmTempThermNetVld /* Description: Thermal network calculated PM Temperature validity flag\r
+   . Calculated temperature is valid, if thermal network is in "operating" state 2, else not valid. \r
+   (1: when State = 2 0: State =! 2 )\r
+ */;\r
+}; /* struct type created for variable: PmTempCalcnThermNet_OutputData */\r
+/*----------------------------------------------------------------------------*\\\r
+  ENUMS\r
+\\*----------------------------------------------------------------------------*/\r
+/*----------------------------------------------------------------------------*\\\r
+  VARIABLES\r
+\\*----------------------------------------------------------------------------*/\r
+\r
+#define PMTEMPCALCNTHERMNET_START_SEC_VAR_CLEARED_32\r
+#include "MemMap.h"\r
+/******************************************************************************\\\r
+   MEMMAP_DISP_CLEARED_32: global observable variables (RAM) | Width: N.A.\r
+\\******************************************************************************/\r
+extern struct tag_PmTempCalcnThermNet_OutputData PmTempCalcnThermNet_OutputData /* Description: Outp\r
+   ut structure for PmTempCalcnThermNet */;\r
+#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_CLEARED_32\r
+#include "MemMap.h"\r
+\r
+/*----------------------------------------------------------------------------*\\\r
+  PARAMETERIZED MACROS\r
+\\*----------------------------------------------------------------------------*/\r
+/*----------------------------------------------------------------------------*\\\r
+  FUNCTION PROTOTYPES\r
+\\*----------------------------------------------------------------------------*/\r
+\r
+#endif/*PMTEMPCALCNTHERMNET_OUTPUTS_H */\r
+/*----------------------------------------------------------------------------*\\\r
+  END OF FILE\r
+\\*----------------------------------------------------------------------------*/\r
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_WrprData.h b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_WrprData.h
index cb37d0ae0..1f4574433 100644
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_WrprData.h
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_WrprData.h
@@ -37,15 +37,6 @@
 /*================== [type definitions] =====================================*/
 
 /*================== [declaration of public data] ===========================*/
-/* Begin: PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_8 (online) */
-#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_8
-#include "MemMap.h"
-
-extern VAR(uint8, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetState;
-#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_8
-#include "MemMap.h"
-/* End: PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_8 (online) */
-
 
 
 /* Begin: PWMSPMGR_START_SEC_VAR_CLEARED_32 (online) */
@@ -57,6 +48,12 @@ extern VAR(float32, PWMSPMGR_VAR) PwmSpMgrPwmFrqSpFild10;
 #include "MemMap.h"
 /* End: PWMSPMGR_STOP_SEC_VAR_CLEARED_32 (online) */
 
+#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32
+#include "MemMap.h"
+
+extern VAR (uint32, PMTEMPCALCNTHERMNET_VAR)  PmTempCalcnThermNetHwFaultDelay;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32
+#include "MemMap.h"
 
 /* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_32 (calib) */
 #define PMTEMPCALCNTHERMNET_START_SEC_CALIB_32
@@ -77,15 +74,6 @@ extern VAR(float32, IVTRTHERMMDL_VAR) IvtrThermMdlCooltFlowRateAct;
 /* End: IVTRTHERMMDL_STOP_SEC_VAR_INIT_32 (online) */
 
 
-/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_32 (calib) */
-#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_32
-#include "MemMap.h"
-
-extern CONST(float32, PMTEMPCALCNTHERMNET_CALIB) PmTempCalcnThermNetWindgTempSnrAvgRplcVal;
-#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32
-#include "MemMap.h"
-/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32 (calib) */
-
 /* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_32 (calib) */
 #define PMTEMPCALCNTHERMNET_START_SEC_CALIB_32
 #include "MemMap.h"
@@ -108,21 +96,141 @@ extern CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) PmTempCalcnThermNetPmTempVldRpl
 
 #define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32
 #include "MemMap.h"
-extern VAR (float32, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetPmTemp;
-extern VAR (float32, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetWindgTempSnrAvg;   /*PRQA S 0777 */
-extern VAR (float32, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetWindgTempCalcn;     /*PRQA S 0777 */
-extern VAR (float32, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetWindgEndTempCalcn;
+
+EXTERNAL_ VAR (float32, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetPmTemp;
+EXTERNAL_ VAR (float32, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetWindgTempCalcn;     /*PRQA S 0777 */
+
+EXTERNAL_ VAR (float32, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetWindgEndTempCalcn;
 #define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32
 #include "MemMap.h"
 
 #define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_8
 #include "MemMap.h"
-extern VAR (boolean, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetIniFlt;
-extern VAR (boolean, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetPmTempVld;
+
+EXTERNAL_ VAR (boolean, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetPmTempVld;
+
 #define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_8
 #include "MemMap.h"
 
+/*Simulation interface*/
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_8 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_8
+#include "MemMap.h"
+extern CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) SimnPmTemp_FID_IniHvOff;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8 (calib) */
 
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_8 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_8
+#include "MemMap.h"
+extern CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) SimnPmTemp_FID_IniPrkgTi;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_8 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_8
+#include "MemMap.h"
+extern CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) SimnPmTemp_FID_IniNvm;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_8 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_8
+#include "MemMap.h"
+extern CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) SimnPmTemp_HwFlt_WindgSnsr1;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_8 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_8
+#include "MemMap.h"
+extern CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) SimnPmTemp_HwFlt_WindgSnsr2;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_8 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_8
+#include "MemMap.h"
+extern CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) SimnPmTemp_HwFlt_WindgSnsr3;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_8 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_8
+#include "MemMap.h"
+extern CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) SimnPmTemp_FID_ErrHvOff;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_8 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_8
+#include "MemMap.h"
+extern CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) SimnPmTemp_FID_ErrPrkgTi;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_8 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_8
+#include "MemMap.h"
+extern CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) SimnPmTemp_FID_ErrNvm;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_32 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_32
+#include "MemMap.h"
+extern CONST(float32, PMTEMPCALCNTHERMNET_CALIB) SimnPmTemp_NVM_Temp1;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_32 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_32
+#include "MemMap.h"
+extern CONST(float32, PMTEMPCALCNTHERMNET_CALIB) SimnPmTemp_NVM_Temp2;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32 (calib) */
+
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_32
+#include "MemMap.h"
+extern CONST(uint32,PMTEMPCALCNTHERMNET_CALIB) PmTempCalcnThermNetHwFaultCheckDelay;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32
+#include "MemMap.h"
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_32 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_32
+#include "MemMap.h"
+extern CONST(float32, PMTEMPCALCNTHERMNET_CALIB) SimnPmTemp_CAN_VehPrkgTi;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_32 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_32
+#include "MemMap.h"
+extern CONST(float32, PMTEMPCALCNTHERMNET_CALIB) SimnPmTemp_CAN_HvOffTi;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_8 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_8
+#include "MemMap.h"
+extern CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) DiSimnPmTemp;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8 (calib) */
 
 /*================== [closure] ==============================================*/
 /*! \\misra Warning No C2004:19.6 "Undefine EXTERNAL_ according to Coding Guideline." */
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/lib/PmTempCalcnThermNet.a b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/lib/PmTempCalcnThermNet.a
index 02f3d4173..0a111e5aa 100644
Binary files a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/lib/PmTempCalcnThermNet.a and b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/lib/PmTempCalcnThermNet.a differ
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/lib/PmTempCalcnThermNet.info b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/lib/PmTempCalcnThermNet.info
index 48ad8ca3d..89aa07d80 100644
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/lib/PmTempCalcnThermNet.info
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/lib/PmTempCalcnThermNet.info
@@ -1,86 +1,31 @@
-GIT information for D:/Git/100kw/ec_models/NextGen/codegeneration_models/PmTempCalcnThermNet
-Created: Mo,  8. Nov 2021 12:35:42
+GIT information for D:/ai/ec_models/NextGen/codegeneration_models/PmTempCalcnThermNet
+Created: Do, 31. Mrz 2022 16:16:03
 
 *****
 COMMIT information:
-commit 896c5ad4c16b12e3b6197e775d2bb0b0e48b092c
-Author: Frank IRMISCH (JV EXT) <frank.irmisch.jv.ext@valeo.com>
-Date:   Mon Sep 20 11:58:43 2021 +0200
+commit b66d21cd247c76be55e8b64b9dcede5302a6020e
+Author: Nabil EL-GHALI (JV) <nabil.el-ghali.jv@valeo.com>
+Date:   Thu Dec 9 13:33:18 2021 +0100
 
-    $100kW-41349$ - Quality update: Rebase latest modules from P310
+    $100kW-48709$ - IPMCTRL2 UT update
     
-    merged ec_models(_pub) branch release_vw_meb_a310
-    rebuild all models based on branch release_vw_meb_a310
-    
-    ec_models:
-       - EncCalcn
-       - ExtdTqLim
-       - filter_phi_TL
-       - FncGen
-       - HvAcIFndmtlCptAmpCalcn
-       - HvAcIMeas
-       - HvAcIMeasEolCal
-       - HvDcICalcn
-       - HvDcILimn
-       - HvDcULimn
-       - HvDcUMeas
-       - IPMCtrl2
-       - IpmPwrLossCalcn
-       - IvtrDcLinkThermMdl
-       - IvtrHvAcBusBarThermMdl
-       - IvtrThermMdlForHPDrive
-       - Mod3PhTL
-       - PhaFailSngDetn
-       - PmTempCalcnBackEmf
-       - PMTempCalcnThermNetVw
-       - PtLimnCalcn
-       - PwmSpCalcn
-       - PwmSpMgr
-       - ResApp
-       - RslvrOffsDetn
-       - SigColl
-       - SweepFnc
-       - TqPrednIpmPwrLoss
-       - TqPrednIpmSpCalcn
-       - TqPrednIvtrPwrLoss
-       - TqPrednTqLimCalcn
-    
-            DRCO_ENCCALCN_BASIS_V00606_100KW_V00001
-            DRCO_EXTDTQLIM_BASIS_V00000_100KW_V00001
-            DRCO_FILTERPHI_BASIS_V00503_OPTIMUS_100KW_V00002
-            DRCO_HVACIAMPCALCN_BASIS_V00421_100KW_V00001
-            DRCO_HVACIMEAS_BASIS_V00602_100KW_V00001
-            DRCO_HVACIMEASEOLCAL_BASIS_V00400_100KW_V00001
-            DRCO_HVDCICALCN_BASIS_V00214_100KW_V00001
-            DRCO_HVDCILIMN_BASIS_V00502_100KW_V00001
-            DRCO_HVDCULIMN_BASIS_V00400_100KW_V00001
-            DRCO_HVDCUMEAS_BASIS_V00504_100KW_V00001
-            DRCO_IPMCTRL2_BASIS_V02460_100KW_V00001
-            DRCO_IPMPWRLOSSCALCN_BASIS_V00010_100KW_00001
-            DRCO_IVTRDCLINKTHERMMDL_BASIS_V00240_100KW_V00001
-            DRCO_IVTRHVACBUSBARTHERMMDL_BASIS_V00240_100KW_V00001
-            DRCO_IVTRTHERMMDLFORHPDRIVE_BASIS_V00401_100KW_V00031
-            DRCO_MOD3PHTL_BASIS_V01010_100KW_V00001
-            DRCO_PHAFAILSNGDETN_BASIS_V01120_100KW_V00001
-            DRCO_PMTEMPBACKEMFCALC_BASIS_V00201_100KW_V00001
-            DRCO_PMTEMPCALCNTHERMNETVW_V00370_100KW_V00001
-            DRCO_PTLIMNCALCN_BASIS_V00320_100KW_V00001
-            DRCO_PWMSPCALCN_BASIS_V00200_100KW_V00001
-            DRCO_PWMSPMGR_BASIS_V00111_100KW_V00001
-            DRCO_RESAPP_BASIS_V00209_OPTIMUS_100KW_V00002
-            DRCO_RSLVROFFSDETN_BASIS_V00421_100KW_V00101
-            DRCO_SIGCOL_BASIS_V01200_100KW_V00001
-            DRCO_SWEEPFNC_BASIS_V00000_100KW_V00001
-            DRCO_TQPREDNIPMPWRLOSS_BASIS_V00100_100KW_V00001
-            DRCO_TQPREDNIPMSPCALCN_BASIS_V00100_100KW_V00001
-            DRCO_TQPREDNIVTRPWRLOSS_BASIS_V00020_100KW_V00001
-            DRCO_TQPREDNTQLIMCALCN_BASIS_V00200_100KW_V00001
-    
-    Change-Id: I17eadb38b3e267c5bf50a6174ed32c25098ebe33
+    Change-Id: Ia149c2d0430271d3a39efe1c27ae5a4cef887987
 
 *****
 TAGs on commit:
-P2-100KW-MASTER-0194-20211104
+P2-100KW-MASTER-0301-20220330
 
 *****
 Changed files under version control but not committed:
+NextGen/codegeneration_models/PmTempCalcnThermNet/archive/PmTempCalcnThermNet.a
+NextGen/codegeneration_models/PmTempCalcnThermNet/archive/PmTempCalcnThermNet.a2l
+NextGen/codegeneration_models/PmTempCalcnThermNet/archive/PmTempCalcnThermNet/PmTempCalcnThermNet.c
+NextGen/codegeneration_models/PmTempCalcnThermNet/archive/PmTempCalcnThermNet/PmTempCalcnThermNet.h
+NextGen/codegeneration_models/PmTempCalcnThermNet/archive/PmTempCalcnThermNet/PmTempCalcnThermNet_Data.c
+NextGen/codegeneration_models/PmTempCalcnThermNet/archive/PmTempCalcnThermNet/PmTempCalcnThermNet_Data.h
+NextGen/codegeneration_models/PmTempCalcnThermNet/archive/PmTempCalcnThermNet/PmTempCalcnThermNet_Inputs.c
+NextGen/codegeneration_models/PmTempCalcnThermNet/archive/PmTempCalcnThermNet/PmTempCalcnThermNet_Inputs.h
+NextGen/codegeneration_models/PmTempCalcnThermNet/archive/PmTempCalcnThermNet/PmTempCalcnThermNet_Outputs.c
+NextGen/codegeneration_models/PmTempCalcnThermNet/archive/PmTempCalcnThermNet/PmTempCalcnThermNet_Outputs.h
+NextGen/codegeneration_models/PmTempCalcnThermNet/archive/PmTempCalcnThermNet/tl_defines_PmTempCalcnThermNet.h
+NextGen/codegeneration_models/PmTempCalcnThermNet/misc/MeasurementData/Pst/EFF-Messung18.09.2019_DL3_35degC_Cool.mat
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/src/PmTempCalcnThermNet_Wrpr.c b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/src/PmTempCalcnThermNet_Wrpr.c
index 0bbc089ea..8ccdbcf0d 100644
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/src/PmTempCalcnThermNet_Wrpr.c
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/src/PmTempCalcnThermNet_Wrpr.c
@@ -35,7 +35,7 @@
 
 /* !\\misraWarningNo2012: Rule 1.1(DIR) " [L] Number of macro definitions exceeds 4095 - program does not conform strictly to ISO:C99."*/
 /*"Justification: Because of the platfrom approach is nescesary to be have the macros to compile the different SWs"*/
-#include "C2cComBswData.h" /*PRQA S 0380*/
+#include "C2cComBswData.h"  /*PRQA S 0380*/
 #include "C2cComSftyData.h" /*PRQA S 0380*/
 #include "DrvCtrlErrDeb.h"  /*PRQA S 0380*/
 
@@ -43,7 +43,7 @@
 #include "RotorAgSpdCalcn_data.h"
 #include "IpmCtrl_data.h"
 #include "Mod3Pha_data.h"
-#include "BswErrDeb.h"
+
 
 /*================== [defines] ==============================================*/
 
@@ -67,21 +67,74 @@
 /******************************************************************/
 FUNC(void, PMTEMPCALCNTHERMNET_CODE) PmTempCalcnThermNet_Run(void)
 {
-
-   /* read the Nvm value during Init  */
-   PmTempCalcnThermNet_InputData.NVM_Temp1 = BswC2cData.InvTempNvm.EmTemp1;
-   PmTempCalcnThermNet_InputData.NVM_Temp2 = BswC2cData.InvTempNvm.EmTemp2;
-   PmTempCalcnThermNet_InputData.NVM_Temp3 = BswC2cData.InvTempNvm.EmTemp2;
+   /*check, if simulation mode is disabled*/
+   if(TRUE == DiSimnPmTemp)
+   {
+      /* read the Nvm value during Init  */
+      PmTempCalcnThermNet_InputData.NVM_Temp1 = BswC2cData.InvTempNvm.EmTemp1; /* Temperature saved in NVM memory block 1 at the time of vehicle switch-off (during last operating cycle) */
+      PmTempCalcnThermNet_InputData.NVM_Temp2 = BswC2cData.InvTempNvm.EmTemp2; /* Temperature saved in NVM memory block 2 at the time of vehicle switch-off (during last operating cycle) */
+
+      /* comments code for new FM v1.1.0*/     
+      #if FTR_SNG_PWM_INTRPT == 0
+         /* FID Fault inhibition status for different inputs */
+         PmTempCalcnThermNet_InputData.FID_IniHvOff      = DrvCtrlErrDebFctInhbnSts.B.FctIdHvOffTiIni; /* Initialisation Bit which denotes availability of HV Offtime Signal (0: Not Available; 1: Signal Available) */
+         PmTempCalcnThermNet_InputData.FID_IniPrkgTi     = DrvCtrlErrDebFctInhbnSts.B.FctIdVehPrkgTiIni; /* Initialisation Bit which denotes availability of Vehicle Offtime Signal (0: Not Available; 1: Signal Available) */
+         PmTempCalcnThermNet_InputData.FID_ErrHvOff      = DrvCtrlErrDebFctInhbnSts.B.FctIdHvOffTiInvld; /* Initialisation Bit which denotes validity of HV Offtime Signal (1: Not Valid 0: Signal Valid) */
+         PmTempCalcnThermNet_InputData.FID_ErrPrkgTi     = DrvCtrlErrDebFctInhbnSts.B.FctIdVehPrkgTiInvld; /* Initialisation Bit which denotes validity of Vehicle Offtime Signal (1: Not Valid 0: Signal Valid ) */
+         PmTempCalcnThermNet_InputData.CAN_VehPrkgTi     = BswC2cData.VehPrkgTi; /* Time during which the vehicle stays switched off */
+         PmTempCalcnThermNet_InputData.CAN_HvOffTi       = BswC2cData.HvOffTi; /* Time during which the HV connection is switched off */
+      #else 
+         /* FID Fault bits are not available */
+         PmTempCalcnThermNet_InputData.FID_IniHvOff      = FALSE;
+         PmTempCalcnThermNet_InputData.FID_IniPrkgTi     = FALSE;
+         PmTempCalcnThermNet_InputData.FID_ErrHvOff      = TRUE;
+         PmTempCalcnThermNet_InputData.FID_ErrPrkgTi     = TRUE;
+         PmTempCalcnThermNet_InputData.CAN_VehPrkgTi     = 0.F;
+         PmTempCalcnThermNet_InputData.CAN_HvOffTi       = 0.F;
+      #endif
+      PmTempCalcnThermNet_InputData.FID_IniNvm        = FALSE; /* No validity flag available */
+      PmTempCalcnThermNet_InputData.FID_ErrNvm        = (BswC2cData.InvTempNvm.EmTempVld == FALSE); /* Validity Bit which denotes validity of variables stored NVM (0: Not Valid 1: Signal Valid ) */ /*PRQA S 4404*/
+      if(PmTempCalcnThermNetHwFaultCheckDelay > PmTempCalcnThermNetHwFaultDelay) 
+      {
+         /* Bypass the initial temperature measurement using winding sensor 1 which might be implausible for short time period after start-up */
+         PmTempCalcnThermNetHwFaultDelay++; /* Counter accumulation */
+         PmTempCalcnThermNet_InputData.HwFlt_WindSnsr1 = TRUE; /* Set fault bit of measured stator tempeture using winding sensor 1 to TRUE */
+      }
+      else
+      {
+         /* Load fault bit of measured stator tempeture using winding sensor 1 from external */
+         PmTempCalcnThermNet_InputData.HwFlt_WindSnsr1   = DrvCtrlErrDebFctInhbnSts.B.FctIdFltGrp2; /* Fault Bit of measured stator tempeture using winding sensor 1 (0: No Fault ; 1: Fault Signal ) */
+      }
+      PmTempCalcnThermNet_InputData.HwFlt_WindSnsr2   = TRUE; /* No validity flag available */
+      PmTempCalcnThermNet_InputData.HwFlt_WindSnsr3   = TRUE; /* No validity flag available */
+   }
+   else
+   {
+      /*read simulation interface data*/
+      PmTempCalcnThermNet_InputData.NVM_Temp1 = SimnPmTemp_NVM_Temp1; /* To simulate the temperature saved in NVM memory block 1 at the time of vehicle switch-off (during last operating cycle) */
+      PmTempCalcnThermNet_InputData.NVM_Temp2 = SimnPmTemp_NVM_Temp2; /* To simulate the temperature saved in NVM memory block 2 at the time of vehicle switch-off (during last operating cycle) */
+      /* BswC2cData.InvEmTempNvm.NvmTemp3 is available but not used */
+      PmTempCalcnThermNet_InputData.CAN_VehPrkgTi     = SimnPmTemp_CAN_VehPrkgTi; /* Time during which the vehicle stays switched off */
+      PmTempCalcnThermNet_InputData.CAN_HvOffTi       = SimnPmTemp_CAN_HvOffTi; /* Time during which the HV connection is switched off */
+
+      PmTempCalcnThermNet_InputData.FID_IniHvOff      = SimnPmTemp_FID_IniHvOff; /* Initialisation Bit which denotes availability of HV Offtime Signal (0: Not Available; 1: Signal Available) */
+      PmTempCalcnThermNet_InputData.FID_IniPrkgTi     = SimnPmTemp_FID_IniPrkgTi; /* Initialisation Bit which denotes availability of Vehicle Offtime Signal (0: Not Available; 1: Signal Available) */
+      PmTempCalcnThermNet_InputData.FID_IniNvm        = SimnPmTemp_FID_IniNvm; /* No validity flag available */
+      PmTempCalcnThermNet_InputData.FID_ErrHvOff      = SimnPmTemp_FID_ErrHvOff;  /* Initialisation Bit which denotes validity of HV Offtime Signal (1: Not Valid 0: Signal Valid) */
+      PmTempCalcnThermNet_InputData.FID_ErrPrkgTi     = SimnPmTemp_FID_ErrPrkgTi; /* Initialisation Bit which denotes validity of Vehicle Offtime Signal (1: Not Valid 0: Signal Valid ) */
+      PmTempCalcnThermNet_InputData.FID_ErrNvm        = SimnPmTemp_FID_ErrNvm; /* Validity Bit which denotes validity of variables stored NVM (0: Not Valid 1: Signal Valid ) */ /*PRQA S 4404*/
+      PmTempCalcnThermNet_InputData.HwFlt_WindSnsr1   = SimnPmTemp_HwFlt_WindgSnsr1; /* Fault Bit of measured stator tempeture using winding sensor 1 (0: No Fault ; 1: Fault Signal ) */
+      PmTempCalcnThermNet_InputData.HwFlt_WindSnsr2   = SimnPmTemp_HwFlt_WindgSnsr2; /* Fault Bit of measured stator tempeture using winding sensor 2 (0: No Fault ; 1: Fault Signal ) */
+      PmTempCalcnThermNet_InputData.HwFlt_WindSnsr3   = SimnPmTemp_HwFlt_WindgSnsr3; /* Fault Bit of measured stator tempeture using winding sensor 3 (0: No Fault ; 1: Fault Signal ) */
+   }
 
    /* Actual measured winding temperature using winding temperature sensor */
-   /* Keep same value for all three sensors in PMA */
+   /* Keep same value for all three sensors */
    PmTempCalcnThermNet_InputData.TempWindgSnsr1    = SftyC2cData.MotStatorTVal;
    PmTempCalcnThermNet_InputData.TempWindgSnsr2    = SftyC2cData.MotStatorTVal;
    PmTempCalcnThermNet_InputData.TempWindgSnsr3    = SftyC2cData.MotStatorTVal;
 
    /* read inputs */
-   PmTempCalcnThermNet_InputData.CAN_VehPrkgTi     = BswC2cData.VehPrkgTi; /* Time during which the vehicle stays switched off */
-   PmTempCalcnThermNet_InputData.CAN_HvOffTi       = BswC2cData.HvOffTi; /* Time during which the HV connection is switched off */
    PmTempCalcnThermNet_InputData.EmCooltFlow       = CooltFlowActCalcnCooltFlowAct; /* Estimated flowrate at Inverter coolant outlet */
    PmTempCalcnThermNet_InputData.EmTempCooltInlet  = IvtrThermMdlCooltOutlTemp; /*  Estimated temperature of Inverter coolant outlet */
    PmTempCalcnThermNet_InputData.SpdAct            = RotorAgSpdCalcnSpdMeclFild2 * SYSCON_RAD_TO_RPM; /*  Actual mechanical speed of PM synchronous motor */
@@ -89,26 +142,6 @@ FUNC(void, PMTEMPCALCNTHERMNET_CODE) PmTempCalcnThermNet_Run(void)
    PmTempCalcnThermNet_InputData.IqActFlt          = TqCtrlIqActFild; /*  Actual q current filtered */
    PmTempCalcnThermNet_InputData.ModlnModAct       = Mod3PhaModlnModAct; /*  Modulation type */
 
-   /* comments code for new FM v1.1.0*/
-    #if FTR_SNG_PWM_INTRPT == 0
-      /* FID Fault inhibition status for different inputs */
-      PmTempCalcnThermNet_InputData.FID_IniHvOff      = DrvCtrlErrDebFctInhbnSts.B.FctIdHvOffTiIni; /* Initialisation Bit which denotes availability of HV Offtime Signal (0: Not Available; 1: Signal Available) */
-      PmTempCalcnThermNet_InputData.FID_IniPrkgTi     = DrvCtrlErrDebFctInhbnSts.B.FctIdVehPrkgTiIni; /* Initialisation Bit which denotes availability of Vehicle Offtime Signal (0: Not Available; 1: Signal Available) */
-      PmTempCalcnThermNet_InputData.FID_IniNvm        = FALSE; /* No validity flag available */
-      PmTempCalcnThermNet_InputData.FID_ErrHvOff      = DrvCtrlErrDebFctInhbnSts.B.FctIdHvOffTiInvld;
-      PmTempCalcnThermNet_InputData.FID_ErrPrkgTi     = DrvCtrlErrDebFctInhbnSts.B.FctIdVehPrkgTiInvld;
-   #else
-      PmTempCalcnThermNet_InputData.FID_IniHvOff = FALSE;
-      PmTempCalcnThermNet_InputData.FID_IniPrkgTi = FALSE;
-      PmTempCalcnThermNet_InputData.FID_IniNvm    = FALSE; /* No validity flag available */
-      PmTempCalcnThermNet_InputData.FID_ErrHvOff = FALSE;
-      PmTempCalcnThermNet_InputData.FID_ErrPrkgTi = FALSE;
-   #endif
-
-   PmTempCalcnThermNet_InputData.FID_ErrNvm        = (BswC2cData.InvTempNvm.EmTempVld == FALSE); /* Validity Bit which denotes validity of variables stored NVM (0: Not Valid 1: Signal Valid ) */ /*PRQA S 4404*/
-   PmTempCalcnThermNet_InputData.HwFlt_WindSnsr1   = BswErrDebFctInhbnSts.B.FctIdFltGrp2;
-   PmTempCalcnThermNet_InputData.HwFlt_WindSnsr2   = TRUE; /* No validity flag available */
-   PmTempCalcnThermNet_InputData.HwFlt_WindSnsr3   = TRUE; /* No validity flag available */
    /* Actual PWM frquency filtered for 10 ms */
    PmTempCalcnThermNet_InputData.PwmFrqAct\t\t   = PwmSpMgrPwmFrqSpFild10;
 
@@ -117,22 +150,18 @@ FUNC(void, PMTEMPCALCNTHERMNET_CODE) PmTempCalcnThermNet_Run(void)
 
    /* copy output to interface */
    PmTempCalcnThermNetWindgEndTempCalcn   = PmTempCalcnThermNet_OutputData.StatorWindgEndTemp;  /* Calculated stator winding end temperature in degree celcius */
-   PmTempCalcnThermNetIniFlt              = PmTempCalcnThermNet_OutputData.PmTempIniFlt;        /* Fault is active if PM temperature is incorrectly initialized or a winding sensor fault is active */
-   PmTempCalcnThermNetState               = PmTempCalcnThermNet_MeasSig.PmTempCalcnState; /* Current state of the PmTempCalcnStateChart */
 
    /* check for replacement values usage */
    if (FALSE == PmTempCalcnThermNetUseRplcVal)
    {
       PmTempCalcnThermNetPmTemp           = PmTempCalcnThermNet_OutputData.PmTempEst; /* Estimated value of actual PM temperature */
-      PmTempCalcnThermNetWindgTempSnrAvg  = PmTempCalcnThermNet_OutputData.TempWindgSnsrAvgVal; /*Average value of stator winding temperature measured via NTC sensor (3 or 2 number of sensor) */
       PmTempCalcnThermNetWindgTempCalcn   = PmTempCalcnThermNet_OutputData.StatorWindgTemp; /*Calculated sator winding end temperature in degree celcius */
-      PmTempCalcnThermNetPmTempVld        = PmTempCalcnThermNet_OutputData.PmTempThermNetVld /* Fault is active if thermal network is not operating is state 2. (0: when State =2 1: State =! 2 ) */;
+      PmTempCalcnThermNetPmTempVld        = PmTempCalcnThermNet_OutputData.PmTempThermNetVld; /* Fault is active if thermal network is not operating is state 2. (1: when State =2 0: State =! 2 ) */
    }
    else
    {
       /* use replacement values for debug */
       PmTempCalcnThermNetPmTemp              = PmTempCalcnThermNetPmTempRplcVal;
-      PmTempCalcnThermNetWindgTempSnrAvg     = PmTempCalcnThermNetWindgTempSnrAvgRplcVal;
       PmTempCalcnThermNetWindgTempCalcn      = PmTempCalcnThermNetWindgTempCalcnRplcVal;
       PmTempCalcnThermNetPmTempVld           = PmTempCalcnThermNetPmTempVldRplcVal;
    }
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/src/PmTempCalcnThermNet_WrprData.c b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/src/PmTempCalcnThermNet_WrprData.c
index 3e1297fca..2d9cac1b5 100644
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/src/PmTempCalcnThermNet_WrprData.c
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/src/PmTempCalcnThermNet_WrprData.c
@@ -29,25 +29,11 @@
 /*================== [type definitions] =====================================*/
 
 /*================== [global data] ===========================================*/
-/* Begin: PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_8 (online) */
-#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_8
-#include "MemMap.h"
-/*
-@@ SYMBOL = PmTempCalcnThermNetState
-@@ A2L_TYPE = MEASURE
-@@ DATA_TYPE = UBYTE
-@@ DESCRIPTION = "Current state of the PmTempCalcnStateChart"
-@@ GROUP = PmTempCalcnThermNet
-@@ END
-*/
-extern VAR(uint8, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetState = 0U;
-#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_8
+#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32
 #include "MemMap.h"
-/* End: PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_8 (online) */
 
+VAR (uint32, PMTEMPCALCNTHERMNET_VAR)  PmTempCalcnThermNetHwFaultDelay = 0u;
 
-#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32
-#include "MemMap.h"
 /*
 @@ SYMBOL = PmTempCalcnThermNetPmTemp
 @@ A2L_TYPE = MEASURE
@@ -92,15 +78,6 @@ VAR (float32, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetWindgEndTempCalcn = 0.
 
 #define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_8
 #include "MemMap.h"
-/*
-@@ SYMBOL = PmTempCalcnThermNetIniFlt
-@@ A2L_TYPE = MEASURE
-@@ DATA_TYPE = UBYTE
-@@ DESCRIPTION = "PM temperature is incorrectly initialized or a winding sensor fault"
-@@ GROUP = PmTempCalcnThermNet
-@@ END
-*/
-VAR (boolean, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetIniFlt = 0U;
 
 /*
 @@ SYMBOL = PmTempCalcnThermNetPmTempVld
@@ -128,15 +105,6 @@ VAR (boolean, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetPmTempVld = 0U;
 /*! \\cpar replacement temperature value for the PM temperatures.; unit \'\\260C\' */
 CONST(float32, PMTEMPCALCNTHERMNET_CALIB) PmTempCalcnThermNetPmTempRplcVal = 0.f;
 
-/*
-@@ SYMBOL = PmTempCalcnThermNetWindgTempSnrAvgRplcVal
-@@ A2L_TYPE = PARAMETER
-@@ DATA_TYPE = FLOAT
-@@ DESCRIPTION = "Replacement value for Winding temperature sensor average value"
-@@ GROUP = PmTempCalcnThermNet
-@@ END
-*/
-CONST(float32, PMTEMPCALCNTHERMNET_CALIB) PmTempCalcnThermNetWindgTempSnrAvgRplcVal = 0.f;
 #define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32
 #include "MemMap.h"
 /* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32 (calib) */
@@ -157,13 +125,40 @@ CONST(float32, PMTEMPCALCNTHERMNET_CALIB) PmTempCalcnThermNetWindgTempCalcnRplcV
 #include "MemMap.h"
 /* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32 (calib) */
 
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_32
+#include "MemMap.h"
+/*
+@@ SYMBOL = PmTempCalcnThermNetHwFaultCheckDelay
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = ULONG
+@@ DESCRIPTION = "Number of cycles for the HW fault check delay"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
+CONST(uint32,PMTEMPCALCNTHERMNET_CALIB) PmTempCalcnThermNetHwFaultCheckDelay = 500U; /*PRQA S 3408*/
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32
+#include "MemMap.h"
+
 /* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_8 (calib) */
 #define PMTEMPCALCNTHERMNET_START_SEC_CALIB_8
 #include "MemMap.h"
-
-/*! \\cpar activation of the replacement temperature values.; unit \'-\' */
+/*
+@@ SYMBOL = PmTempCalcnThermNetUseRplcVal
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE [0 ... 1]
+@@ CONVERSION = TABLE 0 "FALSE" 1 "TRUE"
+@@ DESCRIPTION = "Enable parameter for output replacement of PmTempCalcnThermNet"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
 CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) PmTempCalcnThermNetUseRplcVal = 0U;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8 (calib) */
 /*TODO: need to be imported into ADD and a2l definition need to be done there*/
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_8 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_8
+#include "MemMap.h"
 /*
 @@ SYMBOL = PmTempCalcnThermNetPmTempVldRplcVal
 @@ A2L_TYPE = PARAMETER
@@ -179,6 +174,248 @@ CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) PmTempCalcnThermNetPmTempVldRplcVal =
 #include "MemMap.h"
 /* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8 (calib) */
 
+
+
+
+/*Simulation interface*/
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_8 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SimnPmTemp_FID_IniHvOff
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE [0 ... 1]
+@@ CONVERSION = TABLE 0 "FALSE" 1 "TRUE"
+@@ DESCRIPTION = "Test Purpose Only: Initialisation Bit which denotes availability of HV Offtime Signal (1: Not Available; 0: Signal Available)"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
+CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) SimnPmTemp_FID_IniHvOff = 1U;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_8 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SimnPmTemp_FID_IniPrkgTi
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE [0 ... 1]
+@@ CONVERSION = TABLE 0 "FALSE" 1 "TRUE"
+@@ DESCRIPTION = "Test Purpose Only: Initialisation Bit which denotes availability of Vehicle Offtime Signal (1: Not Available; 0: Signal Available)"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
+CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) SimnPmTemp_FID_IniPrkgTi = 1U;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_8 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SimnPmTemp_FID_IniNvm
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE [0 ... 1]
+@@ CONVERSION = TABLE 0 "FALSE" 1 "TRUE"
+@@ DESCRIPTION = "Test Purpose Only: Test Purpose Only: Initialisation Bit which denotes availability of variables stored in NVM (1: Not Available; 0: Signal Available)"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
+CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) SimnPmTemp_FID_IniNvm = 1U;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_8 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SimnPmTemp_HwFlt_WindgSnsr1
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE [0 ... 1]
+@@ CONVERSION = TABLE 0 "FALSE" 1 "TRUE"
+@@ DESCRIPTION = "Test Purpose Only: Fault Bit which denotes if measured tempeture using winding sensor 1 is a faulty signal (0: No Fault ; 1: Fault Signal )"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
+CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) SimnPmTemp_HwFlt_WindgSnsr1 = 0U;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_8 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SimnPmTemp_HwFlt_WindgSnsr2
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE [0 ... 1]
+@@ CONVERSION = TABLE 0 "FALSE" 1 "TRUE"
+@@ DESCRIPTION = "Test Purpose Only: Fault Bit which denotes if measured tempeture using winding sensor 2 is a faulty signal (0: No Fault ; 1: Fault Signal )"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
+CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) SimnPmTemp_HwFlt_WindgSnsr2 = 0U;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_8 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SimnPmTemp_HwFlt_WindgSnsr3
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE [0 ... 1]
+@@ CONVERSION = TABLE 0 "FALSE" 1 "TRUE"
+@@ DESCRIPTION = "Test Purpose Only: Fault Bit which denotes if measured tempeture using winding sensor 3 is a faulty signal (0: No Fault ; 1: Fault Signal )"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
+CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) SimnPmTemp_HwFlt_WindgSnsr3 = 0U;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_8 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SimnPmTemp_FID_ErrHvOff
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE [0 ... 1]
+@@ CONVERSION = TABLE 0 "FALSE" 1 "TRUE"
+@@ DESCRIPTION = "Test Purpose Only: Validity Bit which denotes validity of HV Offtime Signal (1: Not Valid 0: Signal Valid )"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
+CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) SimnPmTemp_FID_ErrHvOff = 0U;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_8 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SimnPmTemp_FID_ErrPrkgTi
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE [0 ... 1]
+@@ CONVERSION = TABLE 0 "FALSE" 1 "TRUE"
+@@ DESCRIPTION = "Test Purpose Only: Validity Bit which denotes validity of Vehicle Offtime Signal (1: Not Valid 0: Signal Valid )"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
+CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) SimnPmTemp_FID_ErrPrkgTi = 0U;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_8 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SimnPmTemp_FID_ErrNvm
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE [0 ... 1]
+@@ CONVERSION = TABLE 0 "FALSE" 1 "TRUE"
+@@ DESCRIPTION = "Test Purpose Only: Validity Bit which denotes validity of variables stored NVM (1: Not Valid 0: Signal Valid )"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
+CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) SimnPmTemp_FID_ErrNvm = 0U;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_32 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_32
+#include "MemMap.h"
+/*
+@@ SYMBOL = SimnPmTemp_NVM_Temp1
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Test Purpose Only: Temperature saved in NVM memory block 1 at the time of vehicle switch-off (during last operating cycle)"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
+CONST(float32, PMTEMPCALCNTHERMNET_CALIB) SimnPmTemp_NVM_Temp1 = 80.0f;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_32 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_32
+#include "MemMap.h"
+/*
+@@ SYMBOL = SimnPmTemp_NVM_Temp2
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Test Purpose Only: Temperature saved in NVM memory block 2 at the time of vehicle switch-off (during last operating cycle)"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
+CONST(float32, PMTEMPCALCNTHERMNET_CALIB) SimnPmTemp_NVM_Temp2 = 80.0f;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32 (calib) */
+
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_32 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_32
+#include "MemMap.h"
+/*
+@@ SYMBOL = SimnPmTemp_CAN_VehPrkgTi
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Test Purpose Only: Time during which the vehicle stays switched off, in minutes"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
+CONST(float32, PMTEMPCALCNTHERMNET_CALIB) SimnPmTemp_CAN_VehPrkgTi = 5.0f;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_32 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_32
+#include "MemMap.h"
+/*
+@@ SYMBOL = SimnPmTemp_CAN_HvOffTi
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Test Purpose Only: Time during which the HV connection is switched off, in minutes"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
+CONST(float32, PMTEMPCALCNTHERMNET_CALIB) SimnPmTemp_CAN_HvOffTi = 5.0f;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32 (calib) */
+
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_8 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = DiSimnPmTemp
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE [0 ... 1]
+@@ CONVERSION = TABLE 0 "FALSE" 1 "TRUE"
+@@ DESCRIPTION = "Disable Simulation Mode (Test Purpose Only) of Thermal Network via Calibration parameter (1: Disabled 0: Enabled )"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
+CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) DiSimnPmTemp = 1U;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8 (calib) */
+
+
 /*================== [closure] ==============================================*/
 /*! \\misra Warning No C2004:19.6 "Using \'#undef\' for master c-file"          */
 #undef PMTEMPCALCNTHERMNET_WRPRDATA_ /* PRQA S 0841 */
diff --git a/src/fw_cu/build/Parfiles/Delta.txt b/src/fw_cu/build/Parfiles/Delta.txt
new file mode 100644
index 000000000..f259a0ff5
--- /dev/null
+++ b/src/fw_cu/build/Parfiles/Delta.txt
@@ -0,0 +1,20 @@
+PmTempCalcnThermNet_CalibParam.DiHwFltCheckStMachn
+PmTempCalcnThermNet_CalibParam.TwoValAvgFacInvs
+PmTempCalcnThermNet_CalibParam.ThreeValAvgFacInvs
+PmTempCalcnThermNet_CalibParam.StaWindgSnsrReplcmtVal
+PmTempCalcnThermNet_CalibParam.DiSimnPmTemp
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_IniHvOff
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_IniPrkgTi
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_IniNvm
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_HwFlt_WindgSnsr1
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_HwFlt_WindgSnsr2
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_HwFlt_WindgSnsr3
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_ErrHvOff
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_ErrPrkgTi
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_ErrNvm
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_NVM_Temp1
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_NVM_Temp2
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_NVM_Temp3
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_CAN_VehPrkgTi
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_CAN_HvOffTi
+PmTempCalcnThermNet_CalibParam.DiSimnPmTemp_HwFlt
\\ No newline at end of file
diff --git a/src/fw_cu/build/Parfiles/P2_100kW/Delta.txt b/src/fw_cu/build/Parfiles/P2_100kW/Delta.txt
deleted file mode 100644
index e69de29bb..000000000
diff --git a/src/fw_cu/build/a2l/Measurements-to-Timeslices-Mapping.csv b/src/fw_cu/build/a2l/Measurements-to-Timeslices-Mapping.csv
index 51d429f80..31453dbb6 100644
--- a/src/fw_cu/build/a2l/Measurements-to-Timeslices-Mapping.csv
+++ b/src/fw_cu/build/a2l/Measurements-to-Timeslices-Mapping.csv
@@ -3911,7 +3911,6 @@ PmTempCalcnThermNet_InputData.IqActFlt,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_InputData.ModlnModAct,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_InputData.NVM_Temp1,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_InputData.NVM_Temp2,Core_2,C2_10ms,10,,,DRCO
-PmTempCalcnThermNet_InputData.NVM_Temp3,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_InputData.SpdAct,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_InputData.TempWindgSnsr1,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_InputData.TempWindgSnsr2,Core_2,C2_10ms,10,,,DRCO
@@ -3935,7 +3934,6 @@ PmTempCalcnThermNet_MeasSig.PmTempEstLimn,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_MeasSig.PmTempReplcmtVal,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_MeasSig.PmTempReplcmtVal_DftSt,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_MeasSig.PmTempSatFlg,Core_2,C2_10ms,10,,,DRCO
-PmTempCalcnThermNet_MeasSig.PmTempStsWord,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_MeasSig.PmTempUnitDly,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_MeasSig.PwrLossCuEstm,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_MeasSig.PwrLossFeRot,Core_2,C2_10ms,10,,,DRCO
@@ -3956,13 +3954,11 @@ PmTempCalcnThermNet_MeasSig.TempAmbPm,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_MeasSig.TempAmbWindg,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_MeasSig.TempOffPm,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_MeasSig.TempWindgSnsr_PmTempLimn,Core_2,C2_10ms,10,,,DRCO
-PmTempCalcnThermNet_MeasSig.TempWindgSnsr_PmTempLimnSts,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_MeasSig.TiDurn_PostRotTempIniFlt,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_MeasSig.TrigDetmnIniVal,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_MeasSig.TrigRotorIniValCalc,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_MeasSig.TrigWndgIniValCalc,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_MeasSig.WindgLongSwtOffTimeSts,Core_2,C2_10ms,10,,,DRCO
-PmTempCalcnThermNet_MeasSig.WindgSnsrFlt_SfChart,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_MeasSig.WndgEndTempEstUnitDly,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_MeasSig.IdActFlt_f,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_MeasSig.IdActFlt_k,Core_2,C2_10ms,10,,,DRCO
@@ -3979,20 +3975,14 @@ PmTempCalcnThermNet_MeasSig.PwrLossWikNut,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_MeasSig.TempWindgSnsrAvgVal,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_MeasSig.TimeOut_NvmDataValidityFlag,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_OutputData.PmTempEst,Core_2,C2_10ms,10,,,DRCO
-PmTempCalcnThermNet_OutputData.PmTempIniFlt,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_OutputData.PmTempThermNetVld,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_OutputData.StatorWindgEndTemp,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNet_OutputData.StatorWindgTemp,Core_2,C2_10ms,10,,,DRCO
-PmTempCalcnThermNet_OutputData.TempWindgSnsrAvgVal,Core_2,C2_10ms,10,,,DRCO
-X_SPmTempCalc4__atorUnit_Delay1,Core_2,C2_10ms,10,,,DRCO
-X_SPmTempCalc5___WindingEndTemp,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNetPmTemp,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNetWindgTempSnrAvg,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNetWindgTempCalcn,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNetWindgEndTempCalcn,Core_2,C2_10ms,10,,,DRCO
-PmTempCalcnThermNetIniFlt,Core_2,C2_10ms,10,,,DRCO
 PmTempCalcnThermNetPmTempVld,Core_2,C2_10ms,10,,,DRCO
-PmTempCalcnThermNetState,Core_2,C2_10ms,10,,,DRCO
 Psr_DiagNoComRequested,Core_0,C0_2ms_SchMTask,10,,,BSW
 PSR_KL15_Status,Core_0,C0_2ms_SchMTask,10,,,BSW
 Psr_NachlaufTimer,Core_0,C0_2ms_SchMTask,10,,,BSW
'

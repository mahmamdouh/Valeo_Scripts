b'commit 19177019ea8add9b2902ebdda65fbb19047f240e
Author: Frank IRMISCH (JV EXT) <frank.irmisch.jv.ext@valeo.com>
Date:   Mon Nov 8 13:12:58 2021 +0100

    $100kW-45191$ - Integration PMA PMTempCalcnThermNet
    
    DRCO_PMTEMPCALCNTHERMNET_BASIS_V01400_PMA_V00000
    
    Change-Id: I3832d7e7574fe3b40fe7e731a01f3dc8bb6d3bda

diff --git a/src/fw_cu/Components/Cmn/Com/C2cCom/src/C2cComDrvCtrl.c b/src/fw_cu/Components/Cmn/Com/C2cCom/src/C2cComDrvCtrl.c
index ddb62be13..e9a6a8f9b 100644
--- a/src/fw_cu/Components/Cmn/Com/C2cCom/src/C2cComDrvCtrl.c
+++ b/src/fw_cu/Components/Cmn/Com/C2cCom/src/C2cComDrvCtrl.c
@@ -51,7 +51,7 @@
    #include "IpmCtrl_data.h"
    #include "IpmPwrLossCalcn_WrprData.h"
    #include "TqPrednIpmPwrLoss_WrprData.h"
-   #include "PmTempCalcnThermNetVw_WrprData.h"
+   #include "PmTempCalcnThermNet_WrprData.h"
    #include "SpoMaxEmSpdCalcn_WrprData.h"
    #include "RslvrOffsDetn_WrprData.h"
 #endif /* SYSCON_FTR_PSM == 1  USE_IPMCTRL_CONTROL */
@@ -264,10 +264,10 @@ FUNC(void, DRVCTRL_C2C_COM_CODE) DrvCtrlC2c_Send10ms(void)
    DrvCtrlC2cData.InvTempAct.EmTemp1 = PmTempCalcnThermNetPmTemp;
 
    /* Actual measured winding temperature using winding temperature sensor */
-   DrvCtrlC2cData.InvTempAct.EmTemp2 = PmTempCalcnThermNetEmStatorTemp;
+   DrvCtrlC2cData.InvTempAct.EmTemp2 = PmTempCalcnThermNetWindgTempCalcn;
 
    /* Estimated Em Airgap temperature  */
-   DrvCtrlC2cData.InvTempAct.EmTemp3 = PmTempCalcnThermNetEmAirGapTemp;
+   DrvCtrlC2cData.InvTempAct.EmTemp3 = PmTempCalcnThermNetWindgTempSnrAvg;
 
    DrvCtrlC2cData.InvTempAct.EmTempVld = PmTempCalcnThermNetPmTempVld;
 #endif /* SYSCON_FTR_PSM == 1 */
diff --git a/src/fw_cu/Components/Cmn/SWIT/SWIT_DRCO/include/SWIT_DrvCtrl_Interfaces.h b/src/fw_cu/Components/Cmn/SWIT/SWIT_DRCO/include/SWIT_DrvCtrl_Interfaces.h
index 5db7960d2..a0fff9b85 100644
--- a/src/fw_cu/Components/Cmn/SWIT/SWIT_DRCO/include/SWIT_DrvCtrl_Interfaces.h
+++ b/src/fw_cu/Components/Cmn/SWIT/SWIT_DRCO/include/SWIT_DrvCtrl_Interfaces.h
@@ -115,7 +115,7 @@
  #define SWIT_IvtrHvDcI2tDrtg_Wrpr 32
  #define SWIT_IvtrPwmFrqDrtg_Wrpr 33
  #define SWIT_EmStatorTempDrtg_Wrpr 34
- #define SWIT_PMTempCalcnThermNetVw_Wrpr 35
+ #define SWIT_PmTempCalcnThermNet_Wrpr 35
  #define SWIT_C2cComDrvCtrl 36
  #define SWIT_SpoMaxEmSpdCalcn_Wrpr 37
  #define SWIT_TrqPthCtrl_Wrapper 38
@@ -267,7 +267,7 @@
 #define NUM_DrvCtrlErrDebFctInhbnSts_B_FctIdIpmCtrlPwrMdl 120
 #define NUM_DrvCtrlErrDebFctInhbnSts_B_FctIdEmxTemperaturEm 121
 #define NUM_EmStatorTempDrtgMonrSt 122
-#define NUM_PmTempCalcnThermNetVwPmTemp 123
+#define NUM_PmTempCalcnThermNetPmTemp 123
 #define NUM_EmRotorTempDrtgSts 124
 #define NUM_EmRotorTempDrtgMonrSt 125
 #define NUM_BswC2cData_CanBatteryMode 126
@@ -385,8 +385,8 @@
 #define NUM_Pwm3PhaPwmModAct_PWM_R 239
 #define NUM_ModlnIdxCalcnAmax_pwm 240
 #define NUM_ModlnIdxCalcnAmax_1ms 241
-#define NUM_PmTempCalcnThermNetVwPmTemp_1ms 242
-#define NUM_PmTempCalcnThermNetVwPmTemp_10ms 243
+#define NUM_PmTempCalcnThermNetPmTemp_1ms 242
+#define NUM_PmTempCalcnThermNetPmTemp_10ms 243
 #define NUM_DrvCtrlSeqrPlsEnaReq_pwm 244
 #define NUM_DrvCtrlSeqrPlsEnaReq_1ms 245
 #define NUM_BswC2cData_TqSpSel_pwm 246
@@ -1661,7 +1661,7 @@ do{\\
 \t\t\tSWIT_DRCO_TimeStamp_Flag_INPUT=0;\\
 }}}while(0)
 
-#define SWIT_IpmCtrl_Required_PmTempCalcnThermNetVwPmTemp_1ms(data,num_data)\\
+#define SWIT_IpmCtrl_Required_PmTempCalcnThermNetPmTemp_1ms(data,num_data)\\
 do{\\
 \tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_IpmCtrl == SWIT_Component_Input_ID)&&(num_data == SWIT_InterfaceNumber_Input)){\\
 \t\t\t\tSWIT_DRCO_TestHook_Input_Float32 = data;\\
@@ -1673,7 +1673,7 @@ do{\\
 \t\t\tSWIT_DRCO_TimeStamp_Flag_INPUT=0;\\
 }}}while(0)
 
-#define SWIT_IpmCtrl_Required_PmTempCalcnThermNetVwPmTemp_10ms(data,num_data)\\
+#define SWIT_IpmCtrl_Required_PmTempCalcnThermNetPmTemp_10ms(data,num_data)\\
 do{\\
 \tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_IpmCtrl == SWIT_Component_Input_ID)&&(num_data == SWIT_InterfaceNumber_Input)){\\
 \t\t\t\tSWIT_DRCO_TestHook_Input_Float32 = data;\\
@@ -3874,7 +3874,7 @@ do{\\
 \t\t\t\tSWIT_DRCO_TimeStamp_Output_Uint32 = (uint32)(STM0_TIM0.U);\\
 }}while(0)
 
-#define SWIT_EmRotorTempDrtg_Wrpr_Required_PmTempCalcnThermNetVwPmTemp(data,num_data)\\
+#define SWIT_EmRotorTempDrtg_Wrpr_Required_PmTempCalcnThermNetPmTemp(data,num_data)\\
 do{\\
 \tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_EmRotorTempDrtg_Wrpr == SWIT_Component_Input_ID)&&(num_data == SWIT_InterfaceNumber_Input)){\\
 \t\t\t\tSWIT_DRCO_TestHook_Input_Float32 = data;\\
@@ -4376,9 +4376,9 @@ do{\\
 \t\t\tSWIT_DRCO_TimeStamp_Flag_INPUT=0;\\
 }}}while(0)
 
-#define SWIT_PMTempCalcnThermNetVw_Wrpr_Required_Mod3PhaModlnModAct(data,num_data)\\
+#define SWIT_PmTempCalcnThermNet_Wrpr_Required_Mod3PhaModlnModAct(data,num_data)\\
 do{\\
-\tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_PMTempCalcnThermNetVw_Wrpr == SWIT_Component_Input_ID)&&(num_data == SWIT_InterfaceNumber_Input)){\\
+\tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_PmTempCalcnThermNet_Wrpr == SWIT_Component_Input_ID)&&(num_data == SWIT_InterfaceNumber_Input)){\\
 \t\t\t\tSWIT_DRCO_TestHook_Input_Uint8 = data;\\
 \t\t\t\tSWIT_DRCO_TimeStamp_Flag=1;\\
 \t\tif((1==SWIT_DRCO_TimeStamp_Flag)&&(1==SWIT_DRCO_TimeStamp_Flag_INPUT)){\\
@@ -4388,9 +4388,9 @@ do{\\
 \t\t\tSWIT_DRCO_TimeStamp_Flag_INPUT=0;\\
 }}}while(0)
 
-#define SWIT_PMTempCalcnThermNetVw_Wrpr_Required_BswC2cData_CooltFlowNom1(data,num_data)\\
+#define SWIT_PmTempCalcnThermNet_Wrpr_Required_BswC2cData_CooltFlowNom1(data,num_data)\\
 do{\\
-\tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_PMTempCalcnThermNetVw_Wrpr == SWIT_Component_Input_ID)&&(num_data == SWIT_InterfaceNumber_Input)){\\
+\tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_PmTempCalcnThermNet_Wrpr == SWIT_Component_Input_ID)&&(num_data == SWIT_InterfaceNumber_Input)){\\
 \t\t\t\tSWIT_DRCO_TestHook_Input_Float32 = data;\\
 \t\t\t\tSWIT_DRCO_TimeStamp_Flag=1;\\
 \t\tif((1==SWIT_DRCO_TimeStamp_Flag)&&(1==SWIT_DRCO_TimeStamp_Flag_INPUT)){\\
@@ -4400,9 +4400,9 @@ do{\\
 \t\t\tSWIT_DRCO_TimeStamp_Flag_INPUT=0;\\
 }}}while(0)
 
-#define SWIT_PMTempCalcnThermNetVw_Wrpr_Required_IvtrThermMdlCooltInlTemp(data,num_data)\\
+#define SWIT_PmTempCalcnThermNet_Wrpr_Required_IvtrThermMdlCooltInlTemp(data,num_data)\\
 do{\\
-\tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_PMTempCalcnThermNetVw_Wrpr == SWIT_Component_Input_ID)&&(num_data == SWIT_InterfaceNumber_Input)){\\
+\tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_PmTempCalcnThermNet_Wrpr == SWIT_Component_Input_ID)&&(num_data == SWIT_InterfaceNumber_Input)){\\
 \t\t\t\tSWIT_DRCO_TestHook_Input_Float32 = data;\\
 \t\t\t\tSWIT_DRCO_TimeStamp_Flag=1;\\
 \t\tif((1==SWIT_DRCO_TimeStamp_Flag)&&(1==SWIT_DRCO_TimeStamp_Flag_INPUT)){\\
@@ -4412,17 +4412,17 @@ do{\\
 \t\t\tSWIT_DRCO_TimeStamp_Flag_INPUT=0;\\
 }}}while(0)
 
-#define SWIT_PMTempCalcnThermNetVw_Wrpr_Provider_PmTempCalcnThermNetVwPmTemp(data,num_data)\\
+#define SWIT_PmTempCalcnThermNet_Wrpr_Provider_PmTempCalcnThermNetPmTemp(data,num_data)\\
 do{\\
-\tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_PMTempCalcnThermNetVw_Wrpr == SWIT_Component_Output_ID)&&(num_data == SWIT_InterfaceNumber_Output)){\\
+\tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_PmTempCalcnThermNet_Wrpr == SWIT_Component_Output_ID)&&(num_data == SWIT_InterfaceNumber_Output)){\\
 \t\t\t\tdata = SWIT_DRCO_TestHook_Output_Float32;\\
 \t\t\t\tSWIT_DRCO_TimeStamp_Flag_INPUT=1;\\
 \t\t\t\tSWIT_DRCO_TimeStamp_Output_Uint32 = (uint32)(STM0_TIM0.U);\\
 }}while(0)
 
-#define SWIT_PMTempCalcnThermNetVw_Wrpr_Required_DrvCtrlC2cData_SpdActRpm(data,num_data)\\
+#define SWIT_PmTempCalcnThermNet_Wrpr_Required_DrvCtrlC2cData_SpdActRpm(data,num_data)\\
 do{\\
-\tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_PMTempCalcnThermNetVw_Wrpr == SWIT_Component_Input_ID)&&(num_data == SWIT_InterfaceNumber_Input)){\\
+\tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_PmTempCalcnThermNet_Wrpr == SWIT_Component_Input_ID)&&(num_data == SWIT_InterfaceNumber_Input)){\\
 \t\t\t\tSWIT_DRCO_TestHook_Input_Float32 = data;\\
 \t\t\t\tSWIT_DRCO_TimeStamp_Flag=1;\\
 \t\tif((1==SWIT_DRCO_TimeStamp_Flag)&&(1==SWIT_DRCO_TimeStamp_Flag_INPUT)){\\
@@ -4432,9 +4432,9 @@ do{\\
 \t\t\tSWIT_DRCO_TimeStamp_Flag_INPUT=0;\\
 }}}while(0)
 
-#define SWIT_PMTempCalcnThermNetVw_Wrpr_Required_TqCtrlIdActFild(data,num_data)\\
+#define SWIT_PmTempCalcnThermNet_Wrpr_Required_TqCtrlIdActFild(data,num_data)\\
 do{\\
-\tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_PMTempCalcnThermNetVw_Wrpr == SWIT_Component_Input_ID)&&(num_data == SWIT_InterfaceNumber_Input)){\\
+\tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_PmTempCalcnThermNet_Wrpr == SWIT_Component_Input_ID)&&(num_data == SWIT_InterfaceNumber_Input)){\\
 \t\t\t\tSWIT_DRCO_TestHook_Input_Float32 = data;\\
 \t\t\t\tSWIT_DRCO_TimeStamp_Flag=1;\\
 \t\tif((1==SWIT_DRCO_TimeStamp_Flag)&&(1==SWIT_DRCO_TimeStamp_Flag_INPUT)){\\
@@ -4444,9 +4444,9 @@ do{\\
 \t\t\tSWIT_DRCO_TimeStamp_Flag_INPUT=0;\\
 }}}while(0)
 
-#define SWIT_PMTempCalcnThermNetVw_Wrpr_Required_TqCtrlIqActFild(data,num_data)\\
+#define SWIT_PmTempCalcnThermNet_Wrpr_Required_TqCtrlIqActFild(data,num_data)\\
 do{\\
-\tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_PMTempCalcnThermNetVw_Wrpr == SWIT_Component_Input_ID)&&(num_data == SWIT_InterfaceNumber_Input)){\\
+\tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_PmTempCalcnThermNet_Wrpr == SWIT_Component_Input_ID)&&(num_data == SWIT_InterfaceNumber_Input)){\\
 \t\t\t\tSWIT_DRCO_TestHook_Input_Float32 = data;\\
 \t\t\t\tSWIT_DRCO_TimeStamp_Flag=1;\\
 \t\tif((1==SWIT_DRCO_TimeStamp_Flag)&&(1==SWIT_DRCO_TimeStamp_Flag_INPUT)){\\
@@ -4456,9 +4456,9 @@ do{\\
 \t\t\tSWIT_DRCO_TimeStamp_Flag_INPUT=0;\\
 }}}while(0)
 
-#define SWIT_PMTempCalcnThermNetVw_Wrpr_Required_EncFilSpdMeclFild0(data,num_data)\\
+#define SWIT_PmTempCalcnThermNet_Wrpr_Required_EncFilSpdMeclFild0(data,num_data)\\
 do{\\
-\tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_PMTempCalcnThermNetVw_Wrpr == SWIT_Component_Input_ID)&&(num_data == SWIT_InterfaceNumber_Input)){\\
+\tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_PmTempCalcnThermNet_Wrpr == SWIT_Component_Input_ID)&&(num_data == SWIT_InterfaceNumber_Input)){\\
 \t\t\t\tSWIT_DRCO_TestHook_Input_Float32 = data;\\
 \t\t\t\tSWIT_DRCO_TimeStamp_Flag=1;\\
 \t\tif((1==SWIT_DRCO_TimeStamp_Flag)&&(1==SWIT_DRCO_TimeStamp_Flag_INPUT)){\\
@@ -4468,9 +4468,9 @@ do{\\
 \t\t\tSWIT_DRCO_TimeStamp_Flag_INPUT=0;\\
 }}}while(0)
 
-#define SWIT_PMTempCalcnThermNetVw_Wrpr_Required_BswC2cData_MotTempU(data,num_data)\\
+#define SWIT_PmTempCalcnThermNet_Wrpr_Required_BswC2cData_MotTempU(data,num_data)\\
 do{\\
-\tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_PMTempCalcnThermNetVw_Wrpr == SWIT_Component_Input_ID)&&(num_data == SWIT_InterfaceNumber_Input)){\\
+\tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_PmTempCalcnThermNet_Wrpr == SWIT_Component_Input_ID)&&(num_data == SWIT_InterfaceNumber_Input)){\\
 \t\t\t\tSWIT_DRCO_TestHook_Input_Float32 = data;\\
 \t\t\t\tSWIT_DRCO_TimeStamp_Flag=1;\\
 \t\tif((1==SWIT_DRCO_TimeStamp_Flag)&&(1==SWIT_DRCO_TimeStamp_Flag_INPUT)){\\
@@ -4480,9 +4480,9 @@ do{\\
 \t\t\tSWIT_DRCO_TimeStamp_Flag_INPUT=0;\\
 }}}while(0)
 
-#define SWIT_PMTempCalcnThermNetVw_Wrpr_Provider_PmTempCalcnThermNetPmTemp(data,num_data)\\
+#define SWIT_PmTempCalcnThermNet_Wrpr_Provider_PmTempCalcnThermNetPmTemp(data,num_data)\\
 do{\\
-\tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_PMTempCalcnThermNetVw_Wrpr == SWIT_Component_Output_ID)&&(num_data == SWIT_InterfaceNumber_Output)){\\
+\tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_PmTempCalcnThermNet_Wrpr == SWIT_Component_Output_ID)&&(num_data == SWIT_InterfaceNumber_Output)){\\
 \t\t\t\tdata = SWIT_DRCO_TestHook_Output_Float32;\\
 \t\t\t\tSWIT_DRCO_TimeStamp_Flag_INPUT=1;\\
 \t\t\t\tSWIT_DRCO_TimeStamp_Output_Uint32 = (uint32)(STM0_TIM0.U);\\
@@ -4806,7 +4806,7 @@ do{\\
 \t\t\tSWIT_DRCO_TimeStamp_Flag_INPUT=0;\\
 }}}while(0)
 
-#define SWIT_C2cComDrvCtrl_Required_PmTempCalcnThermNetVwPmTemp(data,num_data)\\
+#define SWIT_C2cComDrvCtrl_Required_PmTempCalcnThermNetPmTemp(data,num_data)\\
 do{\\
 \tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_C2cComDrvCtrl == SWIT_Component_Input_ID)&&(num_data == SWIT_InterfaceNumber_Input)){\\
 \t\t\t\tSWIT_DRCO_TestHook_Input_Float32 = data;\\
@@ -6204,9 +6204,9 @@ do{\\
 \t\t\tSWIT_DRCO_TimeStamp_Flag_INPUT=0;\\
 }}}while(0)
 
-#define SWIT_PmTempCalcnThermNetVw_Wrpr_Required_DrvCtrlErrDebFctInhbnSts_B_FctIdFltGrp2(data,num_data)\\
+#define SWIT_PmTempCalcnThermNet_Wrpr_Required_DrvCtrlErrDebFctInhbnSts_B_FctIdFltGrp2(data,num_data)\\
 do{\\
-\tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_PmTempCalcnThermNetVw_Wrpr == SWIT_Component_Input_ID)&&(num_data == SWIT_InterfaceNumber_Input)){\\
+\tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_PmTempCalcnThermNet_Wrpr == SWIT_Component_Input_ID)&&(num_data == SWIT_InterfaceNumber_Input)){\\
 \t\t\t\tSWIT_DRCO_TestHook_Input_Boolean = data;\\
 \t\t\t\tSWIT_DRCO_TimeStamp_Flag=1;\\
 \t\tif((1==SWIT_DRCO_TimeStamp_Flag)&&(1==SWIT_DRCO_TimeStamp_Flag_INPUT)){\\
@@ -6224,9 +6224,9 @@ do{\\
 \t\t\t\tSWIT_DRCO_TimeStamp_Output_Uint32 = (uint32)(STM0_TIM0.U);\\
 }}while(0)
 
-#define SWIT_PMTempCalcnThermNetVw_Wrpr_Required_DrvCtrlErrDebFctInhbnSts_B_FctIdEmxTemperaturEm(data,num_data)\\
+#define SWIT_PmTempCalcnThermNet_Wrpr_Required_DrvCtrlErrDebFctInhbnSts_B_FctIdEmxTemperaturEm(data,num_data)\\
 do{\\
-\tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_PMTempCalcnThermNetVw_Wrpr == SWIT_Component_Input_ID)&&(num_data == SWIT_InterfaceNumber_Input)){\\
+\tif((SWIT_DRCO_Flag_Active == SWIT_DRCO_activationFlag) && (SWIT_PmTempCalcnThermNet_Wrpr == SWIT_Component_Input_ID)&&(num_data == SWIT_InterfaceNumber_Input)){\\
 \t\t\t\tSWIT_DRCO_TestHook_Input_Boolean = data;\\
 \t\t\t\tSWIT_DRCO_TimeStamp_Flag=1;\\
 \t\tif((1==SWIT_DRCO_TimeStamp_Flag)&&(1==SWIT_DRCO_TimeStamp_Flag_INPUT)){\\
diff --git a/src/fw_cu/Components/Cmn/Shared/MemMap/include/NextGen_MemMap.h b/src/fw_cu/Components/Cmn/Shared/MemMap/include/NextGen_MemMap.h
index 95255e836..f6dea82a6 100644
--- a/src/fw_cu/Components/Cmn/Shared/MemMap/include/NextGen_MemMap.h
+++ b/src/fw_cu/Components/Cmn/Shared/MemMap/include/NextGen_MemMap.h
@@ -1478,61 +1478,62 @@
    #define TC2_STOP_SEC_CODE
    #include "BasicNextGen_MemMap.h"
 
-/* PMTEMPCALCNTHERMNETVW Core 2 (generated at 07-Aug-2018 by ec_generateMemMapEntry.m) *************************** */
-#elif (defined PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32)
-   #undef PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32
+/* PmTempCalcnThermNet ******************************************************************** */
+#elif (defined PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32)
+   #undef PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32
    #define DSPR2_START_SEC_VAR_INIT
    #include "BasicNextGen_MemMap.h"
-#elif (defined PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32)
-   #undef PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32
+#elif (defined PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32)
+   #undef PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32
    #define DSPR2_STOP_SEC_VAR_INIT
    #include "BasicNextGen_MemMap.h"
-   
-#elif (defined PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_8)
-   #undef PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_8
+
+#elif (defined PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_8)
+   #undef PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_8
    #define DSPR2_START_SEC_VAR_INIT
    #include "BasicNextGen_MemMap.h"
-#elif (defined PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_8)
-   #undef PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_8
+#elif (defined PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_8)
+   #undef PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_8
    #define DSPR2_STOP_SEC_VAR_INIT
    #include "BasicNextGen_MemMap.h"
 
-#elif (defined PMTEMPCALCNTHERMNETVW_START_SEC_VAR_CLEARED_32)
-   #undef PMTEMPCALCNTHERMNETVW_START_SEC_VAR_CLEARED_32
+#elif (defined PMTEMPCALCNTHERMNET_START_SEC_VAR_CLEARED_32)
+   #undef PMTEMPCALCNTHERMNET_START_SEC_VAR_CLEARED_32
    #define DSPR2_START_SEC_VAR_CLEARED
    #include "BasicNextGen_MemMap.h"
-#elif (defined PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_CLEARED_32)
-   #undef PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_CLEARED_32
+#elif (defined PMTEMPCALCNTHERMNET_STOP_SEC_VAR_CLEARED_32)
+   #undef PMTEMPCALCNTHERMNET_STOP_SEC_VAR_CLEARED_32
    #define DSPR2_STOP_SEC_VAR_CLEARED
    #include "BasicNextGen_MemMap.h"
 
-#elif (defined PMTEMPCALCNTHERMNETVW_START_SEC_CALIB_32)
-   #undef PMTEMPCALCNTHERMNETVW_START_SEC_CALIB_32
+#elif (defined PMTEMPCALCNTHERMNET_START_SEC_CALIB_32)
+   #undef PMTEMPCALCNTHERMNET_START_SEC_CALIB_32
    #define START_SEC_CALIB
    #include "BasicNextGen_MemMap.h"
-#elif (defined PMTEMPCALCNTHERMNETVW_STOP_SEC_CALIB_32)
-   #undef PMTEMPCALCNTHERMNETVW_STOP_SEC_CALIB_32
+#elif (defined PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32)
+   #undef PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32
    #define STOP_SEC_CALIB
    #include "BasicNextGen_MemMap.h"
 
-#elif (defined PMTEMPCALCNTHERMNETVW_START_SEC_CALIB_8)
-   #undef PMTEMPCALCNTHERMNETVW_START_SEC_CALIB_8
+#elif (defined PMTEMPCALCNTHERMNET_START_SEC_CALIB_8)
+   #undef PMTEMPCALCNTHERMNET_START_SEC_CALIB_8
    #define START_SEC_CALIB
    #include "BasicNextGen_MemMap.h"
-#elif (defined PMTEMPCALCNTHERMNETVW_STOP_SEC_CALIB_8)
-   #undef PMTEMPCALCNTHERMNETVW_STOP_SEC_CALIB_8
+#elif (defined PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8)
+   #undef PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8
    #define STOP_SEC_CALIB
    #include "BasicNextGen_MemMap.h"
 
-#elif (defined PMTEMPCALCNTHERMNETVW_START_SEC_CODE)
-   #undef PMTEMPCALCNTHERMNETVW_START_SEC_CODE
+#elif (defined PMTEMPCALCNTHERMNET_START_SEC_CODE)
+   #undef PMTEMPCALCNTHERMNET_START_SEC_CODE
    #define TC2_START_SEC_CODE
    #include "BasicNextGen_MemMap.h"
-#elif (defined PMTEMPCALCNTHERMNETVW_STOP_SEC_CODE)
-   #undef PMTEMPCALCNTHERMNETVW_STOP_SEC_CODE
+#elif (defined PMTEMPCALCNTHERMNET_STOP_SEC_CODE)
+   #undef PMTEMPCALCNTHERMNET_STOP_SEC_CODE
    #define TC2_STOP_SEC_CODE
    #include "BasicNextGen_MemMap.h"
 
+
 /* PSR ******************************************************************** */
 #elif (defined PSR_START_SEC_CALIB)
    #undef PSR_START_SEC_CALIB
diff --git a/src/fw_cu/Components/Inv/LimAndDrt/EmRotorTempDrtg/include/EmRotorTempDrtg_WrprData.h b/src/fw_cu/Components/Inv/LimAndDrt/EmRotorTempDrtg/include/EmRotorTempDrtg_WrprData.h
index e3b125bd6..65b5fa5c2 100644
--- a/src/fw_cu/Components/Inv/LimAndDrt/EmRotorTempDrtg/include/EmRotorTempDrtg_WrprData.h
+++ b/src/fw_cu/Components/Inv/LimAndDrt/EmRotorTempDrtg/include/EmRotorTempDrtg_WrprData.h
@@ -34,14 +34,14 @@
 
 
 
-   /* Begin: PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32 (online) */
-#define PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32
+   /* Begin: PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32 (online) */
+#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32
 #include "MemMap.h"
 
 extern VAR(float32, PMTEMPCALCNTHERMNETVW_VAR) PmTempCalcnThermNetPmTemp;
-   #define PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32
+   #define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32
 #include "MemMap.h"
-/* End: PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32 (online) */
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32 (online) */
 
 
 
diff --git a/src/fw_cu/Components/Inv/LimAndDrt/ExtdTqLim/include/ExtdTqLim_WrprData.h b/src/fw_cu/Components/Inv/LimAndDrt/ExtdTqLim/include/ExtdTqLim_WrprData.h
index 59e686113..c66c1e4a9 100644
--- a/src/fw_cu/Components/Inv/LimAndDrt/ExtdTqLim/include/ExtdTqLim_WrprData.h
+++ b/src/fw_cu/Components/Inv/LimAndDrt/ExtdTqLim/include/ExtdTqLim_WrprData.h
@@ -101,14 +101,14 @@ extern VAR(float32, IVTRTHERMMDL_VAR) IvtrThermMdlJcnTempMax;
 
 
 
-   /* Begin: PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32 (online) */
-#define PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32
+   /* Begin: PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32 (online) */
+#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32
 #include "MemMap.h"
 
 extern VAR(float32, PMTEMPCALCNTHERMNETVW_VAR) PmTempCalcnThermNetPmTemp;
-   #define PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32
+   #define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32
 #include "MemMap.h"
-/* End: PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32 (online) */
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32 (online) */
 
 
 
diff --git a/src/fw_cu/Components/Inv/RtEnv/DrvCtrlSdl/src/DrvCtrlSdl.c b/src/fw_cu/Components/Inv/RtEnv/DrvCtrlSdl/src/DrvCtrlSdl.c
index 20165c3b4..30aa9d510 100644
--- a/src/fw_cu/Components/Inv/RtEnv/DrvCtrlSdl/src/DrvCtrlSdl.c
+++ b/src/fw_cu/Components/Inv/RtEnv/DrvCtrlSdl/src/DrvCtrlSdl.c
@@ -75,7 +75,7 @@
 #include "CoreSync.h"
 #if SYSCON_FTR_PSM == 1 /* USE_IPMCTRL_CONTROL */
    #include "IpmCtrl.h"
-   #include "PmTempCalcnThermNetVw_Wrpr.h"
+   #include "PmTempCalcnThermNet_Wrpr.h"
    #include "RslvrOffsDetn_Wrpr.h"
    #include "SoftAscActr_Wrpr.h"
    #include "SpoMaxEmSpdCalcn_Wrpr.h"
@@ -1058,11 +1058,11 @@ STATIC DrvCtrlSdlRblDataType DrvCtrlSdlRbl1msPtLimnCalcn;
 */
 STATIC DrvCtrlSdlRblDataType DrvCtrlSdlRbl1msRslvrOffsDetn;
 /*
-@@ INSTANCE = DrvCtrlSdlRbl10msPmTempCalcnThermNetVw
+@@ INSTANCE = DrvCtrlSdlRbl10msPmTempCalcnThermNet
 @@ STRUCTURE = DrvCtrlSdlRblDataType
 @@ END
 */
-STATIC DrvCtrlSdlRblDataType DrvCtrlSdlRbl10msPmTempCalcnThermNetVw;
+STATIC DrvCtrlSdlRblDataType DrvCtrlSdlRbl10msPmTempCalcnThermNet;
 /*
 @@ INSTANCE = DrvCtrlSdlRbl1msIpmPwrLossCalcn
 @@ STRUCTURE = DrvCtrlSdlRblDataType
@@ -1579,7 +1579,7 @@ static DrvCtrlSdlRblCfgType DrvCtrlSdlRblCfg10ms[] =
    { &PmTempCalcnBackEmf_Run, &DrvCtrlSdlRbl10msPmTempCalcnBackEmf },
 #endif /* SYSCON_FTR_PM_TEMP_BACK_EMF == 1 */
 #if SYSCON_FTR_PSM == 1 /* USE_IPMCTRL_CONTROL */
-   { &PmTempCalcnThermNetVw_Run, &DrvCtrlSdlRbl10msPmTempCalcnThermNetVw },
+   { &PmTempCalcnThermNet_Run, &DrvCtrlSdlRbl10msPmTempCalcnThermNet },
 #endif /* SYSCON_FTR_PSM == 1  USE_IPMCTRL_CONTROL */
    { &EmRotorTempDrtg_Run, &DrvCtrlSdlRbl10msEmRotorTempDrtg },
    { &PerfIndcrCalcn_Run, &DrvCtrlSdlRbl10msPerfIndcrCalcn },
diff --git a/src/fw_cu/Components/Inv/TqCtrl/IpmCtrl/include/IpmCtrl_data.h b/src/fw_cu/Components/Inv/TqCtrl/IpmCtrl/include/IpmCtrl_data.h
index ee59f923a..0e8406ecb 100644
--- a/src/fw_cu/Components/Inv/TqCtrl/IpmCtrl/include/IpmCtrl_data.h
+++ b/src/fw_cu/Components/Inv/TqCtrl/IpmCtrl/include/IpmCtrl_data.h
@@ -440,14 +440,14 @@ extern VAR(float32, MOD3PHA_VAR) Mod3PhaUPha[SYSDEF_EM_PHA_SET_CNT_MAX][SYSDEF_E
 
 
 
-   /* Begin: PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32 (online) */
-#define PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32
+   /* Begin: PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32 (online) */
+#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32
 #include "MemMap.h"
 
 extern VAR(float32, PMTEMPCALCNTHERMNETVW_VAR) PmTempCalcnThermNetPmTemp;
-   #define PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32
+   #define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32
 #include "MemMap.h"
-/* End: PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32 (online) */
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32 (online) */
 
 
 
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/CooltFlowReqCalcn/include/CooltFlowReqCalcn_WrprData.h b/src/fw_cu/Components/Inv/ValMeasAndProc/CooltFlowReqCalcn/include/CooltFlowReqCalcn_WrprData.h
index 5a5f4b76f..93e096645 100644
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/CooltFlowReqCalcn/include/CooltFlowReqCalcn_WrprData.h
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/CooltFlowReqCalcn/include/CooltFlowReqCalcn_WrprData.h
@@ -143,14 +143,14 @@ extern VAR(float32, IVTRTHERMMDL_VAR) IvtrThermMdlCooltInlTemp;
 
 
 
-   /* Begin: PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32 (online) */
-#define PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32
+   /* Begin: PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32 (online) */
+#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32
 #include "MemMap.h"
 
 extern VAR(float32, PMTEMPCALCNTHERMNETVW_VAR) PmTempCalcnThermNetPmTemp;
-   #define PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32
+   #define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32
 #include "MemMap.h"
-/* End: PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32 (online) */
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32 (online) */
 
 
 
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/CooltTempReqCalcn/include/CooltTempReqCalcn_WrprData.h b/src/fw_cu/Components/Inv/ValMeasAndProc/CooltTempReqCalcn/include/CooltTempReqCalcn_WrprData.h
index 46b60b0ce..c7a5b7a3f 100644
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/CooltTempReqCalcn/include/CooltTempReqCalcn_WrprData.h
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/CooltTempReqCalcn/include/CooltTempReqCalcn_WrprData.h
@@ -34,14 +34,14 @@
 
 
 
-   /* Begin: PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32 (online) */
-#define PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32
+   /* Begin: PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32 (online) */
+#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32
 #include "MemMap.h"
 
 extern VAR(float32, PMTEMPCALCNTHERMNETVW_VAR) PmTempCalcnThermNetPmTemp;
-   #define PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32
+   #define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32
 #include "MemMap.h"
-/* End: PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32 (online) */
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32 (online) */
 
 
 
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/a2l/PmTempCalcnThermNet.a2l b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/a2l/PmTempCalcnThermNet.a2l
new file mode 100644
index 000000000..66322fa6d
--- /dev/null
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/a2l/PmTempCalcnThermNet.a2l
@@ -0,0 +1,3169 @@
+\xef\xbb\xbf
+
+/begin PROJECT
+    PmTempCalcnThermNet\t/* Name */
+    ""\t/* LongIdentifier */
+    /begin HEADER
+        "General project description"\t/* Comment */
+        VERSION "2021-11-08 12:32:38"
+        PROJECT_NO PRJ1
+    /end HEADER
+
+    /begin MODULE
+        PmTempCalcnThermNet\t/* Name */
+        ""\t/* LongIdentifier */
+
+        /begin A2ML
+            block "IF_DATA" taggedunion if_data {
+            };
+        /end A2ML
+
+        /begin MOD_PAR
+            ""\t/* Comment */
+            NO_OF_INTERFACES 0
+        /end MOD_PAR 
+
+        /begin MOD_COMMON
+            ""
+            ALIGNMENT_BYTE 1
+            ALIGNMENT_WORD 2
+            ALIGNMENT_LONG 2
+            ALIGNMENT_FLOAT32_IEEE 2
+            ALIGNMENT_FLOAT64_IEEE 4
+            BYTE_ORDER MSB_LAST
+            DEPOSIT ABSOLUTE
+        /end MOD_COMMON 
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.ClckCntMax\t/* Name */
+            "Maximum counter size after which the internal clock resets to Zero"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            ULONG_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_s\t/* Conversion */
+            0\t/* LowerLimit */
+            1000000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.ClckCntStep\t/* Name */
+            "Step size which represents the incremental counter of internal clock"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            ULONG_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_s\t/* Conversion */
+            0\t/* LowerLimit */
+            1000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.CompareTimeConstFacPm\t/* Name */
+            "Constant Factor to decide if initial value calc. algorithm shall be triggered."\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */
+            0\t/* LowerLimit */
+            1000000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.CompareTimeConstFacPmAmb\t/* Name */
+            "Constant Factor to decide which temperature shall be used as ambient temperature for initial value calc. Algorithm."\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */
+            0\t/* LowerLimit */
+            1000000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.CompareTimeConstFacWindg\t/* Name */
+            "Cooling time constant for winding end thermal node."\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */
+            0\t/* LowerLimit */
+            100000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.CompareTimeConstFacWindgAmb\t/* Name */
+            "Constant Factor to decide which temperature shall be used as ambient temperature for initial value calc. Algorithm."\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */
+            0\t/* LowerLimit */
+            1000000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.ConvTimeOff_Secs\t/* Name */
+            "conversion parameter to convert Off time from minutes to secs. (Set value = 60: CAN_VehPrkgTi / CAN_HvOffTi is in minutes; 1: CAN_VehPrkgTi / CAN_HvOffTi is in seconds )"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+            0\t/* LowerLimit */
+            100000000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.CoolDownTimeConstPm\t/* Name */
+            "Constant Factor to decide if initial value calc. algorithm shall be triggered for Rotor"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */
+            -1000\t/* LowerLimit */
+            100000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.CoolDownTimeWindg\t/* Name */
+            "Cooling time constant for winding end thermal node."\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */
+            -1000\t/* LowerLimit */
+            100000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.CooltTemp2_CoolTemp1Fac_LuTYaxis\t/* Name */
+            "Factor to calculate Air gap temperature (dependency can be made on coolant flow rate if required)"\t/* LongIdentifier */
+            CURVE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+            /begin AXIS_DESCR
+                COM_AXIS\t/* Attribute */
+                PmTempCalcnThermNet_InputData.EmCooltFlow\t/* InputQuantity */
+                PmTempCalcnThermNet_VOID_SCALING_l_p_min\t/* Conversion */
+                16\t/* MaxAxisPoints */
+                0\t/* LowerLimit */
+                10\t/* UpperLimit */
+                BYTE_ORDER MSB_LAST
+                AXIS_PTS_REF PmTempCalcnThermNet_CalibParam.CoolFlowRate_LuTXaxis
+            /end AXIS_DESCR
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.CooltTemp2_PmTempFac_LuTYaxis\t/* Name */
+            "Factor to calculate Air gap temperature (dependency can be made on coolant flow rate if required)"\t/* LongIdentifier */
+            CURVE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+            /begin AXIS_DESCR
+                COM_AXIS\t/* Attribute */
+                PmTempCalcnThermNet_InputData.EmCooltFlow\t/* InputQuantity */
+                PmTempCalcnThermNet_VOID_SCALING_l_p_min\t/* Conversion */
+                16\t/* MaxAxisPoints */
+                0\t/* LowerLimit */
+                10\t/* UpperLimit */
+                BYTE_ORDER MSB_LAST
+                AXIS_PTS_REF PmTempCalcnThermNet_CalibParam.CoolFlowRate_LuTXaxis
+            /end AXIS_DESCR
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.CuResist_TempRef\t/* Name */
+            "copper resistance used to calculate copper losses"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+            -100\t/* LowerLimit */
+            100\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.CuResistSpdCoeff2\t/* Name */
+            "The coefficient which is used to adapt AC copper resistance to actual rotor speed"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+            -10\t/* LowerLimit */
+            10\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.CuWikoFac\t/* Name */
+            "Factor to divide the copper losses in stator winding and in winding-end"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.DiHwFltCheckStMachn\t/* Name */
+            "Disable Bit to deactivate Fault check of winding temperature sensor (NTC\'s)"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.DiIntClkCntr\t/* Name */
+            "Disable Bit to deactivate the  internal clock which is used to calculate time duration after RotTempFlt occurs (1: Disabled 0: Enabled )"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.DiSelAmbTempPm\t/* Name */
+            "Disable Bit to deactivate the selection of ambient temperature (stator winding or airgap) used for initial value calc. (1: Disabled 0: Enabled )"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.DiSelAmbTempWindg\t/* Name */
+            "Disable Bit to deactivate the selection of ambient temperature (stator winding or airgap) used for initial value calc. (1: Disabled 0: Enabled )"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.DiSimnPmTemp\t/* Name */
+            "Disable Simulation Mode (Test Purpose Only) of Thermal Network via Calibration parameter (1: Disabled 0: Enabled )"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.DiSimnPmTemp_HwFlt\t/* Name */
+            "Disable winding sensor HW fault Simulation Mode (Test Purpose Only) of Thermal Network via Calibration parameter (1: Disabled 0: Enabled )"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.DiThermNetCalcn\t/* Name */
+            "Deactivate PM temperature calculation. Thermal Network will switch to replacement value \'State1\'."\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.DiThermNetCalcn_UseTempWindgSnsr\t/* Name */
+            "Bit to select the replacement value for PM temperature. 
+(1: Winding sensor temperature; 0: Calibratable value  \'PmTempRplcVal\' )"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.EnaAvgWindTempCalc\t/* Name */
+            "Enable Bit to activate calculation of average winding temperature using 2 winding sensors "\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.EnaCoolInp2TempCalc\t/* Name */
+            "Enable Bit to activate calculation of coolant temperature at rotor outlet"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.EnaHvOffTime\t/* Name */
+            "Enable Bit to select the use HV Off time or Vehicle Off time in exponential function initial value calc. Algorithm (0: Disabled 1: Enabled )"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.EnaStandStillOp\t/* Name */
+            "Enable Bit to activate calculation of copper losses at standstill operation"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.EnaStaWindg_CuLossEstim\t/* Name */
+            "Enable Bit to activate calculation of copper losses"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.EnaTempWndgRplcmntVal\t/* Name */
+            "Enable Bit to activate replacement value of winding temperature (NTC\'s)"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.EnaVehSpdChck\t/* Name */
+            "Enable bit to activate vehicle speed check used in Rotor temperature fault."\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.FeLossRotDistbnFac_LuTYaxis\t/* Name */
+            "LUT values of rotor iron loss distribution factor depending on rotor speed"\t/* LongIdentifier */
+            CURVE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+            0\t/* LowerLimit */
+            10\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+            /begin AXIS_DESCR
+                COM_AXIS\t/* Attribute */
+                PmTempCalcnThermNet_InputData.SpdAct\t/* InputQuantity */
+                PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */
+                16\t/* MaxAxisPoints */
+                -18000\t/* LowerLimit */
+                18000\t/* UpperLimit */
+                BYTE_ORDER MSB_LAST
+                AXIS_PTS_REF PmTempCalcnThermNet_CalibParam.FeLossSpdAct_LUTXaxis
+            /end AXIS_DESCR
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.FuncTiSlc\t/* Name */
+            "time slice in which the function PmTempCalcnThermNetVw is called"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */
+            0\t/* LowerLimit */
+            20\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.GearRatioInvs\t/* Name */
+            "Conversion ratio to convert speed from rpm to kmph: \\"InvsGearRatio*2*Pi*WheelRadius*1e-6*60\\""\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.IdIvsStep\t/* Name */
+            "Inverse of equidistant steps between two Id current vector elements"\t/* LongIdentifier */
+            VAL_BLK\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_1_p_A\t/* Conversion */
+            0.00038461538461538462\t/* LowerLimit */
+            1\t/* UpperLimit */
+            MATRIX_DIM 1
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.IdMaxIdx\t/* Name */
+            "Maximal index of Id current vector (dimension-1)"\t/* LongIdentifier */
+            VAL_BLK\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___c\t/* Conversion */
+            1\t/* LowerLimit */
+            255\t/* UpperLimit */
+            MATRIX_DIM 1
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.IdMin\t/* Name */
+            "Minimal value of Id (direct axis) current for all LuTs"\t/* LongIdentifier */
+            VAL_BLK\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_A\t/* Conversion */
+            -1300\t/* LowerLimit */
+            1300\t/* UpperLimit */
+            MATRIX_DIM 1
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.IniPmTempRplcVal\t/* Name */
+            "calibratable value for initial PM temperature"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.IniValCalcnMod\t/* Name */
+            "Mode to select Initial value for PM temperature. 
+Default: Calib param \'IniPmTempRplcVal\'
+1: Measured winding temperature  \'TempWindgSnsr_PmTempLimn\'
+2: Initial value calculated via \'IniPMTemp\' algorithm 
+3: Calib param \'IniPmTempRplcVal\'"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___c\t/* Conversion */
+            0\t/* LowerLimit */
+            4\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.IniWindgTempRplcVal\t/* Name */
+            "calibratable value for initial PM temperature"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.IntgTiSampleRot\t/* Name */
+            "Integrator time constant for Rotor"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */
+            0\t/* LowerLimit */
+            1000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.IntgTiSampleWik\t/* Name */
+            "Integrator time constant for winding"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */
+            0\t/* LowerLimit */
+            100\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.IntgTiSampleWiko\t/* Name */
+            "Integrator time constant for winding end"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */
+            0\t/* LowerLimit */
+            100\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.IqIvsStep\t/* Name */
+            "Inverse of equidistant steps between two Iq current vector elements"\t/* LongIdentifier */
+            VAL_BLK\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_1_p_A\t/* Conversion */
+            0.00038461538461538462\t/* LowerLimit */
+            1\t/* UpperLimit */
+            MATRIX_DIM 1
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.IqMaxIdx\t/* Name */
+            "Maximal index of Iq current vector (dimension-1)"\t/* LongIdentifier */
+            VAL_BLK\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___c\t/* Conversion */
+            1\t/* LowerLimit */
+            255\t/* UpperLimit */
+            MATRIX_DIM 1
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.IqMin\t/* Name */
+            "Minimal value of Iq (direct axis) current for all LuTs"\t/* LongIdentifier */
+            VAL_BLK\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_A\t/* Conversion */
+            -1300\t/* LowerLimit */
+            1300\t/* UpperLimit */
+            MATRIX_DIM 1
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.MotorPhaseNum_NomOp\t/* Name */
+            "Total number of motor phases to be multiplied during normal operation"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+            0\t/* LowerLimit */
+            6\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.MotorPhaseNum_StandStill\t/* Name */
+            "Total number of motor phases to be multiplied during stand still operation"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+            0\t/* LowerLimit */
+            6\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.MotSpdThd\t/* Name */
+            "Threshold value of speed at which stand still operation will be switched on"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_Hz\t/* Conversion */
+            -5\t/* LowerLimit */
+            5\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.PlossFric_LuTYaxis\t/* Name */
+            "Losses generated in rotor due to Friction"\t/* LongIdentifier */
+            CURVE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
+            0\t/* LowerLimit */
+            20000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+            /begin AXIS_DESCR
+                COM_AXIS\t/* Attribute */
+                PmTempCalcnThermNet_InputData.SpdAct\t/* InputQuantity */
+                PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */
+                16\t/* MaxAxisPoints */
+                -18000\t/* LowerLimit */
+                18000\t/* UpperLimit */
+                BYTE_ORDER MSB_LAST
+                AXIS_PTS_REF PmTempCalcnThermNet_CalibParam.SpdActFric_LuTXaxis
+            /end AXIS_DESCR
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.PlossIdFlatTop_map\t/* Name */
+            "Losses generated in rotor due to d Current when Flat top modulation is active (Frq dependent)"\t/* LongIdentifier */
+            MAP\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
+            0\t/* LowerLimit */
+            20000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+            /begin AXIS_DESCR
+                FIX_AXIS\t/* Attribute */
+                NO_INPUT_QUANTITY\t/* InputQuantity */
+                EQ_LSB_1_OFF_0\t/* Conversion */
+                16\t/* MaxAxisPoints */
+                0\t/* LowerLimit */
+                16\t/* UpperLimit */
+                FIX_AXIS_PAR_DIST 0 1 16
+            /end AXIS_DESCR
+            /begin AXIS_DESCR
+                FIX_AXIS\t/* Attribute */
+                NO_INPUT_QUANTITY\t/* InputQuantity */
+                EQ_LSB_1_OFF_0\t/* Conversion */
+                4\t/* MaxAxisPoints */
+                0\t/* LowerLimit */
+                4\t/* UpperLimit */
+                FIX_AXIS_PAR_DIST 0 1 4
+            /end AXIS_DESCR
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.PlossIdSpcVec_map\t/* Name */
+            "Losses generated in rotor due to d Current when space vector modulation is active (Frq dependent)"\t/* LongIdentifier */
+            MAP\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
+            0\t/* LowerLimit */
+            20000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+            /begin AXIS_DESCR
+                FIX_AXIS\t/* Attribute */
+                NO_INPUT_QUANTITY\t/* InputQuantity */
+                EQ_LSB_1_OFF_0\t/* Conversion */
+                16\t/* MaxAxisPoints */
+                0\t/* LowerLimit */
+                16\t/* UpperLimit */
+                FIX_AXIS_PAR_DIST 0 1 16
+            /end AXIS_DESCR
+            /begin AXIS_DESCR
+                FIX_AXIS\t/* Attribute */
+                NO_INPUT_QUANTITY\t/* InputQuantity */
+                EQ_LSB_1_OFF_0\t/* Conversion */
+                4\t/* MaxAxisPoints */
+                0\t/* LowerLimit */
+                4\t/* UpperLimit */
+                FIX_AXIS_PAR_DIST 0 1 4
+            /end AXIS_DESCR
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.PlossIqFlatTop_map\t/* Name */
+            "Losses generated in rotor due to q Current when Flat top modulation is active (Frq dependent)"\t/* LongIdentifier */
+            MAP\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
+            0\t/* LowerLimit */
+            20000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+            /begin AXIS_DESCR
+                FIX_AXIS\t/* Attribute */
+                NO_INPUT_QUANTITY\t/* InputQuantity */
+                EQ_LSB_1_OFF_0\t/* Conversion */
+                16\t/* MaxAxisPoints */
+                0\t/* LowerLimit */
+                16\t/* UpperLimit */
+                FIX_AXIS_PAR_DIST 0 1 16
+            /end AXIS_DESCR
+            /begin AXIS_DESCR
+                FIX_AXIS\t/* Attribute */
+                NO_INPUT_QUANTITY\t/* InputQuantity */
+                EQ_LSB_1_OFF_0\t/* Conversion */
+                4\t/* MaxAxisPoints */
+                0\t/* LowerLimit */
+                4\t/* UpperLimit */
+                FIX_AXIS_PAR_DIST 0 1 4
+            /end AXIS_DESCR
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.PlossIqSpcVec_map\t/* Name */
+            "Losses generated in rotor due to q Current when space vector modulation is active (Frq dependent)"\t/* LongIdentifier */
+            MAP\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
+            0\t/* LowerLimit */
+            20000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+            /begin AXIS_DESCR
+                FIX_AXIS\t/* Attribute */
+                NO_INPUT_QUANTITY\t/* InputQuantity */
+                EQ_LSB_1_OFF_0\t/* Conversion */
+                16\t/* MaxAxisPoints */
+                0\t/* LowerLimit */
+                16\t/* UpperLimit */
+                FIX_AXIS_PAR_DIST 0 1 16
+            /end AXIS_DESCR
+            /begin AXIS_DESCR
+                FIX_AXIS\t/* Attribute */
+                NO_INPUT_QUANTITY\t/* InputQuantity */
+                EQ_LSB_1_OFF_0\t/* Conversion */
+                4\t/* MaxAxisPoints */
+                0\t/* LowerLimit */
+                4\t/* UpperLimit */
+                FIX_AXIS_PAR_DIST 0 1 4
+            /end AXIS_DESCR
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.PlossNac_LuTYaxis\t/* Name */
+            "Current losses generated in rotor due to rotor speed"\t/* LongIdentifier */
+            CURVE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
+            0\t/* LowerLimit */
+            10\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+            /begin AXIS_DESCR
+                COM_AXIS\t/* Attribute */
+                PmTempCalcnThermNet_InputData.SpdAct\t/* InputQuantity */
+                PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */
+                16\t/* MaxAxisPoints */
+                -18000\t/* LowerLimit */
+                18000\t/* UpperLimit */
+                BYTE_ORDER MSB_LAST
+                AXIS_PTS_REF PmTempCalcnThermNet_CalibParam.SpdActNac_LuTXaxis
+            /end AXIS_DESCR
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.PmTempMaxVal\t/* Name */
+            "Maximum Threshold value for limiting the measured winding temperature, where measured winding temp. is used as a replacement value for following: 
+1) Output PM temperature in State 1
+2) Initial PM temperature in State 2"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            -80\t/* LowerLimit */
+            300\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.PmTempMinVal\t/* Name */
+            "Maximum Threshold value for limiting the measured winding temperature, where measured winding temp. is used as a replacement value for following: 
+1) Output PM temperature in State 1
+2) Initial PM temperature in State 2"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            -80\t/* LowerLimit */
+            300\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.PmTempRplcVal\t/* Name */
+            "Replacement value of temperature used either for initialisation of Thermal Network or as PM Temperature ouput value "\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.PwmFreqActIvsStep\t/* Name */
+            "Inverse of equidistant steps between two PWM frequency vector elements"\t/* LongIdentifier */
+            VAL_BLK\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */
+            8.3340278356529705e-05\t/* LowerLimit */
+            1\t/* UpperLimit */
+            MATRIX_DIM 1
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.PwmFreqActMaxIdx\t/* Name */
+            "Maximal index of PWM frequency vector (dimension-1)"\t/* LongIdentifier */
+            VAL_BLK\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___c\t/* Conversion */
+            1\t/* LowerLimit */
+            255\t/* UpperLimit */
+            MATRIX_DIM 1
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.PwmFreqActMin\t/* Name */
+            "Minimal value of PWM frequency for all LuTs"\t/* LongIdentifier */
+            VAL_BLK\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_Hz\t/* Conversion */
+            1\t/* LowerLimit */
+            12000\t/* UpperLimit */
+            MATRIX_DIM 1
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.RotorCpTherm\t/* Name */
+            "Thermal capacitance of Rotor-PM"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_W_s_p_K\t/* Conversion */
+            0\t/* LowerLimit */
+            100000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.RotTimeConstFac_RotTempIniFlt\t/* Name */
+            "A time factor which is a multiple of Thermal time constant of Permanent Magnet (Rotor)"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */
+            0\t/* LowerLimit */
+            200000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.RThermRotorAirgap_LuTYaxis\t/* Name */
+            "Thermal resistivity of Rotor"\t/* LongIdentifier */
+            CURVE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_K_p_W\t/* Conversion */
+            -2000\t/* LowerLimit */
+            2000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+            /begin AXIS_DESCR
+                COM_AXIS\t/* Attribute */
+                PmTempCalcnThermNet_InputData.SpdAct\t/* InputQuantity */
+                PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */
+                16\t/* MaxAxisPoints */
+                -19000\t/* LowerLimit */
+                19000\t/* UpperLimit */
+                BYTE_ORDER MSB_LAST
+                AXIS_PTS_REF PmTempCalcnThermNet_CalibParam.SpdActRTherm_LuTXaxis
+            /end AXIS_DESCR
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.RThermRotorCoolt_LuTYaxis\t/* Name */
+            "Look-Up table for thermal resistivity of rotor"\t/* LongIdentifier */
+            CURVE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+            -2000\t/* LowerLimit */
+            2000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+            /begin AXIS_DESCR
+                COM_AXIS\t/* Attribute */
+                PmTempCalcnThermNet_InputData.EmCooltFlow\t/* InputQuantity */
+                PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+                16\t/* MaxAxisPoints */
+                0\t/* LowerLimit */
+                20\t/* UpperLimit */
+                BYTE_ORDER MSB_LAST
+                AXIS_PTS_REF PmTempCalcnThermNet_CalibParam.CooltFlowRateRtherm_LuTXaxis
+            /end AXIS_DESCR
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.RThermStatorWindg_LuTYaxis\t/* Name */
+            "Look-Up table for thermal resistivity of winding"\t/* LongIdentifier */
+            CURVE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+            -2000\t/* LowerLimit */
+            2000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+            /begin AXIS_DESCR
+                COM_AXIS\t/* Attribute */
+                PmTempCalcnThermNet_InputData.EmCooltFlow\t/* InputQuantity */
+                PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+                16\t/* MaxAxisPoints */
+                0\t/* LowerLimit */
+                20\t/* UpperLimit */
+                BYTE_ORDER MSB_LAST
+                AXIS_PTS_REF PmTempCalcnThermNet_CalibParam.CooltFlowRateRtherm_LuTXaxis
+            /end AXIS_DESCR
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.RThermStatorWindgEnd\t/* Name */
+            "Thermal resistivity of winding end"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+            -2000\t/* LowerLimit */
+            2000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.SimnPmTemp_CAN_HvOffTi\t/* Name */
+            "Test Purpose Only: Time during which the HV connection is switched off"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_min\t/* Conversion */
+            0\t/* LowerLimit */
+            100000000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.SimnPmTemp_CAN_VehPrkgTi\t/* Name */
+            "Test Purpose Only: Time during which the vehicle stays switched off, If is in minutes set \'\'"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_min\t/* Conversion */
+            0\t/* LowerLimit */
+            100000000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_ErrHvOff\t/* Name */
+            "Test Purpose Only: Validity Bit which denotes validity of HV Offtime Signal (1: Not Valid 0: Signal Valid )"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_ErrNvm\t/* Name */
+            "Test Purpose Only: Validity Bit which denotes validity of variables stored NVM (1: Not Valid 0: Signal Valid )"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_ErrPrkgTi\t/* Name */
+            "Test Purpose Only: Validity Bit which denotes validity of Vehicle Offtime Signal (1: Not Valid 0: Signal Valid )"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_IniHvOff\t/* Name */
+            "Test Purpose Only: Initialisation Bit which denotes availability of HV Offtime Signal (1: Not Available; 0: Signal Available)"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_IniNvm\t/* Name */
+            "Test Purpose Only: Initialisation Bit which denotes availability of variables stored in NVM (1: Not Available; 0: Signal Available)"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_IniPrkgTi\t/* Name */
+            "Test Purpose Only: Initialisation Bit which denotes availability of Vehicle Offtime Signal (1: Not Available; 0: Signal Available)"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.SimnPmTemp_HwFlt_WindgSnsr1\t/* Name */
+            "Test Purpose Only: Fault Bit which denotes if measured tempeture using winding sensor 1 is a faulty signal (0: No Fault ; 1: Fault Signal )"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.SimnPmTemp_HwFlt_WindgSnsr2\t/* Name */
+            "Test Purpose Only: Fault Bit which denotes if measured tempeture using winding sensor 2 is a faulty signal (0: No Fault ; 1: Fault Signal )"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.SimnPmTemp_HwFlt_WindgSnsr3\t/* Name */
+            "Test Purpose Only: Fault Bit which denotes if measured tempeture using winding sensor 3 is a faulty signal (0: No Fault ; 1: Fault Signal )"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.SimnPmTemp_NVM_Temp1\t/* Name */
+            "Test Purpose Only: Temperature saved in NVM memory block 1 at the time of vehicle switch-off (during last operating cycle)"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.SimnPmTemp_NVM_Temp2\t/* Name */
+            "Test Purpose Only:Temperature saved in NVM memory block 2 at the time of vehicle switch-off (during last operating cycle)"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.SimnPmTemp_NVM_Temp3\t/* Name */
+            "Test Purpose Only: Temperature saved in NVM memory block 3 at the time of vehicle switch-off (during last operating cycle)"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.StatorWindgCpTherm\t/* Name */
+            "Thermal capacitance of winding"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+            -10000000\t/* LowerLimit */
+            1000000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.StatorWindgEndCpTherm\t/* Name */
+            "Thermal capacitance of winding end"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+            -10000000\t/* LowerLimit */
+            1000000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.StatorWindgEndTempMaxVal\t/* Name */
+            "Maximum Threshold value for limiting the measured winding temperature, where measured winding temp. is used as a replacement value for following: 
+1) Output PM temperature in State 1
+2) Initial PM temperature in State 2"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            -80\t/* LowerLimit */
+            300\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.StatorWindgEndTempMinVal\t/* Name */
+            "Maximum Threshold value for limiting the measured winding temperature, where measured winding temp. is used as a replacement value for following: 
+1) Output PM temperature in State 1
+2) Initial PM temperature in State 2"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            -80\t/* LowerLimit */
+            300\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.StatorWindgTempMaxVal\t/* Name */
+            "Maximum Threshold value for limiting the measured winding temperature, where measured winding temp. is used as a replacement value for following: 
+1) Output PM temperature in State 1
+2) Initial PM temperature in State 2"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            -80\t/* LowerLimit */
+            300\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.StatorWindgTempMinVal\t/* Name */
+            "Maximum Threshold value for limiting the measured winding temperature, where measured winding temp. is used as a replacement value for following: 
+1) Output PM temperature in State 1
+2) Initial PM temperature in State 2"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            -80\t/* LowerLimit */
+            300\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.StaWindgSnsrReplcmtVal\t/* Name */
+            "Replacement value of stator temperature when all NTC sensor deliver faluty inputs."\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.TempCoeff_CuResist\t/* Name */
+            "Temperature coefficient to adapt temperature dependent copper resistance"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+            -100\t/* LowerLimit */
+            100\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.TempRef_CuResist\t/* Name */
+            "Reference temperature to adapt temperature dependent copper resistance"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            -50\t/* LowerLimit */
+            200\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.TempWindgSnsr_PmTempMax\t/* Name */
+            "Maximum Threshold value for limiting the measured winding temperature, where measured winding temp. is used as a replacement value for following: 
+1) Output PM temperature in State 1
+2) Initial PM temperature in State 2"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            -80\t/* LowerLimit */
+            500\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.ThreeValAvgFacInvs\t/* Name */
+            "Factor to calculate average of winding temperature (0.5: two sensors, 0.3333: for 3 sensors) "\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.TwoValAvgFacInvs\t/* Name */
+            "Factor to calculate average of winding temperature (0.5: two sensors )"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.UseSnsrValAsWindgEndTemp\t/* Name */
+            "Use Winding NTC sensor value as Winding-end node temperature of thermal network"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.VehMovmnt_MinSpdThd\t/* Name */
+            "minimum speed in kmph to check if vehicle is moving, only in this case the RotTempFlt will be disabled once internal clock overshoot the Rotor time constant threshold "\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_kmph\t/* Conversion */
+            0\t/* LowerLimit */
+            250\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin CHARACTERISTIC
+            PmTempCalcnThermNet_CalibParam.WindgIniValCalcnMod\t/* Name */
+            "Mode to select Init value for Winding End temp. 
+Default: Calibparam \'IniWndgEndTempRplcVal\'
+1: Average winding temp or Maximum of available NTC\'s
+2: Initial Value algorithm exp func
+3: Calib param \'IniWndgEndTempRplcVal\'"\t/* LongIdentifier */
+            VALUE\t/* Type */
+            0x0000\t/* Address */
+            UBYTE_COL_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING___c\t/* Conversion */
+            0\t/* LowerLimit */
+            4\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end CHARACTERISTIC
+
+        /begin AXIS_PTS
+            PmTempCalcnThermNet_CalibParam.CoolFlowRate_LuTXaxis\t/* Name */
+            "Estimated flowrate at Inverter coolant outlet (served as input to electric motor coolant inlet)"\t/* LongIdentifier */
+            0x0000\t/* Address */
+            PmTempCalcnThermNet_InputData.EmCooltFlow\t/* InputQuantity */
+            FLOAT32_IEEE_X_INCR_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_l_p_min\t/* Conversion */
+            16\t/* MaxAxisPoints */
+            0\t/* LowerLimit */
+            10\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end AXIS_PTS
+
+        /begin AXIS_PTS
+            PmTempCalcnThermNet_CalibParam.CooltFlowRateRtherm_LuTXaxis\t/* Name */
+            "Actual coolant flow rate at motor inlet."\t/* LongIdentifier */
+            0x0000\t/* Address */
+            PmTempCalcnThermNet_InputData.EmCooltFlow\t/* InputQuantity */
+            FLOAT32_IEEE_X_INCR_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+            16\t/* MaxAxisPoints */
+            0\t/* LowerLimit */
+            20\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end AXIS_PTS
+
+        /begin AXIS_PTS
+            PmTempCalcnThermNet_CalibParam.FeLossSpdAct_LUTXaxis\t/* Name */
+            "Mechanical rotor speed array which is used as x-axis breakpoints of LUT for calculation of rotor iron loss distribution factor"\t/* LongIdentifier */
+            0x0000\t/* Address */
+            PmTempCalcnThermNet_InputData.SpdAct\t/* InputQuantity */
+            FLOAT32_IEEE_X_INCR_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */
+            16\t/* MaxAxisPoints */
+            -18000\t/* LowerLimit */
+            18000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end AXIS_PTS
+
+        /begin AXIS_PTS
+            PmTempCalcnThermNet_CalibParam.SpdActFric_LuTXaxis\t/* Name */
+            "Actual mechanical speed of PM synchronous motor used to set up Friction losses LuT"\t/* LongIdentifier */
+            0x0000\t/* Address */
+            PmTempCalcnThermNet_InputData.SpdAct\t/* InputQuantity */
+            FLOAT32_IEEE_X_INCR_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */
+            16\t/* MaxAxisPoints */
+            -18000\t/* LowerLimit */
+            18000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end AXIS_PTS
+
+        /begin AXIS_PTS
+            PmTempCalcnThermNet_CalibParam.SpdActNac_LuTXaxis\t/* Name */
+            "Actual mechanical speed of PM synchronous motor used to set up Rotor losses dependent on AC currents"\t/* LongIdentifier */
+            0x0000\t/* Address */
+            PmTempCalcnThermNet_InputData.SpdAct\t/* InputQuantity */
+            FLOAT32_IEEE_X_INCR_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */
+            16\t/* MaxAxisPoints */
+            -18000\t/* LowerLimit */
+            18000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end AXIS_PTS
+
+        /begin AXIS_PTS
+            PmTempCalcnThermNet_CalibParam.SpdActRTherm_LuTXaxis\t/* Name */
+            "Mechanical speed of electric motor used to calculate thermal resistivity via LuT"\t/* LongIdentifier */
+            0x0000\t/* Address */
+            PmTempCalcnThermNet_InputData.SpdAct\t/* InputQuantity */
+            FLOAT32_IEEE_X_INCR_DIRECT\t/* Deposit */
+            0\t/* MaxDiff */
+            PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */
+            16\t/* MaxAxisPoints */
+            -19000\t/* LowerLimit */
+            19000\t/* UpperLimit */
+            BYTE_ORDER MSB_LAST
+        /end AXIS_PTS
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_AlvCntr\t/* Name */
+            "AliveCounter"\t/* LongIdentifier */
+            ULONG\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___a\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            4294967295\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_InputData.CAN_HvOffTi\t/* Name */
+            "Time during which the HV connection is switched off"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING_min\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            100000000\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_InputData.CAN_VehPrkgTi\t/* Name */
+            "Time during which the vehicle stays switched off (wheel speed is below certain threshold ~ 0 bis 3 kmph)"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING_min\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            100000000\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_InputData.EmCooltFlow\t/* Name */
+            "Estimated flowrate at Inverter coolant outlet  (served as input to electric motor coolant inlet)"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING_l_p_min\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            15\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_InputData.EmTempCooltInlet\t/* Name */
+            "Estimated temperature of Inverter coolant outlet (served as input to electric motor coolant inlet)"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_InputData.FID_ErrHvOff\t/* Name */
+            "Validity Bit which denotes validity of HV Offtime Signal (1: Not Valid 0: Signal Valid )"\t/* LongIdentifier */
+            UBYTE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_InputData.FID_ErrNvm\t/* Name */
+            "Validity Bit which denotes validity of variables stored NVM (1: Not Valid 0: Signal Valid )"\t/* LongIdentifier */
+            UBYTE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_InputData.FID_ErrPrkgTi\t/* Name */
+            "Validity Bit which denotes validity of Vehicle Offtime Signal (1: Not Valid 0: Signal Valid )"\t/* LongIdentifier */
+            UBYTE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_InputData.FID_IniHvOff\t/* Name */
+            "Initialisation Bit which denotes availability of HV Offtime Signal (1: Not Available; 0: Signal Available)"\t/* LongIdentifier */
+            UBYTE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_InputData.FID_IniNvm\t/* Name */
+            "Initialisation Bit which denotes availability of variables stored in NVM (1: Not Available; 0: Signal Available)"\t/* LongIdentifier */
+            UBYTE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_InputData.FID_IniPrkgTi\t/* Name */
+            "Initialisation Bit which denotes availability of Vehicle Offtime Signal (1: Not Available; 0: Signal Available)"\t/* LongIdentifier */
+            UBYTE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_InputData.HwFlt_WindSnsr1\t/* Name */
+            "Fault Bit of measured stator tempeture using winding sensor 1 (0: No Fault ; 1: Fault Signal )"\t/* LongIdentifier */
+            UBYTE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_InputData.HwFlt_WindSnsr2\t/* Name */
+            "Fault Bit of measured stator tempeture using winding sensor 2 (0: No Fault ; 1: Fault Signal )"\t/* LongIdentifier */
+            UBYTE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_InputData.HwFlt_WindSnsr3\t/* Name */
+            "Fault Bit of measured stator tempeture using winding sensor 3 (0: No Fault ; 1: Fault Signal )"\t/* LongIdentifier */
+            UBYTE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_InputData.IdActFlt\t/* Name */
+            "Actual d current filtered"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING_A\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -800\t/* LowerLimit */
+            800\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_InputData.IqActFlt\t/* Name */
+            "Actual q current filtered"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING_A\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -800\t/* LowerLimit */
+            800\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_InputData.ModlnModAct\t/* Name */
+            "Modulation type actually used in Inverter modulator function. (Flat Top or Space Vector Modulation)"\t/* LongIdentifier */
+            UBYTE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___c\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            5\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_InputData.NVM_Temp1\t/* Name */
+            "Temperature saved in NVM memory block 1 at the time of vehicle switch-off (during last operating cycle)"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -200\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_InputData.NVM_Temp2\t/* Name */
+            "Temperature saved in NVM memory block 2 at the time of vehicle switch-off (during last operating cycle)"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -200\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_InputData.NVM_Temp3\t/* Name */
+            "Temperature saved in NVM memory block 3 at the time of vehicle switch-off (during last operating cycle)"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -200\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_InputData.PwmFrqAct\t/* Name */
+            "Current PWM frequency of motor control"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING_Hz\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            12000\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_InputData.SpdAct\t/* Name */
+            "Actual mechanical speed of electric motor"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -16000\t/* LowerLimit */
+            16000\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_InputData.TempWindgSnsr1\t/* Name */
+            "Actual measured stator winding temperature by using winding temperature sensor (NTC 1 in stator winding)"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_InputData.TempWindgSnsr2\t/* Name */
+            "Actual measured stator winding temperature by using winding temperature sensor (NTC 2 in stator winding)"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_InputData.TempWindgSnsr3\t/* Name */
+            "Actual measured stator winding temperature by using winding temperature sensor (NTC 3 in stator winding)"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.ClckCntRslt\t/* Name */
+            "Internal Clock ticks "\t/* LongIdentifier */
+            ULONG\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING_s\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            10000000\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.DeltaLossTN\t/* Name */
+            "Value of heat exchange between rotor and airgap (mathematical model)"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -100000\t/* LowerLimit */
+            100000\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.DeltaTempTN\t/* Name */
+            "When thermal network is active, the difference between the estimated PM temperature (previous function call) and the actual calcualted air gap temperature(current function call).  "\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -100000\t/* LowerLimit */
+            100000\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.EmCoolInp2Temp\t/* Name */
+            "Estimated Second Coolant Input Temperature"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -100000\t/* LowerLimit */
+            100000\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.IdActFlt_f\t/* Name */
+            "Fraction of Prelook-up function of IdActFlt"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.IdActFlt_k\t/* Name */
+            "Index of Prelook-up function of IdActFlt"\t/* LongIdentifier */
+            ULONG\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___a\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            4294967295\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.IniPmTemp\t/* Name */
+            "Estimated initial value of PM temperature when the vehicle is switched On (either exponential function output or stator winding sensor value)"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.IniPmTempEfunc\t/* Name */
+            "Estimated initial value of PM temperature from exponential function"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.IniWindgTempEfunc\t/* Name */
+            "Estimated initial value of stator winding temperature when the vehicle is switched On (either exponential function output or stator winding sensor value)"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.IntgNodeTempRotor\t/* Name */
+            "Thermal network rotor node temperature"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -3.4028234663852886e38\t/* LowerLimit */
+            3.4028234663852886e38\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.IntgNodeTempStatorWindg\t/* Name */
+            "Thermal network stator winding node temperature"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -3.4028234663852886e38\t/* LowerLimit */
+            3.4028234663852886e38\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.IntgNodeTempStatorWindgEnd\t/* Name */
+            "Thermal network stator winding end node temperature"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -3.4028234663852886e38\t/* LowerLimit */
+            3.4028234663852886e38\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.IqActFlt_f\t/* Name */
+            "Fraction of Prelook-up function of IqActFlt"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.IqActFlt_k\t/* Name */
+            "Index of Prelook-up function of IqActFlt"\t/* LongIdentifier */
+            ULONG\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___a\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            4294967295\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.MotorIronLoss\t/* Name */
+            "Total Losses generated in the machine"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            400000\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.PlossCurrD\t/* Name */
+            "Losses generated in rotor due to d Current"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            20000\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.PlossCurrQ\t/* Name */
+            "Losses generated in rotor due to q Current"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            20000\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.PlossFric\t/* Name */
+            "Losses generated in rotor due to bearing friction"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            20000\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.PlossNac\t/* Name */
+            "Factor for rotor current losses generated in rotor due to rotor speed"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            10\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.PlossRotor\t/* Name */
+            "Rotor losses estimated analytically"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -1000000\t/* LowerLimit */
+            1000000\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.PlossTotCalcd\t/* Name */
+            "Total Losses generated in Rotor"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            100000\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.PmTempCalcnState\t/* Name */
+            "State 1 or State 3: Use replacement value instead of estimated temperature value of Permanent magnet.
+State 2: Use the estimated value of Permanent magnet temperature calculated via Thermal Network."\t/* LongIdentifier */
+            UBYTE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___c\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            1\t/* LowerLimit */
+            2\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.PmTempEstLimn\t/* Name */
+            "Saturated  value of PM temperature in State 2"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.PmTempReplcmtVal\t/* Name */
+            "Replacement temperature value \\"PmTempRplcVal\\" used as PM Temperature ouput when the function execution state = 1 
+( when faults are active or thermal network disabled or signals not available to calculate initial PM temperature)"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.PmTempReplcmtVal_DftSt\t/* Name */
+            "Replacement temperature value \\"PmTempRplcVal\\" used as PM Temperature ouput when the function is executing in default state"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.PmTempSatFlg\t/* Name */
+            "A status Bit which is enabled if the Pm temperature overshoots maximum or minimum allowed (PM )rotor temperature"\t/* LongIdentifier */
+            UBYTE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.PmTempStsWord\t/* Name */
+            "Status bit which corresponds to output availability and its validity"\t/* LongIdentifier */
+            ULONG\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___a\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            10000\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.PmTempUnitDly\t/* Name */
+            "delayed value of estimated PM temperature by 1 time slice"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.PwmFrqAct_f\t/* Name */
+            "Fraction of Prelook-up function of PwmFrqAct"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.PwmFrqAct_k\t/* Name */
+            "Index of Prelook-up function of PwmFrqAct"\t/* LongIdentifier */
+            ULONG\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___a\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            4294967295\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.PwrLossCuEstm\t/* Name */
+            "Copper losses estimated analytically"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -1000000\t/* LowerLimit */
+            1000000\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.PwrLossFeRot\t/* Name */
+            "Rotor Iron losses estimated analytically"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -1000000\t/* LowerLimit */
+            1000000\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.PwrLossFeSta\t/* Name */
+            "Stator Iron  losses estimated analytically"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -1000000\t/* LowerLimit */
+            1000000\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.PwrLossWikNut\t/* Name */
+            "Winding Nut Copper losses estimated analytically"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -1000000\t/* LowerLimit */
+            1000000\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.PwrLossWiko\t/* Name */
+            "Winding End Copper losses estimated analytically"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -1000000\t/* LowerLimit */
+            1000000\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.ResFeLossRotDistbnFac\t/* Name */
+            "distribution factor of rotor iron loss to overall motor iron loss depending on rotor speed"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            10\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.ResRotLutOutput\t/* Name */
+            "actual thermal resistance of rotor-airgap which is dependent on actual mechanical speed of rotor."\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING_K_p_W\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            100\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.RotorLongSwtOffTimeSts\t/* Name */
+            "Status Bit which denotes the vehicle was switched off for a time longer than the cooling thermal time constant of rotor 
+(1: Offtime longer, 0: Offtime shorter )"\t/* LongIdentifier */
+            UBYTE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.RThermRotorCooltFlow\t/* Name */
+            "output of LuT based on variable rotor Resistance v/s actual coolant flow rate"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -10000001\t/* LowerLimit */
+            100000\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.RThermRotorSpd\t/* Name */
+            "output of LuT based on variable rotor Resistance v/s actual spd"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -10000000\t/* LowerLimit */
+            10000000\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.RThermStatorWindg\t/* Name */
+            "output of LuT based on variable Winding Nut Resistance v/s actual coolant flow rate"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -10000000\t/* LowerLimit */
+            10000000\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.SelAmbTempSts\t/* Name */
+            "A status Bit which is enabled if the stator winding sensor value overshoots maximum allowed (PM )rotor temperature"\t/* LongIdentifier */
+            UBYTE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.SelWndgAmbTempSts\t/* Name */
+            "A status Bit which is enabled if the coolant inlet temperature is used as ambient f\xc3\xbcr stator winding "\t/* LongIdentifier */
+            UBYTE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.StatortWindgEndTempEstLimn\t/* Name */
+            "Saturated  value of Stator winding end temperature in State 2"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.StatortWindgEndTempSatFlg\t/* Name */
+            "A status Bit which is enabled if the stator winding-end temperature overshoots maximum or minimum allowed  threshold value"\t/* LongIdentifier */
+            UBYTE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.StatorWindgTempSatFlg\t/* Name */
+            "A status Bit which is enabled if the stator winding temperature overshoots maximum or minimum allowed threshold value"\t/* LongIdentifier */
+            UBYTE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.StattorWindgTempEstLimn\t/* Name */
+            "Saturated  value of Stator winding temperature in State 2"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.TempAmbPm\t/* Name */
+            "Actual measured temperature by winding sesnor or actual air gap temperature calculated during first system start (first function call). This is used as input to exponential function "\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.TempAmbWindg\t/* Name */
+            "estimated temperature of stator winding end calculated during first system start (first function call). This is used as input to exponential function "\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.TempOffPm\t/* Name */
+            "estimated value PMTempThermNet saved in NVM ram during last system cycle time.This is used as input to exponential function during next system start. "\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -200\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.TempWindgSnsr_PmTempLimn\t/* Name */
+            "Maximum limited value of measured winding sensor temperature which is used as a replacement value for permanent magnet (rotor) temperature in State 3"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.TempWindgSnsr_PmTempLimnSts\t/* Name */
+            "A status Bit which is enabled if the stator winding sensor value overshoots maximum allowed (PM )rotor temperature"\t/* LongIdentifier */
+            UBYTE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.TempWindgSnsrAvgVal\t/* Name */
+            "Average value of stator winding temperature sensors"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.TiDurn_PostRotTempIniFlt\t/* Name */
+            "Time duration after faults occur (FID_ErrNvm or FID_ErrPrkgTi or FID_ErrHvOff ) "\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            2000000\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.TimeOut_NvmDataValidityFlag\t/* Name */
+            "Validity flag for stored temperature in NVM and CAN timeout value"\t/* LongIdentifier */
+            UBYTE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.TrigDetmnIniVal\t/* Name */
+            "Trigger condition to execute intial PM temperature calculation algorithm, only once every (State = 2) execution (1: triggered, 0 : not triggered )"\t/* LongIdentifier */
+            UBYTE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.TrigRotorIniValCalc\t/* Name */
+            "Trigger condition further processed within intial PM temperature calculation algorithm to execute exponential function algortihm. (1: exponential function, 0: Stator winding sensor)"\t/* LongIdentifier */
+            UBYTE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.TrigWndgIniValCalc\t/* Name */
+            "Trigger condition further processed within intial PM temperature calculation algorithm to execute exponential function algortihm. (1: exponential function, 0: Stator winding sensor)"\t/* LongIdentifier */
+            UBYTE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.WindgLongSwtOffTimeSts\t/* Name */
+            "Status Bit which denotes the vehicle was switched off for a time longer than the cooling thermal time constant of stator winding end 
+(1: Offtime longer, 0: Offtime shorter)"\t/* LongIdentifier */
+            UBYTE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.WindgSnsrFlt_SfChart\t/* Name */
+            "Actual state of winding sensor average value calculation "\t/* LongIdentifier */
+            UBYTE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___c\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            8\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_MeasSig.WndgEndTempEstUnitDly\t/* Name */
+            "delayed value of estimated winding end temperature by 1 time slice"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_OutputData.PmTempEst\t/* Name */
+            "Estimated value of actual PM temperature received from either of the State (1,2 or 3). This can be either 1) replacement value or 2) estimated value of PM temperature. "\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_OutputData.PmTempIniFlt\t/* Name */
+            "Fault is active if PM temperature is incorrectly initialized or a winding sensor fault is active. (0: Disabled 1: Enabled )"\t/* LongIdentifier */
+            UBYTE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_OutputData.PmTempThermNetVld\t/* Name */
+            "Thermal network calculated PM Temperature validity flag. Calculated temperature is valid, if thermal network is in \\"operating\\" state 2, else not valid. (1: when State = 2 0: State =! 2 )
+"\t/* LongIdentifier */
+            UBYTE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            0\t/* LowerLimit */
+            1\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_OutputData.StatorWindgEndTemp\t/* Name */
+            "Stator winding end temperature in degree celcius"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_OutputData.StatorWindgTemp\t/* Name */
+            "Stator winding temperature in degree celcius"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            PmTempCalcnThermNet_OutputData.TempWindgSnsrAvgVal\t/* Name */
+            "Average value of stator winding temperature measured via NTC sensor (3 or 2 number of sensor)"\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            X_SPmTempCalc4__atorUnit_Delay1\t/* Name */
+            ""\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            VOID_SCALING\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin MEASUREMENT
+            X_SPmTempCalc5___WindingEndTemp\t/* Name */
+            ""\t/* LongIdentifier */
+            FLOAT32_IEEE\t/* Datatype */
+            VOID_SCALING\t/* Conversion */
+            1\t/* Resolution */
+            100\t/* Accuracy */
+            -80\t/* LowerLimit */
+            200\t/* UpperLimit */
+            ECU_ADDRESS 0x0000
+            BYTE_ORDER MSB_LAST
+        /end MEASUREMENT
+
+        /begin COMPU_METHOD
+            EQ_LSB_1_OFF_0\t/* Name */
+            "Void scaling for unscaled variables"\t/* LongIdentifier */
+            RAT_FUNC\t/* ConversionType */
+            "%8.0"\t/* Format */
+            ""\t/* Unit */
+            COEFFS 0 1 0 0 0 1
+        /end COMPU_METHOD
+
+        /begin COMPU_METHOD
+            PmTempCalcnThermNet_VOID_SCALING__\t/* Name */
+            "Void scaling for unscaled variables"\t/* LongIdentifier */
+            RAT_FUNC\t/* ConversionType */
+            "%12.6"\t/* Format */
+            "-"\t/* Unit */
+            COEFFS 0 1 0 0 0 1
+        /end COMPU_METHOD
+
+        /begin COMPU_METHOD
+            PmTempCalcnThermNet_VOID_SCALING___a\t/* Name */
+            "Void scaling for unscaled variables"\t/* LongIdentifier */
+            RAT_FUNC\t/* ConversionType */
+            "%10.0"\t/* Format */
+            "-"\t/* Unit */
+            COEFFS 0 1 0 0 0 1
+        /end COMPU_METHOD
+
+        /begin COMPU_METHOD
+            PmTempCalcnThermNet_VOID_SCALING___c\t/* Name */
+            "Void scaling for unscaled variables"\t/* LongIdentifier */
+            RAT_FUNC\t/* ConversionType */
+            "%3.0"\t/* Format */
+            "-"\t/* Unit */
+            COEFFS 0 1 0 0 0 1
+        /end COMPU_METHOD
+
+        /begin COMPU_METHOD
+            PmTempCalcnThermNet_VOID_SCALING___d\t/* Name */
+            "Void scaling for unscaled variables"\t/* LongIdentifier */
+            RAT_FUNC\t/* ConversionType */
+            "%1.0"\t/* Format */
+            "-"\t/* Unit */
+            COEFFS 0 1 0 0 0 1
+        /end COMPU_METHOD
+
+        /begin COMPU_METHOD
+            PmTempCalcnThermNet_VOID_SCALING__C\t/* Name */
+            "Void scaling for unscaled variables"\t/* LongIdentifier */
+            RAT_FUNC\t/* ConversionType */
+            "%12.6"\t/* Format */
+            "\xc2\xb0C"\t/* Unit */
+            COEFFS 0 1 0 0 0 1
+        /end COMPU_METHOD
+
+        /begin COMPU_METHOD
+            PmTempCalcnThermNet_VOID_SCALING_1_p_A\t/* Name */
+            "Void scaling for unscaled variables"\t/* LongIdentifier */
+            RAT_FUNC\t/* ConversionType */
+            "%12.6"\t/* Format */
+            "1/A"\t/* Unit */
+            COEFFS 0 1 0 0 0 1
+        /end COMPU_METHOD
+
+        /begin COMPU_METHOD
+            PmTempCalcnThermNet_VOID_SCALING_A\t/* Name */
+            "Void scaling for unscaled variables"\t/* LongIdentifier */
+            RAT_FUNC\t/* ConversionType */
+            "%12.6"\t/* Format */
+            "A"\t/* Unit */
+            COEFFS 0 1 0 0 0 1
+        /end COMPU_METHOD
+
+        /begin COMPU_METHOD
+            PmTempCalcnThermNet_VOID_SCALING_Hz\t/* Name */
+            "Void scaling for unscaled variables"\t/* LongIdentifier */
+            RAT_FUNC\t/* ConversionType */
+            "%12.6"\t/* Format */
+            "Hz"\t/* Unit */
+            COEFFS 0 1 0 0 0 1
+        /end COMPU_METHOD
+
+        /begin COMPU_METHOD
+            PmTempCalcnThermNet_VOID_SCALING_K_p_W\t/* Name */
+            "Void scaling for unscaled variables"\t/* LongIdentifier */
+            RAT_FUNC\t/* ConversionType */
+            "%12.6"\t/* Format */
+            "K/W"\t/* Unit */
+            COEFFS 0 1 0 0 0 1
+        /end COMPU_METHOD
+
+        /begin COMPU_METHOD
+            PmTempCalcnThermNet_VOID_SCALING_kmph\t/* Name */
+            "Void scaling for unscaled variables"\t/* LongIdentifier */
+            RAT_FUNC\t/* ConversionType */
+            "%12.6"\t/* Format */
+            "kmph"\t/* Unit */
+            COEFFS 0 1 0 0 0 1
+        /end COMPU_METHOD
+
+        /begin COMPU_METHOD
+            PmTempCalcnThermNet_VOID_SCALING_l_p_min\t/* Name */
+            "Void scaling for unscaled variables"\t/* LongIdentifier */
+            RAT_FUNC\t/* ConversionType */
+            "%12.6"\t/* Format */
+            "l/min"\t/* Unit */
+            COEFFS 0 1 0 0 0 1
+        /end COMPU_METHOD
+
+        /begin COMPU_METHOD
+            PmTempCalcnThermNet_VOID_SCALING_min\t/* Name */
+            "Void scaling for unscaled variables"\t/* LongIdentifier */
+            RAT_FUNC\t/* ConversionType */
+            "%12.6"\t/* Format */
+            "min"\t/* Unit */
+            COEFFS 0 1 0 0 0 1
+        /end COMPU_METHOD
+
+        /begin COMPU_METHOD
+            PmTempCalcnThermNet_VOID_SCALING_rpm\t/* Name */
+            "Void scaling for unscaled variables"\t/* LongIdentifier */
+            RAT_FUNC\t/* ConversionType */
+            "%12.6"\t/* Format */
+            "rpm"\t/* Unit */
+            COEFFS 0 1 0 0 0 1
+        /end COMPU_METHOD
+
+        /begin COMPU_METHOD
+            PmTempCalcnThermNet_VOID_SCALING_s\t/* Name */
+            "Void scaling for unscaled variables"\t/* LongIdentifier */
+            RAT_FUNC\t/* ConversionType */
+            "%10.0"\t/* Format */
+            "s"\t/* Unit */
+            COEFFS 0 1 0 0 0 1
+        /end COMPU_METHOD
+
+        /begin COMPU_METHOD
+            PmTempCalcnThermNet_VOID_SCALING_s_b\t/* Name */
+            "Void scaling for unscaled variables"\t/* LongIdentifier */
+            RAT_FUNC\t/* ConversionType */
+            "%12.6"\t/* Format */
+            "s"\t/* Unit */
+            COEFFS 0 1 0 0 0 1
+        /end COMPU_METHOD
+
+        /begin COMPU_METHOD
+            PmTempCalcnThermNet_VOID_SCALING_W\t/* Name */
+            "Void scaling for unscaled variables"\t/* LongIdentifier */
+            RAT_FUNC\t/* ConversionType */
+            "%12.6"\t/* Format */
+            "W"\t/* Unit */
+            COEFFS 0 1 0 0 0 1
+        /end COMPU_METHOD
+
+        /begin COMPU_METHOD
+            PmTempCalcnThermNet_VOID_SCALING_W_s_p_K\t/* Name */
+            "Void scaling for unscaled variables"\t/* LongIdentifier */
+            RAT_FUNC\t/* ConversionType */
+            "%12.6"\t/* Format */
+            "W-s/K"\t/* Unit */
+            COEFFS 0 1 0 0 0 1
+        /end COMPU_METHOD
+
+        /begin COMPU_METHOD
+            VOID_SCALING\t/* Name */
+            "Void scaling for unscaled variables"\t/* LongIdentifier */
+            RAT_FUNC\t/* ConversionType */
+            "%12.6"\t/* Format */
+            ""\t/* Unit */
+            COEFFS 0 1 0 0 0 1
+        /end COMPU_METHOD
+
+        /begin FUNCTION
+            PmTempCalcnThermNet\t/* Name */
+            ""\t/* LongIdentifier */
+            /begin DEF_CHARACTERISTIC
+                PmTempCalcnThermNet_CalibParam.PlossNac_LuTYaxis\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.SpdActNac_LuTXaxis\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.PlossFric_LuTYaxis\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.SpdActFric_LuTXaxis\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.FeLossRotDistbnFac_LuTYaxis\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.FeLossSpdAct_LUTXaxis\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.RThermStatorWindg_LuTYaxis\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.CooltFlowRateRtherm_LuTXaxis\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.RThermRotorCoolt_LuTYaxis\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.RThermRotorAirgap_LuTYaxis\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.SpdActRTherm_LuTXaxis\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.CooltTemp2_CoolTemp1Fac_LuTYaxis\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.CoolFlowRate_LuTXaxis\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.CooltTemp2_PmTempFac_LuTYaxis\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.RThermStatorWindgEnd\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.StatorWindgCpTherm\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.StatorWindgEndCpTherm\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.RotorCpTherm\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.IntgTiSampleRot\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.IntgTiSampleWiko\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.IntgTiSampleWik\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.EnaStaWindg_CuLossEstim\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.CuResist_TempRef\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.MotorPhaseNum_StandStill\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.MotorPhaseNum_NomOp\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.TempCoeff_CuResist\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.TempRef_CuResist\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.EnaStandStillOp\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.MotSpdThd\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.CuWikoFac\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.IdMin\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.IdIvsStep\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.IdMaxIdx\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.IqMin\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.IqIvsStep\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.IqMaxIdx\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.PwmFreqActMin\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.PwmFreqActIvsStep\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.PwmFreqActMaxIdx\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.EnaCoolInp2TempCalc\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.StatorWindgTempMaxVal\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.StatorWindgTempMinVal\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.StatorWindgEndTempMaxVal\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.StatorWindgEndTempMinVal\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.PmTempMaxVal\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.PmTempMinVal\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.UseSnsrValAsWindgEndTemp\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.CuResistSpdCoeff2\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.DiHwFltCheckStMachn\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.EnaTempWndgRplcmntVal\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.TwoValAvgFacInvs\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.ThreeValAvgFacInvs\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.EnaAvgWindTempCalc\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.EnaHvOffTime\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.DiThermNetCalcn\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.PmTempRplcVal\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.StaWindgSnsrReplcmtVal\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.TempWindgSnsr_PmTempMax\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.DiSimnPmTemp\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_IniHvOff\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_IniPrkgTi\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_IniNvm\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.SimnPmTemp_HwFlt_WindgSnsr1\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.SimnPmTemp_HwFlt_WindgSnsr2\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.SimnPmTemp_HwFlt_WindgSnsr3\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_ErrHvOff\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_ErrPrkgTi\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_ErrNvm\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.SimnPmTemp_NVM_Temp1\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.SimnPmTemp_NVM_Temp2\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.SimnPmTemp_NVM_Temp3\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.SimnPmTemp_CAN_VehPrkgTi\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.SimnPmTemp_CAN_HvOffTi\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.GearRatioInvs\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.VehMovmnt_MinSpdThd\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.EnaVehSpdChck\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.DiSimnPmTemp_HwFlt\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.PlossIdSpcVec_map\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.PlossIqSpcVec_map\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.PlossIdFlatTop_map\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.PlossIqFlatTop_map\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.DiSelAmbTempPm\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.CoolDownTimeConstPm\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.CompareTimeConstFacPmAmb\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.IniPmTempRplcVal\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.IniValCalcnMod\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.CompareTimeConstFacWindg\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.CompareTimeConstFacPm\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.IniWindgTempRplcVal\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.WindgIniValCalcnMod\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.ConvTimeOff_Secs\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.DiSelAmbTempWindg\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.CoolDownTimeWindg\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.CompareTimeConstFacWindgAmb\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.RotTimeConstFac_RotTempIniFlt\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.FuncTiSlc\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.DiIntClkCntr\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.ClckCntStep\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.ClckCntMax\t/* Identifier */
+                PmTempCalcnThermNet_CalibParam.DiThermNetCalcn_UseTempWindgSnsr\t/* Identifier */
+            /end DEF_CHARACTERISTIC
+            /begin IN_MEASUREMENT
+                PmTempCalcnThermNet_InputData.TempWindgSnsr1\t/* Identifier */
+                PmTempCalcnThermNet_InputData.TempWindgSnsr2\t/* Identifier */
+                PmTempCalcnThermNet_InputData.TempWindgSnsr3\t/* Identifier */
+                PmTempCalcnThermNet_InputData.NVM_Temp1\t/* Identifier */
+                PmTempCalcnThermNet_InputData.NVM_Temp2\t/* Identifier */
+                PmTempCalcnThermNet_InputData.NVM_Temp3\t/* Identifier */
+                PmTempCalcnThermNet_InputData.CAN_VehPrkgTi\t/* Identifier */
+                PmTempCalcnThermNet_InputData.CAN_HvOffTi\t/* Identifier */
+                PmTempCalcnThermNet_InputData.EmCooltFlow\t/* Identifier */
+                PmTempCalcnThermNet_InputData.EmTempCooltInlet\t/* Identifier */
+                PmTempCalcnThermNet_InputData.SpdAct\t/* Identifier */
+                PmTempCalcnThermNet_InputData.IdActFlt\t/* Identifier */
+                PmTempCalcnThermNet_InputData.IqActFlt\t/* Identifier */
+                PmTempCalcnThermNet_InputData.ModlnModAct\t/* Identifier */
+                PmTempCalcnThermNet_InputData.FID_IniHvOff\t/* Identifier */
+                PmTempCalcnThermNet_InputData.FID_IniPrkgTi\t/* Identifier */
+                PmTempCalcnThermNet_InputData.FID_IniNvm\t/* Identifier */
+                PmTempCalcnThermNet_InputData.HwFlt_WindSnsr3\t/* Identifier */
+                PmTempCalcnThermNet_InputData.FID_ErrHvOff\t/* Identifier */
+                PmTempCalcnThermNet_InputData.FID_ErrPrkgTi\t/* Identifier */
+                PmTempCalcnThermNet_InputData.FID_ErrNvm\t/* Identifier */
+                PmTempCalcnThermNet_InputData.HwFlt_WindSnsr1\t/* Identifier */
+                PmTempCalcnThermNet_InputData.HwFlt_WindSnsr2\t/* Identifier */
+                PmTempCalcnThermNet_InputData.PwmFrqAct\t/* Identifier */
+            /end IN_MEASUREMENT
+            /begin OUT_MEASUREMENT
+                PmTempCalcnThermNet_MeasSig.EmCoolInp2Temp\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.PmTempStsWord\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.PmTempCalcnState\t/* Identifier */
+                PmTempCalcnThermNet_OutputData.TempWindgSnsrAvgVal\t/* Identifier */
+                PmTempCalcnThermNet_OutputData.StatorWindgTemp\t/* Identifier */
+                PmTempCalcnThermNet_OutputData.StatorWindgEndTemp\t/* Identifier */
+                PmTempCalcnThermNet_OutputData.PmTempEst\t/* Identifier */
+                PmTempCalcnThermNet_OutputData.PmTempIniFlt\t/* Identifier */
+                PmTempCalcnThermNet_OutputData.PmTempThermNetVld\t/* Identifier */
+            /end OUT_MEASUREMENT 
+            /begin LOC_MEASUREMENT
+                X_SPmTempCalc4__atorUnit_Delay1\t/* Identifier */
+                X_SPmTempCalc5___WindingEndTemp\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.RThermRotorCooltFlow\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.RThermRotorSpd\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.RThermStatorWindg\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.PwrLossCuEstm\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.PlossRotor\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.PwrLossWiko\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.PwrLossWikNut\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.PlossCurrD\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.PlossCurrQ\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.PlossFric\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.PlossNac\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.WndgEndTempEstUnitDly\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.PmTempUnitDly\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.IniPmTemp\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.PmTempEstLimn\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.StatortWindgEndTempEstLimn\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.StattorWindgTempEstLimn\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.TempWindgSnsrAvgVal\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.IdActFlt_k\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.IdActFlt_f\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.IqActFlt_k\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.IqActFlt_f\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.PwmFrqAct_k\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.PwmFrqAct_f\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.MotorIronLoss\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.IntgNodeTempRotor\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.IntgNodeTempStatorWindg\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.IntgNodeTempStatorWindgEnd\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.ResFeLossRotDistbnFac\t/* Identifier */
+                PmTempCalcnThermNet_InputData.EmCooltFlow\t/* Identifier */
+                PmTempCalcnThermNet_InputData.EmTempCooltInlet\t/* Identifier */
+                PmTempCalcnThermNet_InputData.SpdAct\t/* Identifier */
+                PmTempCalcnThermNet_InputData.IdActFlt\t/* Identifier */
+                PmTempCalcnThermNet_InputData.IqActFlt\t/* Identifier */
+                PmTempCalcnThermNet_InputData.ModlnModAct\t/* Identifier */
+                PmTempCalcnThermNet_InputData.PwmFrqAct\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.TrigDetmnIniVal\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.WindgLongSwtOffTimeSts\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.RotorLongSwtOffTimeSts\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.SelWndgAmbTempSts\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.SelAmbTempSts\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.PmTempSatFlg\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.StatortWindgEndTempSatFlg\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.StatorWindgTempSatFlg\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.TimeOut_NvmDataValidityFlag\t/* Identifier */
+                PmTempCalcnThermNet_AlvCntr\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.TempWindgSnsr_PmTempLimn\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.PmTempReplcmtVal_DftSt\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.PmTempReplcmtVal\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.WindgSnsrFlt_SfChart\t/* Identifier */
+                PmTempCalcnThermNet_InputData.TempWindgSnsr1\t/* Identifier */
+                PmTempCalcnThermNet_InputData.TempWindgSnsr2\t/* Identifier */
+                PmTempCalcnThermNet_InputData.TempWindgSnsr3\t/* Identifier */
+                PmTempCalcnThermNet_InputData.NVM_Temp1\t/* Identifier */
+                PmTempCalcnThermNet_InputData.NVM_Temp2\t/* Identifier */
+                PmTempCalcnThermNet_InputData.NVM_Temp3\t/* Identifier */
+                PmTempCalcnThermNet_InputData.CAN_VehPrkgTi\t/* Identifier */
+                PmTempCalcnThermNet_InputData.CAN_HvOffTi\t/* Identifier */
+                PmTempCalcnThermNet_InputData.FID_IniHvOff\t/* Identifier */
+                PmTempCalcnThermNet_InputData.FID_IniPrkgTi\t/* Identifier */
+                PmTempCalcnThermNet_InputData.FID_IniNvm\t/* Identifier */
+                PmTempCalcnThermNet_InputData.HwFlt_WindSnsr3\t/* Identifier */
+                PmTempCalcnThermNet_InputData.FID_ErrHvOff\t/* Identifier */
+                PmTempCalcnThermNet_InputData.FID_ErrPrkgTi\t/* Identifier */
+                PmTempCalcnThermNet_InputData.FID_ErrNvm\t/* Identifier */
+                PmTempCalcnThermNet_InputData.HwFlt_WindSnsr1\t/* Identifier */
+                PmTempCalcnThermNet_InputData.HwFlt_WindSnsr2\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.TempWindgSnsr_PmTempLimnSts\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.IniPmTempEfunc\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.TempAmbPm\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.IniWindgTempEfunc\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.TrigRotorIniValCalc\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.TrigWndgIniValCalc\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.TempAmbWindg\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.ClckCntRslt\t/* Identifier */
+                PmTempCalcnThermNet_MeasSig.TiDurn_PostRotTempIniFlt\t/* Identifier */
+            /end LOC_MEASUREMENT
+        /end FUNCTION
+
+        /begin RECORD_LAYOUT
+            FLOAT32_IEEE_COL_DIRECT\t/* Name */
+            FNC_VALUES 1 FLOAT32_IEEE COLUMN_DIR DIRECT
+        /end RECORD_LAYOUT
+
+        /begin RECORD_LAYOUT
+            FLOAT32_IEEE_X_INCR_DIRECT\t/* Name */
+            AXIS_PTS_X 1 FLOAT32_IEEE INDEX_INCR DIRECT
+        /end RECORD_LAYOUT
+
+        /begin RECORD_LAYOUT
+            UBYTE_COL_DIRECT\t/* Name */
+            FNC_VALUES 1 UBYTE COLUMN_DIR DIRECT
+        /end RECORD_LAYOUT
+
+        /begin RECORD_LAYOUT
+            ULONG_COL_DIRECT\t/* Name */
+            FNC_VALUES 1 ULONG COLUMN_DIR DIRECT
+        /end RECORD_LAYOUT
+    /end MODULE 
+/end PROJECT 
\\ No newline at end of file
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/include/PMTempCalcnThermNetVw.h b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet.h
similarity index 59%
rename from src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/include/PMTempCalcnThermNetVw.h
rename to src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet.h
index e2250cfc5..c6fd8f69b 100644
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/include/PMTempCalcnThermNetVw.h
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet.h
@@ -1,11 +1,11 @@
 /**************************************************************************************************\\
  *** 
- *** Simulink model       : PMTempCalcnThermNetVw
- *** TargetLink subsystem : PMTempCalcnThermNetVw
- *** Codefile             : PMTempCalcnThermNetVw.h
+ *** Simulink model       : PmTempCalcnThermNet
+ *** TargetLink subsystem : PmTempCalcnThermNet
+ *** Codefile             : PmTempCalcnThermNet.h
  ***
  *** Generated by TargetLink, the dSPACE production quality code generator
- *** Generation date: 2021-09-22 08:05:00
+ *** Generation date: 2021-11-08 12:32:25
  ***
  *** CODE GENERATOR OPTIONS:
  *** Code generation mode                     : Standard
@@ -120,8 +120,8 @@
 /* PRQA S 4602,4603,4604,4605,4606,4607,4608,4620,4621,5087 EOF*/
 /* PRQA S 5131,5134,5136,5209 EOF*/
 /*----------------------------------------------------------------------------*/
-#ifndef PMTEMPCALCNTHERMNETVW_H
-#define PMTEMPCALCNTHERMNETVW_H
+#ifndef PMTEMPCALCNTHERMNET_H
+#define PMTEMPCALCNTHERMNET_H
 
 /*----------------------------------------------------------------------------*\\
   DEFINES (OPT)
@@ -129,7 +129,7 @@
 /*----------------------------------------------------------------------------*\\
   INCLUDES
 \\*----------------------------------------------------------------------------*/
-#include "tl_defines_PMTempCalcnThermNetVw.h"
+#include "tl_defines_PmTempCalcnThermNet.h"
 #include "Platform_Types.h"
 /*----------------------------------------------------------------------------*\\
   DEFINES
@@ -138,83 +138,127 @@
   TYPEDEFS
 \\*----------------------------------------------------------------------------*/
 
-struct tag_PMTempCalcnThermNetVw_MeasSig {
+struct tag_PmTempCalcnThermNet_MeasSig {
+   float32 EmCoolInp2Temp /* Description: Estimated Second Coolant Input Temperature */;
+   float32 RThermRotorCooltFlow /* Description: output of LuT based on variable rotor Resistance v/s
+    actual coolant flow rate */;
+   float32 RThermRotorSpd /* Description: output of LuT based on variable rotor Resistance v/s actua
+   l spd */;
+   float32 RThermStatorWindg /* Description: output of LuT based on variable Winding Nut Resistance 
+   v/s actual coolant flow rate */;
+   float32 PwrLossCuEstm /* Description: Copper losses estimated analytically */;
+   float32 PlossRotor /* Description: Rotor losses estimated analytically */;
+   float32 PwrLossFeRot /* Description: Rotor Iron losses estimated analytically */;
+   float32 PwrLossFeSta /* Description: Stator Iron  losses estimated analytically */;
+   float32 PwrLossWiko /* Description: Winding End Copper losses estimated analytically */;
+   float32 PwrLossWikNut /* Description: Winding Nut Copper losses estimated analytically */;
    float32 IniPmTempEfunc /* Description: Estimated initial value of PM temperature from exponential
     function */;
-   float32 AirGapTempCalcd /* Description: Estimated temperature of Air gap */;
-   float32 AirGapTempFacLuT /* Description: Factor of Heat transfer between Stator winding, Iron cor
-   e and Coolant */;
    float32 PlossCurrD /* Description: Losses generated in rotor due to d Current */;
    float32 PlossCurrQ /* Description: Losses generated in rotor due to q Current */;
    float32 PlossFric /* Description: Losses generated in rotor due to bearing friction */;
-   float32 Fac_PlossIacN /* Description: Factor for rotor current losses generated in rotor due to r
-   otor speed */;
+   float32 PlossNac /* Description: Factor for rotor current losses generated in rotor due to rotor 
+   speed */;
    float32 PlossTotCalcd /* Description: Total Losses generated in Rotor */;
    boolean TrigDetmnIniVal /* Description: Trigger condition to execute intial PM temperature calcul
-   ation algorithm, only once from State 1 to 2 execution (1: triggered, 0 : not triggered ) */;
-   boolean TrigIniValCalc /* Description: Trigger condition further processed within intial PM tempe
-   rature calculation algorithm to execute exponential function algortihm. (1: exponential function,
-    0: Stator winding sensor) */;
-   float32 TempDifOld /* Description: Difference between estimated output  value PMTempThermNet and 
-   AirGapTempCalcd saved in NVM ram during last system cycle time. 
-This is used as input to exponential function during next system start.  */;
-   float32 TempNew /* Description: Actual measured temperature by winding sesnor or actual air gap t
-   emperature calculated during first system start (first function call). This is used as input to e
-   xponential function  */;
-   float32 eFuncFacLuT /* Description: LuT output factor value calculated using exponential function
-   . */;
+   ation algorithm, only once every (State = 2) execution (1: triggered, 0 : not triggered ) */;
+   boolean TrigRotorIniValCalc /* Description: Trigger condition further processed within intial PM 
+   temperature calculation algorithm to execute exponential function algortihm. (1: exponential func
+   tion, 0: Stator winding sensor) */;
+   boolean TrigWndgIniValCalc /* Description: Trigger condition further processed within intial PM t
+   emperature calculation algorithm to execute exponential function algortihm. (1: exponential funct
+   ion, 0: Stator winding sensor) */;
+   float32 TempAmbWindg /* Description: estimated temperature of stator winding end calculated durin
+   g first system start (first function call). This is used as input to exponential function  */;
+   float32 TempOffPm /* Description: estimated value PMTempThermNet saved in NVM ram during last sys
+   tem cycle time.This is used as input to exponential function during next system start.  */;
+   float32 TempAmbPm /* Description: Actual measured temperature by winding sesnor or actual air gap
+    temperature calculated during first system start (first function call). This is used as input to
+    exponential function  */;
    float32 DeltaTempTN /* Description: When thermal network is active, the difference between the es
    timated PM temperature (previous function call) and the actual calcualted air gap temperature(cur
    rent function call).   */;
    float32 DeltaLossTN /* Description: Value of heat exchange between rotor and airgap (mathematical
     model) */;
+   float32 WndgEndTempEstUnitDly /* Description: delayed value of estimated winding end temperature 
+   by 1 time slice */;
    float32 PmTempUnitDly /* Description: delayed value of estimated PM temperature by 1 time slice */
    ;
    float32 ResRotLutOutput /* Description: actual thermal resistance of rotor-airgap which is depend
    ent on actual mechanical speed of rotor. */;
-   boolean LongSwtOffTimeSts /* Description: Status Bit which denotes the vehicle was switched off f
-   or a time longer than the cooling thermal time constant of rotor 
-(1: Offtime longer than cooling time constant, 0: Offtime lesser than cooling time constant ) */;
+   boolean WindgLongSwtOffTimeSts /* Description: Status Bit which denotes the vehicle was switched 
+   off for a time longer than the cooling thermal time constant of stator winding end 
+(1: Offtime longer, 0: Offtime shorter) */;
+   boolean RotorLongSwtOffTimeSts /* Description: Status Bit which denotes the vehicle was switched 
+   off for a time longer than the cooling thermal time constant of rotor 
+(1: Offtime longer, 0: Offtime shorter ) */;
    boolean TempWindgSnsr_PmTempLimnSts /* Description: A status Bit which is enabled if the stator w
    inding sensor value overshoots maximum allowed (PM )rotor temperature */;
    float32 TempWindgSnsr_PmTempLimn /* Description: Maximum limited value of measured winding sensor
     temperature which is used as a replacement value for permanent magnet (rotor) temperature in Sta
-   te 1 and as initial PM temperature in State 2 */;
+   te 3 */;
    uint32 ClckCntRslt /* Description: Internal Clock ticks  */;
    float32 TiDurn_PostRotTempIniFlt /* Description: Time duration after faults occur (FID_ErrNvm or 
    FID_ErrPrkgTi or FID_ErrHvOff )  */;
-   boolean SelAmbTempSts /* Description: Status Bit which denotes selection of ambient temperature f
-   or exponential function (1: Aig-gap temperature, 0: winding temperature sensor ) */;
-   float32 PmTempReplcmtVal_DftSt /* Description: Replacement value "PmTempRplcVal" used as PM Tempe
-   rature ouput when the function is executing in default state */;
-   float32 PmTempReplcmtVal /* Description: Replacement value "PmTempRplcVal" used as PM Temperature
-    ouput when the function execution state = 1 
-( when thermal network disabled or when signals not available to calculate initial PM temperature) */
-   ;
+   boolean SelWndgAmbTempSts /* Description: A status Bit which is enabled if the coolant inlet temp
+   erature is used as ambient f\xc3\xbcr stator winding  */;
+   boolean SelAmbTempSts /* Description: A status Bit which is enabled if the stator winding sensor 
+   value overshoots maximum allowed (PM )rotor temperature */;
+   float32 PmTempReplcmtVal_DftSt /* Description: Replacement temperature value "PmTempRplcVal" used
+    as PM Temperature ouput when the function is executing in default state */;
+   float32 PmTempReplcmtVal /* Description: Replacement temperature value "PmTempRplcVal" used as PM
+    Temperature ouput when the function execution state = 1 
+( when faults are active or thermal network disabled or signals not available to calculate initial P
+   M temperature) */;
+   float32 IniWindgTempEfunc /* Description: Estimated initial value of stator winding temperature w
+   hen the vehicle is switched On (either exponential function output or stator winding sensor value
+   ) */;
    float32 IniPmTemp /* Description: Estimated initial value of PM temperature when the vehicle is s
    witched On (either exponential function output or stator winding sensor value) */;
-   float32 TempDifAirGap /* Description: Difference between estimated PM temperature output value "P
-   MTempThermNet" and "AirGapTempCalcd" */;
-   float32 TempDifWindg /* Description: Difference between estimated PM temperature output value "PM
-   TempThermNet" and winding temperature */;
-   float32 PmTempEstLimn /* Description: Saturated Value of PM Temperature */;
-   boolean PmTempSatFlg /* Description: Status Bit which denotes saturated value of PM temperature (
-   Max & Min both limit flag) */;
-   uint32 SatFlgClckCntRslt /* Description: Internal Clock ticks for saturation flag of PM temperatu
-   re */;
-   float32 OffTime /* Description: vehicle switch-off time (VehPrkgTi or HvOffTi) in seconds */;
+   uint8 WindgSnsrFlt_SfChart /* Description: Actual state of winding sensor average value calculati
+   on  */;
+   uint8 PmTempCalcnState /* Description: State 1 or State 3: Use replacement value instead of estim
+   ated temperature value of Permanent magnet.
+State 2: Use the estimated value of Permanent magnet temperature calculated via Thermal Network. */;
+   uint32 PmTempStsWord /* Description: Status bit which corresponds to output availability and its 
+   validity */;
+   boolean PmTempSatFlg /* Description: A status Bit which is enabled if the Pm temperature overshoo
+   ts maximum or minimum allowed (PM )rotor temperature */;
+   float32 PmTempEstLimn /* Description: Saturated  value of PM temperature in State 2 */;
+   boolean StatortWindgEndTempSatFlg /* Description: A status Bit which is enabled if the stator win
+   ding-end temperature overshoots maximum or minimum allowed  threshold value */;
+   float32 StatortWindgEndTempEstLimn /* Description: Saturated  value of Stator winding end tempera
+   ture in State 2 */;
+   boolean StatorWindgTempSatFlg /* Description: A status Bit which is enabled if the stator winding
+    temperature overshoots maximum or minimum allowed threshold value */;
+   float32 StattorWindgTempEstLimn /* Description: Saturated  value of Stator winding temperature in
+    State 2 */;
+   boolean TimeOut_NvmDataValidityFlag /* Description: Validity flag for stored temperature in NVM a
+   nd CAN timeout value */;
+   float32 TempWindgSnsrAvgVal /* Description: Average value of stator winding temperature sensors */
+   ;
    uint32 IdActFlt_k /* Description: Index of Prelook-up function of IdActFlt */;
    float32 IdActFlt_f /* Description: Fraction of Prelook-up function of IdActFlt */;
    uint32 IqActFlt_k /* Description: Index of Prelook-up function of IqActFlt */;
    float32 IqActFlt_f /* Description: Fraction of Prelook-up function of IqActFlt */;
    uint32 PwmFrqAct_k /* Description: Index of Prelook-up function of PwmFrqAct */;
    float32 PwmFrqAct_f /* Description: Fraction of Prelook-up function of PwmFrqAct */;
-}; /* struct type created for variable: PMTempCalcnThermNetVw_MeasSig */
-struct tag_SIBFS_PmTempCalcnStateChart_PMTempCalc_tp {
-   unsigned int CPMTempCalc2_I__ReplcmtValState : 1;
-   unsigned int CPMTempCalc3_PmTempSafeState : 1;
-   unsigned int CPMTempCalc4_D__l_PmTempTNCalcn : 1;
-   unsigned int CPMTempCalc5_W__Flt_InOperation : 1;
+   float32 MotorIronLoss /* Description: Total Losses generated in the machine */;
+   float32 IntgNodeTempRotor /* Description: Thermal network rotor node temperature */;
+   float32 IntgNodeTempStatorWindg /* Description: Thermal network stator winding node temperature */
+   ;
+   float32 IntgNodeTempStatorWindgEnd /* Description: Thermal network stator winding end node temper
+   ature */;
+   float32 ResFeLossRotDistbnFac /* Description: distribution factor of rotor iron loss to overall m
+   otor iron loss depending on rotor speed */;
+}; /* struct type created for variable: PmTempCalcnThermNet_MeasSig */
+struct tag_SIBFS_PmTempCalcnStateChart_PmTempCalc_tp {
+   unsigned int CPmTempCalc2_I__ReplcmtValState : 1;
+   unsigned int CPmTempCalc3_D__l_PmTempTNCalcn : 1;
+   unsigned int CPmTempCalc4_W__Flt_InOperation : 1;
+}; /* Type of structure containing bitfields for Stateflow chart  */
+struct tag_SIBFS_WindgSnsrFltCheckStateChart_PmTempCalc_tp {
+   unsigned int CPmTempCalc5_W__ckStateChart_ns : 4;
 }; /* Type of structure containing bitfields for Stateflow chart  */
 /*----------------------------------------------------------------------------*\\
   ENUMS
@@ -223,72 +267,87 @@ struct tag_SIBFS_PmTempCalcnStateChart_PMTempCalc_tp {
   VARIABLES
 \\*----------------------------------------------------------------------------*/
 
-#define PMTEMPCALCNTHERMNETVW_START_SEC_VAR_CLEARED_32
+#define PMTEMPCALCNTHERMNET_START_SEC_VAR_CLEARED_32
 #include "MemMap.h"
+/******************************************************************************\\
+   UserSLGlobal: SLGlobal = { MemMap_GLOBAL_CLEARED_32_EXCLFROMA2L } | Width: 32
+\\******************************************************************************/
+extern float32 SPmTempCalc15_TimeOff_Switch1;
+extern float32 SPmTempCalc4_S__atBlck_WndgSnsr;
+extern float32 SPmTempCalc59_Switch;
+
 /******************************************************************************\\
    UserSLGlobal: SLGlobal = { MemMap_GLOBAL_CLEARED_32_EXCLFROMA2L } | Width: 8
 \\******************************************************************************/
-extern boolean SPMTempCalc19_TimeOff_Switch1_a /* LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 1 */;
-#define PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_CLEARED_32
+extern boolean SPmTempCalc15_TimeOff_Switch1_a /* LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 1 */;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_CLEARED_32
 #include "MemMap.h"
-#define PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32
+#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32
 #include "MemMap.h"
 
 /******************************************************************************\\
    MemMap_DISP_INIT_32: global observable variables (RAM) | Width: 32
 \\******************************************************************************/
-extern MemMap_DISP_INIT_32 uint32 PMTempCalcnThermNetVw_AlvCntr /* 
+extern MemMap_DISP_INIT_32 uint32 PmTempCalcnThermNet_AlvCntr /* 
    Unit       : -
    Description: AliveCounter
    LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 4294967295 */;
+extern MemMap_DISP_INIT_32 float32 X_SPmTempCalc4__atorUnit_Delay1;
+extern MemMap_DISP_INIT_32 float32 X_SPmTempCalc5___WindingEndTemp;
 
 /******************************************************************************\\
    MemMap_DISP_INIT_32: global observable variables (RAM) | Width: N.A.
 \\******************************************************************************/
-extern MemMap_DISP_INIT_32 struct tag_PMTempCalcnThermNetVw_MeasSig PMTempCalcnThermNetVw_MeasSig /*
-    Description: Structure of all measurable signals corresponding to thermal network for rotor temp
-   erature estimation */;
-#define PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32
+extern MemMap_DISP_INIT_32 struct tag_PmTempCalcnThermNet_MeasSig PmTempCalcnThermNet_MeasSig /* Des
+   cription: dummy structure */;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32
 #include "MemMap.h"
-#define PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32
+#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32
 #include "MemMap.h"
 
 /******************************************************************************\\
    UserSFGlobalInit: SFGlobalInit = { MemMap_GLOBAL_INIT_32_EXCLFROMA2L } | Width: 8
 \\******************************************************************************/
-extern uint8 CPMTempCalc1_P__cnState_SfChart /* LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 5 */;
-extern boolean CPMTempCalc1_TrigDetmnIniVal /* LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 1 */;
+extern uint8 CPmTempCalc1_P__cnState_SfChart /* LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 5 */;
+extern boolean CPmTempCalc1_PmTempThermNetVld /* LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 1 */;
+extern boolean CPmTempCalc1_TrigDetmnIniVal /* LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 1 */;
+extern boolean CPmTempCalc5_T__mntValWindgSnsr /* LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 1 */;
+extern uint8 CPmTempCalc5_W__SnsrFlt_SfChart /* LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 8 */;
 
 /******************************************************************************\\
    UserSFGlobalInit: SFGlobalInit = { MemMap_GLOBAL_INIT_32_EXCLFROMA2L } | Width: N.A.
 \\******************************************************************************/
-extern struct tag_SIBFS_PmTempCalcnStateChart_PMTempCalc_tp SIBFS_PmTempCa__hart_PMTempCalc /* Descr
+extern struct tag_SIBFS_PmTempCalcnStateChart_PmTempCalc_tp SIBFS_PmTempCa__hart_PmTempCalc /* Descr
    iption: Structure containing bitfields for Stateflow chart  */;
-#define PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32
+
+extern struct tag_SIBFS_WindgSnsrFltCheckStateChart_PmTempCalc_tp SIBFS_WindgSns__hart_PmTempCalc /*
+    Description: Structure containing bitfields for Stateflow chart  */;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32
 #include "MemMap.h"
-#define PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32
+#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32
 #include "MemMap.h"
 
 /******************************************************************************\\
    UserSLGlobalInit: SLGlobalInit = { MemMap_GLOBAL_INIT_32_EXCLFROMA2L } | Width: 32
 \\******************************************************************************/
-extern float32 SPMTempCalc5_S___SatBlck_PmTemp;
-extern float32 X_SPMTempCalc1__Delay_PmTempEst;
-extern uint32 X_SPMTempCalc1__IncrmntClckCntr /* LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 10000000 */;
-extern uint32 X_SPMTempCalc2_AliveCount /* 
+extern float32 SPmTempCalc31___IniValCalcnMod1;
+extern uint32 X_SPmTempCalc1__IncrmntClckCntr /* LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 10000000 */;
+extern uint32 X_SPmTempCalc2_AliveCount /* 
    Unit       : -
    LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 4294967295 */;
-extern uint32 X_SPMTempCalc5__IncrmntClckCntr;
+extern float32 X_SPmTempCalc4___WindingEndTemp;
+extern float32 X_SPmTempCalc59_Unit_Delay;
 
 /******************************************************************************\\
    UserSLGlobalInit: SLGlobalInit = { MemMap_GLOBAL_INIT_32_EXCLFROMA2L } | Width: 8
 \\******************************************************************************/
-extern boolean SPMTempCalc15_RSWE;
-extern uint8 SPMTempCalc1_S__Case_LastSystem;
-extern boolean X_SPMTempCalc1__ay_PmTempSatFlg /* LSB: 2^0 OFF:  0 MIN/MAX:  0 .. 1 */;
-extern boolean X_SPMTempCalc1__ay_ResetIntClck;
-extern boolean X_SPMTempCalc1__lay_TrigIntClck;
-#define PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32
+extern boolean SPmTempCalc10_RSWE;
+extern boolean SPmTempCalc10___stRotTempIniFlt;
+extern uint8 SPmTempCalc1_S__Case_LastSystem;
+extern boolean X_SPmTempCalc1__ay_ResetIntClck;
+extern boolean X_SPmTempCalc1__lay_TrigIntClck;
+extern boolean X_SPmTempCalc59_oldHysOutp;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32
 #include "MemMap.h"
 
 /*----------------------------------------------------------------------------*\\
@@ -300,14 +359,14 @@ extern boolean X_SPMTempCalc1__lay_TrigIntClck;
 /******************************************************************************\\
    MemMap_GLOBAL_FCN: global function(s) (exported to other modules)
 \\******************************************************************************/
-#define PMTEMPCALCNTHERMNETVW_START_SEC_CODE
+#define PMTEMPCALCNTHERMNET_START_SEC_CODE
 #include "MemMap.h"
-extern void PMTempCalcnThermNetVw(void);
-#define PMTEMPCALCNTHERMNETVW_STOP_SEC_CODE
+extern void PmTempCalcnThermNet(void);
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CODE
 #include "MemMap.h"
 
 
-#endif/*PMTEMPCALCNTHERMNETVW_H */
+#endif/*PMTEMPCALCNTHERMNET_H */
 /*----------------------------------------------------------------------------*\\
   END OF FILE
 \\*----------------------------------------------------------------------------*/
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/include/PMTempCalcnThermNetVw_Data.h b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_Data.h
similarity index 55%
rename from src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/include/PMTempCalcnThermNetVw_Data.h
rename to src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_Data.h
index 4378af5f4..70aa97508 100644
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/include/PMTempCalcnThermNetVw_Data.h
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_Data.h
@@ -1,11 +1,11 @@
 /**************************************************************************************************\\
  *** 
- *** Simulink model       : PMTempCalcnThermNetVw
- *** TargetLink subsystem : PMTempCalcnThermNetVw
- *** Codefile             : PMTempCalcnThermNetVw_Data.h
+ *** Simulink model       : PmTempCalcnThermNet
+ *** TargetLink subsystem : PmTempCalcnThermNet
+ *** Codefile             : PmTempCalcnThermNet_Data.h
  ***
  *** Generated by TargetLink, the dSPACE production quality code generator
- *** Generation date: 2021-09-22 08:05:00
+ *** Generation date: 2021-11-08 12:32:25
  ***
  *** CODE GENERATOR OPTIONS:
  *** Code generation mode                     : Standard
@@ -120,8 +120,8 @@
 /* PRQA S 4602,4603,4604,4605,4606,4607,4608,4620,4621,5087 EOF*/
 /* PRQA S 5131,5134,5136,5209 EOF*/
 /*----------------------------------------------------------------------------*/
-#ifndef PMTEMPCALCNTHERMNETVW_DATA_H
-#define PMTEMPCALCNTHERMNETVW_DATA_H
+#ifndef PMTEMPCALCNTHERMNET_DATA_H
+#define PMTEMPCALCNTHERMNET_DATA_H
 
 /*----------------------------------------------------------------------------*\\
   DEFINES (OPT)
@@ -129,7 +129,7 @@
 /*----------------------------------------------------------------------------*\\
   INCLUDES
 \\*----------------------------------------------------------------------------*/
-#include "tl_defines_PMTempCalcnThermNetVw.h"
+#include "tl_defines_PmTempCalcnThermNet.h"
 #include "Platform_Types.h"
 /*----------------------------------------------------------------------------*\\
   DEFINES
@@ -138,117 +138,226 @@
   TYPEDEFS
 \\*----------------------------------------------------------------------------*/
 
-struct tag_PMTempCalcnThermNetVw_CalibParam {
-   const float32 IntgTiSampleRot /* Description: Integrator time constant  */;
-   const float32 CapcRot /* Description: Thermal capacitance of Rotor-PM */;
-   const float32 Rth_LuTYaxis[8] /* Description: Thermal resistivity of Rotor */;
-   const float32 SpdAct_RthLuTXaxis[8] /* Description: Mechanical speed of electric motor used to ca
-   lculate thermal resistivity via LuT */;
-   const float32 PlossFric_LuTYaxis[8] /* Description: Losses generated in rotor due to Friction */;
-   const float32 Fac_PlossIacN_LuTYaxis[8] /* Description: Current losses generated in rotor due to 
-   rotor speed */;
-   const float32 CoolFlowRate_LuTXaxis[8] /* Description: Estimated flowrate at Inverter coolant out
-   let (served as input to electric motor coolant inlet) */;
-   const float32 AirGapTempFac_LuTYaxis[8] /* Description: Factor to calculate Air gap temperature (
-   dependency can be made on coolant flow rate if required) */;
-   const float32 SpdActFric_LuTXaxis[8] /* Description: Actual mechanical speed of PM synchronous mo
-   tor used to set up Friction losses LuT */;
-   const float32 efuncFac_LuTYaxis[8] /* Description: Factor to calculate the initial rotor temperat
-   ure using system off time and ambient temperature (stator winding or airgap) */;
-   const float32 TimeKeyOff_LuTXaxis[8] /* Description: vehicle switch-off time (VehPrkgTi or HvOffT
-   i) */;
-   const float32 SpdActNac_LuTXaxis[8] /* Description: Actual mechanical speed of PM synchronous mot
-   or used to set up Rotor losses dependent on AC currents */;
+struct tag_PmTempCalcnThermNet_CalibParam {
+   const float32 RThermRotorAirgap_LuTYaxis[16] /* Description: Thermal resistivity of Rotor */;
+   const float32 SpdActRTherm_LuTXaxis[16] /* Description: Mechanical speed of electric motor used t
+   o calculate thermal resistivity via LuT */;
+   const float32 CooltFlowRateRtherm_LuTXaxis[16] /* Description: Actual coolant flow rate at motor 
+   inlet. */;
+   const float32 RThermRotorCoolt_LuTYaxis[16] /* Description: Look-Up table for thermal resistivity
+    of rotor */;
+   const float32 RThermStatorWindgEnd /* Description: Thermal resistivity of winding end */;
+   const float32 RThermStatorWindg_LuTYaxis[16] /* Description: Look-Up table for thermal resistivit
+   y of winding */;
+   const float32 StatorWindgCpTherm /* Description: Thermal capacitance of winding */;
+   const float32 StatorWindgEndCpTherm /* Description: Thermal capacitance of winding end */;
+   const float32 RotorCpTherm /* Description: Thermal capacitance of Rotor-PM */;
+   const float32 IntgTiSampleRot /* Description: Integrator time constant for Rotor */;
+   const float32 IntgTiSampleWiko /* Description: Integrator time constant for winding end */;
+   const float32 IntgTiSampleWik /* Description: Integrator time constant for winding */;
+   const boolean EnaStaWindg_CuLossEstim /* Description: Enable Bit to activate calculation of coppe
+   r losses */;
+   const float32 CuResist_TempRef /* Description: copper resistance used to calculate copper losses */
+   ;
+   const float32 MotorPhaseNum_StandStill /* Description: Total number of motor phases to be multipl
+   ied during stand still operation */;
+   const float32 MotorPhaseNum_NomOp /* Description: Total number of motor phases to be multiplied d
+   uring normal operation */;
+   const float32 TempCoeff_CuResist /* Description: Temperature coefficient to adapt temperature dep
+   endent copper resistance */;
+   const float32 TempRef_CuResist /* Description: Reference temperature to adapt temperature depende
+   nt copper resistance */;
+   const boolean EnaStandStillOp /* Description: Enable Bit to activate calculation of copper losses
+    at standstill operation */;
+   const float32 MotSpdThd /* Description: Threshold value of speed at which stand still operation w
+   ill be switched on */;
+   const float32 CuWikoFac /* Description: Factor to divide the copper losses in stator winding and 
+   in winding-end */;
+   const float32 PlossIdFlatTop_map[16][4] /* Description: Losses generated in rotor due to d Curren
+   t when Flat top modulation is active (Frq dependent) */;
+   const float32 PlossIqFlatTop_map[16][4] /* Description: Losses generated in rotor due to q Curren
+   t when Flat top modulation is active (Frq dependent) */;
+   const float32 IdMin[1] /* Description: Minimal value of Id (direct axis) current for all LuTs */;
+   const float32 IdIvsStep[1] /* Description: Inverse of equidistant steps between two Id current ve
+   ctor elements */;
+   const uint8 IdMaxIdx[1] /* Description: Maximal index of Id current vector (dimension-1) */;
+   const float32 IqMin[1] /* Description: Minimal value of Iq (direct axis) current for all LuTs */;
+   const float32 IqIvsStep[1] /* Description: Inverse of equidistant steps between two Iq current ve
+   ctor elements */;
+   const uint8 IqMaxIdx[1] /* Description: Maximal index of Iq current vector (dimension-1) */;
+   const float32 PlossIdSpcVec_map[16][4] /* Description: Losses generated in rotor due to d Current
+    when space vector modulation is active (Frq dependent) */;
+   const float32 PlossIqSpcVec_map[16][4] /* Description: Losses generated in rotor due to q Current
+    when space vector modulation is active (Frq dependent) */;
+   const float32 PwmFreqActMin[1] /* Description: Minimal value of PWM frequency for all LuTs */;
+   const float32 PwmFreqActIvsStep[1] /* Description: Inverse of equidistant steps between two PWM f
+   requency vector elements */;
+   const uint8 PwmFreqActMaxIdx[1] /* Description: Maximal index of PWM frequency vector (dimension-
+   1) */;
+   const float32 PlossFric_LuTYaxis[16] /* Description: Losses generated in rotor due to Friction */
+    ;
+   const float32 SpdActFric_LuTXaxis[16] /* Description: Actual mechanical speed of PM synchronous m
+   otor used to set up Friction losses LuT */;
+   const float32 PlossNac_LuTYaxis[16] /* Description: Current losses generated in rotor due to roto
+   r speed */;
+   const float32 SpdActNac_LuTXaxis[16] /* Description: Actual mechanical speed of PM synchronous mo
+   tor used to set up Rotor losses dependent on AC currents */;
+   const boolean DiHwFltCheckStMachn /* Description: Disable Bit to deactivate Fault check of windin
+   g temperature sensor (NTC\'s) */;
+   const boolean EnaTempWndgRplcmntVal /* Description: Enable Bit to activate replacement value of w
+   inding temperature (NTC\'s) */;
+   const float32 TwoValAvgFacInvs /* Description: Factor to calculate average of winding temperature
+    (0.5: two sensors ) */;
+   const float32 ThreeValAvgFacInvs /* Description: Factor to calculate average of winding temperatu
+   re (0.5: two sensors, 0.3333: for 3 sensors)  */;
+   const boolean EnaAvgWindTempCalc /* Description: Enable Bit to activate calculation of average wi
+   nding temperature using 2 winding sensors  */;
+   const boolean EnaCoolInp2TempCalc /* Description: Enable Bit to activate calculation of coolant t
+   emperature at rotor outlet */;
+   const float32 CoolFlowRate_LuTXaxis[16] /* Description: Estimated flowrate at Inverter coolant ou
+   tlet (served as input to electric motor coolant inlet) */;
+   const float32 CooltTemp2_CoolTemp1Fac_LuTYaxis[16] /* Description: Factor to calculate Air gap te
+   mperature (dependency can be made on coolant flow rate if required) */;
+   const float32 CooltTemp2_PmTempFac_LuTYaxis[16] /* Description: Factor to calculate Air gap tempe
+   rature (dependency can be made on coolant flow rate if required) */;
+   const float32 IniPmTempRplcVal /* Description: calibratable value for initial PM temperature */;
+   const uint8 IniValCalcnMod /* Description: Mode to select Initial value for PM temperature. 
+Default: Calib param \'IniPmTempRplcVal\'
+1: Measured winding temperature  \'TempWindgSnsr_PmTempLimn\'
+2: Initial value calculated via \'IniPMTemp\' algorithm 
+3: Calib param \'IniPmTempRplcVal\' */;
+   const boolean EnaHvOffTime /* Description: Enable Bit to select the use HV Off time or Vehicle Of
+   f time in exponential function initial value calc. Algorithm (0: Disabled 1: Enabled ) */;
+   const boolean DiSelAmbTempWindg /* Description: Disable Bit to deactivate the selection of ambien
+   t temperature (stator winding or airgap) used for initial value calc. (1: Disabled 0: Enabled ) */
+   ;
+   const boolean DiSelAmbTempPm /* Description: Disable Bit to deactivate the selection of ambient t
+   emperature (stator winding or airgap) used for initial value calc. (1: Disabled 0: Enabled ) */;
+   const float32 CoolDownTimeConstPm /* Description: Constant Factor to decide if initial value calc
+   . algorithm shall be triggered for Rotor */;
+   const float32 CoolDownTimeWindg /* Description: Cooling time constant for winding end thermal nod
+   e. */;
+   const float32 CompareTimeConstFacWindg /* Description: Cooling time constant for winding end ther
+   mal node. */;
+   const float32 CompareTimeConstFacWindgAmb /* Description: Constant Factor to decide which tempera
+   ture shall be used as ambient temperature for initial value calc. Algorithm. */;
+   const float32 CompareTimeConstFacPmAmb /* Description: Constant Factor to decide which temperatur
+   e shall be used as ambient temperature for initial value calc. Algorithm. */;
+   const float32 CompareTimeConstFacPm /* Description: Constant Factor to decide if initial value ca
+   lc. algorithm shall be triggered. */;
+   const float32 IniWindgTempRplcVal /* Description: calibratable value for initial PM temperature */
+   ;
+   const uint8 WindgIniValCalcnMod /* Description: Mode to select Init value for Winding End temp. 
+Default: Calibparam \'IniWndgEndTempRplcVal\'
+1: Average winding temp or Maximum of available NTC\'s
+2: Initial Value algorithm exp func
+3: Calib param \'IniWndgEndTempRplcVal\' */;
+   const float32 RotTimeConstFac_RotTempIniFlt /* Description: A time factor which is a multiple of 
+   Thermal time constant of Permanent Magnet (Rotor) */;
+   const float32 FuncTiSlc /* Description: time slice in which the function PmTempCalcnThermNetVw is
+    called */;
+   const boolean DiIntClkCntr /* Description: Disable Bit to deactivate the  internal clock which is
+    used to calculate time duration after RotTempFlt occurs (1: Disabled 0: Enabled ) */;
+   const uint32 ClckCntStep /* Description: Step size which represents the incremental counter of in
+   ternal clock */;
+   const uint32 ClckCntMax /* Description: Maximum counter size after which the internal clock reset
+   s to Zero */;
    const boolean DiThermNetCalcn /* Description: Deactivate PM temperature calculation. Thermal Netw
    ork will switch to replacement value \'State1\'. */;
    const float32 PmTempRplcVal /* Description: Replacement value of temperature used either for init
    ialisation of Thermal Network or as PM Temperature ouput value  */;
-   const boolean EnaHvOffTime /* Description: Enable Bit to select the use HV Off time or Vehicle Of
-   f time in exponential function initial value calc. Algorithm (0: Disabled 1: Enabled ) */;
-   const boolean DiSelAmbTemp /* Description: Disable Bit to deactivate the selection of ambient tem
-   perature (stator winding or airgap) used for initial value calc. (1: Disabled 0: Enabled ) */;
-   const float32 CompareTimeConstFacAmb /* Description: Constant Factor to decide which temperature 
-   shall be used as ambient temperature for initial value calc. Algorithm. */;
-   const float32 CompareTimeConstFacRot /* Description: Constant Factor to decide if initial value c
-   alc. algorithm shall be triggered. */;
-   const float32 SpdMax /* Description: Maximum Mechanical Speed of Motor */;
+   const float32 StaWindgSnsrReplcmtVal /* Description: Replacement value of stator temperature when
+    all NTC sensor deliver faluty inputs. */;
+   const boolean DiThermNetCalcn_UseTempWindgSnsr /* Description: Bit to select the replacement valu
+   e for PM temperature. 
+(1: Winding sensor temperature; 0: Calibratable value  \'PmTempRplcVal\' ) */;
+   const float32 TempWindgSnsr_PmTempMax /* Description: Maximum Threshold value for limiting the me
+   asured winding temperature, where measured winding temp. is used as a replacement value for follo
+   wing: 
+1) Output PM temperature in State 1
+2) Initial PM temperature in State 2 */;
+   const boolean DiSimnPmTemp /* Description: Disable Simulation Mode (Test Purpose Only) of Thermal
+    Network via Calibration parameter (1: Disabled 0: Enabled ) */;
    const boolean SimnPmTemp_FID_IniHvOff /* Description: Test Purpose Only: Initialisation Bit which
     denotes availability of HV Offtime Signal (1: Not Available; 0: Signal Available) */;
    const boolean SimnPmTemp_FID_IniPrkgTi /* Description: Test Purpose Only: Initialisation Bit whic
    h denotes availability of Vehicle Offtime Signal (1: Not Available; 0: Signal Available) */;
    const boolean SimnPmTemp_FID_IniNvm /* Description: Test Purpose Only: Initialisation Bit which d
    enotes availability of variables stored in NVM (1: Not Available; 0: Signal Available) */;
-   const boolean SimnPmTemp_HwFlt_WindgSnsr /* Description: Test Purpose Only: Fault Bit which denot
-   es if measured tempeture using winding sensor is a faulty signal (0: No Fault ; 1: Fault Signal )
-    */;
+   const boolean SimnPmTemp_HwFlt_WindgSnsr1 /* Description: Test Purpose Only: Fault Bit which deno
+   tes if measured tempeture using winding sensor 1 is a faulty signal (0: No Fault ; 1: Fault Signa
+   l ) */;
+   const boolean SimnPmTemp_HwFlt_WindgSnsr2 /* Description: Test Purpose Only: Fault Bit which deno
+   tes if measured tempeture using winding sensor 2 is a faulty signal (0: No Fault ; 1: Fault Signa
+   l ) */;
+   const boolean SimnPmTemp_HwFlt_WindgSnsr3 /* Description: Test Purpose Only: Fault Bit which deno
+   tes if measured tempeture using winding sensor 3 is a faulty signal (0: No Fault ; 1: Fault Signa
+   l ) */;
    const boolean SimnPmTemp_FID_ErrHvOff /* Description: Test Purpose Only: Validity Bit which denot
    es validity of HV Offtime Signal (1: Not Valid 0: Signal Valid ) */;
    const boolean SimnPmTemp_FID_ErrPrkgTi /* Description: Test Purpose Only: Validity Bit which deno
    tes validity of Vehicle Offtime Signal (1: Not Valid 0: Signal Valid ) */;
    const boolean SimnPmTemp_FID_ErrNvm /* Description: Test Purpose Only: Validity Bit which denotes
     validity of variables stored NVM (1: Not Valid 0: Signal Valid ) */;
-   const boolean DiSimnPmTemp /* Description: Disable Simulation Mode (Test Purpose Only) of Thermal
-    Network via Calibration parameter (1: Disabled 0: Enabled ) */;
-   const float32 SimnPmTemp_NVM_TempDifAirGap /* Description: Test Purpose Only: Difference between 
-   estimated PM temperature and estimated airgap temperature at the time of vehicle switch-off */;
-   const float32 SimnPmTemp_NVM_TempDifWindg /* Description: Test Purpose Only: Difference between e
-   stimated PM temperature and mesaured winding temperature at the time of vehicle switch-off */;
+   const float32 SimnPmTemp_NVM_Temp1 /* Description: Test Purpose Only: Temperature saved in NVM me
+   mory block 1 at the time of vehicle switch-off (during last operating cycle) */;
+   const float32 SimnPmTemp_NVM_Temp2 /* Description: Test Purpose Only:Temperature saved in NVM mem
+   ory block 2 at the time of vehicle switch-off (during last operating cycle) */;
+   const float32 SimnPmTemp_NVM_Temp3 /* Description: Test Purpose Only: Temperature saved in NVM me
+   mory block 3 at the time of vehicle switch-off (during last operating cycle) */;
    const float32 SimnPmTemp_CAN_VehPrkgTi /* Description: Test Purpose Only: Time during which the v
-   ehicle stays switched off */;
+   ehicle stays switched off, If is in minutes set \'\' */;
    const float32 SimnPmTemp_CAN_HvOffTi /* Description: Test Purpose Only: Time during which the HV 
    connection is switched off */;
-   const float32 FuncTiSlc /* Description: time slice in which the function PmTempCalcnThermNetVw is
-    called */;
-   const float32 RotTimeConstFac_RotTempIniFlt /* Description: A time factor which is a multiple of 
-   Thermal time constant of Permanent Magnet (Rotor) */;
-   const boolean DiIntClkCntr /* Description: Disable Bit to deactivate the  internal clock which is
-    used to calculate time duration after RotTempFlt occurs (1: Disabled 0: Enabled ) */;
-   const uint32 ClckCntStep /* Description: Step size which represents the incremental counter of in
-   ternal clock */;
-   const uint32 ClckCntMax /* Description: Maximum counter size after which the internal clock reset
-   s to Zero */;
-   const float32 TempWindgSnsr_PmTempMax /* Description: Maximum Threshold value for limiting the me
-   asured winding temperature, where measured winding temp. is used as a replacement value for follo
-   wing: 
+   const float32 ConvTimeOff_Secs /* Description: conversion parameter to convert Off time from minu
+   tes to secs. (Set value = 60: CAN_VehPrkgTi / CAN_HvOffTi is in minutes; 1: CAN_VehPrkgTi / CAN_H
+   vOffTi is in seconds ) */;
+   const float32 GearRatioInvs /* Description: Conversion ratio to convert speed from rpm to kmph: "
+   InvsGearRatio*2*Pi*WheelRadius*1e-6*60" */;
+   const float32 VehMovmnt_MinSpdThd /* Description: minimum speed in kmph to check if vehicle is mo
+   ving, only in this case the RotTempFlt will be disabled once internal clock overshoot the Rotor t
+   ime constant threshold  */;
+   const boolean EnaVehSpdChck /* Description: Enable bit to activate vehicle speed check used in Ro
+   tor temperature fault. */;
+   const boolean DiSimnPmTemp_HwFlt /* Description: Disable winding sensor HW fault Simulation Mode 
+   (Test Purpose Only) of Thermal Network via Calibration parameter (1: Disabled 0: Enabled ) */;
+   const float32 StatorWindgTempMaxVal /* Description: Maximum Threshold value for limiting the meas
+   ured winding temperature, where measured winding temp. is used as a replacement value for followi
+   ng: 
 1) Output PM temperature in State 1
 2) Initial PM temperature in State 2 */;
-   const boolean DiThermNetCalcn_UseTempWindgSnsr /* Description: Bit to select the replacement valu
-   e for PM temperature. 
-(1: Winding sensor temperature; 0: Calibratable value  \'PmTempRplcVal\' ) */;
-   const float32 IniPmTempRplcVal /* Description: calibratable value for initial PM temperature */;
-   const uint8 IniValCalcnMod /* Description: Mode to select Initial value for PM temperature. 
-Default: Calib param \'IniPmTempRplcVal\'
-1: Measured winding temperature  \'TempWindgSnsr_PmTempLimn\'
-2: Initial value calculated via \'IniPMTemp\' algorithm 
-3: Calib param \'IniPmTempRplcVal\' */;
-   const float32 PmTempMaxVal /* Description: Maximum allowed PM temperature */;
-   const float32 PmTempMinVal /* Description: Minimum allowed PM temperature */;
-   const uint32 SatValHldTiStep /* Description: Step size which represents the incremental counter o
-   f internal clock for Holding saturated maximum or minimum PM temperature */;
-   const uint32 SatValHldTi /* Description: Maximum counter size after which the saturated maximum o
-   r minimum PM temperature is set to replacement PM temperature */;
-   const float32 IdMin[1] /* Description: Minimal value of Id (direct axis) current for all LuTs */;
-   const float32 IdIvsStep[1] /* Description: Inverse of equidistant steps between two Id current ve
-   ctor elements */;
-   const uint8 IdMaxIdx[1] /* Description: Maximal index of Id current vector (dimension-1) */;
-   const float32 IqMin[1] /* Description: Minimal value of Iq (direct axis) current for all LuTs */;
-   const float32 IqIvsStep[1] /* Description: Inverse of equidistant steps between two Iq current ve
-   ctor elements */;
-   const uint8 IqMaxIdx[1] /* Description: Maximal index of Iq current vector (dimension-1) */;
-   const float32 PwmFreqActMin[1] /* Description: Minimal value of PWM frequency for all LuTs */;
-   const float32 PwmFreqActIvsStep[1] /* Description: Inverse of equidistant steps between two PWM f
-   requency vector elements */;
-   const uint8 PwmFreqActMaxIdx[1] /* Description: Maximal index of PWM frequency vector (dimension-
-   1) */;
-   const float32 PlossIdSpcVec_map[16][4] /* Description: Losses generated in rotor due to d Current
-    when space vector modulation is active (Frq dependent) */;
-   const float32 PlossIqSpcVec_map[16][4] /* Description: Losses generated in rotor due to q Current
-    when space vector modulation is active (Frq dependent) */;
-   const float32 PlossIdFlatTop_map[16][4] /* Description: Losses generated in rotor due to d Curren
-   t when Flat top modulation is active (Frq dependent) */;
-   const float32 PlossIqFlatTop_map[16][4] /* Description: Losses generated in rotor due to q Curren
-   t when Flat top modulation is active (Frq dependent) */;
-}; /* struct type created for variable: PMTempCalcnThermNetVw_CalibParam */
+   const float32 StatorWindgTempMinVal /* Description: Maximum Threshold value for limiting the meas
+   ured winding temperature, where measured winding temp. is used as a replacement value for followi
+   ng: 
+1) Output PM temperature in State 1
+2) Initial PM temperature in State 2 */;
+   const float32 StatorWindgEndTempMaxVal /* Description: Maximum Threshold value for limiting the m
+   easured winding temperature, where measured winding temp. is used as a replacement value for foll
+   owing: 
+1) Output PM temperature in State 1
+2) Initial PM temperature in State 2 */;
+   const float32 StatorWindgEndTempMinVal /* Description: Maximum Threshold value for limiting the m
+   easured winding temperature, where measured winding temp. is used as a replacement value for foll
+   owing: 
+1) Output PM temperature in State 1
+2) Initial PM temperature in State 2 */;
+   const float32 PmTempMaxVal /* Description: Maximum Threshold value for limiting the measured wind
+   ing temperature, where measured winding temp. is used as a replacement value for following: 
+1) Output PM temperature in State 1
+2) Initial PM temperature in State 2 */;
+   const float32 PmTempMinVal /* Description: Maximum Threshold value for limiting the measured wind
+   ing temperature, where measured winding temp. is used as a replacement value for following: 
+1) Output PM temperature in State 1
+2) Initial PM temperature in State 2 */;
+   const boolean UseSnsrValAsWindgEndTemp /* Description: Use Winding NTC sensor value as Winding-en
+   d node temperature of thermal network */;
+   const float32 FeLossSpdAct_LUTXaxis[16] /* Description: Mechanical rotor speed array which is use
+   d as x-axis breakpoints of LUT for calculation of rotor iron loss distribution factor */;
+   const float32 FeLossRotDistbnFac_LuTYaxis[16] /* Description: LUT values of rotor iron loss distr
+   ibution factor depending on rotor speed */;
+   const float32 CuResistSpdCoeff2 /* Description: The coefficient which is used to adapt AC copper 
+   resistance to actual rotor speed */;
+}; /* struct type created for variable: PmTempCalcnThermNet_CalibParam */
 /*----------------------------------------------------------------------------*\\
   ENUMS
 \\*----------------------------------------------------------------------------*/
@@ -256,14 +365,14 @@ Default: Calib param \'IniPmTempRplcVal\'
   VARIABLES
 \\*----------------------------------------------------------------------------*/
 
-#define PMTEMPCALCNTHERMNETVW_START_SEC_CALIB_32
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_32
 #include "MemMap.h"
 /******************************************************************************\\
    MemMap_CAL_NON_VOL_32: global calibratable parameters (ROM) | Width: N.A.
 \\******************************************************************************/
-extern MemMap_CAL_NON_VOL_32 struct tag_PMTempCalcnThermNetVw_CalibParam
-    PMTempCalcnThermNetVw_CalibParam /* Description: dummy structure */;
-#define PMTEMPCALCNTHERMNETVW_STOP_SEC_CALIB_32
+extern MemMap_CAL_NON_VOL_32 struct tag_PmTempCalcnThermNet_CalibParam
+    PmTempCalcnThermNet_CalibParam /* Description: dummy structure */;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32
 #include "MemMap.h"
 
 /*----------------------------------------------------------------------------*\\
@@ -273,7 +382,7 @@ extern MemMap_CAL_NON_VOL_32 struct tag_PMTempCalcnThermNetVw_CalibParam
   FUNCTION PROTOTYPES
 \\*----------------------------------------------------------------------------*/
 
-#endif/*PMTEMPCALCNTHERMNETVW_DATA_H */
+#endif/*PMTEMPCALCNTHERMNET_DATA_H */
 /*----------------------------------------------------------------------------*\\
   END OF FILE
 \\*----------------------------------------------------------------------------*/
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/include/PMTempCalcnThermNetVw_Inputs.h b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_Inputs.h
similarity index 83%
rename from src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/include/PMTempCalcnThermNetVw_Inputs.h
rename to src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_Inputs.h
index bfb7b554a..9e91105c2 100644
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/include/PMTempCalcnThermNetVw_Inputs.h
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_Inputs.h
@@ -1,11 +1,11 @@
 /**************************************************************************************************\\
  *** 
- *** Simulink model       : PMTempCalcnThermNetVw
- *** TargetLink subsystem : PMTempCalcnThermNetVw
- *** Codefile             : PMTempCalcnThermNetVw_Inputs.h
+ *** Simulink model       : PmTempCalcnThermNet
+ *** TargetLink subsystem : PmTempCalcnThermNet
+ *** Codefile             : PmTempCalcnThermNet_Inputs.h
  ***
  *** Generated by TargetLink, the dSPACE production quality code generator
- *** Generation date: 2021-09-22 08:05:00
+ *** Generation date: 2021-11-08 12:32:25
  ***
  *** CODE GENERATOR OPTIONS:
  *** Code generation mode                     : Standard
@@ -120,8 +120,8 @@
 /* PRQA S 4602,4603,4604,4605,4606,4607,4608,4620,4621,5087 EOF*/
 /* PRQA S 5131,5134,5136,5209 EOF*/
 /*----------------------------------------------------------------------------*/
-#ifndef PMTEMPCALCNTHERMNETVW_INPUTS_H
-#define PMTEMPCALCNTHERMNETVW_INPUTS_H
+#ifndef PMTEMPCALCNTHERMNET_INPUTS_H
+#define PMTEMPCALCNTHERMNET_INPUTS_H
 
 /*----------------------------------------------------------------------------*\\
   DEFINES (OPT)
@@ -129,7 +129,7 @@
 /*----------------------------------------------------------------------------*\\
   INCLUDES
 \\*----------------------------------------------------------------------------*/
-#include "tl_defines_PMTempCalcnThermNetVw.h"
+#include "tl_defines_PmTempCalcnThermNet.h"
 #include "Platform_Types.h"
 /*----------------------------------------------------------------------------*\\
   DEFINES
@@ -138,20 +138,26 @@
   TYPEDEFS
 \\*----------------------------------------------------------------------------*/
 
-struct tag_PMTempCalcnThermNetVw_InputData {
-   float32 NVM_PmTemp /* Description: PM temperature stored in Nvm during last operating cycle */;
-   float32 NVM_StatorTemp /* Description: Stator temperature stored in Nvm during last operating cyc
-   le */;
-   float32 NVM_AirgapTemp /* Description: Airgap temperature stored in Nvm during last operating cyc
-   le */;
-   float32 CAN_VehPrkgTi /* Description: Time during which the vehicle stays switched off */;
+struct tag_PmTempCalcnThermNet_InputData {
+   float32 TempWindgSnsr1 /* Description: Actual measured stator winding temperature by using windin
+   g temperature sensor (NTC 1 in stator winding) */;
+   float32 TempWindgSnsr2 /* Description: Actual measured stator winding temperature by using windin
+   g temperature sensor (NTC 2 in stator winding) */;
+   float32 TempWindgSnsr3 /* Description: Actual measured stator winding temperature by using windin
+   g temperature sensor (NTC 3 in stator winding) */;
+   float32 NVM_Temp1 /* Description: Temperature saved in NVM memory block 1 at the time of vehicle 
+   switch-off (during last operating cycle) */;
+   float32 NVM_Temp2 /* Description: Temperature saved in NVM memory block 2 at the time of vehicle 
+   switch-off (during last operating cycle) */;
+   float32 NVM_Temp3 /* Description: Temperature saved in NVM memory block 3 at the time of vehicle 
+   switch-off (during last operating cycle) */;
+   float32 CAN_VehPrkgTi /* Description: Time during which the vehicle stays switched off (wheel spe
+   ed is below certain threshold ~ 0 bis 3 kmph) */;
    float32 CAN_HvOffTi /* Description: Time during which the HV connection is switched off */;
    float32 EmCooltFlow /* Description: Estimated flowrate at Inverter coolant outlet  (served as inp
    ut to electric motor coolant inlet) */;
    float32 EmTempCooltInlet /* Description: Estimated temperature of Inverter coolant outlet (served
     as input to electric motor coolant inlet) */;
-   float32 TempWindgSnsr /* Description: Actual measured stator winding temperature by using winding
-    temperature sensor (NTC in stator winding) */;
    float32 SpdAct /* Description: Actual mechanical speed of electric motor */;
    float32 IdActFlt /* Description: Actual d current filtered */;
    float32 IqActFlt /* Description: Actual q current filtered */;
@@ -163,16 +169,20 @@ struct tag_PMTempCalcnThermNetVw_InputData {
    ftime Signal (1: Not Available; 0: Signal Available) */;
    boolean FID_IniNvm /* Description: Initialisation Bit which denotes availability of variables sto
    red in NVM (1: Not Available; 0: Signal Available) */;
-   boolean HwFlt_WindSnsr /* Description: Fault Bit which denotes if measured tempeture using windin
-   g sensor is a faulty signal (0: No Fault ; 1: Fault Signal ) */;
+   boolean HwFlt_WindSnsr3 /* Description: Fault Bit of measured stator tempeture using winding sens
+   or 3 (0: No Fault ; 1: Fault Signal ) */;
    boolean FID_ErrHvOff /* Description: Validity Bit which denotes validity of HV Offtime Signal (1:
     Not Valid 0: Signal Valid ) */;
    boolean FID_ErrPrkgTi /* Description: Validity Bit which denotes validity of Vehicle Offtime Sign
    al (1: Not Valid 0: Signal Valid ) */;
    boolean FID_ErrNvm /* Description: Validity Bit which denotes validity of variables stored NVM (1
    : Not Valid 0: Signal Valid ) */;
+   boolean HwFlt_WindSnsr1 /* Description: Fault Bit of measured stator tempeture using winding sens
+   or 1 (0: No Fault ; 1: Fault Signal ) */;
+   boolean HwFlt_WindSnsr2 /* Description: Fault Bit of measured stator tempeture using winding sens
+   or 2 (0: No Fault ; 1: Fault Signal ) */;
    float32 PwmFrqAct /* Description: Current PWM frequency of motor control */;
-}; /* struct type created for variable: PMTempCalcnThermNetVw_InputData */
+}; /* struct type created for variable: PmTempCalcnThermNet_InputData */
 /*----------------------------------------------------------------------------*\\
   ENUMS
 \\*----------------------------------------------------------------------------*/
@@ -180,14 +190,14 @@ struct tag_PMTempCalcnThermNetVw_InputData {
   VARIABLES
 \\*----------------------------------------------------------------------------*/
 
-#define PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32
+#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32
 #include "MemMap.h"
 /******************************************************************************\\
    MemMap_DISP_INIT_32: global observable variables (RAM) | Width: N.A.
 \\******************************************************************************/
-extern MemMap_DISP_INIT_32 struct tag_PMTempCalcnThermNetVw_InputData
-    PMTempCalcnThermNetVw_InputData /* Description: Input structure for PMTempCalcnThermNetVw */;
-#define PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32
+extern MemMap_DISP_INIT_32 struct tag_PmTempCalcnThermNet_InputData PmTempCalcnThermNet_InputData /*
+    Description: Input structure for PmTempCalcnThermNet */;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32
 #include "MemMap.h"
 
 /*----------------------------------------------------------------------------*\\
@@ -197,7 +207,7 @@ extern MemMap_DISP_INIT_32 struct tag_PMTempCalcnThermNetVw_InputData
   FUNCTION PROTOTYPES
 \\*----------------------------------------------------------------------------*/
 
-#endif/*PMTEMPCALCNTHERMNETVW_INPUTS_H */
+#endif/*PMTEMPCALCNTHERMNET_INPUTS_H */
 /*----------------------------------------------------------------------------*\\
   END OF FILE
 \\*----------------------------------------------------------------------------*/
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/include/PMTempCalcnThermNetVw_Outputs.h b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_Outputs.h
similarity index 83%
rename from src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/include/PMTempCalcnThermNetVw_Outputs.h
rename to src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_Outputs.h
index 82a6560e5..8926675c7 100644
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/include/PMTempCalcnThermNetVw_Outputs.h
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_Outputs.h
@@ -1,11 +1,11 @@
 /**************************************************************************************************\\
  *** 
- *** Simulink model       : PMTempCalcnThermNetVw
- *** TargetLink subsystem : PMTempCalcnThermNetVw
- *** Codefile             : PMTempCalcnThermNetVw_Outputs.h
+ *** Simulink model       : PmTempCalcnThermNet
+ *** TargetLink subsystem : PmTempCalcnThermNet
+ *** Codefile             : PmTempCalcnThermNet_Outputs.h
  ***
  *** Generated by TargetLink, the dSPACE production quality code generator
- *** Generation date: 2021-09-22 08:05:00
+ *** Generation date: 2021-11-08 12:32:25
  ***
  *** CODE GENERATOR OPTIONS:
  *** Code generation mode                     : Standard
@@ -120,8 +120,8 @@
 /* PRQA S 4602,4603,4604,4605,4606,4607,4608,4620,4621,5087 EOF*/
 /* PRQA S 5131,5134,5136,5209 EOF*/
 /*----------------------------------------------------------------------------*/
-#ifndef PMTEMPCALCNTHERMNETVW_OUTPUTS_H
-#define PMTEMPCALCNTHERMNETVW_OUTPUTS_H
+#ifndef PMTEMPCALCNTHERMNET_OUTPUTS_H
+#define PMTEMPCALCNTHERMNET_OUTPUTS_H
 
 /*----------------------------------------------------------------------------*\\
   DEFINES (OPT)
@@ -129,7 +129,7 @@
 /*----------------------------------------------------------------------------*\\
   INCLUDES
 \\*----------------------------------------------------------------------------*/
-#include "tl_defines_PMTempCalcnThermNetVw.h"
+#include "tl_defines_PmTempCalcnThermNet.h"
 #include "Platform_Types.h"
 /*----------------------------------------------------------------------------*\\
   DEFINES
@@ -138,22 +138,21 @@
   TYPEDEFS
 \\*----------------------------------------------------------------------------*/
 
-struct tag_PMTempCalcnThermNetVw_OutputData {
-   float32 PmTempThermNet /* Description: Depending upon the state of thermal network,this can be ei
-   ther 1) replacement value, winding temperature sensor value  or 3) estimated value of PM temperat
-   ure */;
-   uint32 PmTempThermNetStsWord /* Description: Status bit which corresponds to output availability 
-   and its validity */;
-   uint8 PmTempCalcnState /* Description: State 1: Use replacement value or winding temperature sens
-   or 
-State 2: Use the estimated value calculated via Thermal Network
-State 3: Use replacement value (winding sensor fault is active) */;
-   boolean RotTempFlt /* Description: Fault is active if Rotor temperature is incorrectly initialize
-   d or a winding sensor fault is active. (0: Disabled 1: Enabled ) */;
-   float32 AirGapTempCalcd /* Description: Estimated temperature of Air gap */;
-   float32 StatorTemp /* Description: Actual measured stator winding temperature by using sensor (NT
-   C in stator winding) */;
-}; /* struct type created for variable: PMTempCalcnThermNetVw_OutputData */
+struct tag_PmTempCalcnThermNet_OutputData {
+   float32 TempWindgSnsrAvgVal /* Description: Average value of stator winding temperature measured 
+   via NTC sensor (3 or 2 number of sensor) */;
+   float32 StatorWindgTemp /* Description: Stator winding temperature in degree celcius */;
+   float32 StatorWindgEndTemp /* Description: Stator winding end temperature in degree celcius */;
+   float32 PmTempEst /* Description: Estimated value of actual PM temperature received from either o
+   f the State (1,2 or 3). This can be either 1) replacement value or 2) estimated value of PM tempe
+   rature.  */;
+   boolean PmTempIniFlt /* Description: Fault is active if PM temperature is incorrectly initialized
+    or a winding sensor fault is active. (0: Disabled 1: Enabled ) */;
+   boolean PmTempThermNetVld /* Description: Thermal network calculated PM Temperature validity flag
+   . Calculated temperature is valid, if thermal network is in "operating" state 2, else not valid. 
+   (1: when State = 2 0: State =! 2 )
+ */;
+}; /* struct type created for variable: PmTempCalcnThermNet_OutputData */
 /*----------------------------------------------------------------------------*\\
   ENUMS
 \\*----------------------------------------------------------------------------*/
@@ -161,14 +160,14 @@ State 3: Use replacement value (winding sensor fault is active) */;
   VARIABLES
 \\*----------------------------------------------------------------------------*/
 
-#define PMTEMPCALCNTHERMNETVW_START_SEC_VAR_CLEARED_32
+#define PMTEMPCALCNTHERMNET_START_SEC_VAR_CLEARED_32
 #include "MemMap.h"
 /******************************************************************************\\
    MemMap_DISP_CLEARED_32: global observable variables (RAM) | Width: N.A.
 \\******************************************************************************/
-extern MemMap_DISP_CLEARED_32 struct tag_PMTempCalcnThermNetVw_OutputData
-    PMTempCalcnThermNetVw_OutputData /* Description: Output structure for PMTempCalcnThermNetVw */;
-#define PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_CLEARED_32
+extern MemMap_DISP_CLEARED_32 struct tag_PmTempCalcnThermNet_OutputData
+    PmTempCalcnThermNet_OutputData /* Description: Output structure for PmTempCalcnThermNet */;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_CLEARED_32
 #include "MemMap.h"
 
 /*----------------------------------------------------------------------------*\\
@@ -178,7 +177,7 @@ extern MemMap_DISP_CLEARED_32 struct tag_PMTempCalcnThermNetVw_OutputData
   FUNCTION PROTOTYPES
 \\*----------------------------------------------------------------------------*/
 
-#endif/*PMTEMPCALCNTHERMNETVW_OUTPUTS_H */
+#endif/*PMTEMPCALCNTHERMNET_OUTPUTS_H */
 /*----------------------------------------------------------------------------*\\
   END OF FILE
 \\*----------------------------------------------------------------------------*/
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/include/PmTempCalcnThermNetVw_Wrpr.h b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_Wrpr.h
similarity index 72%
rename from src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/include/PmTempCalcnThermNetVw_Wrpr.h
rename to src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_Wrpr.h
index 7190fc90b..1ce4ff84e 100644
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/include/PmTempCalcnThermNetVw_Wrpr.h
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_Wrpr.h
@@ -1,24 +1,24 @@
 /* ********************************************************************** */
-/* Sourcefile:      PmTempCalcnThermNetVw_Wrpr.h                          */
+/* Sourcefile:      PmTempCalcnThermNet_Wrpr.h                            */
 /*                                                                        */
 /* Project:         eCar project                                          */
 /*                  TriCore Aurix                                         */
 /*                                                                        */
-/* Department:      Valeo-Siemens eAutomotive GmbH                        */
+/* Department:      Valeo Siemens eAutomotive Germany GmbH                */
 /*                  VSeA R&D INV ASW DRCO                                 */
 /*                                                                        */
 /* First author:    <author name>                                         */
 /* Other authors:   -                                                     */
 /* ********************************************************************** */
-/* Copyright (C) Valeo-Siemens eAutomotive GmbH 2021                      */
+/* Copyright (C) Valeo Siemens eAutomotive Germany GmbH 2018              */
 /* All Rights Reserved. Confidential                                      */
 /* ********************************************************************** */
 
-#ifndef PMTEMPCALCNTHERMNETVW_WRPR_H_
-#define PMTEMPCALCNTHERMNETVW_WRPR_H_
+#ifndef PMTEMPCALCNTHERMNET_WRPR_H_
+#define PMTEMPCALCNTHERMNET_WRPR_H_
 
 /*!
- * \\addtogroup PmTempCalcnThermNetVw
+ * \\addtogroup PmTempCalcnThermNet
  * @{
  */
 
@@ -26,7 +26,7 @@
 #include "Compiler.h"
 
 /*================== [macros] ===============================================*/
-#ifdef PMTEMPCALCNTHERMNETVW_WRPR_
+#ifdef PMTEMPCALCNTHERMNET_WRPR_
 # define EXTERNAL_
 #else
 # define EXTERNAL_ extern
@@ -37,20 +37,21 @@
 /*================== [declaration of public data] ===========================*/
 
 /*================== [declaration of global functions] ======================*/
-#define PMTEMPCALCNTHERMNETVW_START_SEC_CODE
+#define PMTEMPCALCNTHERMNET_START_SEC_CODE
 #include "MemMap.h"
 
-EXTERNAL_ FUNC(void, PMTEMPCALCNTHERMNETVW_CODE) PmTempCalcnThermNetVw_Run(void);
-#define PMTEMPCALCNTHERMNETVW_STOP_SEC_CODE
+EXTERNAL_ FUNC(void, PMTEMPCALCNTHERMNET_CODE) PmTempCalcnThermNet_Run(void);
+
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CODE
 #include "MemMap.h"
 
 /*================== [closure] ==============================================*/
 /*! \\misra Warning No C2004:19.6 "Undefine EXTERNAL_ according to Coding Guideline." */
 #undef EXTERNAL_ /* PRQA S 0841 */
-/*! @} doxygen end of group definition                                       */
-#endif /* PMTEMPCALCNTHERMNETVW_WRPR_H_ */
-/* ************************************************************************* */
-/* Copyright (C) Valeo-Siemens eAutomotive GmbH 2021                         */
-/* All Rights Reserved. Confidential                                         */
-/* ************************************************************************* */
+/*! @} doxygen end of group definition */
+#endif /* PMTEMPCALCNTHERMNET_WRPR_H_ */
+/* ********************************************************************** */
+/* Copyright (C) Valeo Siemens eAutomotive Germany GmbH 2018              */
+/* All Rights Reserved. Confidential                                      */
+/* ********************************************************************** */
 /*==================[end of file]============================================*/
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_WrprData.h b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_WrprData.h
new file mode 100644
index 000000000..d845dffa6
--- /dev/null
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/PmTempCalcnThermNet_WrprData.h
@@ -0,0 +1,140 @@
+/* ********************************************************************** */
+/* Sourcefile:      PmTempCalcnThermNet_WrprData.h                        */
+/*                                                                        */
+/* Project:         eCar project                                          */
+/*                  TriCore Aurix                                         */
+/*                                                                        */
+/* Department:      Valeo Siemens eAutomotive Germany GmbH                */
+/*                  VSeA R&D INV ASW DRCO                                 */
+/*                                                                        */
+/* First author:    <author name>                                         */
+/* Other authors:   -                                                     */
+/* ********************************************************************** */
+/* Copyright (C) Valeo Siemens eAutomotive Germany GmbH 2018              */
+/* All Rights Reserved. Confidential                                      */
+/* ********************************************************************** */
+
+#ifndef PMTEMPCALCNTHERMNET_WRPRDATA_H_
+#define PMTEMPCALCNTHERMNET_WRPRDATA_H_
+
+/*!
+ * \\addtogroup PmTempCalcnThermNet
+ * @{
+ */
+
+/*================== [includes] =============================================*/
+#include "Std_Types.h"
+#include "Platform_Types.h"
+#include "Compiler.h"
+
+/*================== [macros] ===============================================*/
+#ifdef PMTEMPCALCNTHERMNET_WRPRDATA_
+# define EXTERNAL_
+#else
+# define EXTERNAL_ extern
+#endif
+
+/*================== [type definitions] =====================================*/
+
+/*================== [declaration of public data] ===========================*/
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_8 (online) */
+#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_8
+#include "MemMap.h"
+
+extern VAR(uint8, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetState;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_8
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_8 (online) */
+
+
+
+/* Begin: PWMSPMGR_START_SEC_VAR_CLEARED_32 (online) */
+#define PWMSPMGR_START_SEC_VAR_CLEARED_32
+#include "MemMap.h"
+
+extern VAR(float32, PWMSPMGR_VAR) PwmSpMgrPwmFrqSpFild10;
+#define PWMSPMGR_STOP_SEC_VAR_CLEARED_32
+#include "MemMap.h"
+/* End: PWMSPMGR_STOP_SEC_VAR_CLEARED_32 (online) */
+
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_32 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_32
+#include "MemMap.h"
+
+extern CONST(float32, PMTEMPCALCNTHERMNET_CALIB) PmTempCalcnThermNetPmTempRplcVal;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: IVTRTHERMMDL_START_SEC_VAR_INIT_32 (online) */
+#define IVTRTHERMMDL_START_SEC_VAR_INIT_32
+#include "MemMap.h"
+
+extern VAR(float32, IVTRTHERMMDL_VAR) IvtrThermMdlCooltFlowRateAct;
+#define IVTRTHERMMDL_STOP_SEC_VAR_INIT_32
+#include "MemMap.h"
+/* End: IVTRTHERMMDL_STOP_SEC_VAR_INIT_32 (online) */
+
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_32 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_32
+#include "MemMap.h"
+
+extern CONST(float32, PMTEMPCALCNTHERMNET_CALIB) PmTempCalcnThermNetWindgTempSnrAvgRplcVal;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_32 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_32
+#include "MemMap.h"
+
+extern CONST(float32, PMTEMPCALCNTHERMNET_CALIB) PmTempCalcnThermNetWindgTempCalcnRplcVal;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_8 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_8
+#include "MemMap.h"
+
+extern CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) PmTempCalcnThermNetUseRplcVal;
+extern CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) PmTempCalcnThermNetPmTempVldRplcVal;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8 (calib) */
+
+
+#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32
+#include "MemMap.h"
+
+EXTERNAL_ VAR (float32, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetPmTemp;
+EXTERNAL_ VAR (float32, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetWindgTempSnrAvg;   /*PRQA S 0777 */
+EXTERNAL_ VAR (float32, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetWindgTempCalcn;     /*PRQA S 0777 */
+
+EXTERNAL_ VAR (float32, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetWindgEndTempCalcn;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32
+#include "MemMap.h"
+
+#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_8
+#include "MemMap.h"
+
+EXTERNAL_ VAR (boolean, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetIniFlt;
+EXTERNAL_ VAR (boolean, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetPmTempVld;
+
+#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_8
+#include "MemMap.h"
+
+
+
+/*================== [closure] ==============================================*/
+/*! \\misra Warning No C2004:19.6 "Undefine EXTERNAL_ according to Coding Guideline." */
+#undef EXTERNAL_ /* PRQA S 0841 */
+/*! @} doxygen end of group definition */
+#endif /* PMTEMPCALCNTHERMNET_WRPRDATA_H_ */
+/* ********************************************************************** */
+/* Copyright (C) Valeo Siemens eAutomotive Germany GmbH 2018              */
+/* All Rights Reserved. Confidential                                      */
+/* ********************************************************************** */
+/*==================[end of file]============================================*/
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/include/tl_defines_PMTempCalcnThermNetVw.h b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/tl_defines_PMTempCalcnThermNet.h
similarity index 93%
rename from src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/include/tl_defines_PMTempCalcnThermNetVw.h
rename to src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/tl_defines_PMTempCalcnThermNet.h
index 20c92f65c..d5e6736fb 100644
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/include/tl_defines_PMTempCalcnThermNetVw.h
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/include/tl_defines_PMTempCalcnThermNet.h
@@ -1,10 +1,10 @@
 /**************************************************************************************************\\
  *** 
- *** Simulink model       : PMTempCalcnThermNetVw
- *** TargetLink subsystem : PMTempCalcnThermNetVw
- *** Codefile             : tl_defines_PMTempCalcnThermNetVw.h
+ *** Simulink model       : PmTempCalcnThermNet
+ *** TargetLink subsystem : PmTempCalcnThermNet
+ *** Codefile             : tl_defines_PmTempCalcnThermNet.h
  ***
- *** Generation date: 2021-09-22 08:05:00
+ *** Generation date: 2021-11-08 12:32:25
  ***
  *** TargetLink version      : 3.5p2 from 14-Aug-2014
  *** Code generator version  : Build Id 3.5.0.28 from 2014-08-20 16:45:15
@@ -79,8 +79,8 @@
 /* PRQA S 4602,4603,4604,4605,4606,4607,4608,4620,4621,5087 EOF*/
 /* PRQA S 5131,5134,5136,5209 EOF*/
 /*----------------------------------------------------------------------------*/
-#ifndef TL_DEFINES_PMTEMPCALCNTHERMNETVW_H
-#define TL_DEFINES_PMTEMPCALCNTHERMNETVW_H
+#ifndef TL_DEFINES_PMTEMPCALCNTHERMNET_H
+#define TL_DEFINES_PMTEMPCALCNTHERMNET_H
 
 /******************************************************************************\\
    TL_CG_MACROCL_GLOBAL: Default macro class for macros with module extent
@@ -90,7 +90,7 @@
 #define MemMap_DISP_INIT_32 
 
 
-#endif/*TL_DEFINES_PMTEMPCALCNTHERMNETVW_H */
+#endif/*TL_DEFINES_PMTEMPCALCNTHERMNET_H */
 /*----------------------------------------------------------------------------*\\
   END OF FILE
 \\*----------------------------------------------------------------------------*/
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/lib/PmTempCalcnThermNet.a b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/lib/PmTempCalcnThermNet.a
new file mode 100644
index 000000000..02f3d4173
Binary files /dev/null and b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/lib/PmTempCalcnThermNet.a differ
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/lib/PmTempCalcnThermNet.info b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/lib/PmTempCalcnThermNet.info
new file mode 100644
index 000000000..48ad8ca3d
--- /dev/null
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/lib/PmTempCalcnThermNet.info
@@ -0,0 +1,86 @@
+GIT information for D:/Git/100kw/ec_models/NextGen/codegeneration_models/PmTempCalcnThermNet
+Created: Mo,  8. Nov 2021 12:35:42
+
+*****
+COMMIT information:
+commit 896c5ad4c16b12e3b6197e775d2bb0b0e48b092c
+Author: Frank IRMISCH (JV EXT) <frank.irmisch.jv.ext@valeo.com>
+Date:   Mon Sep 20 11:58:43 2021 +0200
+
+    $100kW-41349$ - Quality update: Rebase latest modules from P310
+    
+    merged ec_models(_pub) branch release_vw_meb_a310
+    rebuild all models based on branch release_vw_meb_a310
+    
+    ec_models:
+       - EncCalcn
+       - ExtdTqLim
+       - filter_phi_TL
+       - FncGen
+       - HvAcIFndmtlCptAmpCalcn
+       - HvAcIMeas
+       - HvAcIMeasEolCal
+       - HvDcICalcn
+       - HvDcILimn
+       - HvDcULimn
+       - HvDcUMeas
+       - IPMCtrl2
+       - IpmPwrLossCalcn
+       - IvtrDcLinkThermMdl
+       - IvtrHvAcBusBarThermMdl
+       - IvtrThermMdlForHPDrive
+       - Mod3PhTL
+       - PhaFailSngDetn
+       - PmTempCalcnBackEmf
+       - PMTempCalcnThermNetVw
+       - PtLimnCalcn
+       - PwmSpCalcn
+       - PwmSpMgr
+       - ResApp
+       - RslvrOffsDetn
+       - SigColl
+       - SweepFnc
+       - TqPrednIpmPwrLoss
+       - TqPrednIpmSpCalcn
+       - TqPrednIvtrPwrLoss
+       - TqPrednTqLimCalcn
+    
+            DRCO_ENCCALCN_BASIS_V00606_100KW_V00001
+            DRCO_EXTDTQLIM_BASIS_V00000_100KW_V00001
+            DRCO_FILTERPHI_BASIS_V00503_OPTIMUS_100KW_V00002
+            DRCO_HVACIAMPCALCN_BASIS_V00421_100KW_V00001
+            DRCO_HVACIMEAS_BASIS_V00602_100KW_V00001
+            DRCO_HVACIMEASEOLCAL_BASIS_V00400_100KW_V00001
+            DRCO_HVDCICALCN_BASIS_V00214_100KW_V00001
+            DRCO_HVDCILIMN_BASIS_V00502_100KW_V00001
+            DRCO_HVDCULIMN_BASIS_V00400_100KW_V00001
+            DRCO_HVDCUMEAS_BASIS_V00504_100KW_V00001
+            DRCO_IPMCTRL2_BASIS_V02460_100KW_V00001
+            DRCO_IPMPWRLOSSCALCN_BASIS_V00010_100KW_00001
+            DRCO_IVTRDCLINKTHERMMDL_BASIS_V00240_100KW_V00001
+            DRCO_IVTRHVACBUSBARTHERMMDL_BASIS_V00240_100KW_V00001
+            DRCO_IVTRTHERMMDLFORHPDRIVE_BASIS_V00401_100KW_V00031
+            DRCO_MOD3PHTL_BASIS_V01010_100KW_V00001
+            DRCO_PHAFAILSNGDETN_BASIS_V01120_100KW_V00001
+            DRCO_PMTEMPBACKEMFCALC_BASIS_V00201_100KW_V00001
+            DRCO_PMTEMPCALCNTHERMNETVW_V00370_100KW_V00001
+            DRCO_PTLIMNCALCN_BASIS_V00320_100KW_V00001
+            DRCO_PWMSPCALCN_BASIS_V00200_100KW_V00001
+            DRCO_PWMSPMGR_BASIS_V00111_100KW_V00001
+            DRCO_RESAPP_BASIS_V00209_OPTIMUS_100KW_V00002
+            DRCO_RSLVROFFSDETN_BASIS_V00421_100KW_V00101
+            DRCO_SIGCOL_BASIS_V01200_100KW_V00001
+            DRCO_SWEEPFNC_BASIS_V00000_100KW_V00001
+            DRCO_TQPREDNIPMPWRLOSS_BASIS_V00100_100KW_V00001
+            DRCO_TQPREDNIPMSPCALCN_BASIS_V00100_100KW_V00001
+            DRCO_TQPREDNIVTRPWRLOSS_BASIS_V00020_100KW_V00001
+            DRCO_TQPREDNTQLIMCALCN_BASIS_V00200_100KW_V00001
+    
+    Change-Id: I17eadb38b3e267c5bf50a6174ed32c25098ebe33
+
+*****
+TAGs on commit:
+P2-100KW-MASTER-0194-20211104
+
+*****
+Changed files under version control but not committed:
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/make/makefile.mak b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/make/makefile.mak
new file mode 100644
index 000000000..5e366610f
--- /dev/null
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/make/makefile.mak
@@ -0,0 +1,96 @@
+#=======================================================================================
+#
+# Filename:     \tmakefile.mak
+# Model:        \tPmTempCalcnThermNet  at ec_models/nextgen/codegeneration_models
+# Developer:\t\tHrishi
+# Creation Date: \t07-Aug-2018
+#
+# Automatically created by ec_generateMakefile.m and adapted later for incomplete template (sic!)
+#
+# Description:  \tMake rules and definition for model generation. This file is
+#               \tincluded by \\ec\\src\\fw_cu\\build\\Makefile
+#
+# Version:              1.2 (12.07.2018)
+#========================================================================================
+PmTempCalcnThermNet_ROOT_DIR := $(dir $(abspath $(lastword $(dir $(abspath $(lastword $(MAKEFILE_LIST)))))))
+
+PmTempCalcnThermNet_BASE := $(MODEL_SOURCE_LOCATION)/PmTempCalcnThermNet
+PmTempCalcnThermNet_LOGFILE  := $(OUTPUT_DIR)/log/model_PmTempCalcnThermNet.log
+
+PmTempCalcnThermNet_PATH_OUT := $(PmTempCalcnThermNet_BASE)/TlProj/PmTempCalcnThermNet
+PmTempCalcnThermNet_PATH_USE := $(PmTempCalcnThermNet_BASE)/TlProj/use
+
+# (relative to PmTempCalcnThermNet_PATH_OUT)
+PmTempCalcnThermNet_FILES := PmTempCalcnThermNet.c PmTempCalcnThermNet_Data.c PmTempCalcnThermNet_Outputs.c PmTempCalcnThermNet_Inputs.c
+
+PmTempCalcnThermNet_COMMAND := $(PmTempCalcnThermNet_BASE)/PmTempCalcnThermNet_generate_code_CM.m
+
+# (relative to PmTempCalcnThermNet_PATH_OUT)
+PmTempCalcnThermNet_DISTURBING_FILES := tl_types.h Platform_Types.h Std_Types.h
+
+PmTempCalcnThermNet_DEPENDENCIES := $(PmTempCalcnThermNet_BASE)/PmTempCalcnThermNet.mdl $(PmTempCalcnThermNet_BASE)/PmTempCalcnThermNet.dd
+# *.m *.dd *.mdl
+PmTempCalcnThermNet_GENERATED_LIB = $(OUTPUT_DIR)/lib/PmTempCalcnThermNet.a
+PmTempCalcnThermNet_ARCHIVED_LIB = $(PmTempCalcnThermNet_ROOT_DIR)/lib/PmTempCalcnThermNet.a
+
+PmTempCalcnThermNet_SINGLE_ARCHIVED_LIB = $(PmTempCalcnThermNet_ARCHIVED_LIB)
+PmTempCalcnThermNet_SINGLE_ARCHIVE = $(PmTempCalcnThermNet_BASE)/archive/PmTempCalcnThermNet.a
+
+PmTempCalcnThermNet_GENERATED_A2L = $(PmTempCalcnThermNet_BASE)/TLProj/PmTempCalcnThermNet.a2l
+PmTempCalcnThermNet_ARCHIVED_A2L  = $(PmTempCalcnThermNet_ROOT_DIR)/a2l/PmTempCalcnThermNet.a2l
+
+MODEL_LIST += PmTempCalcnThermNet
+CC_FILES_TO_BUILD += $(PmTempCalcnThermNet_ROOT_DIR)src/PmTempCalcnThermNet_Wrpr.c
+CC_FILES_TO_BUILD += $(PmTempCalcnThermNet_ROOT_DIR)src/PmTempCalcnThermNet_WrprData.c
+
+# add the generation directory to generated files and disturbing files
+PmTempCalcnThermNet_FILES := $(foreach FILE, $(PmTempCalcnThermNet_FILES),$(PmTempCalcnThermNet_PATH_OUT)/$(FILE))
+PmTempCalcnThermNet_DISTURBING_FILES := $(foreach FILE, $(PmTempCalcnThermNet_DISTURBING_FILES),$(PmTempCalcnThermNet_PATH_USE)/$(FILE))
+PmTempCalcnThermNet_DONE := $(PmTempCalcnThermNet_BASE)/GenerationDone.txt
+
+$(PmTempCalcnThermNet_FILES): $(PmTempCalcnThermNet_DONE)
+
+$(PmTempCalcnThermNet_DONE): $(PmTempCalcnThermNet_DEPENDENCIES)
+\t@echo ----------------------------------------------------------
+\t@echo Generating PmTempCalcnThermNet C sources
+\t@echo ----------------------------------------------------------
+\t@echo SRCS=$(PmTempCalcnThermNet_FILES)
+\t@echo DEP=$(PmTempCalcnThermNet_DEPENDENCIES)
+\t@echo CMD=$(PmTempCalcnThermNet_COMMAND)
+\t@echo DIST=$(PmTempCalcnThermNet_DISTURBING_FILES)
+\t@echo DONE=$(PmTempCalcnThermNet_DONE)
+\t$(RM) -rf $(PmTempCalcnThermNet_PATH_USE)
+\tcmd /c "set MAKEFLAGS= & $(MATLAB) -wait -nosplash -nodesktop -logfile $(PmTempCalcnThermNet_LOGFILE) -r \\"run $(PmTempCalcnThermNet_COMMAND)\\""
+\t$(CP) -rf $(PmTempCalcnThermNet_PATH_OUT) $(PmTempCalcnThermNet_PATH_USE)
+\t$(RM) $(PmTempCalcnThermNet_DISTURBING_FILES)
+\t
+\t$(MKDIR) -p $(PmTempCalcnThermNet_ROOT_DIR)/include
+\t$(MKDIR) -p $(PmTempCalcnThermNet_ROOT_DIR)/a2l
+\t$(MKDIR) -p $(PmTempCalcnThermNet_ROOT_DIR)/lib
+\t
+\t$(RM) -f $(PmTempCalcnThermNet_ARCHIVED_A2L)
+\t$(CP) -fu $(PmTempCalcnThermNet_GENERATED_A2L) $(PmTempCalcnThermNet_ARCHIVED_A2L)
+\t
+\t$(RM) -f $(PmTempCalcnThermNet_BASE)/archive
+\t$(MKDIR) $(PmTempCalcnThermNet_BASE)/archive
+\t$(CP) -fu $(PmTempCalcnThermNet_GENERATED_A2L) $(PmTempCalcnThermNet_BASE)/archive
+\t$(MKDIR) $(PmTempCalcnThermNet_BASE)/archive/PmTempCalcnThermNet
+\tattrib /S -R $(PmTempCalcnThermNet_PATH_USE)\\\\*.*
+\t@echo copiedto=$(PmTempCalcnThermNet_PATH_USE)
+\t$(CP) -r $(PmTempCalcnThermNet_PATH_USE)/. $(PmTempCalcnThermNet_BASE)/archive/PmTempCalcnThermNet
+\t$(CP) -r $(PmTempCalcnThermNet_PATH_USE)/*.h $(PmTempCalcnThermNet_ROOT_DIR)/include
+\t@echo $(shell date /t & time /t) > $(PmTempCalcnThermNet_DONE)
+
+
+ifdef BUILD_PmTempCalcnThermNet
+# use the generated model lib
+A2L_SLAVE_PmTempCalcnThermNet = $(PmTempCalcnThermNet_GENERATED_A2L)
+CC_INCLUDE_PATH += $(PmTempCalcnThermNet_PATH_USE)
+MODEL_DONE_FILES_REALLY_GENERATED += $(PmTempCalcnThermNet_DONE)
+LIBRARIES_TO_BUILD += PmTempCalcnThermNet
+else
+# link instead of the generated model lib the archived one
+CC_INCLUDE_PATH += $(PmTempCalcnThermNet_ROOT_DIR)include
+A2L_SLAVE_PmTempCalcnThermNet := $(PmTempCalcnThermNet_ARCHIVED_A2L)
+EXTERNAL_LIBS += $(PmTempCalcnThermNet_ARCHIVED_LIB)
+endif
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/src/PmTempCalcnThermNet_Wrpr.c b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/src/PmTempCalcnThermNet_Wrpr.c
new file mode 100644
index 000000000..38475119c
--- /dev/null
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/src/PmTempCalcnThermNet_Wrpr.c
@@ -0,0 +1,152 @@
+/* ********************************************************************** */
+/* Sourcefile:      PmTempCalcnThermNet_Wrpr.c                            */
+/*                                                                        */
+/* Project:         eCar project                                          */
+/*                  TriCore Aurix                                         */
+/*                                                                        */
+/* Department:      Valeo Siemens eAutomotive Germany GmbH                */
+/*                  VSeA R&D INV ASW DRCO                                 */
+/*                                                                        */
+/* First author:    Juri Benke                                            */
+/* Other authors:   -                                                     */
+/* ********************************************************************** */
+/* Copyright (C) Valeo Siemens eAutomotive Germany GmbH 2019              */
+/* All Rights Reserved. Confidential                                      */
+/* ********************************************************************** */
+
+/*!
+ * \\defgroup PmTempCalcnThermNet - Estimate actual PM temperature
+ * \\ingroup ValMeasAndProc
+ * @{
+ */
+
+#define PMTEMPCALCNTHERMNET_WRPR_
+
+/*================== [includes] =============================================*/
+#include "Std_Types.h"
+#include "Platform_Types.h"
+#include "AddGlobalDefines.h"
+#include "PmTempCalcnThermNet_Wrpr.h"
+#include "PmTempCalcnThermNet_WrprData.h"
+
+#include "PmTempCalcnThermNet.h"
+#include "PmTempCalcnThermNet_Inputs.h"
+#include "PmTempCalcnThermNet_Outputs.h"
+
+/* !\\misraWarningNo2012: Rule 1.1(DIR) " [L] Number of macro definitions exceeds 4095 - program does not conform strictly to ISO:C99."*/
+/*"Justification: Because of the platfrom approach is nescesary to be have the macros to compile the different SWs"*/
+#include "C2cComBswData.h" /*PRQA S 0380*/
+#include "C2cComSftyData.h" /*PRQA S 0380*/
+#include "DrvCtrlErrDeb.h"  /*PRQA S 0380*/
+
+#include "IvtrThermMdl_data.h"
+#include "RotorAgSpdCalcn_data.h"
+#include "IpmCtrl_data.h"
+#include "Mod3Pha_data.h"
+#include "BswErrDeb.h"
+
+/*================== [defines] ==============================================*/
+
+/*================== [type definitions] =====================================*/
+
+/*================== [local data] ===========================================*/
+
+/*================== [prototype of local functions] =========================*/
+
+/*================== [definition of local functions] ========================*/
+
+/*================== [definition of global functions] =======================*/
+#define PMTEMPCALCNTHERMNET_START_SEC_CODE
+#include "MemMap.h"
+
+/******************************************************************/
+/*!
+ * \\fn      void PmTempCalcnThermNet_Run(void)
+ * \\brief   main run function of the estimation of the actual PM temperature
+ */
+/******************************************************************/
+FUNC(void, PMTEMPCALCNTHERMNET_CODE) PmTempCalcnThermNet_Run(void)
+{
+
+   /* read the Nvm value during Init  */
+   PmTempCalcnThermNet_InputData.NVM_Temp1 = BswC2cData.InvTempNvm.EmTemp1;
+   PmTempCalcnThermNet_InputData.NVM_Temp2 = BswC2cData.InvTempNvm.EmTemp2;
+   PmTempCalcnThermNet_InputData.NVM_Temp3 = BswC2cData.InvTempNvm.EmTemp2;
+
+   /* Actual measured winding temperature using winding temperature sensor */
+   /* Keep same value for all three sensors in PMA */
+   PmTempCalcnThermNet_InputData.TempWindgSnsr1    = SftyC2cData.MotStatorTVal;
+   PmTempCalcnThermNet_InputData.TempWindgSnsr2    = SftyC2cData.MotStatorTVal;
+   PmTempCalcnThermNet_InputData.TempWindgSnsr3    = SftyC2cData.MotStatorTVal;
+
+   /* read inputs */
+   PmTempCalcnThermNet_InputData.CAN_VehPrkgTi     = BswC2cData.VehPrkgTi; /* Time during which the vehicle stays switched off */
+   PmTempCalcnThermNet_InputData.CAN_HvOffTi       = BswC2cData.HvOffTi; /* Time during which the HV connection is switched off */
+   PmTempCalcnThermNet_InputData.EmCooltFlow       = IvtrThermMdlCooltFlowRateAct; /* Estimated flowrate at Inverter coolant outlet */
+   PmTempCalcnThermNet_InputData.EmTempCooltInlet  = IvtrThermMdlCooltOutlTemp; /*  Estimated temperature of Inverter coolant outlet */
+   PmTempCalcnThermNet_InputData.SpdAct            = RotorAgSpdCalcnSpdMeclFild2 * SYSCON_RAD_TO_RPM; /*  Actual mechanical speed of PM synchronous motor */
+   PmTempCalcnThermNet_InputData.IdActFlt          = TqCtrlIdActFild; /*  Actual d current filtered */
+   PmTempCalcnThermNet_InputData.IqActFlt          = TqCtrlIqActFild; /*  Actual q current filtered */
+   PmTempCalcnThermNet_InputData.ModlnModAct       = Mod3PhaModlnModAct; /*  Modulation type */
+
+   /* comments code for new FM v1.1.0*/
+    #if FTR_SNG_PWM_INTRPT == 0
+      /* FID Fault inhibition status for different inputs */
+      PmTempCalcnThermNet_InputData.FID_IniHvOff      = DrvCtrlErrDebFctInhbnSts.B.FctIdHvOffTiIni; /* Initialisation Bit which denotes availability of HV Offtime Signal (0: Not Available; 1: Signal Available) */
+      PmTempCalcnThermNet_InputData.FID_IniPrkgTi     = DrvCtrlErrDebFctInhbnSts.B.FctIdVehPrkgTiIni; /* Initialisation Bit which denotes availability of Vehicle Offtime Signal (0: Not Available; 1: Signal Available) */
+      PmTempCalcnThermNet_InputData.FID_IniNvm        = FALSE; /* No validity flag available */
+      PmTempCalcnThermNet_InputData.FID_ErrHvOff      = DrvCtrlErrDebFctInhbnSts.B.FctIdHvOffTiInvld;
+      PmTempCalcnThermNet_InputData.FID_ErrPrkgTi     = DrvCtrlErrDebFctInhbnSts.B.FctIdVehPrkgTiInvld;
+   #else
+      PmTempCalcnThermNet_InputData.FID_IniHvOff = FALSE;
+      PmTempCalcnThermNet_InputData.FID_IniPrkgTi = FALSE;
+      PmTempCalcnThermNet_InputData.FID_IniNvm    = FALSE; /* No validity flag available */
+      PmTempCalcnThermNet_InputData.FID_ErrHvOff = FALSE;
+      PmTempCalcnThermNet_InputData.FID_ErrPrkgTi = FALSE;
+   #endif
+
+   PmTempCalcnThermNet_InputData.FID_ErrNvm        = (BswC2cData.InvTempNvm.EmTempVld == FALSE); /* Validity Bit which denotes validity of variables stored NVM (0: Not Valid 1: Signal Valid ) */ /*PRQA S 4404*/
+   PmTempCalcnThermNet_InputData.HwFlt_WindSnsr1   = BswErrDebFctInhbnSts.B.FctIdFltGrp2;
+   PmTempCalcnThermNet_InputData.HwFlt_WindSnsr2   = TRUE; /* No validity flag available */
+   PmTempCalcnThermNet_InputData.HwFlt_WindSnsr3   = TRUE; /* No validity flag available */
+   /* Actual PWM frquency filtered for 10 ms */
+   PmTempCalcnThermNet_InputData.PwmFrqAct\t\t   = PwmSpMgrPwmFrqSpFild10;
+
+   /* call the model */
+   PmTempCalcnThermNet();
+
+   /* copy output to interface */
+   PmTempCalcnThermNetWindgEndTempCalcn   = PmTempCalcnThermNet_OutputData.StatorWindgEndTemp;  /* Calculated stator winding end temperature in degree celcius */
+   PmTempCalcnThermNetIniFlt              = PmTempCalcnThermNet_OutputData.PmTempIniFlt;        /* Fault is active if PM temperature is incorrectly initialized or a winding sensor fault is active */
+   PmTempCalcnThermNetState               = PmTempCalcnThermNet_MeasSig.PmTempCalcnState; /* Current state of the PmTempCalcnStateChart */
+
+   /* check for replacement values usage */
+   if (FALSE == PmTempCalcnThermNetUseRplcVal)
+   {
+      PmTempCalcnThermNetPmTemp           = PmTempCalcnThermNet_OutputData.PmTempEst; /* Estimated value of actual PM temperature */
+      PmTempCalcnThermNetWindgTempSnrAvg  = PmTempCalcnThermNet_OutputData.TempWindgSnsrAvgVal; /*Average value of stator winding temperature measured via NTC sensor (3 or 2 number of sensor) */
+      PmTempCalcnThermNetWindgTempCalcn   = PmTempCalcnThermNet_OutputData.StatorWindgTemp; /*Calculated sator winding end temperature in degree celcius */
+      PmTempCalcnThermNetPmTempVld        = PmTempCalcnThermNet_OutputData.PmTempThermNetVld /* Fault is active if thermal network is not operating is state 2. (0: when State =2 1: State =! 2 ) */;
+   }
+   else
+   {
+      /* use replacement values for debug */
+      PmTempCalcnThermNetPmTemp              = PmTempCalcnThermNetPmTempRplcVal;
+      PmTempCalcnThermNetWindgTempSnrAvg     = PmTempCalcnThermNetWindgTempSnrAvgRplcVal;
+      PmTempCalcnThermNetWindgTempCalcn      = PmTempCalcnThermNetWindgTempCalcnRplcVal;
+      PmTempCalcnThermNetPmTempVld           = PmTempCalcnThermNetPmTempVldRplcVal;
+   }
+   return;
+}
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CODE
+#include "MemMap.h"
+
+/*================== [closure] ==============================================*/
+/*! \\misra Warning No C2004:19.6 "Using \'#undef\' for master c-file"          */
+#undef PMTEMPCALCNTHERMNET_WRPR_ /* PRQA S 0841 */
+/*! @} doxygen end of group definition                                       */
+/* ************************************************************************* */
+/* Copyright (C) Valeo Siemens eAutomotive Germany GmbH 2019                 */
+/* All Rights Reserved. Confidential                                         */
+/* ************************************************************************* */
+/*==================[end of file]============================================*/
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/src/PmTempCalcnThermNet_WrprData.c b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/src/PmTempCalcnThermNet_WrprData.c
new file mode 100644
index 000000000..3e1297fca
--- /dev/null
+++ b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNet/src/PmTempCalcnThermNet_WrprData.c
@@ -0,0 +1,190 @@
+/* ********************************************************************** */
+/* Sourcefile:      PmTempCalcnThermNet_WrprData.c                        */
+/*                                                                        */
+/* Project:         eCar project                                          */
+/*                  TriCore Aurix                                         */
+/*                                                                        */
+/* Department:      Valeo Siemens eAutomotive Germany GmbH                */
+/*                  VSeA R&D INV ASW DRCO                                 */
+/*                                                                        */
+/* First author:    <author name>                                         */
+/* Other authors:   -                                                     */
+/* ********************************************************************** */
+/* Copyright (C) Valeo Siemens eAutomotive Germany GmbH 2018              */
+/* All Rights Reserved. Confidential                                      */
+/* ********************************************************************** */
+
+/*!
+ * \\addtogroup PmTempCalcnThermNet
+ * @{
+ */
+
+#define PMTEMPCALCNTHERMNET_WRPRDATA_
+
+/*================== [includes] =============================================*/
+#include "PmTempCalcnThermNet_WrprData.h"
+
+/*================== [defines] ==============================================*/
+
+/*================== [type definitions] =====================================*/
+
+/*================== [global data] ===========================================*/
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_8 (online) */
+#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = PmTempCalcnThermNetState
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = "Current state of the PmTempCalcnStateChart"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
+extern VAR(uint8, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetState = 0U;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_8
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_8 (online) */
+
+
+#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_32
+#include "MemMap.h"
+/*
+@@ SYMBOL = PmTempCalcnThermNetPmTemp
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Estimated value of actual PM temperature"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
+VAR (float32, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetPmTemp = 0.f;
+
+/*
+@@ SYMBOL = PmTempCalcnThermNetWindgTempSnrAvg
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Average value of measure stator winding temperature"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
+VAR (float32, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetWindgTempSnrAvg = 0.f;
+
+/*
+@@ SYMBOL = PmTempCalcnThermNetWindgTempCalcn
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Calculated stator winding temperature"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
+VAR (float32, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetWindgTempCalcn = 0.f;
+
+/*
+@@ SYMBOL = PmTempCalcnThermNetWindgEndTempCalcn
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Calculated stator winding end temperature"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
+VAR (float32, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetWindgEndTempCalcn = 0.f;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_32
+#include "MemMap.h"
+
+#define PMTEMPCALCNTHERMNET_START_SEC_VAR_INIT_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = PmTempCalcnThermNetIniFlt
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = "PM temperature is incorrectly initialized or a winding sensor fault"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
+VAR (boolean, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetIniFlt = 0U;
+
+/*
+@@ SYMBOL = PmTempCalcnThermNetPmTempVld
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = "Thermal netwok fault"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
+VAR (boolean, PMTEMPCALCNTHERMNET_VAR) PmTempCalcnThermNetPmTempVld = 0U;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_VAR_INIT_8
+#include "MemMap.h"
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_32 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_32
+#include "MemMap.h"
+/*
+@@ SYMBOL = PmTempCalcnThermNetPmTempRplcVal
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Replacement value for PM Temperature Value"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
+/*! \\cpar replacement temperature value for the PM temperatures.; unit \'\\260C\' */
+CONST(float32, PMTEMPCALCNTHERMNET_CALIB) PmTempCalcnThermNetPmTempRplcVal = 0.f;
+
+/*
+@@ SYMBOL = PmTempCalcnThermNetWindgTempSnrAvgRplcVal
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Replacement value for Winding temperature sensor average value"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
+CONST(float32, PMTEMPCALCNTHERMNET_CALIB) PmTempCalcnThermNetWindgTempSnrAvgRplcVal = 0.f;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_32 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_32
+#include "MemMap.h"
+/*
+@@ SYMBOL = PmTempCalcnThermNetWindgTempCalcnRplcVal
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Replacement value for Winding temperature estimated value"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
+CONST(float32, PMTEMPCALCNTHERMNET_CALIB) PmTempCalcnThermNetWindgTempCalcnRplcVal = 0.f;
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: PMTEMPCALCNTHERMNET_START_SEC_CALIB_8 (calib) */
+#define PMTEMPCALCNTHERMNET_START_SEC_CALIB_8
+#include "MemMap.h"
+
+/*! \\cpar activation of the replacement temperature values.; unit \'-\' */
+CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) PmTempCalcnThermNetUseRplcVal = 0U;
+/*TODO: need to be imported into ADD and a2l definition need to be done there*/
+/*
+@@ SYMBOL = PmTempCalcnThermNetPmTempVldRplcVal
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE [0 ... 1]
+@@ CONVERSION = TABLE 0 "FALSE" 1 "TRUE"
+@@ DESCRIPTION = "Replacement value for PmTempCalcnThermNetPmTempVld output if PmTempCalcnThermNetUseRplcVal is TRUE"
+@@ GROUP = PmTempCalcnThermNet
+@@ END
+*/
+CONST(boolean, PMTEMPCALCNTHERMNET_CALIB) PmTempCalcnThermNetPmTempVldRplcVal = 0U;
+
+#define PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: PMTEMPCALCNTHERMNET_STOP_SEC_CALIB_8 (calib) */
+
+/*================== [closure] ==============================================*/
+/*! \\misra Warning No C2004:19.6 "Using \'#undef\' for master c-file"          */
+#undef PMTEMPCALCNTHERMNET_WRPRDATA_ /* PRQA S 0841 */
+/*! @} doxygen end of group definition */
+/* ********************************************************************** */
+/* Copyright (C) Valeo Siemens eAutomotive Germany GmbH 2018              */
+/* All Rights Reserved. Confidential                                      */
+/* ********************************************************************** */
+/*==================[end of file]============================================*/
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/a2l/PMTempCalcnThermNetVw.a2l b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/a2l/PMTempCalcnThermNetVw.a2l
deleted file mode 100644
index eea282559..000000000
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/a2l/PMTempCalcnThermNetVw.a2l
+++ /dev/null
@@ -1,2108 +0,0 @@
-\xef\xbb\xbf
-
-/begin PROJECT
-    PMTempCalcnThermNetVw\t/* Name */
-    ""\t/* LongIdentifier */
-    /begin HEADER
-        "General project description"\t/* Comment */
-        VERSION "2021-09-22 08:05:11"
-        PROJECT_NO PRJ1
-    /end HEADER
-
-    /begin MODULE
-        PMTempCalcnThermNetVw\t/* Name */
-        ""\t/* LongIdentifier */
-
-        /begin A2ML
-            block "IF_DATA" taggedunion if_data {
-            };
-        /end A2ML
-
-        /begin MOD_PAR
-            ""\t/* Comment */
-            NO_OF_INTERFACES 0
-        /end MOD_PAR 
-
-        /begin MOD_COMMON
-            ""
-            ALIGNMENT_BYTE 1
-            ALIGNMENT_WORD 2
-            ALIGNMENT_LONG 2
-            ALIGNMENT_FLOAT32_IEEE 2
-            ALIGNMENT_FLOAT64_IEEE 4
-            BYTE_ORDER MSB_LAST
-            DEPOSIT ABSOLUTE
-        /end MOD_COMMON 
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.AirGapTempFac_LuTYaxis\t/* Name */
-            "Factor to calculate Air gap temperature (dependency can be made on coolant flow rate if required)"\t/* LongIdentifier */
-            CURVE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING__\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-            /begin AXIS_DESCR
-                COM_AXIS\t/* Attribute */
-                PMTempCalcnThermNetVw_InputData.EmCooltFlow\t/* InputQuantity */
-                PMTempCalcnThermNetVw_VOID_SCALING_l_p_min\t/* Conversion */
-                8\t/* MaxAxisPoints */
-                0\t/* LowerLimit */
-                10\t/* UpperLimit */
-                BYTE_ORDER MSB_LAST
-                AXIS_PTS_REF PMTempCalcnThermNetVw_CalibParam.CoolFlowRate_LuTXaxis
-            /end AXIS_DESCR
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.CapcRot\t/* Name */
-            "Thermal capacitance of Rotor-PM"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_W_s_p_K\t/* Conversion */
-            0\t/* LowerLimit */
-            100000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.ClckCntMax\t/* Name */
-            "Maximum counter size after which the internal clock resets to Zero"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            ULONG_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_s_b\t/* Conversion */
-            0\t/* LowerLimit */
-            1000000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.ClckCntStep\t/* Name */
-            "Step size which represents the incremental counter of internal clock"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            ULONG_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_s_b\t/* Conversion */
-            0\t/* LowerLimit */
-            1000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.CompareTimeConstFacAmb\t/* Name */
-            "Constant Factor to decide which temperature shall be used as ambient temperature for initial value calc. Algorithm."\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_s\t/* Conversion */
-            0\t/* LowerLimit */
-            1000000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.CompareTimeConstFacRot\t/* Name */
-            "Constant Factor to decide if initial value calc. algorithm shall be triggered."\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_s\t/* Conversion */
-            0\t/* LowerLimit */
-            1000000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.DiIntClkCntr\t/* Name */
-            "Disable Bit to deactivate the  internal clock which is used to calculate time duration after RotTempFlt occurs (1: Disabled 0: Enabled )"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.DiSelAmbTemp\t/* Name */
-            "Disable Bit to deactivate the selection of ambient temperature (stator winding or airgap) used for initial value calc. (1: Disabled 0: Enabled )"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.DiSimnPmTemp\t/* Name */
-            "Disable Simulation Mode (Test Purpose Only) of Thermal Network via Calibration parameter (1: Disabled 0: Enabled )"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.DiThermNetCalcn\t/* Name */
-            "Deactivate PM temperature calculation. Thermal Network will switch to replacement value \'State1\'."\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.DiThermNetCalcn_UseTempWindgSnsr\t/* Name */
-            "Bit to select the replacement value for PM temperature. 
-(1: Winding sensor temperature; 0: Calibratable value  \'PmTempRplcVal\' )"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.efuncFac_LuTYaxis\t/* Name */
-            "Factor to calculate the initial rotor temperature using system off time and ambient temperature (stator winding or airgap)"\t/* LongIdentifier */
-            CURVE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING__\t/* Conversion */
-            -10000\t/* LowerLimit */
-            10000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-            /begin AXIS_DESCR
-                COM_AXIS\t/* Attribute */
-                PMTempCalcnThermNetVw_MeasSig.OffTime\t/* InputQuantity */
-                PMTempCalcnThermNetVw_VOID_SCALING_s\t/* Conversion */
-                8\t/* MaxAxisPoints */
-                0\t/* LowerLimit */
-                100000\t/* UpperLimit */
-                BYTE_ORDER MSB_LAST
-                AXIS_PTS_REF PMTempCalcnThermNetVw_CalibParam.TimeKeyOff_LuTXaxis
-            /end AXIS_DESCR
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.EnaHvOffTime\t/* Name */
-            "Enable Bit to select the use HV Off time or Vehicle Off time in exponential function initial value calc. Algorithm (0: Disabled 1: Enabled )"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.Fac_PlossIacN_LuTYaxis\t/* Name */
-            "Current losses generated in rotor due to rotor speed"\t/* LongIdentifier */
-            CURVE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING__\t/* Conversion */
-            0\t/* LowerLimit */
-            10\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-            /begin AXIS_DESCR
-                COM_AXIS\t/* Attribute */
-                NO_INPUT_QUANTITY\t/* InputQuantity */
-                PMTempCalcnThermNetVw_VOID_SCALING_rpm\t/* Conversion */
-                8\t/* MaxAxisPoints */
-                -18000\t/* LowerLimit */
-                18000\t/* UpperLimit */
-                BYTE_ORDER MSB_LAST
-                AXIS_PTS_REF PMTempCalcnThermNetVw_CalibParam.SpdActNac_LuTXaxis
-            /end AXIS_DESCR
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.FuncTiSlc\t/* Name */
-            "time slice in which the function PmTempCalcnThermNetVw is called"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_s\t/* Conversion */
-            0\t/* LowerLimit */
-            20\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.IdIvsStep\t/* Name */
-            "Inverse of equidistant steps between two Id current vector elements"\t/* LongIdentifier */
-            VAL_BLK\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_1_p_A\t/* Conversion */
-            0.0005\t/* LowerLimit */
-            1\t/* UpperLimit */
-            MATRIX_DIM 1
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.IdMaxIdx\t/* Name */
-            "Maximal index of Id current vector (dimension-1)"\t/* LongIdentifier */
-            VAL_BLK\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING___c\t/* Conversion */
-            1\t/* LowerLimit */
-            255\t/* UpperLimit */
-            MATRIX_DIM 1
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.IdMin\t/* Name */
-            "Minimal value of Id (direct axis) current for all LuTs"\t/* LongIdentifier */
-            VAL_BLK\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_A\t/* Conversion */
-            -1000\t/* LowerLimit */
-            1000\t/* UpperLimit */
-            MATRIX_DIM 1
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.IniPmTempRplcVal\t/* Name */
-            "calibratable value for initial PM temperature"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            -80\t/* LowerLimit */
-            300\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.IniValCalcnMod\t/* Name */
-            "Mode to select Initial value for PM temperature. 
-Default: Calib param \'IniPmTempRplcVal\'
-1: Measured winding temperature  \'TempWindgSnsr_PmTempLimn\'
-2: Initial value calculated via \'IniPMTemp\' algorithm 
-3: Calib param \'IniPmTempRplcVal\'"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING___c\t/* Conversion */
-            0\t/* LowerLimit */
-            4\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.IntgTiSampleRot\t/* Name */
-            "Integrator time constant "\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_s\t/* Conversion */
-            0\t/* LowerLimit */
-            1000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.IqIvsStep\t/* Name */
-            "Inverse of equidistant steps between two Iq current vector elements"\t/* LongIdentifier */
-            VAL_BLK\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_1_p_A\t/* Conversion */
-            0.0005\t/* LowerLimit */
-            1\t/* UpperLimit */
-            MATRIX_DIM 1
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.IqMaxIdx\t/* Name */
-            "Maximal index of Iq current vector (dimension-1)"\t/* LongIdentifier */
-            VAL_BLK\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING___c\t/* Conversion */
-            1\t/* LowerLimit */
-            255\t/* UpperLimit */
-            MATRIX_DIM 1
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.IqMin\t/* Name */
-            "Minimal value of Iq (direct axis) current for all LuTs"\t/* LongIdentifier */
-            VAL_BLK\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_A\t/* Conversion */
-            -1000\t/* LowerLimit */
-            1000\t/* UpperLimit */
-            MATRIX_DIM 1
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.PlossFric_LuTYaxis\t/* Name */
-            "Losses generated in rotor due to Friction"\t/* LongIdentifier */
-            CURVE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_W\t/* Conversion */
-            0\t/* LowerLimit */
-            3000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-            /begin AXIS_DESCR
-                COM_AXIS\t/* Attribute */
-                NO_INPUT_QUANTITY\t/* InputQuantity */
-                PMTempCalcnThermNetVw_VOID_SCALING_rpm\t/* Conversion */
-                8\t/* MaxAxisPoints */
-                -18000\t/* LowerLimit */
-                18000\t/* UpperLimit */
-                BYTE_ORDER MSB_LAST
-                AXIS_PTS_REF PMTempCalcnThermNetVw_CalibParam.SpdActFric_LuTXaxis
-            /end AXIS_DESCR
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.PlossIdFlatTop_map\t/* Name */
-            "Losses generated in rotor due to d Current when Flat top modulation is active (Frq dependent)"\t/* LongIdentifier */
-            MAP\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_W\t/* Conversion */
-            0\t/* LowerLimit */
-            3000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-            /begin AXIS_DESCR
-                FIX_AXIS\t/* Attribute */
-                NO_INPUT_QUANTITY\t/* InputQuantity */
-                EQ_LSB_1_OFF_0\t/* Conversion */
-                16\t/* MaxAxisPoints */
-                0\t/* LowerLimit */
-                16\t/* UpperLimit */
-                FIX_AXIS_PAR_DIST 0 1 16
-            /end AXIS_DESCR
-            /begin AXIS_DESCR
-                FIX_AXIS\t/* Attribute */
-                NO_INPUT_QUANTITY\t/* InputQuantity */
-                EQ_LSB_1_OFF_0\t/* Conversion */
-                4\t/* MaxAxisPoints */
-                0\t/* LowerLimit */
-                4\t/* UpperLimit */
-                FIX_AXIS_PAR_DIST 0 1 4
-            /end AXIS_DESCR
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.PlossIdSpcVec_map\t/* Name */
-            "Losses generated in rotor due to d Current when space vector modulation is active (Frq dependent)"\t/* LongIdentifier */
-            MAP\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_W\t/* Conversion */
-            0\t/* LowerLimit */
-            3000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-            /begin AXIS_DESCR
-                FIX_AXIS\t/* Attribute */
-                NO_INPUT_QUANTITY\t/* InputQuantity */
-                EQ_LSB_1_OFF_0\t/* Conversion */
-                16\t/* MaxAxisPoints */
-                0\t/* LowerLimit */
-                16\t/* UpperLimit */
-                FIX_AXIS_PAR_DIST 0 1 16
-            /end AXIS_DESCR
-            /begin AXIS_DESCR
-                FIX_AXIS\t/* Attribute */
-                NO_INPUT_QUANTITY\t/* InputQuantity */
-                EQ_LSB_1_OFF_0\t/* Conversion */
-                4\t/* MaxAxisPoints */
-                0\t/* LowerLimit */
-                4\t/* UpperLimit */
-                FIX_AXIS_PAR_DIST 0 1 4
-            /end AXIS_DESCR
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.PlossIqFlatTop_map\t/* Name */
-            "Losses generated in rotor due to q Current when Flat top modulation is active (Frq dependent)"\t/* LongIdentifier */
-            MAP\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_W\t/* Conversion */
-            0\t/* LowerLimit */
-            3000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-            /begin AXIS_DESCR
-                FIX_AXIS\t/* Attribute */
-                NO_INPUT_QUANTITY\t/* InputQuantity */
-                EQ_LSB_1_OFF_0\t/* Conversion */
-                16\t/* MaxAxisPoints */
-                0\t/* LowerLimit */
-                16\t/* UpperLimit */
-                FIX_AXIS_PAR_DIST 0 1 16
-            /end AXIS_DESCR
-            /begin AXIS_DESCR
-                FIX_AXIS\t/* Attribute */
-                NO_INPUT_QUANTITY\t/* InputQuantity */
-                EQ_LSB_1_OFF_0\t/* Conversion */
-                4\t/* MaxAxisPoints */
-                0\t/* LowerLimit */
-                4\t/* UpperLimit */
-                FIX_AXIS_PAR_DIST 0 1 4
-            /end AXIS_DESCR
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.PlossIqSpcVec_map\t/* Name */
-            "Losses generated in rotor due to q Current when space vector modulation is active (Frq dependent)"\t/* LongIdentifier */
-            MAP\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_W\t/* Conversion */
-            0\t/* LowerLimit */
-            3000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-            /begin AXIS_DESCR
-                FIX_AXIS\t/* Attribute */
-                NO_INPUT_QUANTITY\t/* InputQuantity */
-                EQ_LSB_1_OFF_0\t/* Conversion */
-                16\t/* MaxAxisPoints */
-                0\t/* LowerLimit */
-                16\t/* UpperLimit */
-                FIX_AXIS_PAR_DIST 0 1 16
-            /end AXIS_DESCR
-            /begin AXIS_DESCR
-                FIX_AXIS\t/* Attribute */
-                NO_INPUT_QUANTITY\t/* InputQuantity */
-                EQ_LSB_1_OFF_0\t/* Conversion */
-                4\t/* MaxAxisPoints */
-                0\t/* LowerLimit */
-                4\t/* UpperLimit */
-                FIX_AXIS_PAR_DIST 0 1 4
-            /end AXIS_DESCR
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.PmTempMaxVal\t/* Name */
-            "Maximum allowed PM temperature"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            -80\t/* LowerLimit */
-            300\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.PmTempMinVal\t/* Name */
-            "Minimum allowed PM temperature"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            -80\t/* LowerLimit */
-            300\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.PmTempRplcVal\t/* Name */
-            "Replacement value of temperature used either for initialisation of Thermal Network or as PM Temperature ouput value "\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            -80\t/* LowerLimit */
-            300\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.PwmFreqActIvsStep\t/* Name */
-            "Inverse of equidistant steps between two PWM frequency vector elements"\t/* LongIdentifier */
-            VAL_BLK\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_s\t/* Conversion */
-            8.3340278356529705e-05\t/* LowerLimit */
-            1\t/* UpperLimit */
-            MATRIX_DIM 1
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.PwmFreqActMaxIdx\t/* Name */
-            "Maximal index of PWM frequency vector (dimension-1)"\t/* LongIdentifier */
-            VAL_BLK\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING___c\t/* Conversion */
-            1\t/* LowerLimit */
-            255\t/* UpperLimit */
-            MATRIX_DIM 1
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.PwmFreqActMin\t/* Name */
-            "Minimal value of PWM frequency for all LuTs"\t/* LongIdentifier */
-            VAL_BLK\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_Hz\t/* Conversion */
-            1\t/* LowerLimit */
-            12000\t/* UpperLimit */
-            MATRIX_DIM 1
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.RotTimeConstFac_RotTempIniFlt\t/* Name */
-            "A time factor which is a multiple of Thermal time constant of Permanent Magnet (Rotor)"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_s\t/* Conversion */
-            0\t/* LowerLimit */
-            200000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.Rth_LuTYaxis\t/* Name */
-            "Thermal resistivity of Rotor"\t/* LongIdentifier */
-            CURVE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_K_p_W\t/* Conversion */
-            0\t/* LowerLimit */
-            100\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-            /begin AXIS_DESCR
-                COM_AXIS\t/* Attribute */
-                NO_INPUT_QUANTITY\t/* InputQuantity */
-                PMTempCalcnThermNetVw_VOID_SCALING_rpm\t/* Conversion */
-                8\t/* MaxAxisPoints */
-                -18000\t/* LowerLimit */
-                18000\t/* UpperLimit */
-                BYTE_ORDER MSB_LAST
-                AXIS_PTS_REF PMTempCalcnThermNetVw_CalibParam.SpdAct_RthLuTXaxis
-            /end AXIS_DESCR
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.SatValHldTi\t/* Name */
-            "Maximum counter size after which the saturated maximum or minimum PM temperature is set to replacement PM temperature"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            ULONG_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_ms\t/* Conversion */
-            0\t/* LowerLimit */
-            1000000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.SatValHldTiStep\t/* Name */
-            "Step size which represents the incremental counter of internal clock for Holding saturated maximum or minimum PM temperature"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            ULONG_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_ms\t/* Conversion */
-            0\t/* LowerLimit */
-            1000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_CAN_HvOffTi\t/* Name */
-            "Test Purpose Only: Time during which the HV connection is switched off"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_min\t/* Conversion */
-            0\t/* LowerLimit */
-            100000000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_CAN_VehPrkgTi\t/* Name */
-            "Test Purpose Only: Time during which the vehicle stays switched off"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_min\t/* Conversion */
-            0\t/* LowerLimit */
-            100000000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_FID_ErrHvOff\t/* Name */
-            "Test Purpose Only: Validity Bit which denotes validity of HV Offtime Signal (1: Not Valid 0: Signal Valid )"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_FID_ErrNvm\t/* Name */
-            "Test Purpose Only: Validity Bit which denotes validity of variables stored NVM (1: Not Valid 0: Signal Valid )"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_FID_ErrPrkgTi\t/* Name */
-            "Test Purpose Only: Validity Bit which denotes validity of Vehicle Offtime Signal (1: Not Valid 0: Signal Valid )"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_FID_IniHvOff\t/* Name */
-            "Test Purpose Only: Initialisation Bit which denotes availability of HV Offtime Signal (1: Not Available; 0: Signal Available)"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_FID_IniNvm\t/* Name */
-            "Test Purpose Only: Initialisation Bit which denotes availability of variables stored in NVM (1: Not Available; 0: Signal Available)"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_FID_IniPrkgTi\t/* Name */
-            "Test Purpose Only: Initialisation Bit which denotes availability of Vehicle Offtime Signal (1: Not Available; 0: Signal Available)"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_HwFlt_WindgSnsr\t/* Name */
-            "Test Purpose Only: Fault Bit which denotes if measured tempeture using winding sensor is a faulty signal (0: No Fault ; 1: Fault Signal )"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            UBYTE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_NVM_TempDifAirGap\t/* Name */
-            "Test Purpose Only: Difference between estimated PM temperature and estimated airgap temperature at the time of vehicle switch-off"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            -200\t/* LowerLimit */
-            300\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_NVM_TempDifWindg\t/* Name */
-            "Test Purpose Only: Difference between estimated PM temperature and mesaured winding temperature at the time of vehicle switch-off"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            -200\t/* LowerLimit */
-            300\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.SpdMax\t/* Name */
-            "Maximum Mechanical Speed of Motor"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_rpm\t/* Conversion */
-            -18000\t/* LowerLimit */
-            18000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin CHARACTERISTIC
-            PMTempCalcnThermNetVw_CalibParam.TempWindgSnsr_PmTempMax\t/* Name */
-            "Maximum Threshold value for limiting the measured winding temperature, where measured winding temp. is used as a replacement value for following: 
-1) Output PM temperature in State 1
-2) Initial PM temperature in State 2"\t/* LongIdentifier */
-            VALUE\t/* Type */
-            0x0000\t/* Address */
-            FLOAT32_IEEE_COL_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            -80\t/* LowerLimit */
-            500\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end CHARACTERISTIC
-
-        /begin AXIS_PTS
-            PMTempCalcnThermNetVw_CalibParam.CoolFlowRate_LuTXaxis\t/* Name */
-            "Estimated flowrate at Inverter coolant outlet (served as input to electric motor coolant inlet)"\t/* LongIdentifier */
-            0x0000\t/* Address */
-            PMTempCalcnThermNetVw_InputData.EmCooltFlow\t/* InputQuantity */
-            FLOAT32_IEEE_X_INCR_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_l_p_min\t/* Conversion */
-            8\t/* MaxAxisPoints */
-            0\t/* LowerLimit */
-            10\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end AXIS_PTS
-
-        /begin AXIS_PTS
-            PMTempCalcnThermNetVw_CalibParam.SpdAct_RthLuTXaxis\t/* Name */
-            "Mechanical speed of electric motor used to calculate thermal resistivity via LuT"\t/* LongIdentifier */
-            0x0000\t/* Address */
-            NO_INPUT_QUANTITY\t/* InputQuantity */
-            FLOAT32_IEEE_X_INCR_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_rpm\t/* Conversion */
-            8\t/* MaxAxisPoints */
-            -18000\t/* LowerLimit */
-            18000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end AXIS_PTS
-
-        /begin AXIS_PTS
-            PMTempCalcnThermNetVw_CalibParam.SpdActFric_LuTXaxis\t/* Name */
-            "Actual mechanical speed of PM synchronous motor used to set up Friction losses LuT"\t/* LongIdentifier */
-            0x0000\t/* Address */
-            NO_INPUT_QUANTITY\t/* InputQuantity */
-            FLOAT32_IEEE_X_INCR_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_rpm\t/* Conversion */
-            8\t/* MaxAxisPoints */
-            -18000\t/* LowerLimit */
-            18000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end AXIS_PTS
-
-        /begin AXIS_PTS
-            PMTempCalcnThermNetVw_CalibParam.SpdActNac_LuTXaxis\t/* Name */
-            "Actual mechanical speed of PM synchronous motor used to set up Rotor losses dependent on AC currents"\t/* LongIdentifier */
-            0x0000\t/* Address */
-            NO_INPUT_QUANTITY\t/* InputQuantity */
-            FLOAT32_IEEE_X_INCR_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_rpm\t/* Conversion */
-            8\t/* MaxAxisPoints */
-            -18000\t/* LowerLimit */
-            18000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end AXIS_PTS
-
-        /begin AXIS_PTS
-            PMTempCalcnThermNetVw_CalibParam.TimeKeyOff_LuTXaxis\t/* Name */
-            "vehicle switch-off time (VehPrkgTi or HvOffTi)"\t/* LongIdentifier */
-            0x0000\t/* Address */
-            PMTempCalcnThermNetVw_MeasSig.OffTime\t/* InputQuantity */
-            FLOAT32_IEEE_X_INCR_DIRECT\t/* Deposit */
-            0\t/* MaxDiff */
-            PMTempCalcnThermNetVw_VOID_SCALING_s\t/* Conversion */
-            8\t/* MaxAxisPoints */
-            0\t/* LowerLimit */
-            100000\t/* UpperLimit */
-            BYTE_ORDER MSB_LAST
-        /end AXIS_PTS
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_AlvCntr\t/* Name */
-            "AliveCounter"\t/* LongIdentifier */
-            ULONG\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING___a\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            4294967295\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_InputData.CAN_HvOffTi\t/* Name */
-            "Time during which the HV connection is switched off"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING_min\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            100000000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_InputData.CAN_VehPrkgTi\t/* Name */
-            "Time during which the vehicle stays switched off"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING_min\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            100000000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_InputData.EmCooltFlow\t/* Name */
-            "Estimated flowrate at Inverter coolant outlet  (served as input to electric motor coolant inlet)"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING_l_p_min\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            10\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_InputData.EmTempCooltInlet\t/* Name */
-            "Estimated temperature of Inverter coolant outlet (served as input to electric motor coolant inlet)"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            300\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_InputData.FID_ErrHvOff\t/* Name */
-            "Validity Bit which denotes validity of HV Offtime Signal (1: Not Valid 0: Signal Valid )"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_InputData.FID_ErrNvm\t/* Name */
-            "Validity Bit which denotes validity of variables stored NVM (1: Not Valid 0: Signal Valid )"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_InputData.FID_ErrPrkgTi\t/* Name */
-            "Validity Bit which denotes validity of Vehicle Offtime Signal (1: Not Valid 0: Signal Valid )"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_InputData.FID_IniHvOff\t/* Name */
-            "Initialisation Bit which denotes availability of HV Offtime Signal (1: Not Available; 0: Signal Available)"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_InputData.FID_IniNvm\t/* Name */
-            "Initialisation Bit which denotes availability of variables stored in NVM (1: Not Available; 0: Signal Available)"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_InputData.FID_IniPrkgTi\t/* Name */
-            "Initialisation Bit which denotes availability of Vehicle Offtime Signal (1: Not Available; 0: Signal Available)"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_InputData.HwFlt_WindSnsr\t/* Name */
-            "Fault Bit which denotes if measured tempeture using winding sensor is a faulty signal (0: No Fault ; 1: Fault Signal )"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_InputData.IdActFlt\t/* Name */
-            "Actual d current filtered"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING_A\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -1000\t/* LowerLimit */
-            1000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_InputData.IqActFlt\t/* Name */
-            "Actual q current filtered"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING_A\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -1000\t/* LowerLimit */
-            1000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_InputData.ModlnModAct\t/* Name */
-            "Modulation type actually used in Inverter modulator function. (Flat Top or Space Vector Modulation)"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING___c\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            5\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_InputData.NVM_AirgapTemp\t/* Name */
-            "Airgap temperature stored in Nvm during last operating cycle"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_InputData.NVM_PmTemp\t/* Name */
-            "PM temperature stored in Nvm during last operating cycle"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_InputData.NVM_StatorTemp\t/* Name */
-            "Stator temperature stored in Nvm during last operating cycle"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            200\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_InputData.PwmFrqAct\t/* Name */
-            "Current PWM frequency of motor control"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING_Hz\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            12000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_InputData.SpdAct\t/* Name */
-            "Actual mechanical speed of electric motor"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING_rpm\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -16000\t/* LowerLimit */
-            16000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_InputData.TempWindgSnsr\t/* Name */
-            "Actual measured stator winding temperature by using winding temperature sensor (NTC in stator winding)"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            300\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.AirGapTempCalcd\t/* Name */
-            "Estimated temperature of Air gap"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            300\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.AirGapTempFacLuT\t/* Name */
-            "Factor of Heat transfer between Stator winding, Iron core and Coolant"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.ClckCntRslt\t/* Name */
-            "Internal Clock ticks "\t/* LongIdentifier */
-            ULONG\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING_s_b\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            10000000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.DeltaLossTN\t/* Name */
-            "Value of heat exchange between rotor and airgap (mathematical model)"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING_W\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -100000\t/* LowerLimit */
-            100000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.DeltaTempTN\t/* Name */
-            "When thermal network is active, the difference between the estimated PM temperature (previous function call) and the actual calcualted air gap temperature(current function call).  "\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -100000\t/* LowerLimit */
-            100000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.eFuncFacLuT\t/* Name */
-            "LuT output factor value calculated using exponential function."\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -100000\t/* LowerLimit */
-            100000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.Fac_PlossIacN\t/* Name */
-            "Factor for rotor current losses generated in rotor due to rotor speed"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            10\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.IdActFlt_f\t/* Name */
-            "Fraction of Prelook-up function of IdActFlt"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.IdActFlt_k\t/* Name */
-            "Index of Prelook-up function of IdActFlt"\t/* LongIdentifier */
-            ULONG\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING___a\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            4294967295\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.IniPmTemp\t/* Name */
-            "Estimated initial value of PM temperature when the vehicle is switched On (either exponential function output or stator winding sensor value)"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            300\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.IniPmTempEfunc\t/* Name */
-            "Estimated initial value of PM temperature from exponential function"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            300\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.IqActFlt_f\t/* Name */
-            "Fraction of Prelook-up function of IqActFlt"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.IqActFlt_k\t/* Name */
-            "Index of Prelook-up function of IqActFlt"\t/* LongIdentifier */
-            ULONG\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING___a\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            4294967295\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.LongSwtOffTimeSts\t/* Name */
-            "Status Bit which denotes the vehicle was switched off for a time longer than the cooling thermal time constant of rotor 
-(1: Offtime longer than cooling time constant, 0: Offtime lesser than cooling time constant )"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.OffTime\t/* Name */
-            "vehicle switch-off time (VehPrkgTi or HvOffTi) in seconds"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING_s\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            100000000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.PlossCurrD\t/* Name */
-            "Losses generated in rotor due to d Current"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING_W\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            3000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.PlossCurrQ\t/* Name */
-            "Losses generated in rotor due to q Current"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING_W\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            3000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.PlossFric\t/* Name */
-            "Losses generated in rotor due to bearing friction"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING_W\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            3000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.PlossTotCalcd\t/* Name */
-            "Total Losses generated in Rotor"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING_W\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            100000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.PmTempEstLimn\t/* Name */
-            "Saturated Value of PM Temperature"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            300\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.PmTempReplcmtVal\t/* Name */
-            "Replacement value \\"PmTempRplcVal\\" used as PM Temperature ouput when the function execution state = 1 
-( when thermal network disabled or when signals not available to calculate initial PM temperature)"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            300\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.PmTempReplcmtVal_DftSt\t/* Name */
-            "Replacement value \\"PmTempRplcVal\\" used as PM Temperature ouput when the function is executing in default state"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            300\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.PmTempSatFlg\t/* Name */
-            "Status Bit which denotes saturated value of PM temperature (Max & Min both limit flag)"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.PmTempUnitDly\t/* Name */
-            "delayed value of estimated PM temperature by 1 time slice"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            300\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.PwmFrqAct_f\t/* Name */
-            "Fraction of Prelook-up function of PwmFrqAct"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.PwmFrqAct_k\t/* Name */
-            "Index of Prelook-up function of PwmFrqAct"\t/* LongIdentifier */
-            ULONG\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING___a\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            4294967295\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.ResRotLutOutput\t/* Name */
-            "actual thermal resistance of rotor-airgap which is dependent on actual mechanical speed of rotor."\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING_K_p_W\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            100\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.SatFlgClckCntRslt\t/* Name */
-            "Internal Clock ticks for saturation flag of PM temperature"\t/* LongIdentifier */
-            ULONG\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING_s_b\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            100000000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.SelAmbTempSts\t/* Name */
-            "Status Bit which denotes selection of ambient temperature for exponential function (1: Aig-gap temperature, 0: winding temperature sensor )"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.TempDifAirGap\t/* Name */
-            "Difference between estimated PM temperature output value \\"PMTempThermNet\\" and \\"AirGapTempCalcd\\""\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -200\t/* LowerLimit */
-            300\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.TempDifOld\t/* Name */
-            "Difference between estimated output  value PMTempThermNet and AirGapTempCalcd saved in NVM ram during last system cycle time. 
-This is used as input to exponential function during next system start. "\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -200\t/* LowerLimit */
-            300\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.TempDifWindg\t/* Name */
-            "Difference between estimated PM temperature output value \\"PMTempThermNet\\" and winding temperature"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -200\t/* LowerLimit */
-            300\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.TempNew\t/* Name */
-            "Actual measured temperature by winding sesnor or actual air gap temperature calculated during first system start (first function call). This is used as input to exponential function "\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            300\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.TempWindgSnsr_PmTempLimn\t/* Name */
-            "Maximum limited value of measured winding sensor temperature which is used as a replacement value for permanent magnet (rotor) temperature in State 1 and as initial PM temperature in State 2"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            300\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.TempWindgSnsr_PmTempLimnSts\t/* Name */
-            "A status Bit which is enabled if the stator winding sensor value overshoots maximum allowed (PM )rotor temperature"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.TiDurn_PostRotTempIniFlt\t/* Name */
-            "Time duration after faults occur (FID_ErrNvm or FID_ErrPrkgTi or FID_ErrHvOff ) "\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING_s\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            2000000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.TrigDetmnIniVal\t/* Name */
-            "Trigger condition to execute intial PM temperature calculation algorithm, only once from State 1 to 2 execution (1: triggered, 0 : not triggered )"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_MeasSig.TrigIniValCalc\t/* Name */
-            "Trigger condition further processed within intial PM temperature calculation algorithm to execute exponential function algortihm. (1: exponential function, 0: Stator winding sensor)"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_OutputData.AirGapTempCalcd\t/* Name */
-            "Estimated temperature of Air gap"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            300\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_OutputData.PmTempCalcnState\t/* Name */
-            "State 1: Use replacement value or winding temperature sensor 
-State 2: Use the estimated value calculated via Thermal Network
-State 3: Use replacement value (winding sensor fault is active)"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING___c\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            5\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_OutputData.PmTempThermNet\t/* Name */
-            "Depending upon the state of thermal network,this can be either 1) replacement value, winding temperature sensor value  or 3) estimated value of PM temperature"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            300\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_OutputData.PmTempThermNetStsWord\t/* Name */
-            "Status bit which corresponds to output availability and its validity"\t/* LongIdentifier */
-            ULONG\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING___a\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            10000\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_OutputData.RotTempFlt\t/* Name */
-            "Fault is active if Rotor temperature is incorrectly initialized or a winding sensor fault is active. (0: Disabled 1: Enabled )"\t/* LongIdentifier */
-            UBYTE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            0\t/* LowerLimit */
-            1\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin MEASUREMENT
-            PMTempCalcnThermNetVw_OutputData.StatorTemp\t/* Name */
-            "Actual measured stator winding temperature by using sensor (NTC in stator winding)"\t/* LongIdentifier */
-            FLOAT32_IEEE\t/* Datatype */
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Conversion */
-            1\t/* Resolution */
-            100\t/* Accuracy */
-            -80\t/* LowerLimit */
-            300\t/* UpperLimit */
-            ECU_ADDRESS 0x0000
-            BYTE_ORDER MSB_LAST
-        /end MEASUREMENT
-
-        /begin COMPU_METHOD
-            EQ_LSB_1_OFF_0\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%8.0"\t/* Format */
-            ""\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PMTempCalcnThermNetVw_VOID_SCALING__\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%12.6"\t/* Format */
-            "-"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PMTempCalcnThermNetVw_VOID_SCALING___a\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%10.0"\t/* Format */
-            "-"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PMTempCalcnThermNetVw_VOID_SCALING___c\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%3.0"\t/* Format */
-            "-"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PMTempCalcnThermNetVw_VOID_SCALING___d\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%1.0"\t/* Format */
-            "-"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PMTempCalcnThermNetVw_VOID_SCALING__C\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%12.6"\t/* Format */
-            "\xc2\xb0C"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PMTempCalcnThermNetVw_VOID_SCALING_1_p_A\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%12.6"\t/* Format */
-            "1/A"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PMTempCalcnThermNetVw_VOID_SCALING_A\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%12.6"\t/* Format */
-            "A"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PMTempCalcnThermNetVw_VOID_SCALING_Hz\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%12.6"\t/* Format */
-            "Hz"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PMTempCalcnThermNetVw_VOID_SCALING_K_p_W\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%12.6"\t/* Format */
-            "K/W"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PMTempCalcnThermNetVw_VOID_SCALING_l_p_min\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%12.6"\t/* Format */
-            "l/min"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PMTempCalcnThermNetVw_VOID_SCALING_min\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%12.6"\t/* Format */
-            "min"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PMTempCalcnThermNetVw_VOID_SCALING_ms\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%10.0"\t/* Format */
-            "ms"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PMTempCalcnThermNetVw_VOID_SCALING_rpm\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%12.6"\t/* Format */
-            "rpm"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PMTempCalcnThermNetVw_VOID_SCALING_s\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%12.6"\t/* Format */
-            "s"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PMTempCalcnThermNetVw_VOID_SCALING_s_b\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%10.0"\t/* Format */
-            "s"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PMTempCalcnThermNetVw_VOID_SCALING_W\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%12.6"\t/* Format */
-            "W"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin COMPU_METHOD
-            PMTempCalcnThermNetVw_VOID_SCALING_W_s_p_K\t/* Name */
-            "Void scaling for unscaled variables"\t/* LongIdentifier */
-            RAT_FUNC\t/* ConversionType */
-            "%12.6"\t/* Format */
-            "W-s/K"\t/* Unit */
-            COEFFS 0 1 0 0 0 1
-        /end COMPU_METHOD
-
-        /begin FUNCTION
-            PMTempCalcnThermNetVw\t/* Name */
-            ""\t/* LongIdentifier */
-            /begin DEF_CHARACTERISTIC
-                PMTempCalcnThermNetVw_CalibParam.Fac_PlossIacN_LuTYaxis\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.SpdActNac_LuTXaxis\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.PlossFric_LuTYaxis\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.SpdActFric_LuTXaxis\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.Rth_LuTYaxis\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.SpdAct_RthLuTXaxis\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.AirGapTempFac_LuTYaxis\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.CoolFlowRate_LuTXaxis\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.IntgTiSampleRot\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.CapcRot\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.SpdMax\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.PmTempMaxVal\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.PmTempMinVal\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.IdMin\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.IdIvsStep\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.IdMaxIdx\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.IqMin\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.IqIvsStep\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.IqMaxIdx\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.PwmFreqActMin\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.PwmFreqActIvsStep\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.PwmFreqActMaxIdx\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.DiThermNetCalcn\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.PmTempRplcVal\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.EnaHvOffTime\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_FID_IniHvOff\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_FID_IniPrkgTi\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_FID_IniNvm\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_HwFlt_WindgSnsr\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_FID_ErrHvOff\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_FID_ErrPrkgTi\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_FID_ErrNvm\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.DiSimnPmTemp\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_NVM_TempDifAirGap\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_NVM_TempDifWindg\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_CAN_VehPrkgTi\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_CAN_HvOffTi\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.RotTimeConstFac_RotTempIniFlt\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.TempWindgSnsr_PmTempMax\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.PlossIdSpcVec_map\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.PlossIqSpcVec_map\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.PlossIdFlatTop_map\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.PlossIqFlatTop_map\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.efuncFac_LuTYaxis\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.TimeKeyOff_LuTXaxis\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.DiSelAmbTemp\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.CompareTimeConstFacAmb\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.CompareTimeConstFacRot\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.IniPmTempRplcVal\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.IniValCalcnMod\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.DiThermNetCalcn_UseTempWindgSnsr\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.FuncTiSlc\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.DiIntClkCntr\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.ClckCntStep\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.ClckCntMax\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.SatValHldTiStep\t/* Identifier */
-                PMTempCalcnThermNetVw_CalibParam.SatValHldTi\t/* Identifier */
-            /end DEF_CHARACTERISTIC
-            /begin IN_MEASUREMENT
-                PMTempCalcnThermNetVw_InputData.NVM_PmTemp\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.NVM_StatorTemp\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.NVM_AirgapTemp\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.CAN_VehPrkgTi\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.CAN_HvOffTi\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.EmCooltFlow\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.EmTempCooltInlet\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.TempWindgSnsr\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.SpdAct\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.IdActFlt\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.IqActFlt\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.ModlnModAct\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.FID_IniHvOff\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.FID_IniPrkgTi\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.FID_IniNvm\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.HwFlt_WindSnsr\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.FID_ErrHvOff\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.FID_ErrPrkgTi\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.FID_ErrNvm\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.PwmFrqAct\t/* Identifier */
-            /end IN_MEASUREMENT
-            /begin OUT_MEASUREMENT
-                PMTempCalcnThermNetVw_OutputData.PmTempThermNet\t/* Identifier */
-                PMTempCalcnThermNetVw_OutputData.PmTempThermNetStsWord\t/* Identifier */
-                PMTempCalcnThermNetVw_OutputData.AirGapTempCalcd\t/* Identifier */
-                PMTempCalcnThermNetVw_OutputData.StatorTemp\t/* Identifier */
-                PMTempCalcnThermNetVw_OutputData.PmTempCalcnState\t/* Identifier */
-                PMTempCalcnThermNetVw_OutputData.RotTempFlt\t/* Identifier */
-            /end OUT_MEASUREMENT 
-            /begin LOC_MEASUREMENT
-                PMTempCalcnThermNetVw_MeasSig.AirGapTempCalcd\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.AirGapTempFacLuT\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.PlossCurrD\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.PlossCurrQ\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.PlossFric\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.Fac_PlossIacN\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.PlossTotCalcd\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.DeltaTempTN\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.DeltaLossTN\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.PmTempUnitDly\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.ResRotLutOutput\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.TempWindgSnsr_PmTempLimn\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.IniPmTemp\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.PmTempEstLimn\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.OffTime\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.IdActFlt_k\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.IdActFlt_f\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.IqActFlt_k\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.IqActFlt_f\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.PwmFrqAct_k\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.PwmFrqAct_f\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.EmCooltFlow\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.EmTempCooltInlet\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.TempWindgSnsr\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.SpdAct\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.IdActFlt\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.IqActFlt\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.ModlnModAct\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.PwmFrqAct\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.TrigDetmnIniVal\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.LongSwtOffTimeSts\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.SelAmbTempSts\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.PmTempSatFlg\t/* Identifier */
-                PMTempCalcnThermNetVw_AlvCntr\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.PmTempReplcmtVal_DftSt\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.PmTempReplcmtVal\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.TempDifAirGap\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.TempDifWindg\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.NVM_PmTemp\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.NVM_StatorTemp\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.NVM_AirgapTemp\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.CAN_VehPrkgTi\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.CAN_HvOffTi\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.FID_IniHvOff\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.FID_IniPrkgTi\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.FID_IniNvm\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.HwFlt_WindSnsr\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.FID_ErrHvOff\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.FID_ErrPrkgTi\t/* Identifier */
-                PMTempCalcnThermNetVw_InputData.FID_ErrNvm\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.TempWindgSnsr_PmTempLimnSts\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.IniPmTempEfunc\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.TempDifOld\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.TempNew\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.eFuncFacLuT\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.TrigIniValCalc\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.ClckCntRslt\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.TiDurn_PostRotTempIniFlt\t/* Identifier */
-                PMTempCalcnThermNetVw_MeasSig.SatFlgClckCntRslt\t/* Identifier */
-            /end LOC_MEASUREMENT
-        /end FUNCTION
-
-        /begin RECORD_LAYOUT
-            FLOAT32_IEEE_COL_DIRECT\t/* Name */
-            FNC_VALUES 1 FLOAT32_IEEE COLUMN_DIR DIRECT
-        /end RECORD_LAYOUT
-
-        /begin RECORD_LAYOUT
-            FLOAT32_IEEE_X_INCR_DIRECT\t/* Name */
-            AXIS_PTS_X 1 FLOAT32_IEEE INDEX_INCR DIRECT
-        /end RECORD_LAYOUT
-
-        /begin RECORD_LAYOUT
-            UBYTE_COL_DIRECT\t/* Name */
-            FNC_VALUES 1 UBYTE COLUMN_DIR DIRECT
-        /end RECORD_LAYOUT
-
-        /begin RECORD_LAYOUT
-            ULONG_COL_DIRECT\t/* Name */
-            FNC_VALUES 1 ULONG COLUMN_DIR DIRECT
-        /end RECORD_LAYOUT
-    /end MODULE 
-/end PROJECT 
\\ No newline at end of file
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/include/PmTempCalcnThermNetVw_WrprData.h b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/include/PmTempCalcnThermNetVw_WrprData.h
deleted file mode 100644
index 6100b6ca9..000000000
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/include/PmTempCalcnThermNetVw_WrprData.h
+++ /dev/null
@@ -1,201 +0,0 @@
-/* ***************************************************************** */
-/* Sourcefile: PmTempCalcnThermNetVw_WrprData.h                                  */
-/* ADD Container: PmTempCalcnThermNetVw                                      */
-/* ADD Container Version: 1.4.0                                      */
-/* ***************************************************************** */
-/* Copyright (C) Valeo-Siemens eAutomotive GmbH 2021                 */
-/* All Rights Reserved. Confidential                                 */
-/* ***************************************************************** */
-/*!
- * \\addtogroup    PmTempCalcnThermNetVw_WrprData
- * @{
-*/
-#ifndef\tPMTEMPCALCNTHERMNETVW_WRPRDATA_H
-#define\tPMTEMPCALCNTHERMNETVW_WRPRDATA_H
-
-
-#include "AddGlobalDefines.h"
-#include "Platform_Types.h"
-#include "Compiler.h"
-
-
-
-#ifndef SW_INTERFACE
-
-
-
-
-
-
-/* PRQA S 3451 SUP_3451 #external declared global data are autogenerated interfaces which are managed by data dictionary */
-
-
-
-   /* Begin: IVTRTHERMMDL_START_SEC_VAR_INIT_32 (online) */
-#define IVTRTHERMMDL_START_SEC_VAR_INIT_32
-#include "MemMap.h"
-
-extern VAR(float32, IVTRTHERMMDL_VAR) IvtrThermMdlCooltFlowRateAct;
-   #define IVTRTHERMMDL_STOP_SEC_VAR_INIT_32
-#include "MemMap.h"
-/* End: IVTRTHERMMDL_STOP_SEC_VAR_INIT_32 (online) */
-
-
-
-
-
-
-   /* Begin: IVTRTHERMMDL_START_SEC_VAR_INIT_32 (online) */
-#define IVTRTHERMMDL_START_SEC_VAR_INIT_32
-#include "MemMap.h"
-
-extern VAR(float32, IVTRTHERMMDL_VAR) IvtrThermMdlCooltOutlTemp;
-   #define IVTRTHERMMDL_STOP_SEC_VAR_INIT_32
-#include "MemMap.h"
-/* End: IVTRTHERMMDL_STOP_SEC_VAR_INIT_32 (online) */
-
-
-
-
-
-
-   /* Begin: MOD3PHA_START_SEC_VAR_INIT_8 (online) */
-#define MOD3PHA_START_SEC_VAR_INIT_8
-#include "MemMap.h"
-
-extern VAR(uint8, MOD3PHA_VAR) Mod3PhaModlnModAct;
-   #define MOD3PHA_STOP_SEC_VAR_INIT_8
-#include "MemMap.h"
-/* End: MOD3PHA_STOP_SEC_VAR_INIT_8 (online) */
-
-
-
-
-
-
-   /* Begin: PWMSPMGR_START_SEC_VAR_CLEARED_32 (online) */
-#define PWMSPMGR_START_SEC_VAR_CLEARED_32
-#include "MemMap.h"
-
-extern VAR(float32, PWMSPMGR_VAR) PwmSpMgrPwmFrqSpFild10;
-   #define PWMSPMGR_STOP_SEC_VAR_CLEARED_32
-#include "MemMap.h"
-/* End: PWMSPMGR_STOP_SEC_VAR_CLEARED_32 (online) */
-
-
-
-
-
-
-   /* Begin: ROTORAGSPDCALCN_START_SEC_VAR_INIT_32 (online) */
-#define ROTORAGSPDCALCN_START_SEC_VAR_INIT_32
-#include "MemMap.h"
-
-extern VAR(float32, ROTORAGSPDCALCN_VAR) RotorAgSpdCalcnSpdMeclFild2;
-   #define ROTORAGSPDCALCN_STOP_SEC_VAR_INIT_32
-#include "MemMap.h"
-/* End: ROTORAGSPDCALCN_STOP_SEC_VAR_INIT_32 (online) */
-
-
-
-
-
-
-   /* Begin: IPMCTRL_START_SEC_VAR_INIT_32 (online) */
-#define IPMCTRL_START_SEC_VAR_INIT_32
-#include "MemMap.h"
-
-extern VAR(float32, IPMCTRL_VAR) TqCtrlIdActFild;
-   #define IPMCTRL_STOP_SEC_VAR_INIT_32
-#include "MemMap.h"
-/* End: IPMCTRL_STOP_SEC_VAR_INIT_32 (online) */
-
-
-
-
-
-
-   /* Begin: IPMCTRL_START_SEC_VAR_INIT_32 (online) */
-#define IPMCTRL_START_SEC_VAR_INIT_32
-#include "MemMap.h"
-
-extern VAR(float32, IPMCTRL_VAR) TqCtrlIqActFild;
-   #define IPMCTRL_STOP_SEC_VAR_INIT_32
-#include "MemMap.h"
-/* End: IPMCTRL_STOP_SEC_VAR_INIT_32 (online) */
-
-
-
-
-
-
-#endif
-
-
-/* Begin: PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32 (online) */
-#define PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32
-#include "MemMap.h"
-
-extern VAR(float32, PMTEMPCALCNTHERMNETVW_VAR) PmTempCalcnThermNetEmAirGapTemp;
-#define PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32
-#include "MemMap.h"
-/* End: PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32 (online) */
-
-/* Begin: PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32 (online) */
-#define PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32
-#include "MemMap.h"
-
-extern VAR(float32, PMTEMPCALCNTHERMNETVW_VAR) PmTempCalcnThermNetEmStatorTemp;
-#define PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32
-#include "MemMap.h"
-/* End: PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32 (online) */
-
-/* Begin: PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32 (online) */
-#define PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32
-#include "MemMap.h"
-
-extern VAR(float32, PMTEMPCALCNTHERMNETVW_VAR) PmTempCalcnThermNetPmTemp;
-#define PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32
-#include "MemMap.h"
-/* End: PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32 (online) */
-
-/* Begin: PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_8 (online) */
-#define PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_8
-#include "MemMap.h"
-
-extern VAR(boolean, PMTEMPCALCNTHERMNETVW_VAR) PmTempCalcnThermNetPmTempVld;
-#define PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_8
-#include "MemMap.h"
-/* End: PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_8 (online) */
-
-/* Begin: PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_8 (online) */
-#define PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_8
-#include "MemMap.h"
-
-extern VAR(uint8, PMTEMPCALCNTHERMNETVW_VAR) PmTempCalcnThermNetState;
-#define PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_8
-#include "MemMap.h"
-/* End: PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_8 (online) */
-
-/* Begin: PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32 (online) */
-#define PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32
-#include "MemMap.h"
-
-extern VAR(uint32, PMTEMPCALCNTHERMNETVW_VAR) PmTempCalcnThermNetStsWord;
-#define PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32
-#include "MemMap.h"
-/* End: PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32 (online) */
-
-
-#endif
-/** @} doxygen end group definition */
-
-
-/* PRQA L:SUP_3451 */
-
-
-/* ***************************************************************** */
-/* Copyright (C) Valeo-Siemens eAutomotive GmbH 2021                 */
-/* All Rights Reserved. Confidential                                 */
-/* ***************************************************************** */
-/*==================[end of file]====================================*/
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/lib/PmTempCalcnThermNetVw.a b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/lib/PmTempCalcnThermNetVw.a
deleted file mode 100644
index 7c6962d27..000000000
Binary files a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/lib/PmTempCalcnThermNetVw.a and /dev/null differ
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/make/makefile.mak b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/make/makefile.mak
deleted file mode 100644
index a80ed1bd9..000000000
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/make/makefile.mak
+++ /dev/null
@@ -1,106 +0,0 @@
-#=======================================================================================
-#
-# Filename:     \tmakefile.mak
-# Model:        \tPmTempCalcnThermNetVw  at ec_models/nextgen/codegeneration_models
-# Developer:\t\tHrishi
-# Creation Date: \t07-Aug-2018
-#
-# Automatically created by ec_generateMakefile.m
-#
-# Description:  \tMake rules and definition for model generation. This file is
-#               \tincluded by \\ec\\src\\fw_cu\\build\\Makefile
-#
-# Version:\t1.2 (12.07.2018)
-#========================================================================================
-PmTempCalcnThermNetVw_ROOT_DIR := $(dir $(abspath $(lastword $(dir $(abspath $(lastword $(MAKEFILE_LIST)))))))
-
-PmTempCalcnThermNetVw_BASE := $(MODEL_SOURCE_LOCATION)/PMTempCalcnThermNetVw
-PmTempCalcnThermNetVw_LOGFILE  := $(OUTPUT_DIR)/log/model_PMTempCalcnThermNetVw.log
-
-PmTempCalcnThermNetVw_PATH_OUT := $(PmTempCalcnThermNetVw_BASE)/TlProj/PMTempCalcnThermNetVw
-PmTempCalcnThermNetVw_PATH_USE := $(PmTempCalcnThermNetVw_BASE)/TlProj/use
-
-# (relative to PmTempCalcnThermNetVw_PATH_OUT)
-PmTempCalcnThermNetVw_FILES := \\
-PmTempCalcnThermNetVw.c \\
-PmTempCalcnThermNetVw_Data.c \\
-PmTempCalcnThermNetVw_Outputs.c \\
-PmTempCalcnThermNetVw_Inputs.c
-
-PmTempCalcnThermNetVw_COMMAND := $(PmTempCalcnThermNetVw_BASE)/PMTempCalcnThermNetVw_generate_code_CM.m
-
-# (relative to PmTempCalcnThermNetVw_PATH_OUT)
-PmTempCalcnThermNetVw_DISTURBING_FILES := \\
-tl_types.h \\
-Platform_Types.h \\
-Std_Types.h
-
-PmTempCalcnThermNetVw_DEPENDENCIES := \\
-$(PmTempCalcnThermNetVw_BASE)/PMTempCalcnThermNetVw.mdl \\
-$(PmTempCalcnThermNetVw_BASE)/PmTempCalcnThermNetVw.dd \\
-$(PmTempCalcnThermNetVw_BASE)/lib/scripts/PmTempCalcnThermNetVw_param_controller.m
-
-PmTempCalcnThermNetVw_GENERATED_LIB = $(OUTPUT_DIR)/lib/PmTempCalcnThermNetVw.a
-PmTempCalcnThermNetVw_ARCHIVED_LIB = $(PmTempCalcnThermNetVw_ROOT_DIR)/lib/PmTempCalcnThermNetVw.a
-
-PmTempCalcnThermNetVw_SINGLE_ARCHIVED_LIB = $(PmTempCalcnThermNetVw_ARCHIVED_LIB)
-PmTempCalcnThermNetVw_SINGLE_ARCHIVE = $(PmTempCalcnThermNetVw_BASE)/archive/PmTempCalcnThermNetVw.a
-
-PmTempCalcnThermNetVw_GENERATED_A2L = $(PmTempCalcnThermNetVw_BASE)/TLProj/PMTempCalcnThermNetVw.a2l
-PmTempCalcnThermNetVw_ARCHIVED_A2L  = $(PmTempCalcnThermNetVw_ROOT_DIR)/a2l/PMTempCalcnThermNetVw.a2l
-
-MODEL_LIST += PmTempCalcnThermNetVw
-CC_FILES_TO_BUILD += $(PmTempCalcnThermNetVw_ROOT_DIR)src/PmTempCalcnThermNetVw_Wrpr.c
-CC_FILES_TO_BUILD += $(PmTempCalcnThermNetVw_ROOT_DIR)src/PmTempCalcnThermNetVw_WrprData.c
-
-# add the generation directory to generated files and disturbing files
-PmTempCalcnThermNetVw_FILES := $(foreach FILE, $(PmTempCalcnThermNetVw_FILES),$(PmTempCalcnThermNetVw_PATH_OUT)/$(FILE))
-PmTempCalcnThermNetVw_DISTURBING_FILES := $(foreach FILE, $(PmTempCalcnThermNetVw_DISTURBING_FILES),$(PmTempCalcnThermNetVw_PATH_USE)/$(FILE))
-PmTempCalcnThermNetVw_DONE := $(PmTempCalcnThermNetVw_BASE)/GenerationDone.txt
-
-$(PmTempCalcnThermNetVw_FILES): $(PmTempCalcnThermNetVw_DONE)
-
-$(PmTempCalcnThermNetVw_DONE): $(PmTempCalcnThermNetVw_DEPENDENCIES)
-\t@echo ----------------------------------------------------------
-\t@echo Generating PmTempCalcnThermNetVw C sources
-\t@echo ----------------------------------------------------------
-\t@echo SRCS=$(PmTempCalcnThermNetVw_FILES)
-\t@echo DEP=$(PmTempCalcnThermNetVw_DEPENDENCIES)
-\t@echo CMD=$(PmTempCalcnThermNetVw_COMMAND)
-\t@echo DIST=$(PmTempCalcnThermNetVw_DISTURBING_FILES)
-\t@echo DONE=$(PmTempCalcnThermNetVw_DONE)
-\t$(RM) -rf $(PmTempCalcnThermNetVw_PATH_USE)
-\tcmd /c "set MAKEFLAGS= & $(MATLAB) -wait -nosplash -nodesktop -logfile $(PmTempCalcnThermNetVw_LOGFILE) -r \\"run $(PmTempCalcnThermNetVw_COMMAND)\\""
-\t$(CP) -rf $(PmTempCalcnThermNetVw_PATH_OUT) $(PmTempCalcnThermNetVw_PATH_USE)
-\t$(RM) $(PmTempCalcnThermNetVw_DISTURBING_FILES)
-\t
-\t$(MKDIR) -p $(PmTempCalcnThermNetVw_ROOT_DIR)/include
-\t$(MKDIR) -p $(PmTempCalcnThermNetVw_ROOT_DIR)/a2l
-\t$(MKDIR) -p $(PmTempCalcnThermNetVw_ROOT_DIR)/lib
-\t
-\t$(RM) -f $(PmTempCalcnThermNetVw_ARCHIVED_A2L)
-\t$(CP) -fu $(PmTempCalcnThermNetVw_GENERATED_A2L) $(PmTempCalcnThermNetVw_ARCHIVED_A2L)
-\t
-\t$(RM) -f $(PmTempCalcnThermNetVw_BASE)/archive
-\t$(MKDIR) $(PmTempCalcnThermNetVw_BASE)/archive
-\t$(CP) -fu $(PmTempCalcnThermNetVw_GENERATED_A2L) $(PmTempCalcnThermNetVw_BASE)/archive
-\t$(MKDIR) $(PmTempCalcnThermNetVw_BASE)/archive/PMTempCalcnThermNetVw
-\tattrib /S -R $(PmTempCalcnThermNetVw_PATH_USE)\\\\*.*
-\t@echo copiedto=$(PmTempCalcnThermNetVw_PATH_USE)
-\t$(CP) -r $(PmTempCalcnThermNetVw_PATH_USE)/. $(PmTempCalcnThermNetVw_BASE)/archive/PMTempCalcnThermNetVw
-\t$(CP) -r $(PmTempCalcnThermNetVw_PATH_USE)/*.h $(PmTempCalcnThermNetVw_ROOT_DIR)/include
-\t@echo $(shell date /t & time /t) > $(PmTempCalcnThermNetVw_DONE)
-
-
-ifdef BUILD_PmTempCalcnThermNetVw
-# use the generated model lib
-A2L_SLAVE_PmTempCalcnThermNetVw = $(PmTempCalcnThermNetVw_GENERATED_A2L)
-CC_INCLUDE_PATH += $(PmTempCalcnThermNetVw_PATH_USE)
-MODEL_DONE_FILES_REALLY_GENERATED += $(PmTempCalcnThermNetVw_DONE)
-LIBRARIES_TO_BUILD += PmTempCalcnThermNetVw
-else
-# link instead of the generated model lib the archived one
-CC_INCLUDE_PATH += $(PmTempCalcnThermNetVw_ROOT_DIR)include
-A2L_SLAVE_PmTempCalcnThermNetVw := $(PmTempCalcnThermNetVw_ARCHIVED_A2L)
-EXTERNAL_LIBS += $(PmTempCalcnThermNetVw_ARCHIVED_LIB)
-endif
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/review/VS_FO0084_Implementation_Review_Checklist_PmTempCalcnThermNetVw_Wrpr_01_01_P270.xlsx b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/review/VS_FO0084_Implementation_Review_Checklist_PmTempCalcnThermNetVw_Wrpr_01_01_P270.xlsx
deleted file mode 100644
index 93b9091d9..000000000
Binary files a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/review/VS_FO0084_Implementation_Review_Checklist_PmTempCalcnThermNetVw_Wrpr_01_01_P270.xlsx and /dev/null differ
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/src/PmTempCalcnThermNetVw_Wrpr.c b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/src/PmTempCalcnThermNetVw_Wrpr.c
deleted file mode 100644
index b97635409..000000000
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/src/PmTempCalcnThermNetVw_Wrpr.c
+++ /dev/null
@@ -1,130 +0,0 @@
-/* ********************************************************************** */
-/* Sourcefile:      PmTempCalcnThermNetVw_Wrpr.c                          */
-/*                                                                        */
-/* Project:         eCar project                                          */
-/*                  TriCore Aurix                                         */
-/*                                                                        */
-/* Major SW Version : 01                                                  */
-/* Minor SW Version : 04                                                  */
-/* VWMEB-Inv-135261 - DRCO PmTempCalcnThermNetVw 01                                                                       */
-/*                                                                        */
-/* Department:      Valeo-Siemens eAutomotive GmbH                        */
-/*                  VSeA R&D INV ASW DRCO                                 */
-/*                                                                        */
-/* First author:    Juri Benke                                            */
-/* Other authors:   -                                                     */
-/* ********************************************************************** */
-/* Copyright (C) Valeo-Siemens eAutomotive GmbH 2021                      */
-/* All Rights Reserved. Confidential                                      */
-/* ********************************************************************** */
-
-/*!
- * \\defgroup PmTempCalcnThermNetVw - Estimate actual PM temperature
- * \\ingroup ValMeasAndProc
- * @{
- */
-
-#define PMTEMPCALCNTHERMNETVW_WRPR_
-
-/*================== [includes] =============================================*/
-#include "Std_Types.h"
-#include "Platform_Types.h"
-#include "AddGlobalDefines.h"
-#include "PmTempCalcnThermNetVw_Wrpr.h"
-#include "PmTempCalcnThermNetVw_WrprData.h"
-
-#include "PMTempCalcnThermNetVw.h"
-#include "PMTempCalcnThermNetVw_Inputs.h"
-#include "PMTempCalcnThermNetVw_Outputs.h"
-
-/* !\\misraWarningNo2012: Rule 1.1(DIR) " [L] Number of macro definitions exceeds 4095 - program does not conform strictly to ISO:C99."*/
-/*"Justification: Because of the platfrom approach is nescesary to be have the macros to compile the different SWs"*/
-#include "C2cComBswData.h" /*PRQA S 0380*/
-#include "C2cComSftyData.h" /*PRQA S 0380*/
-#include "DrvCtrlErrDeb.h"  /*PRQA S 0380*/
-
-/*================== [defines] ==============================================*/
-#define PM_TEMP_CALCN_ESTMD_VALUE_USED (2u)
-
-/*================== [type definitions] =====================================*/
-
-/*================== [local data] ===========================================*/
-
-/*================== [prototype of local functions] =========================*/
-
-/*================== [definition of local functions] ========================*/
-
-/*================== [definition of global functions] =======================*/
-#define PMTEMPCALCNTHERMNETVW_START_SEC_CODE
-#include "MemMap.h"
-
-/******************************************************************/
-/*!
- * \\fn      void PmTempCalcnThermNetVw_Run(void)
- * \\brief   main run function of the estimation of the actual PM temperature
- */
-/******************************************************************/
-
-/* VWMEB-Inv-190677 - DRCO PmTempCalcnThermNetVw_Wrpr                          */
-FUNC(void, PMTEMPCALCNTHERMNETVW_CODE) PmTempCalcnThermNetVw_Run(void)
-{
-    /* Read NVM inputs*/
-   PMTempCalcnThermNetVw_InputData.NVM_PmTemp = BswC2cData.InvTempNvm.EmTemp1;
-   PMTempCalcnThermNetVw_InputData.NVM_StatorTemp = BswC2cData.InvTempNvm.EmTemp2;
-   PMTempCalcnThermNetVw_InputData.NVM_AirgapTemp = BswC2cData.InvTempNvm.EmTemp3;
-
-   PMTempCalcnThermNetVw_InputData.CAN_VehPrkgTi = BswC2cData.VehPrkgTi; /* Time during which the vehicle stays switched off */
-   PMTempCalcnThermNetVw_InputData.CAN_HvOffTi = BswC2cData.HvOffTi; /* Time during which the HV connection is switched off */
-   PMTempCalcnThermNetVw_InputData.EmCooltFlow = IvtrThermMdlCooltFlowRateAct; /* Estimated flowrate at Inverter coolant outlet */
-   PMTempCalcnThermNetVw_InputData.EmTempCooltInlet = IvtrThermMdlCooltOutlTemp; /*  Estimated temperature of Inverter coolant outlet */
-
-   PMTempCalcnThermNetVw_InputData.TempWindgSnsr = SftyC2cData.MotStatorTVal; /* Actual measured winding temperature using winding temperature sensor */
-   PMTempCalcnThermNetVw_InputData.SpdAct = RotorAgSpdCalcnSpdMeclFild2 * SYSCON_RAD_TO_RPM; /*  Actual mechanical speed of PM synchronous motor */
-   PMTempCalcnThermNetVw_InputData.IdActFlt = TqCtrlIdActFild; /*  Actual d current filtered */
-   PMTempCalcnThermNetVw_InputData.IqActFlt = TqCtrlIqActFild; /*  Actual q current filtered */
-   PMTempCalcnThermNetVw_InputData.ModlnModAct = Mod3PhaModlnModAct; /*  Modulation type */
-   PMTempCalcnThermNetVw_InputData.PwmFrqAct = PwmSpMgrPwmFrqSpFild10; /* Actual Pwm frequency filtered */
-
-   /* comments code for new FM v1.1.0*/
-#if FTR_SNG_PWM_INTRPT == 0
-   PMTempCalcnThermNetVw_InputData.FID_IniHvOff = DrvCtrlErrDebFctInhbnSts.B.FctIdHvOffTiIni; /* Initialisation Bit which denotes availability of HV Offtime Signal (0: Not Available; 1: Signal Available) */
-   PMTempCalcnThermNetVw_InputData.FID_IniPrkgTi = DrvCtrlErrDebFctInhbnSts.B.FctIdVehPrkgTiIni; /* Initialisation Bit which denotes availability of Vehicle Offtime Signal (0: Not Available; 1: Signal Available) */
-   PMTempCalcnThermNetVw_InputData.HwFlt_WindSnsr = DrvCtrlErrDebFctInhbnSts.B.FctIdFltGrp2; /* Fault Bit which denotes if measured temperature using winding sensor is a faulty signal (0: No Fault ; 1: Fault Signal ) */
-   PMTempCalcnThermNetVw_InputData.FID_ErrHvOff = DrvCtrlErrDebFctInhbnSts.B.FctIdHvOffTiInvld; /* Validity Bit which denotes validity of HV Offtime Signal (0: Not Valid 1: Signal Valid ) */
-   PMTempCalcnThermNetVw_InputData.FID_ErrPrkgTi = DrvCtrlErrDebFctInhbnSts.B.FctIdVehPrkgTiInvld; /* Validity Bit which denotes validity of Vehicle Offtime Signal (0: Not Valid 1: Signal Valid ) */
-#else
-   PMTempCalcnThermNetVw_InputData.FID_IniHvOff = FALSE;
-   PMTempCalcnThermNetVw_InputData.FID_IniPrkgTi = FALSE;
-   PMTempCalcnThermNetVw_InputData.HwFlt_WindSnsr = FALSE;
-   PMTempCalcnThermNetVw_InputData.FID_ErrHvOff = FALSE;
-   PMTempCalcnThermNetVw_InputData.FID_ErrPrkgTi = FALSE;
-
-#endif
-
-   PMTempCalcnThermNetVw_InputData.FID_ErrNvm = (BswC2cData.InvTempNvm.EmTempVld^1u); /* Validity Bit which denotes validity of variables stored NVM (0: Not Valid 1: Signal Valid ) */
-   PMTempCalcnThermNetVw_InputData.FID_IniNvm = FALSE; /* CZ: Handled by sync. point */
-
-   PMTempCalcnThermNetVw();
-
-   /* copy output to interface */
-   PmTempCalcnThermNetPmTemp = PMTempCalcnThermNetVw_OutputData.PmTempThermNet; /* Estimated value of actual PM temperature */
-   PmTempCalcnThermNetStsWord = PMTempCalcnThermNetVw_OutputData.PmTempThermNetStsWord; /* Status bit which corresponds to output availability and its validity */
-   PmTempCalcnThermNetState = PMTempCalcnThermNetVw_OutputData.PmTempCalcnState; /* Current state of the PmTempCalcnStateChart */
-   PmTempCalcnThermNetEmAirGapTemp = PMTempCalcnThermNetVw_OutputData.AirGapTempCalcd; /* estimated value of AirGap Temperature */
-   PmTempCalcnThermNetEmStatorTemp = PMTempCalcnThermNetVw_OutputData.StatorTemp; /* Actual measured winding temperature using winding temperature sensor */
-   PmTempCalcnThermNetPmTempVld = (PmTempCalcnThermNetState == PM_TEMP_CALCN_ESTMD_VALUE_USED) ? TRUE:FALSE;
-
-   return;
-}
-#define PMTEMPCALCNTHERMNETVW_STOP_SEC_CODE
-#include "MemMap.h"
-
-/*================== [closure] ==============================================*/
-/*! \\misra Warning No C2004:19.6 "Using \'#undef\' for master c-file"          */
-#undef PMTEMPCALCNTHERMNETVW_WRPR_ /* PRQA S 0841 */
-/*! @} doxygen end of group definition                                       */
-/* ************************************************************************* */
-/* Copyright (C) Valeo-Siemens eAutomotive GmbH 2021                         */
-/* All Rights Reserved. Confidential                                         */
-/* ************************************************************************* */
-/*==================[end of file]============================================*/
diff --git a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/src/PmTempCalcnThermNetVw_WrprData.c b/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/src/PmTempCalcnThermNetVw_WrprData.c
deleted file mode 100644
index 75d219c23..000000000
--- a/src/fw_cu/Components/Inv/ValMeasAndProc/PmTempCalcnThermNetVw/src/PmTempCalcnThermNetVw_WrprData.c
+++ /dev/null
@@ -1,89 +0,0 @@
-/* ***************************************************************** */
-/* Sourcefile: PmTempCalcnThermNetVw_WrprData.c                                  */
-/* ADD Container: PmTempCalcnThermNetVw                                      */
-/* ADD Container Version: 1.4.0                                      */
-/* ***************************************************************** */
-/* Copyright (C) Valeo-Siemens eAutomotive GmbH 2021                 */
-/* All Rights Reserved. Confidential                                 */
-/* ***************************************************************** */
-/*!
- * \\defgroup      PmTempCalcnThermNetVw_WrprData   PmTempCalcnThermNetVw_WrprData -  PmTempCalcnThermNetVw\'s calibration data
- * \\ingroup       PmTempCalcnThermNetVw
- * @{
-*/
-
-#include "Std_Types.h"
-
-
-#include\t"PmTempCalcnThermNetVw_WrprData.h"
-
-#ifndef ADDS_DEF_FILE
-#define ADDS_DEF_FILE
-#endif
-
-/* Begin: PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32 (online) */
-#define PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32
-#include "MemMap.h"
-
-/*! \\cvar Estimated Em Air Gap Temperature; unit \'degree C\' */
-VAR(float32, PMTEMPCALCNTHERMNETVW_VAR) PmTempCalcnThermNetEmAirGapTemp = 0.f;
-#define PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32
-#include "MemMap.h"
-/* End: PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32 (online) */
-
-/* Begin: PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32 (online) */
-#define PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32
-#include "MemMap.h"
-
-/*! \\cvar Em Stator Temperature; unit \'degree C\' */
-VAR(float32, PMTEMPCALCNTHERMNETVW_VAR) PmTempCalcnThermNetEmStatorTemp = 0.f;
-#define PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32
-#include "MemMap.h"
-/* End: PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32 (online) */
-
-/* Begin: PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32 (online) */
-#define PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32
-#include "MemMap.h"
-
-/*! \\cvar Estimated value of actual PM temperature; unit \'degree C\' */
-VAR(float32, PMTEMPCALCNTHERMNETVW_VAR) PmTempCalcnThermNetPmTemp = 0.f;
-#define PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32
-#include "MemMap.h"
-/* End: PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32 (online) */
-
-/* Begin: PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_8 (online) */
-#define PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_8
-#include "MemMap.h"
-
-/*! \\cvar PmTempCalcnThermNet output temperatures valid flag; unit \'-\' */
-VAR(boolean, PMTEMPCALCNTHERMNETVW_VAR) PmTempCalcnThermNetPmTempVld = 0U;
-#define PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_8
-#include "MemMap.h"
-/* End: PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_8 (online) */
-
-/* Begin: PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_8 (online) */
-#define PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_8
-#include "MemMap.h"
-
-/*! \\cvar Current state of the PmTempCalcnStateChart; unit \'-\' */
-VAR(uint8, PMTEMPCALCNTHERMNETVW_VAR) PmTempCalcnThermNetState = 0U;
-#define PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_8
-#include "MemMap.h"
-/* End: PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_8 (online) */
-
-/* Begin: PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32 (online) */
-#define PMTEMPCALCNTHERMNETVW_START_SEC_VAR_INIT_32
-#include "MemMap.h"
-
-/*! \\cvar Status bit which corresponds to output availability and its validity; unit \'-\' */
-VAR(uint32, PMTEMPCALCNTHERMNETVW_VAR) PmTempCalcnThermNetStsWord = 0UL;
-#define PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32
-#include "MemMap.h"
-/* End: PMTEMPCALCNTHERMNETVW_STOP_SEC_VAR_INIT_32 (online) */
-
-/** @} doxygen end group definition */
-/* ***************************************************************** */
-/* Copyright (C) Valeo-Siemens eAutomotive GmbH 2021                 */
-/* All Rights Reserved. Confidential                                 */
-/* ***************************************************************** */
-/*==================[end of file]====================================*/
diff --git a/src/fw_cu/build/Parfiles/P2_100kW/Testbench/VW310E_76_49_A274_0028_VEH_200901.par b/src/fw_cu/build/Parfiles/P2_100kW/Testbench/VW310E_76_49_A274_0028_VEH_200901.par
index 07344f53f..d2e0c60a5 100644
--- a/src/fw_cu/build/Parfiles/P2_100kW/Testbench/VW310E_76_49_A274_0028_VEH_200901.par
+++ b/src/fw_cu/build/Parfiles/P2_100kW/Testbench/VW310E_76_49_A274_0028_VEH_200901.par
@@ -12995,408 +12995,568 @@ OptmISpCalcn_CalibParam.PmTempScalingFac [FLOAT,(1,2)]
 :  20 ;  20
 :  100 ;  100
 OptmISpCalcn_CalibParam.TqReqdScalingFac [FLOAT]  0.003013944486156106 ;  0.003013944486156106
-PMTempCalcnThermNetVw_CalibParam.AirGapTempFac_LuTYaxis [FLOAT,(1,8)]
-:  0.699999988079071 ;  0.699999988079071
-:  0.6899999976158142 ;  0.6899999976158142
-:  0.6800000071525574 ;  0.6800000071525574
-:  0.6700000166893005 ;  0.6700000166893005
-:  0.6600000262260437 ;  0.6600000262260437
-:  0.6139000058174133 ;  0.6139000058174133
-:  0.6100000143051147 ;  0.6100000143051147
-:  0.5849999785423279 ;  0.5849999785423279
-PMTempCalcnThermNetVw_CalibParam.CapcRot [FLOAT]  0.004535200074315071 ;  0.004535200074315071
-PMTempCalcnThermNetVw_CalibParam.ClckCntMax [UINT(32)]  100000 ;  100000
-PMTempCalcnThermNetVw_CalibParam.ClckCntStep [UINT(32)]  1 ;  1
-PMTempCalcnThermNetVw_CalibParam.CompareTimeConstFacAmb [FLOAT]  0 ;  0
-PMTempCalcnThermNetVw_CalibParam.CompareTimeConstFacRot [FLOAT]  15111 ;  15111
-PMTempCalcnThermNetVw_CalibParam.CoolFlowRate_LuTXaxis [FLOAT,(1,8)]
-:  0 ;  0
-:  2 ;  2
-:  4 ;  4
-:  5 ;  5
-:  6 ;  6
-:  8 ;  8
-:  9 ;  9
-:  10 ;  10
-PMTempCalcnThermNetVw_CalibParam.DiIntClkCntr [UINT(8)]  0 ;  0
-PMTempCalcnThermNetVw_CalibParam.DiSelAmbTemp [UINT(8)]  0 ;  0
-PMTempCalcnThermNetVw_CalibParam.DiSimnPmTemp [UINT(8)]  1 ;  1
-PMTempCalcnThermNetVw_CalibParam.DiThermNetCalcn [UINT(8)]  0 ;  0
-PMTempCalcnThermNetVw_CalibParam.DiThermNetCalcn_UseTempWindgSnsr [UINT(8)]  1 ;  1
-PMTempCalcnThermNetVw_CalibParam.EnaHvOffTime [UINT(8)]  1 ;  1
-PMTempCalcnThermNetVw_CalibParam.Fac_PlossIacN_LuTYaxis [FLOAT,(1,8)]
-:  0 ;  0
-:  0.38499999046325684 ;  0.38499999046325684
-:  1.3200000524520874 ;  1.3200000524520874
-:  1.3200000524520874 ;  1.3200000524520874
-:  1.0449999570846558 ;  1.0449999570846558
-:  1.0449999570846558 ;  1.0449999570846558
-:  1.7999999523162842 ;  1.7999999523162842
-:  1.7999999523162842 ;  1.7999999523162842
-PMTempCalcnThermNetVw_CalibParam.FuncTiSlc [FLOAT]  0.009999999776482582 ;  0.009999999776482582
-PMTempCalcnThermNetVw_CalibParam.IdIvsStep [FLOAT]
-:  0.01666666753590107 ;  0.01666666753590107
-PMTempCalcnThermNetVw_CalibParam.IdMaxIdx [UINT(8)]
-:  15 ;  15
-PMTempCalcnThermNetVw_CalibParam.IdMin [FLOAT]
-: -840 ; -840
-PMTempCalcnThermNetVw_CalibParam.IniPmTempRplcVal [FLOAT]  25 ;  25
-PMTempCalcnThermNetVw_CalibParam.IniValCalcnMod [UINT(8)]  2 ;  2
-PMTempCalcnThermNetVw_CalibParam.IntgTiSampleRot [FLOAT]  0.0010000000474974513 ;  0.0010000000474974513
-PMTempCalcnThermNetVw_CalibParam.IqIvsStep [FLOAT]
-:  0.008333333767950535 ;  0.008333333767950535
-PMTempCalcnThermNetVw_CalibParam.IqMaxIdx [UINT(8)]
-:  15 ;  15
-PMTempCalcnThermNetVw_CalibParam.IqMin [FLOAT]
-: -960 ; -960
-PMTempCalcnThermNetVw_CalibParam.PlossFric_LuTYaxis [FLOAT,(1,8)]
-:  0 ;  0
-:  25.211999893188477 ;  25.211999893188477
-:  60.72700119018555 ;  60.72700119018555
-:  72.33100128173828 ;  72.33100128173828
-:  99.27100372314453 ;  99.27100372314453
-:  109.21800231933594 ;  109.21800231933594
-:  135.75599670410156 ;  135.75599670410156
-:  176.58999633789062 ;  176.58999633789062
-PMTempCalcnThermNetVw_CalibParam.PlossIdFlatTop_map [FLOAT,(4,16)]
-:  100 ;  100
-:  100 ;  100
-:  86.15811920166016 ;  86.15811920166016
-:  68.71788024902344 ;  68.71788024902344
-:  61.24541091918945 ;  61.24541091918945
-:  48.235294342041016 ;  48.235294342041016
-:  28.235294342041016 ;  28.235294342041016
-:  0 ;  0
-:  8 ;  8
-:  16 ;  16
-:  24 ;  24
-:  32 ;  32
-:  40 ;  40
-:  52 ;  52
-:  64 ;  64
-:  76 ;  76
-:  100 ;  100
-:  100 ;  100
-:  86.15811920166016 ;  86.15811920166016
-:  68.71788024902344 ;  68.71788024902344
-:  61.24541091918945 ;  61.24541091918945
-:  48.235294342041016 ;  48.235294342041016
-:  28.235294342041016 ;  28.235294342041016
-:  0 ;  0
-:  8 ;  8
-:  16 ;  16
-:  24 ;  24
-:  32 ;  32
-:  40 ;  40
-:  52 ;  52
-:  64 ;  64
-:  76 ;  76
-:  100 ;  100
-:  100 ;  100
-:  86.15811920166016 ;  86.15811920166016
-:  68.71788024902344 ;  68.71788024902344
-:  61.24541091918945 ;  61.24541091918945
-:  48.235294342041016 ;  48.235294342041016
-:  28.235294342041016 ;  28.235294342041016
-:  0 ;  0
-:  8 ;  8
-:  16 ;  16
-:  24 ;  24
-:  32 ;  32
-:  40 ;  40
-:  52 ;  52
-:  64 ;  64
-:  76 ;  76
-:  100 ;  100
-:  100 ;  100
-:  86.15811920166016 ;  86.15811920166016
-:  68.71788024902344 ;  68.71788024902344
-:  61.24541091918945 ;  61.24541091918945
-:  48.235294342041016 ;  48.235294342041016
-:  28.235294342041016 ;  28.235294342041016
-:  0 ;  0
-:  8 ;  8
-:  16 ;  16
-:  24 ;  24
-:  32 ;  32
-:  40 ;  40
-:  52 ;  52
-:  64 ;  64
-:  76 ;  76
-PMTempCalcnThermNetVw_CalibParam.PlossIdSpcVec_map [FLOAT,(4,16)]
-:  13.114800453186035 ;  13.114800453186035
-:  13.114800453186035 ;  13.114800453186035
-:  13.114800453186035 ;  13.114800453186035
-:  12.565130233764648 ;  12.565130233764648
-:  10.366447448730469 ;  10.366447448730469
-:  8.61299991607666 ;  8.61299991607666
-:  5.394423484802246 ;  5.394423484802246
-:  0 ;  0
-:  5.394423484802246 ;  5.394423484802246
-:  8.61299991607666 ;  8.61299991607666
-:  10.277400016784668 ;  10.277400016784668
-:  11.941800117492676 ;  11.941800117492676
-:  13.606200218200684 ;  13.606200218200684
-:  15.270600318908691 ;  15.270600318908691
-:  16.934999465942383 ;  16.934999465942383
-:  18.59939956665039 ;  18.59939956665039
-:  13.114800453186035 ;  13.114800453186035
-:  13.114800453186035 ;  13.114800453186035
-:  13.114800453186035 ;  13.114800453186035
-:  12.565130233764648 ;  12.565130233764648
-:  10.366447448730469 ;  10.366447448730469
-:  8.61299991607666 ;  8.61299991607666
-:  5.394423484802246 ;  5.394423484802246
-:  0 ;  0
-:  5.394423484802246 ;  5.394423484802246
-:  8.61299991607666 ;  8.61299991607666
-:  10.277400016784668 ;  10.277400016784668
-:  11.941800117492676 ;  11.941800117492676
-:  13.606200218200684 ;  13.606200218200684
-:  15.270600318908691 ;  15.270600318908691
-:  16.934999465942383 ;  16.934999465942383
-:  18.59939956665039 ;  18.59939956665039
-:  13.114800453186035 ;  13.114800453186035
-:  13.114800453186035 ;  13.114800453186035
-:  13.114800453186035 ;  13.114800453186035
-:  12.565130233764648 ;  12.565130233764648
-:  10.366447448730469 ;  10.366447448730469
-:  8.61299991607666 ;  8.61299991607666
-:  5.394423484802246 ;  5.394423484802246
-:  0 ;  0
-:  5.394423484802246 ;  5.394423484802246
-:  8.61299991607666 ;  8.61299991607666
-:  10.277400016784668 ;  10.277400016784668
-:  11.941800117492676 ;  11.941800117492676
-:  13.606200218200684 ;  13.606200218200684
-:  15.270600318908691 ;  15.270600318908691
-:  16.934999465942383 ;  16.934999465942383
-:  18.59939956665039 ;  18.59939956665039
-:  13.114800453186035 ;  13.114800453186035
-:  13.114800453186035 ;  13.114800453186035
-:  13.114800453186035 ;  13.114800453186035
-:  12.565130233764648 ;  12.565130233764648
-:  10.366447448730469 ;  10.366447448730469
-:  8.61299991607666 ;  8.61299991607666
-:  5.394423484802246 ;  5.394423484802246
-:  0 ;  0
-:  5.394423484802246 ;  5.394423484802246
-:  8.61299991607666 ;  8.61299991607666
-:  10.277400016784668 ;  10.277400016784668
-:  11.941800117492676 ;  11.941800117492676
-:  13.606200218200684 ;  13.606200218200684
-:  15.270600318908691 ;  15.270600318908691
-:  16.934999465942383 ;  16.934999465942383
-:  18.59939956665039 ;  18.59939956665039
-PMTempCalcnThermNetVw_CalibParam.PlossIqFlatTop_map [FLOAT,(4,16)]
-:  153.10511779785156 ;  153.10511779785156
-:  109.65547180175781 ;  109.65547180175781
-:  66.20584106445312 ;  66.20584106445312
-:  32.49428939819336 ;  32.49428939819336
-:  0 ;  0
-:  68.82353210449219 ;  68.82353210449219
-:  134.11764526367188 ;  134.11764526367188
-:  171.1764678955078 ;  171.1764678955078
-:  200.97439575195312 ;  200.97439575195312
-:  205.359130859375 ;  205.359130859375
-:  215.6442413330078 ;  215.6442413330078
-:  237.73008728027344 ;  237.73008728027344
-:  250 ;  250
-:  250 ;  250
-:  250 ;  250
-:  250 ;  250
-:  153.10511779785156 ;  153.10511779785156
-:  109.65547180175781 ;  109.65547180175781
-:  66.20584106445312 ;  66.20584106445312
-:  32.49428939819336 ;  32.49428939819336
-:  0 ;  0
-:  68.82353210449219 ;  68.82353210449219
-:  134.11764526367188 ;  134.11764526367188
-:  171.1764678955078 ;  171.1764678955078
-:  200.97439575195312 ;  200.97439575195312
-:  205.359130859375 ;  205.359130859375
-:  215.6442413330078 ;  215.6442413330078
-:  237.73008728027344 ;  237.73008728027344
-:  250 ;  250
-:  250 ;  250
-:  250 ;  250
-:  250 ;  250
-:  153.10511779785156 ;  153.10511779785156
-:  109.65547180175781 ;  109.65547180175781
-:  66.20584106445312 ;  66.20584106445312
-:  32.49428939819336 ;  32.49428939819336
-:  0 ;  0
-:  68.82353210449219 ;  68.82353210449219
-:  134.11764526367188 ;  134.11764526367188
-:  171.1764678955078 ;  171.1764678955078
-:  200.97439575195312 ;  200.97439575195312
-:  205.359130859375 ;  205.359130859375
-:  215.6442413330078 ;  215.6442413330078
-:  237.73008728027344 ;  237.73008728027344
-:  250 ;  250
-:  250 ;  250
-:  250 ;  250
-:  250 ;  250
-:  153.10511779785156 ;  153.10511779785156
-:  109.65547180175781 ;  109.65547180175781
-:  66.20584106445312 ;  66.20584106445312
-:  32.49428939819336 ;  32.49428939819336
-:  0 ;  0
-:  68.82353210449219 ;  68.82353210449219
-:  134.11764526367188 ;  134.11764526367188
-:  171.1764678955078 ;  171.1764678955078
-:  200.97439575195312 ;  200.97439575195312
-:  205.359130859375 ;  205.359130859375
-:  215.6442413330078 ;  215.6442413330078
-:  237.73008728027344 ;  237.73008728027344
-:  250 ;  250
-:  250 ;  250
-:  250 ;  250
-:  250 ;  250
-PMTempCalcnThermNetVw_CalibParam.PlossIqSpcVec_map [FLOAT,(4,16)]
-:  134.9629669189453 ;  134.9629669189453
-:  112.62963104248047 ;  112.62963104248047
-:  90.29629516601562 ;  90.29629516601562
-:  67.96295928955078 ;  67.96295928955078
-:  0 ;  0
-:  33.654972076416016 ;  33.654972076416016
-:  71.59576416015625 ;  71.59576416015625
-:  143.82315063476562 ;  143.82315063476562
-:  200 ;  200
-:  200 ;  200
-:  207.22828674316406 ;  207.22828674316406
-:  228.91314697265625 ;  228.91314697265625
-:  240.96029663085938 ;  240.96029663085938
-:  240.96029663085938 ;  240.96029663085938
-:  240.96029663085938 ;  240.96029663085938
-:  240.96029663085938 ;  240.96029663085938
-:  134.9629669189453 ;  134.9629669189453
-:  112.62963104248047 ;  112.62963104248047
-:  90.29629516601562 ;  90.29629516601562
-:  67.96295928955078 ;  67.96295928955078
-:  0 ;  0
-:  33.654972076416016 ;  33.654972076416016
-:  71.59576416015625 ;  71.59576416015625
-:  143.82315063476562 ;  143.82315063476562
-:  200 ;  200
-:  200 ;  200
-:  207.22828674316406 ;  207.22828674316406
-:  228.91314697265625 ;  228.91314697265625
-:  240.96029663085938 ;  240.96029663085938
-:  240.96029663085938 ;  240.96029663085938
-:  240.96029663085938 ;  240.96029663085938
-:  240.96029663085938 ;  240.96029663085938
-:  134.9629669189453 ;  134.9629669189453
-:  112.62963104248047 ;  112.62963104248047
-:  90.29629516601562 ;  90.29629516601562
-:  67.96295928955078 ;  67.96295928955078
-:  0 ;  0
-:  33.654972076416016 ;  33.654972076416016
-:  71.59576416015625 ;  71.59576416015625
-:  143.82315063476562 ;  143.82315063476562
-:  200 ;  200
-:  200 ;  200
-:  207.22828674316406 ;  207.22828674316406
-:  228.91314697265625 ;  228.91314697265625
-:  240.96029663085938 ;  240.96029663085938
-:  240.96029663085938 ;  240.96029663085938
-:  240.96029663085938 ;  240.96029663085938
-:  240.96029663085938 ;  240.96029663085938
-:  134.9629669189453 ;  134.9629669189453
-:  112.62963104248047 ;  112.62963104248047
-:  90.29629516601562 ;  90.29629516601562
-:  67.96295928955078 ;  67.96295928955078
-:  0 ;  0
-:  33.654972076416016 ;  33.654972076416016
-:  71.59576416015625 ;  71.59576416015625
-:  143.82315063476562 ;  143.82315063476562
-:  200 ;  200
-:  200 ;  200
-:  207.22828674316406 ;  207.22828674316406
-:  228.91314697265625 ;  228.91314697265625
-:  240.96029663085938 ;  240.96029663085938
-:  240.96029663085938 ;  240.96029663085938
-:  240.96029663085938 ;  240.96029663085938
-:  240.96029663085938 ;  240.96029663085938
-PMTempCalcnThermNetVw_CalibParam.PmTempMaxVal [FLOAT]  180 ;  180
-PMTempCalcnThermNetVw_CalibParam.PmTempMinVal [FLOAT] -60 ; -60
-PMTempCalcnThermNetVw_CalibParam.PmTempRplcVal [FLOAT]  80 ;  80
-PMTempCalcnThermNetVw_CalibParam.PwmFreqActIvsStep [FLOAT]
-:  0.00039999998989515007 ;  0.00039999998989515007
-PMTempCalcnThermNetVw_CalibParam.PwmFreqActMaxIdx [UINT(8)]
-:  3 ;  3
-PMTempCalcnThermNetVw_CalibParam.PwmFreqActMin [FLOAT]
-:  2500 ;  2500
-PMTempCalcnThermNetVw_CalibParam.RotTimeConstFac_RotTempIniFlt [FLOAT]  0.2849999964237213 ;  0.2849999964237213
-PMTempCalcnThermNetVw_CalibParam.Rth_LuTYaxis [FLOAT,(1,8)]
-:  1 ;  1
-:  1.1720000505447388 ;  1.1720000505447388
-:  1.6430000066757202 ;  1.6430000066757202
-:  2.059000015258789 ;  2.059000015258789
-:  2.450500011444092 ;  2.450500011444092
-:  2.7876999378204346 ;  2.7876999378204346
-:  3.2939999103546143 ;  3.2939999103546143
-:  3.799999952316284 ;  3.799999952316284
-PMTempCalcnThermNetVw_CalibParam.SatValHldTi [UINT(32)]  200 ;  200
-PMTempCalcnThermNetVw_CalibParam.SatValHldTiStep [UINT(32)]  10 ;  10
-PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_CAN_HvOffTi [FLOAT]  600 ;  600
-PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_CAN_VehPrkgTi [FLOAT]  500 ;  500
-PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_FID_ErrHvOff [UINT(8)]  0 ;  0
-PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_FID_ErrNvm [UINT(8)]  0 ;  0
-PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_FID_ErrPrkgTi [UINT(8)]  0 ;  0
-PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_FID_IniHvOff [UINT(8)]  0 ;  0
-PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_FID_IniNvm [UINT(8)]  0 ;  0
-PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_FID_IniPrkgTi [UINT(8)]  0 ;  0
-PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_HwFlt_WindgSnsr [UINT(8)]  0 ;  0
-PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_NVM_TempDifAirGap [FLOAT]  20 ;  20
-PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_NVM_TempDifWindg [FLOAT]  30 ;  30
-PMTempCalcnThermNetVw_CalibParam.SpdActFric_LuTXaxis [FLOAT,(1,8)]
-:  0 ;  0
-:  2000 ;  2000
-:  4700 ;  4700
-:  6000 ;  6000
-:  8000 ;  8000
-:  9000 ;  9000
-:  13000 ;  13000
-:  16000 ;  16000
-PMTempCalcnThermNetVw_CalibParam.SpdActNac_LuTXaxis [FLOAT,(1,8)]
-:  0 ;  0
-:  1000 ;  1000
-:  3000 ;  3000
-:  4500 ;  4500
-:  6000 ;  6000
-:  8000 ;  8000
-:  13000 ;  13000
-:  16000 ;  16000
-PMTempCalcnThermNetVw_CalibParam.SpdAct_RthLuTXaxis [FLOAT,(1,8)]
-:  0 ;  0
-:  2000 ;  2000
-:  4000 ;  4000
-:  6000 ;  6000
-:  8000 ;  8000
-:  10000 ;  10000
-:  13000 ;  13000
-:  16000 ;  16000
-PMTempCalcnThermNetVw_CalibParam.SpdMax [FLOAT]  16000 ;  16000
-PMTempCalcnThermNetVw_CalibParam.TempWindgSnsr_PmTempMax [FLOAT]  180 ;  180
-PMTempCalcnThermNetVw_CalibParam.TimeKeyOff_LuTXaxis [FLOAT,(1,8)]
-:  0 ;  0
-:  240 ;  240
-:  480 ;  480
-:  3404 ;  3404
-:  6328 ;  6328
-:  9252 ;  9252
-:  12176 ;  12176
-:  15100 ;  15100
-PMTempCalcnThermNetVw_CalibParam.efuncFac_LuTYaxis [FLOAT,(1,8)]
-:  1 ;  1
-:  1 ;  1
-:  1 ;  1
-:  0.6215999722480774 ;  0.6215999722480774
-:  0.41029998660087585 ;  0.41029998660087585
-:  0.2502000033855438 ;  0.2502000033855438
-:  0.1501999944448471 ;  0.1501999944448471
-:  0 ;  0
+PmTempCalcnThermNet_CalibParam.RThermRotorAirgap_LuTYaxis [FLOAT,(1,16)] 13.1224002838134766 ; 13.1224002838134766
+:  13.1479997634887695 ; 13.1479997634887695
+:  10.4303998947143555 ; 10.4303998947143555
+:  9.3295001983642578 ; 9.3295001983642578
+:  5.5924000740051270 ; 5.5924000740051270
+:  8.2047004699707031 ; 8.2047004699707031
+:  6.0444998741149902 ; 6.0444998741149902
+:  3.8842000961303711 ; 3.8842000961303711
+:  6.0444998741149902 ; 6.0444998741149902
+:  8.2047004699707031 ; 8.2047004699707031
+:  5.5924000740051270 ; 5.5924000740051270
+:  9.3295001983642578 ; 9.3295001983642578
+:  10.4303998947143555 ; 10.4303998947143555
+:  13.1479997634887695 ; 13.1479997634887695
+:  13.1224002838134766 ; 13.1224002838134766
+:  13.1224002838134766 ; 13.1224002838134766
+PmTempCalcnThermNet_CalibParam.SpdActRTherm_LuTXaxis [FLOAT,(1,16)] -13200.0000000000000000 ; -13200.0000000000000000
+:  -10000.0000000000000000 ; -10000.0000000000000000
+:  -7000.0000000000000000 ; -7000.0000000000000000
+:  -5000.0000000000000000 ; -5000.0000000000000000
+:  -2500.0000000000000000 ; -2500.0000000000000000
+:  -1000.0000000000000000 ; -1000.0000000000000000
+:  -500.0000000000000000 ; -500.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  500.0000000000000000 ; 500.0000000000000000
+:  1000.0000000000000000 ; 1000.0000000000000000
+:  2500.0000000000000000 ; 2500.0000000000000000
+:  5000.0000000000000000 ; 5000.0000000000000000
+:  7000.0000000000000000 ; 7000.0000000000000000
+:  10000.0000000000000000 ; 10000.0000000000000000
+:  13200.0000000000000000 ; 13200.0000000000000000
+:  16000.0000000000000000 ; 16000.0000000000000000
+PmTempCalcnThermNet_CalibParam.CooltFlowRateRtherm_LuTXaxis [FLOAT,(1,16)] 0.5000000000000000 ; 0.5000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  2.0000000000000000 ; 2.0000000000000000
+:  2.5000000000000000 ; 2.5000000000000000
+:  3.0000000000000000 ; 3.0000000000000000
+:  4.0000000000000000 ; 4.0000000000000000
+:  4.5000000000000000 ; 4.5000000000000000
+:  5.0000000000000000 ; 5.0000000000000000
+:  6.0000000000000000 ; 6.0000000000000000
+:  6.5000000000000000 ; 6.5000000000000000
+:  7.0000000000000000 ; 7.0000000000000000
+:  8.0000000000000000 ; 8.0000000000000000
+:  8.5000000000000000 ; 8.5000000000000000
+:  9.0000000000000000 ; 9.0000000000000000
+:  9.5000000000000000 ; 9.5000000000000000
+:  10.0000000000000000 ; 10.0000000000000000
+PmTempCalcnThermNet_CalibParam.RThermRotorCoolt_LuTYaxis [FLOAT,(1,16)] 0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+PmTempCalcnThermNet_CalibParam.RThermStatorWindgEnd [FLOAT] 57.3502006530761719 ; 57.3502006530761719
+PmTempCalcnThermNet_CalibParam.RThermStatorWindg_LuTYaxis [FLOAT,(1,16)] 26.0284748077392578 ; 26.0284748077392578
+:  26.5106506347656250 ; 26.5106506347656250
+:  27.4750003814697266 ; 27.4750003814697266
+:  27.9571743011474609 ; 27.9571743011474609
+:  28.4393501281738281 ; 28.4393501281738281
+:  29.4036998748779297 ; 29.4036998748779297
+:  29.8858757019042969 ; 29.8858757019042969
+:  30.3680496215820313 ; 30.3680496215820313
+:  31.3323993682861328 ; 31.3323993682861328
+:  31.6023502349853516 ; 31.6023502349853516
+:  31.8722991943359375 ; 31.8722991943359375
+:  32.4122009277343750 ; 32.4122009277343750
+:  32.7238731384277344 ; 32.7238731384277344
+:  33.0355491638183594 ; 33.0355491638183594
+:  33.3472251892089844 ; 33.3472251892089844
+:  33.6589012145996094 ; 33.6589012145996094
+PmTempCalcnThermNet_CalibParam.StatorWindgCpTherm [FLOAT] 0.0001149099989561 ; 0.0001149099989561
+PmTempCalcnThermNet_CalibParam.StatorWindgEndCpTherm [FLOAT] 0.0003831800131593 ; 0.0003831800131593
+PmTempCalcnThermNet_CalibParam.RotorCpTherm [FLOAT] 0.0001268600026378 ; 0.0001268600026378
+PmTempCalcnThermNet_CalibParam.IntgTiSampleRot [FLOAT] 0.010 ; 0.010
+PmTempCalcnThermNet_CalibParam.IntgTiSampleWiko [FLOAT] 0.010 ; 0.010
+PmTempCalcnThermNet_CalibParam.IntgTiSampleWik [FLOAT] 0.010 ; 0.010
+PmTempCalcnThermNet_CalibParam.EnaStaWindg_CuLossEstim [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.CuResist_TempRef [FLOAT] 0.0040846997871995 ; 0.0040846997871995
+PmTempCalcnThermNet_CalibParam.MotorPhaseNum_StandStill [FLOAT] 2.0000000000000000 ; 2.0000000000000000
+PmTempCalcnThermNet_CalibParam.MotorPhaseNum_NomOp [FLOAT] 1.5000000000000000 ; 1.5000000000000000
+PmTempCalcnThermNet_CalibParam.TempCoeff_CuResist [FLOAT] 0.0039380001835525 ; 0.0039380001835525
+PmTempCalcnThermNet_CalibParam.TempRef_CuResist [FLOAT] 20.0000000000000000 ; 20.0000000000000000
+PmTempCalcnThermNet_CalibParam.EnaStandStillOp [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.MotSpdThd [FLOAT] 1.0000000000000000 ; 1.0000000000000000
+PmTempCalcnThermNet_CalibParam.CuWikoFac [FLOAT] 0.5519000291824341 ; 0.5519000291824341
+PmTempCalcnThermNet_CalibParam.PlossIdFlatTop_map [FLOAT,(4,16)] 59.7962760925292969 ; 59.7962760925292969
+:  56.9858703613281250 ; 56.9858703613281250
+:  56.6910896301269531 ; 56.6910896301269531
+:  61.3198509216308594 ; 61.3198509216308594
+:  58.0140304565429688 ; 58.0140304565429688
+:  54.0651016235351563 ; 54.0651016235351563
+:  52.5027656555175781 ; 52.5027656555175781
+:  52.9575843811035156 ; 52.9575843811035156
+:  61.9026794433593750 ; 61.9026794433593750
+:  111.9617309570312500 ; 111.9617309570312500
+:  71.3958206176757813 ; 71.3958206176757813
+:  106.1426315307617188 ; 106.1426315307617188
+:  92.0032882690429688 ; 92.0032882690429688
+:  83.9724197387695313 ; 83.9724197387695313
+:  68.4705581665039063 ; 68.4705581665039063
+:  1.9405499696731567 ; 1.9405499696731567
+:  59.7962760925292969 ; 59.7962760925292969
+:  56.9858703613281250 ; 56.9858703613281250
+:  56.6910896301269531 ; 56.6910896301269531
+:  61.3198509216308594 ; 61.3198509216308594
+:  58.0140304565429688 ; 58.0140304565429688
+:  54.0651016235351563 ; 54.0651016235351563
+:  52.5027656555175781 ; 52.5027656555175781
+:  52.9575843811035156 ; 52.9575843811035156
+:  61.9026794433593750 ; 61.9026794433593750
+:  111.9617309570312500 ; 111.9617309570312500
+:  71.3958206176757813 ; 71.3958206176757813
+:  106.1426315307617188 ; 106.1426315307617188
+:  92.0032882690429688 ; 92.0032882690429688
+:  83.9724197387695313 ; 83.9724197387695313
+:  68.4705581665039063 ; 68.4705581665039063
+:  1.9405499696731567 ; 1.9405499696731567
+:  59.7962760925292969 ; 59.7962760925292969
+:  56.9858703613281250 ; 56.9858703613281250
+:  56.6910896301269531 ; 56.6910896301269531
+:  61.3198509216308594 ; 61.3198509216308594
+:  58.0140304565429688 ; 58.0140304565429688
+:  54.0651016235351563 ; 54.0651016235351563
+:  52.5027656555175781 ; 52.5027656555175781
+:  52.9575843811035156 ; 52.9575843811035156
+:  61.9026794433593750 ; 61.9026794433593750
+:  111.9617309570312500 ; 111.9617309570312500
+:  71.3958206176757813 ; 71.3958206176757813
+:  106.1426315307617188 ; 106.1426315307617188
+:  92.0032882690429688 ; 92.0032882690429688
+:  83.9724197387695313 ; 83.9724197387695313
+:  68.4705581665039063 ; 68.4705581665039063
+:  1.9405499696731567 ; 1.9405499696731567
+:  59.7962760925292969 ; 59.7962760925292969
+:  56.9858703613281250 ; 56.9858703613281250
+:  56.6910896301269531 ; 56.6910896301269531
+:  61.3198509216308594 ; 61.3198509216308594
+:  58.0140304565429688 ; 58.0140304565429688
+:  54.0651016235351563 ; 54.0651016235351563
+:  52.5027656555175781 ; 52.5027656555175781
+:  52.9575843811035156 ; 52.9575843811035156
+:  61.9026794433593750 ; 61.9026794433593750
+:  111.9617309570312500 ; 111.9617309570312500
+:  71.3958206176757813 ; 71.3958206176757813
+:  106.1426315307617188 ; 106.1426315307617188
+:  92.0032882690429688 ; 92.0032882690429688
+:  83.9724197387695313 ; 83.9724197387695313
+:  68.4705581665039063 ; 68.4705581665039063
+:  1.9405499696731567 ; 1.9405499696731567
+PmTempCalcnThermNet_CalibParam.PlossIqFlatTop_map [FLOAT,(4,16)] 205.3657836914062500 ; 205.3657836914062500
+:  166.2283782958984375 ; 166.2283782958984375
+:  134.6399993896484375 ; 134.6399993896484375
+:  121.7716827392578125 ; 121.7716827392578125
+:  114.7958984375000000 ; 114.7958984375000000
+:  108.1200027465820313 ; 108.1200027465820313
+:  51.5099983215332031 ; 51.5099983215332031
+:  104.0400009155273438 ; 104.0400009155273438
+:  27.0534591674804688 ; 27.0534591674804688
+:  126.5146789550781250 ; 126.5146789550781250
+:  112.1999969482421875 ; 112.1999969482421875
+:  204.9802246093750000 ; 204.9802246093750000
+:  295.7999877929687500 ; 295.7999877929687500
+:  122.4000015258789063 ; 122.4000015258789063
+:  155.0399932861328125 ; 155.0399932861328125
+:  160.1399993896484375 ; 160.1399993896484375
+:  205.3657836914062500 ; 205.3657836914062500
+:  166.2283782958984375 ; 166.2283782958984375
+:  134.6399993896484375 ; 134.6399993896484375
+:  121.7716827392578125 ; 121.7716827392578125
+:  114.7958984375000000 ; 114.7958984375000000
+:  108.1200027465820313 ; 108.1200027465820313
+:  51.5099983215332031 ; 51.5099983215332031
+:  104.0400009155273438 ; 104.0400009155273438
+:  27.0534591674804688 ; 27.0534591674804688
+:  126.5146789550781250 ; 126.5146789550781250
+:  112.1999969482421875 ; 112.1999969482421875
+:  204.9802246093750000 ; 204.9802246093750000
+:  295.7999877929687500 ; 295.7999877929687500
+:  122.4000015258789063 ; 122.4000015258789063
+:  155.0399932861328125 ; 155.0399932861328125
+:  160.1399993896484375 ; 160.1399993896484375
+:  205.3657836914062500 ; 205.3657836914062500
+:  166.2283782958984375 ; 166.2283782958984375
+:  134.6399993896484375 ; 134.6399993896484375
+:  121.7716827392578125 ; 121.7716827392578125
+:  114.7958984375000000 ; 114.7958984375000000
+:  108.1200027465820313 ; 108.1200027465820313
+:  51.5099983215332031 ; 51.5099983215332031
+:  104.0400009155273438 ; 104.0400009155273438
+:  27.0534591674804688 ; 27.0534591674804688
+:  126.5146789550781250 ; 126.5146789550781250
+:  112.1999969482421875 ; 112.1999969482421875
+:  204.9802246093750000 ; 204.9802246093750000
+:  295.7999877929687500 ; 295.7999877929687500
+:  122.4000015258789063 ; 122.4000015258789063
+:  155.0399932861328125 ; 155.0399932861328125
+:  160.1399993896484375 ; 160.1399993896484375
+:  205.3657836914062500 ; 205.3657836914062500
+:  166.2283782958984375 ; 166.2283782958984375
+:  134.6399993896484375 ; 134.6399993896484375
+:  121.7716827392578125 ; 121.7716827392578125
+:  114.7958984375000000 ; 114.7958984375000000
+:  108.1200027465820313 ; 108.1200027465820313
+:  51.5099983215332031 ; 51.5099983215332031
+:  104.0400009155273438 ; 104.0400009155273438
+:  27.0534591674804688 ; 27.0534591674804688
+:  126.5146789550781250 ; 126.5146789550781250
+:  112.1999969482421875 ; 112.1999969482421875
+:  204.9802246093750000 ; 204.9802246093750000
+:  295.7999877929687500 ; 295.7999877929687500
+:  122.4000015258789063 ; 122.4000015258789063
+:  155.0399932861328125 ; 155.0399932861328125
+:  160.1399993896484375 ; 160.1399993896484375
+PmTempCalcnThermNet_CalibParam.IdMin [FLOAT] -750.0000000000000000 ; -750.0000000000000000
+PmTempCalcnThermNet_CalibParam.IdIvsStep [FLOAT] 0.0199999995529652 ; 0.0199999995529652
+PmTempCalcnThermNet_CalibParam.IdMaxIdx [UINT(8)] 15 ; 15
+PmTempCalcnThermNet_CalibParam.IqMin [FLOAT] -600.0000000000000000 ; -600.0000000000000000
+PmTempCalcnThermNet_CalibParam.IqIvsStep [FLOAT] 0.0133333336561918 ; 0.0133333336561918
+PmTempCalcnThermNet_CalibParam.IqMaxIdx [UINT(8)] 15 ; 15
+PmTempCalcnThermNet_CalibParam.PlossIdSpcVec_map [FLOAT,(4,16)] 58.6237983703613281 ; 58.6237983703613281
+:  55.8684997558593750 ; 55.8684997558593750
+:  55.5794982910156250 ; 55.5794982910156250
+:  60.1175003051757813 ; 60.1175003051757813
+:  56.8764991760253906 ; 56.8764991760253906
+:  53.0050010681152344 ; 53.0050010681152344
+:  51.4733009338378906 ; 51.4733009338378906
+:  51.9192008972167969 ; 51.9192008972167969
+:  60.6888999938964844 ; 60.6888999938964844
+:  109.7664031982421875 ; 109.7664031982421875
+:  69.9959030151367188 ; 69.9959030151367188
+:  104.0614013671875000 ; 104.0614013671875000
+:  90.1993026733398438 ; 90.1993026733398438
+:  82.3258972167968750 ; 82.3258972167968750
+:  67.1279983520507813 ; 67.1279983520507813
+:  1.9025000333786011 ; 1.9025000333786011
+:  58.6237983703613281 ; 58.6237983703613281
+:  55.8684997558593750 ; 55.8684997558593750
+:  55.5794982910156250 ; 55.5794982910156250
+:  60.1175003051757813 ; 60.1175003051757813
+:  56.8764991760253906 ; 56.8764991760253906
+:  53.0050010681152344 ; 53.0050010681152344
+:  51.4733009338378906 ; 51.4733009338378906
+:  51.9192008972167969 ; 51.9192008972167969
+:  60.6888999938964844 ; 60.6888999938964844
+:  109.7664031982421875 ; 109.7664031982421875
+:  69.9959030151367188 ; 69.9959030151367188
+:  104.0614013671875000 ; 104.0614013671875000
+:  90.1993026733398438 ; 90.1993026733398438
+:  82.3258972167968750 ; 82.3258972167968750
+:  67.1279983520507813 ; 67.1279983520507813
+:  1.9025000333786011 ; 1.9025000333786011
+:  58.6237983703613281 ; 58.6237983703613281
+:  55.8684997558593750 ; 55.8684997558593750
+:  55.5794982910156250 ; 55.5794982910156250
+:  60.1175003051757813 ; 60.1175003051757813
+:  56.8764991760253906 ; 56.8764991760253906
+:  53.0050010681152344 ; 53.0050010681152344
+:  51.4733009338378906 ; 51.4733009338378906
+:  51.9192008972167969 ; 51.9192008972167969
+:  60.6888999938964844 ; 60.6888999938964844
+:  109.7664031982421875 ; 109.7664031982421875
+:  69.9959030151367188 ; 69.9959030151367188
+:  104.0614013671875000 ; 104.0614013671875000
+:  90.1993026733398438 ; 90.1993026733398438
+:  82.3258972167968750 ; 82.3258972167968750
+:  67.1279983520507813 ; 67.1279983520507813
+:  1.9025000333786011 ; 1.9025000333786011
+:  58.6237983703613281 ; 58.6237983703613281
+:  55.8684997558593750 ; 55.8684997558593750
+:  55.5794982910156250 ; 55.5794982910156250
+:  60.1175003051757813 ; 60.1175003051757813
+:  56.8764991760253906 ; 56.8764991760253906
+:  53.0050010681152344 ; 53.0050010681152344
+:  51.4733009338378906 ; 51.4733009338378906
+:  51.9192008972167969 ; 51.9192008972167969
+:  60.6888999938964844 ; 60.6888999938964844
+:  109.7664031982421875 ; 109.7664031982421875
+:  69.9959030151367188 ; 69.9959030151367188
+:  104.0614013671875000 ; 104.0614013671875000
+:  90.1993026733398438 ; 90.1993026733398438
+:  82.3258972167968750 ; 82.3258972167968750
+:  67.1279983520507813 ; 67.1279983520507813
+:  1.9025000333786011 ; 1.9025000333786011
+PmTempCalcnThermNet_CalibParam.PlossIqSpcVec_map [FLOAT,(4,16)] 201.3390045166015625 ; 201.3390045166015625
+:  162.9689941406250000 ; 162.9689941406250000
+:  132.0000000000000000 ; 132.0000000000000000
+:  119.3840026855468750 ; 119.3840026855468750
+:  112.5449981689453125 ; 112.5449981689453125
+:  106.0000000000000000 ; 106.0000000000000000
+:  50.5000000000000000 ; 50.5000000000000000
+:  102.0000000000000000 ; 102.0000000000000000
+:  26.5230007171630859 ; 26.5230007171630859
+:  124.0339965820312500 ; 124.0339965820312500
+:  110.0000000000000000 ; 110.0000000000000000
+:  200.9609985351562500 ; 200.9609985351562500
+:  290.0000000000000000 ; 290.0000000000000000
+:  120.0000000000000000 ; 120.0000000000000000
+:  152.0000000000000000 ; 152.0000000000000000
+:  157.0000000000000000 ; 157.0000000000000000
+:  201.3390045166015625 ; 201.3390045166015625
+:  162.9689941406250000 ; 162.9689941406250000
+:  132.0000000000000000 ; 132.0000000000000000
+:  119.3840026855468750 ; 119.3840026855468750
+:  112.5449981689453125 ; 112.5449981689453125
+:  106.0000000000000000 ; 106.0000000000000000
+:  50.5000000000000000 ; 50.5000000000000000
+:  102.0000000000000000 ; 102.0000000000000000
+:  26.5230007171630859 ; 26.5230007171630859
+:  124.0339965820312500 ; 124.0339965820312500
+:  110.0000000000000000 ; 110.0000000000000000
+:  200.9609985351562500 ; 200.9609985351562500
+:  290.0000000000000000 ; 290.0000000000000000
+:  120.0000000000000000 ; 120.0000000000000000
+:  152.0000000000000000 ; 152.0000000000000000
+:  157.0000000000000000 ; 157.0000000000000000
+:  201.3390045166015625 ; 201.3390045166015625
+:  162.9689941406250000 ; 162.9689941406250000
+:  132.0000000000000000 ; 132.0000000000000000
+:  119.3840026855468750 ; 119.3840026855468750
+:  112.5449981689453125 ; 112.5449981689453125
+:  106.0000000000000000 ; 106.0000000000000000
+:  50.5000000000000000 ; 50.5000000000000000
+:  102.0000000000000000 ; 102.0000000000000000
+:  26.5230007171630859 ; 26.5230007171630859
+:  124.0339965820312500 ; 124.0339965820312500
+:  110.0000000000000000 ; 110.0000000000000000
+:  200.9609985351562500 ; 200.9609985351562500
+:  290.0000000000000000 ; 290.0000000000000000
+:  120.0000000000000000 ; 120.0000000000000000
+:  152.0000000000000000 ; 152.0000000000000000
+:  157.0000000000000000 ; 157.0000000000000000
+:  201.3390045166015625 ; 201.3390045166015625
+:  162.9689941406250000 ; 162.9689941406250000
+:  132.0000000000000000 ; 132.0000000000000000
+:  119.3840026855468750 ; 119.3840026855468750
+:  112.5449981689453125 ; 112.5449981689453125
+:  106.0000000000000000 ; 106.0000000000000000
+:  50.5000000000000000 ; 50.5000000000000000
+:  102.0000000000000000 ; 102.0000000000000000
+:  26.5230007171630859 ; 26.5230007171630859
+:  124.0339965820312500 ; 124.0339965820312500
+:  110.0000000000000000 ; 110.0000000000000000
+:  200.9609985351562500 ; 200.9609985351562500
+:  290.0000000000000000 ; 290.0000000000000000
+:  120.0000000000000000 ; 120.0000000000000000
+:  152.0000000000000000 ; 152.0000000000000000
+:  157.0000000000000000 ; 157.0000000000000000
+PmTempCalcnThermNet_CalibParam.PwmFreqActMin [FLOAT] 5500.0000000000000000 ; 5500.0000000000000000
+PmTempCalcnThermNet_CalibParam.PwmFreqActIvsStep [FLOAT] 0.0006666666595265 ; 0.0006666666595265
+PmTempCalcnThermNet_CalibParam.PwmFreqActMaxIdx [UINT(8)] 3 ; 3
+PmTempCalcnThermNet_CalibParam.PlossFric_LuTYaxis [FLOAT,(1,16)] 604.4121093750000000 ; 604.4121093750000000
+:  425.1682128906250000 ; 425.1682128906250000
+:  172.1130065917968750 ; 172.1130065917968750
+:  238.9965057373046875 ; 238.9965057373046875
+:  75.2470016479492188 ; 75.2470016479492188
+:  16.7833995819091797 ; 16.7833995819091797
+:  8.3916997909545898 ; 8.3916997909545898
+:  0.0000000000000000 ; 0.0000000000000000
+:  8.3916997909545898 ; 8.3916997909545898
+:  16.7833995819091797 ; 16.7833995819091797
+:  75.2470016479492188 ; 75.2470016479492188
+:  238.9965057373046875 ; 238.9965057373046875
+:  172.1130065917968750 ; 172.1130065917968750
+:  425.1682128906250000 ; 425.1682128906250000
+:  604.4121093750000000 ; 604.4121093750000000
+:  917.9860839843750000 ; 917.9860839843750000
+PmTempCalcnThermNet_CalibParam.SpdActFric_LuTXaxis [FLOAT,(1,16)] -13200.0000000000000000 ; -13200.0000000000000000
+:  -10000.0000000000000000 ; -10000.0000000000000000
+:  -7000.0000000000000000 ; -7000.0000000000000000
+:  -5000.0000000000000000 ; -5000.0000000000000000
+:  -2500.0000000000000000 ; -2500.0000000000000000
+:  -1000.0000000000000000 ; -1000.0000000000000000
+:  -500.0000000000000000 ; -500.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  500.0000000000000000 ; 500.0000000000000000
+:  1000.0000000000000000 ; 1000.0000000000000000
+:  2500.0000000000000000 ; 2500.0000000000000000
+:  5000.0000000000000000 ; 5000.0000000000000000
+:  7000.0000000000000000 ; 7000.0000000000000000
+:  10000.0000000000000000 ; 10000.0000000000000000
+:  13200.0000000000000000 ; 13200.0000000000000000
+:  16000.0000000000000000 ; 16000.0000000000000000
+PmTempCalcnThermNet_CalibParam.PlossNac_LuTYaxis [FLOAT,(1,16)] 3.8382999897003174 ; 3.8382999897003174
+:  2.7820999622344971 ; 2.7820999622344971
+:  3.1651000976562500 ; 3.1651000976562500
+:  1.4128999710083008 ; 1.4128999710083008
+:  2.0376999378204346 ; 2.0376999378204346
+:  1.1835999488830566 ; 1.1835999488830566
+:  0.5918099880218506 ; 0.5918099880218506
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.5918099880218506 ; 0.5918099880218506
+:  1.1835999488830566 ; 1.1835999488830566
+:  2.0376999378204346 ; 2.0376999378204346
+:  1.4128999710083008 ; 1.4128999710083008
+:  3.1651000976562500 ; 3.1651000976562500
+:  2.7820999622344971 ; 2.7820999622344971
+:  3.8382999897003174 ; 3.8382999897003174
+:  4.1865000724792480 ; 4.1865000724792480
+PmTempCalcnThermNet_CalibParam.SpdActNac_LuTXaxis [FLOAT,(1,16)] -13200.0000000000000000 ; -13200.0000000000000000
+:  -10000.0000000000000000 ; -10000.0000000000000000
+:  -7000.0000000000000000 ; -7000.0000000000000000
+:  -5000.0000000000000000 ; -5000.0000000000000000
+:  -2500.0000000000000000 ; -2500.0000000000000000
+:  -1000.0000000000000000 ; -1000.0000000000000000
+:  -500.0000000000000000 ; -500.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  500.0000000000000000 ; 500.0000000000000000
+:  1000.0000000000000000 ; 1000.0000000000000000
+:  2500.0000000000000000 ; 2500.0000000000000000
+:  5000.0000000000000000 ; 5000.0000000000000000
+:  7000.0000000000000000 ; 7000.0000000000000000
+:  10000.0000000000000000 ; 10000.0000000000000000
+:  13200.0000000000000000 ; 13200.0000000000000000
+:  16000.0000000000000000 ; 16000.0000000000000000
+PmTempCalcnThermNet_CalibParam.DiHwFltCheckStMachn [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.EnaTempWndgRplcmntVal [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.TwoValAvgFacInvs [FLOAT] 0.5000000000000000 ; 0.5000000000000000
+PmTempCalcnThermNet_CalibParam.ThreeValAvgFacInvs [FLOAT] 0.3334000110626221 ; 0.3334000110626221
+PmTempCalcnThermNet_CalibParam.EnaAvgWindTempCalc [UINT(8)] 1 ; 1
+PmTempCalcnThermNet_CalibParam.EnaCoolInp2TempCalc [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.CoolFlowRate_LuTXaxis [FLOAT,(1,16)] 0.5000000000000000 ; 0.5000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  2.0000000000000000 ; 2.0000000000000000
+:  2.5000000000000000 ; 2.5000000000000000
+:  3.0000000000000000 ; 3.0000000000000000
+:  4.0000000000000000 ; 4.0000000000000000
+:  4.5000000000000000 ; 4.5000000000000000
+:  5.0000000000000000 ; 5.0000000000000000
+:  6.0000000000000000 ; 6.0000000000000000
+:  6.5000000000000000 ; 6.5000000000000000
+:  7.0000000000000000 ; 7.0000000000000000
+:  8.0000000000000000 ; 8.0000000000000000
+:  8.5000000000000000 ; 8.5000000000000000
+:  9.0000000000000000 ; 9.0000000000000000
+:  9.5000000000000000 ; 9.5000000000000000
+:  10.0000000000000000 ; 10.0000000000000000
+PmTempCalcnThermNet_CalibParam.CooltTemp2_CoolTemp1Fac_LuTYaxis [FLOAT,(1,16)] 1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+PmTempCalcnThermNet_CalibParam.CooltTemp2_PmTempFac_LuTYaxis [FLOAT,(1,16)] 0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+PmTempCalcnThermNet_CalibParam.IniPmTempRplcVal [FLOAT] 25.0000000000000000 ; 25.0000000000000000
+PmTempCalcnThermNet_CalibParam.IniValCalcnMod [UINT(8)] 2 ; 2
+PmTempCalcnThermNet_CalibParam.EnaHvOffTime [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.DiSelAmbTempWindg [UINT(8)] 1 ; 1
+PmTempCalcnThermNet_CalibParam.DiSelAmbTempPm [UINT(8)] 1 ; 1
+PmTempCalcnThermNet_CalibParam.CoolDownTimeConstPm [FLOAT] -0.0003175199963152 ; -0.0003175199963152
+PmTempCalcnThermNet_CalibParam.CoolDownTimeWindg [FLOAT] -0.1343999952077866 ; -0.1343999952077866
+PmTempCalcnThermNet_CalibParam.CompareTimeConstFacWindg [FLOAT] 5000.0000000000000000 ; 5000.0000000000000000
+PmTempCalcnThermNet_CalibParam.CompareTimeConstFacWindgAmb [FLOAT] 250.0000000000000000 ; 250.0000000000000000
+PmTempCalcnThermNet_CalibParam.CompareTimeConstFacPmAmb [FLOAT] 700.0000000000000000 ; 700.0000000000000000
+PmTempCalcnThermNet_CalibParam.CompareTimeConstFacPm [FLOAT] 17500.0000000000000000 ; 17500.0000000000000000
+PmTempCalcnThermNet_CalibParam.IniWindgTempRplcVal [FLOAT] 30.0000000000000000 ; 30.0000000000000000
+PmTempCalcnThermNet_CalibParam.WindgIniValCalcnMod [UINT(8)] 2 ; 2
+PmTempCalcnThermNet_CalibParam.RotTimeConstFac_RotTempIniFlt [FLOAT] 900.0000000000000000 ; 900.0000000000000000
+PmTempCalcnThermNet_CalibParam.FuncTiSlc [FLOAT] 0.0099999997764826 ; 0.0099999997764826
+PmTempCalcnThermNet_CalibParam.DiIntClkCntr [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.ClckCntStep [UINT(32)] 1 ; 1
+PmTempCalcnThermNet_CalibParam.ClckCntMax [UINT(32)] 100000 ; 100000
+PmTempCalcnThermNet_CalibParam.DiThermNetCalcn [UINT(8)] 1 ; 1
+PmTempCalcnThermNet_CalibParam.PmTempRplcVal [FLOAT] 100.0000000000000000 ; 100.0000000000000000
+PmTempCalcnThermNet_CalibParam.StaWindgSnsrReplcmtVal [FLOAT] 80.0000000000000000 ; 80.0000000000000000
+PmTempCalcnThermNet_CalibParam.DiThermNetCalcn_UseTempWindgSnsr [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.TempWindgSnsr_PmTempMax [FLOAT] 130.0000000000000000 ; 130.0000000000000000
+PmTempCalcnThermNet_CalibParam.DiSimnPmTemp [UINT(8)] 1 ; 1
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_IniHvOff [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_IniPrkgTi [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_IniNvm [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_HwFlt_WindgSnsr1 [UINT(8)] 1 ; 1
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_HwFlt_WindgSnsr2 [UINT(8)] 1 ; 1
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_HwFlt_WindgSnsr3 [UINT(8)] 1 ; 1
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_ErrHvOff [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_ErrPrkgTi [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_ErrNvm [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_NVM_Temp1 [FLOAT] 20.0000000000000000 ; 20.0000000000000000
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_NVM_Temp2 [FLOAT] 30.0000000000000000 ; 30.0000000000000000
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_NVM_Temp3 [FLOAT] 30.0000000000000000 ; 30.0000000000000000
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_CAN_VehPrkgTi [FLOAT] 500.0000000000000000 ; 500.0000000000000000
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_CAN_HvOffTi [FLOAT] 600.0000000000000000 ; 600.0000000000000000
+PmTempCalcnThermNet_CalibParam.ConvTimeOff_Secs [FLOAT] 60.0000000000000000 ; 60.0000000000000000
+PmTempCalcnThermNet_CalibParam.GearRatioInvs [FLOAT] 0.0082895997911692 ; 0.0082895997911692
+PmTempCalcnThermNet_CalibParam.VehMovmnt_MinSpdThd [FLOAT] 10.0000000000000000 ; 10.0000000000000000
+PmTempCalcnThermNet_CalibParam.EnaVehSpdChck [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.DiSimnPmTemp_HwFlt [UINT(8)] 1 ; 1
+PmTempCalcnThermNet_CalibParam.StatorWindgTempMaxVal [FLOAT] 220.0000000000000000 ; 220.0000000000000000
+PmTempCalcnThermNet_CalibParam.StatorWindgTempMinVal [FLOAT] -40.0000000000000000 ; -40.0000000000000000
+PmTempCalcnThermNet_CalibParam.StatorWindgEndTempMaxVal [FLOAT] 220.0000000000000000 ; 220.0000000000000000
+PmTempCalcnThermNet_CalibParam.StatorWindgEndTempMinVal [FLOAT] -40.0000000000000000 ; -40.0000000000000000
+PmTempCalcnThermNet_CalibParam.PmTempMaxVal [FLOAT] 220.0000000000000000 ; 220.0000000000000000
+PmTempCalcnThermNet_CalibParam.PmTempMinVal [FLOAT] -40.0000000000000000 ; -40.0000000000000000
+PmTempCalcnThermNet_CalibParam.UseSnsrValAsWindgEndTemp [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.FeLossSpdAct_LUTXaxis [FLOAT,(1,16)] -13200.0000000000000000 ; -13200.0000000000000000
+:  -10000.0000000000000000 ; -10000.0000000000000000
+:  -7000.0000000000000000 ; -7000.0000000000000000
+:  -5000.0000000000000000 ; -5000.0000000000000000
+:  -2500.0000000000000000 ; -2500.0000000000000000
+:  -1000.0000000000000000 ; -1000.0000000000000000
+:  -500.0000000000000000 ; -500.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  500.0000000000000000 ; 500.0000000000000000
+:  1000.0000000000000000 ; 1000.0000000000000000
+:  2500.0000000000000000 ; 2500.0000000000000000
+:  5000.0000000000000000 ; 5000.0000000000000000
+:  7000.0000000000000000 ; 7000.0000000000000000
+:  10000.0000000000000000 ; 10000.0000000000000000
+:  13200.0000000000000000 ; 13200.0000000000000000
+:  16000.0000000000000000 ; 16000.0000000000000000
+PmTempCalcnThermNet_CalibParam.FeLossRotDistbnFac_LuTYaxis [FLOAT,(1,16)] 0.2483499944210052 ; 0.2483499944210052
+:  0.2317100018262863 ; 0.2317100018262863
+:  0.2020100057125092 ; 0.2020100057125092
+:  0.1722999960184097 ; 0.1722999960184097
+:  0.1366499960422516 ; 0.1366499960422516
+:  0.1010000035166740 ; 0.1010000035166740
+:  0.0772370025515556 ; 0.0772370025515556
+:  0.0396090000867844 ; 0.0396090000867844
+:  0.0772370025515556 ; 0.0772370025515556
+:  0.1010000035166740 ; 0.1010000035166740
+:  0.1366499960422516 ; 0.1366499960422516
+:  0.1722999960184097 ; 0.1722999960184097
+:  0.2020100057125092 ; 0.2020100057125092
+:  0.2317100018262863 ; 0.2317100018262863
+:  0.2483499944210052 ; 0.2483499944210052
+:  0.2574599981307983 ; 0.2574599981307983
+PmTempCalcnThermNet_CalibParam.CuResistSpdCoeff2 [FLOAT] 0.0000000057784999 ; 0.0000000057784999
 PerfIndcrCalcn_CalibParam.ParamtoavoidzerodivPerfIndTemp [FLOAT]  1 ;  1
 PerfIndcrCalcn_CalibParam.ThdEMPmTempDrtgFac [FLOAT]  0.5 ;  0.5
 PerfIndcrCalcn_CalibParam.ThdEMStatorTempDrtgFac [FLOAT]  0.5 ;  0.5
diff --git a/src/fw_cu/build/a2l/A2L_files.inc b/src/fw_cu/build/a2l/A2L_files.inc
index 512972007..490db0973 100644
--- a/src/fw_cu/build/a2l/A2L_files.inc
+++ b/src/fw_cu/build/a2l/A2L_files.inc
@@ -42,7 +42,7 @@ A2L_SLAVE_FILES = $(DEFAULT_BUILD_ROOT)\\a2l\\Add.a2l \\
                   $(A2L_SLAVE_PerfIndcrCalcn) \\
                   $(A2L_SLAVE_PhaFailDetn) \\
                   $(A2L_SLAVE_PmTempCalcnBackEmf) \\
-                  $(A2L_SLAVE_PmTempCalcnThermNetVw) \\
+                  $(A2L_SLAVE_PmTempCalcnThermNet) \\
                   $(A2L_SLAVE_PtLimnCalcn) \\
                   $(A2L_SLAVE_PwmSpCalcn) \\
                   $(A2L_SLAVE_PwmSpMgr) \\
diff --git a/src/fw_cu/build/a2l/Add.a2l b/src/fw_cu/build/a2l/Add.a2l
index 407cb5282..d25d1b99b 100644
--- a/src/fw_cu/build/a2l/Add.a2l
+++ b/src/fw_cu/build/a2l/Add.a2l
@@ -33109,7 +33109,7 @@ ASAP2_VERSION 1 60
             TopAscActr
             SftyTqEstimrCurMdl
             SftyRslvrOffsHndlr
-            PmTempCalcnThermNetVw
+            PmTempCalcnThermNet
             TqPrednIpmSpCalcn
             PtLimnCalcn
             IpmCtrl
diff --git a/src/fw_cu/build/a2l/Measurements-to-Timeslices-Mapping.csv b/src/fw_cu/build/a2l/Measurements-to-Timeslices-Mapping.csv
index c7a5c6069..c00cae26f 100644
--- a/src/fw_cu/build/a2l/Measurements-to-Timeslices-Mapping.csv
+++ b/src/fw_cu/build/a2l/Measurements-to-Timeslices-Mapping.csv
@@ -1100,7 +1100,7 @@ DrvCtrlSdlRbl10msIvtrHvAcBusBarThermMdl.RunTi,Core_2,C2_10ms,10,,,DRCO
 DrvCtrlSdlRbl10msIvtrSleepTiCalcn.RunTi,Core_2,C2_10ms,10,,,DRCO
 DrvCtrlSdlRbl10msPerfIndcrCalcn.RunTi,Core_2,C2_10ms,10,,,DRCO
 DrvCtrlSdlRbl10msPhaFailDetn.RunTi,Core_2,C2_10ms,10,,,DRCO
-DrvCtrlSdlRbl10msPmTempCalcnThermNetVw.RunTi,Core_2,C2_10ms,10,,,DRCO
+DrvCtrlSdlRbl10msPmTempCalcnThermNet.RunTi,Core_2,C2_10ms,10,,,DRCO
 DrvCtrlSdlRbl10msTqMgr.RunTi,Core_2,C2_10ms,10,,,DRCO
 DrvCtrlSdlRbl128msC2cSend.RunTi,Core_2,C2_128ms,128,,,DRCO
 DrvCtrlSdlRbl128msClm.RunTi,Core_2,C2_128ms,128,,,DRCO
@@ -5318,71 +5318,107 @@ OruTOStatusCnt,Core_0,C0_10ms_Slow,10,,,BSW
 PMode.PMode_Config,Core_0,C0_1ms_TimeTask,1,,,BSW
 PMode.PMode_MaxDistReached,Core_0,C0_1ms_TimeTask,1,,,BSW
 PMode.PMode_SigSts,Core_0,C0_1ms_TimeTask,1,,,BSW
-PMTempCalcnThermNetVw_AlvCntr,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_InputData.CAN_HvOffTi,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_InputData.CAN_VehPrkgTi,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_InputData.EmCooltFlow,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_InputData.EmTempCooltInlet,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_InputData.FID_ErrHvOff,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_InputData.FID_ErrNvm,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_InputData.FID_ErrPrkgTi,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_InputData.FID_IniHvOff,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_InputData.FID_IniNvm,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_InputData.FID_IniPrkgTi,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_InputData.HwFlt_WindSnsr,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_InputData.IdActFlt,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_InputData.IqActFlt,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_InputData.ModlnModAct,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_InputData.NVM_AirgapTemp,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_InputData.NVM_PmTemp,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_InputData.NVM_StatorTemp,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_InputData.PwmFrqAct,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_InputData.SpdAct,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_InputData.TempWindgSnsr,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.IdActFlt_f,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.IdActFlt_k,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.AirGapTempCalcd,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.AirGapTempFacLuT,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.ClckCntRslt,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.DeltaLossTN,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.DeltaTempTN,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.Fac_PlossIacN,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.IniPmTemp,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.IniPmTempEfunc,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.IqActFlt_f,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.IqActFlt_k,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.LongSwtOffTimeSts,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.OffTime,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.PlossCurrD,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.PlossCurrQ,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.PlossFric,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.PlossTotCalcd,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.PmTempEstLimn,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.PmTempReplcmtVal,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.PmTempReplcmtVal_DftSt,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.PmTempSatFlg,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.PmTempUnitDly,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.PwmFrqAct_f,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.PwmFrqAct_k,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.ResRotLutOutput,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.SatFlgClckCntRslt,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.SelAmbTempSts,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.TempDifAirGap,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.TempDifOld,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.TempDifWindg,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.TempNew,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.TempWindgSnsr_PmTempLimn,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.TempWindgSnsr_PmTempLimnSts,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.TiDurn_PostRotTempIniFlt,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.TrigDetmnIniVal,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.TrigIniValCalc,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_MeasSig.eFuncFacLuT,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_OutputData.AirGapTempCalcd,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_OutputData.PmTempCalcnState,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_OutputData.PmTempThermNet,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_OutputData.PmTempThermNetStsWord,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_OutputData.RotTempFlt,Core_2,C2_10ms,10,,,DRCO
-PMTempCalcnThermNetVw_OutputData.StatorTemp,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_AlvCntr,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_InputData.CAN_HvOffTi,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_InputData.CAN_VehPrkgTi,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_InputData.EmCooltFlow,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_InputData.EmTempCooltInlet,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_InputData.FID_ErrHvOff,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_InputData.FID_ErrNvm,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_InputData.FID_ErrPrkgTi,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_InputData.FID_IniHvOff,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_InputData.FID_IniNvm,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_InputData.FID_IniPrkgTi,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_InputData.HwFlt_WindSnsr1,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_InputData.HwFlt_WindSnsr2,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_InputData.HwFlt_WindSnsr3,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_InputData.IdActFlt,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_InputData.IqActFlt,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_InputData.ModlnModAct,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_InputData.NVM_Temp1,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_InputData.NVM_Temp2,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_InputData.NVM_Temp3,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_InputData.SpdAct,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_InputData.TempWindgSnsr1,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_InputData.TempWindgSnsr2,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_InputData.TempWindgSnsr3,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_InputData.PwmFrqAct,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.ClckCntRslt,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.DeltaLossTN,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.DeltaTempTN,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.EmCoolInp2Temp,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.IniPmTemp,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.IniPmTempEfunc,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.IniWindgTempEfunc,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.PlossCurrD,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.PlossCurrQ,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.PlossFric,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.PlossNac,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.PlossRotor,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.PlossTotCalcd,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.PmTempCalcnState,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.PmTempEstLimn,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.PmTempReplcmtVal,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.PmTempReplcmtVal_DftSt,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.PmTempSatFlg,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.PmTempStsWord,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.PmTempUnitDly,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.PwrLossCuEstm,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.PwrLossFeRot,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.PwrLossFeSta,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.PwrLossWiko,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.RThermRotorCooltFlow,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.RThermRotorSpd,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.RThermStatorWindg,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.ResRotLutOutput,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.RotorLongSwtOffTimeSts,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.SelAmbTempSts,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.SelWndgAmbTempSts,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.StatorWindgTempSatFlg,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.StatortWindgEndTempEstLimn,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.StatortWindgEndTempSatFlg,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.StattorWindgTempEstLimn,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.TempAmbPm,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.TempAmbWindg,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.TempOffPm,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.TempWindgSnsr_PmTempLimn,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.TempWindgSnsr_PmTempLimnSts,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.TiDurn_PostRotTempIniFlt,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.TrigDetmnIniVal,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.TrigRotorIniValCalc,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.TrigWndgIniValCalc,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.WindgLongSwtOffTimeSts,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.WindgSnsrFlt_SfChart,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.WndgEndTempEstUnitDly,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.IdActFlt_f,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.IdActFlt_k,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.IntgNodeTempRotor,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.IntgNodeTempStatorWindg,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.IntgNodeTempStatorWindgEnd,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.ResFeLossRotDistbnFac,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.IqActFlt_f,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.IqActFlt_k,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.MotorIronLoss,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.PwmFrqAct_f,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.PwmFrqAct_k,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.PwrLossWikNut,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.TempWindgSnsrAvgVal,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_MeasSig.TimeOut_NvmDataValidityFlag,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_OutputData.PmTempEst,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_OutputData.PmTempIniFlt,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_OutputData.PmTempThermNetVld,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_OutputData.StatorWindgEndTemp,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_OutputData.StatorWindgTemp,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNet_OutputData.TempWindgSnsrAvgVal,Core_2,C2_10ms,10,,,DRCO
+X_SPmTempCalc4__atorUnit_Delay1,Core_2,C2_10ms,10,,,DRCO
+X_SPmTempCalc5___WindingEndTemp,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNetPmTemp,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNetWindgTempSnrAvg,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNetWindgTempCalcn,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNetWindgEndTempCalcn,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNetIniFlt,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNetPmTempVld,Core_2,C2_10ms,10,,,DRCO
+PmTempCalcnThermNetState,Core_2,C2_10ms,10,,,DRCO
 Psr_DiagNoComRequested,Core_0,C0_2ms_SchMTask,10,,,BSW
 PSR_KL15_Status,Core_0,C0_2ms_SchMTask,10,,,BSW
 Psr_NachlaufTimer,Core_0,C0_2ms_SchMTask,10,,,BSW
@@ -8242,8 +8278,8 @@ DrvCtrlSdlRbl10msIpmCtrl.CycTi,Core_2,C2_10ms,10,,,SWIT
 DrvCtrlSdlRbl10msIpmCtrl.StartTi,Core_2,C2_10ms,10,,,SWIT
 DrvCtrlSdlRbl10msPerfIndcrCalcn.CycTi,Core_2,C2_10ms,10,,,SWIT
 DrvCtrlSdlRbl10msPerfIndcrCalcn.StartTi,Core_2,C2_10ms,10,,,SWIT
-DrvCtrlSdlRbl10msPmTempCalcnThermNetVw.CycTi,Core_2,C2_10ms,10,,,SWIT
-DrvCtrlSdlRbl10msPmTempCalcnThermNetVw.StartTi,Core_2,C2_10ms,10,,,SWIT
+DrvCtrlSdlRbl10msPmTempCalcnThermNet.CycTi,Core_2,C2_10ms,10,,,SWIT
+DrvCtrlSdlRbl10msPmTempCalcnThermNet.StartTi,Core_2,C2_10ms,10,,,SWIT
 DrvCtrlSdlRbl10msTqMgr.CycTi,Core_2,C2_10ms,10,,,SWIT
 DrvCtrlSdlRbl10msTqMgr.StartTi,Core_2,C2_10ms,10,,,SWIT
 DrvCtrlSdlRbl128msC2cSend.CycTi,Core_2,C2_128ms,128,,,SWIT
diff --git a/src/fw_cu/build/qaccfg/DRCO/FileList.txt b/src/fw_cu/build/qaccfg/DRCO/FileList.txt
index 01ce5a17f..8f3808c72 100644
--- a/src/fw_cu/build/qaccfg/DRCO/FileList.txt
+++ b/src/fw_cu/build/qaccfg/DRCO/FileList.txt
@@ -64,7 +64,7 @@ $(SOURCE_CODE_ROOT)\\Inv\\ValMeasAndProc\\IvtrDcLinkThermMdl
 $(SOURCE_CODE_ROOT)\\Inv\\ValMeasAndProc\\IvtrHvAcBusBarThermMdl
 $(SOURCE_CODE_ROOT)\\Inv\\ValMeasAndProc\\IvtrThermMdl
 $(SOURCE_CODE_ROOT)\\Inv\\ValMeasAndProc\\PmTempCalcnBackEmf
-$(SOURCE_CODE_ROOT)\\Inv\\ValMeasAndProc\\PmTempCalcnThermNetVw
+$(SOURCE_CODE_ROOT)\\Inv\\ValMeasAndProc\\PmTempCalcnThermNet
 $(SOURCE_CODE_ROOT)\\Inv\\ValMeasAndProc\\RotorAgSpdCalcn
 $(SOURCE_CODE_ROOT)\\Inv\\ValMeasAndProc\\RslvrCalcn
 $(SOURCE_CODE_ROOT)\\Inv\\ValMeasAndProc\\SigColl
\\ No newline at end of file
diff --git a/src/fw_cu/build/subVariants/series_production/Parfiles/Testbench/VW310E_75_49_265A_0024_VEH_192701.par b/src/fw_cu/build/subVariants/series_production/Parfiles/Testbench/VW310E_75_49_265A_0024_VEH_192701.par
index f3428b65e..1eb05daff 100644
--- a/src/fw_cu/build/subVariants/series_production/Parfiles/Testbench/VW310E_75_49_265A_0024_VEH_192701.par
+++ b/src/fw_cu/build/subVariants/series_production/Parfiles/Testbench/VW310E_75_49_265A_0024_VEH_192701.par
@@ -28175,144 +28175,568 @@ PECCtl_tiFailInj_tqDamp_C_VW [UINT(16)]  0 ;  0
 PEC_yKsedONeN2swjkAMHu6uSuQdpNFRbAHvLXUHQGoHfny [FLOAT]  0.001000000047497451 ;  0.001000000047497451
 PEC_ya7YpCE6fa2KnUACALFhVy8piqEH6XCShNXQxCcqoDu [UINT(8)]  0 ;  0
 PEC_WQtS67mimrgC2CbmVEDkMnXc6WmJ8tA9XyxdUiGx6O0 [UINT(16)]  50 ; 50
-PMTempCalcnThermNetVw_CalibParam.AirGapTempFac_LuTYaxis [FLOAT,(1,8)]
-:  0.6000000238418579 ;  0.6000000238418579
-:  0.6000000238418579 ;  0.6000000238418579
-:  0.6000000238418579 ;  0.6000000238418579
-:  0.6000000238418579 ;  0.6000000238418579
-:  0.6000000238418579 ;  0.6000000238418579
-:  0.6000000238418579 ;  0.6000000238418579
-:  0.6000000238418579 ;  0.6000000238418579
-:  0.6000000238418579 ;  0.6000000238418579
-PMTempCalcnThermNetVw_CalibParam.CapcRot [FLOAT]  0.0949999988079071 ;  0.0949999988079071
-PMTempCalcnThermNetVw_CalibParam.ClckCntMax [UINT(32)]  100000 ;  100000
-PMTempCalcnThermNetVw_CalibParam.ClckCntStep [UINT(32)]  1 ;  1
-PMTempCalcnThermNetVw_CalibParam.CompareTimeConstFacAmb [FLOAT]  800 ;  800
-PMTempCalcnThermNetVw_CalibParam.CompareTimeConstFacRot [FLOAT]  2400 ;  2400
-PMTempCalcnThermNetVw_CalibParam.CoolFlowRate_LuTXaxis [FLOAT,(1,8)]
-:  1 ;  1
-:  2 ;  2
-:  3 ;  3
-:  4 ;  4
-:  6 ;  6
-:  7 ;  7
-:  8 ;  8
-:  10 ;  10
-PMTempCalcnThermNetVw_CalibParam.DiIntClkCntr [UINT(8)]  0 ;  0
-PMTempCalcnThermNetVw_CalibParam.DiSelAmbTemp [UINT(8)]  0 ;  0
-PMTempCalcnThermNetVw_CalibParam.DiSimnPmTemp [UINT(8)]  1 ;  1
-PMTempCalcnThermNetVw_CalibParam.DiThermNetCalcn [UINT(8)]  1 ;  1
-PMTempCalcnThermNetVw_CalibParam.DiThermNetCalcn_UseTempWindgSnsr [UINT(8)]  0 ;  0
-PMTempCalcnThermNetVw_CalibParam.EnaHvOffTime [UINT(8)]  0 ;  0
-PMTempCalcnThermNetVw_CalibParam.Fac_PlossIacN_LuTYaxis [FLOAT,(1,8)]
-:  1.2000000476837158 ;  1.2000000476837158
-:  1 ;  1
-:  0.800000011920929 ;  0.800000011920929
-:  0 ;  0
-:  0.5 ;  0.5
-:  0.800000011920929 ;  0.800000011920929
-:  1 ;  1
-:  1.2000000476837158 ;  1.2000000476837158
-PMTempCalcnThermNetVw_CalibParam.FuncTiSlc [FLOAT]  0.009999999776482582 ;  0.009999999776482582
-PMTempCalcnThermNetVw_CalibParam.IniPmTempRplcVal [FLOAT]  25 ;  25
-PMTempCalcnThermNetVw_CalibParam.IniValCalcnMod [UINT(8)]  3 ;  3
-PMTempCalcnThermNetVw_CalibParam.IntgTiSampleRot [FLOAT]  0.28999999165534973 ;  0.28999999165534973
-PMTempCalcnThermNetVw_CalibParam.PlossFric_LuTYaxis [FLOAT,(1,8)]
-:  800 ;  800
-:  600 ;  600
-:  400 ;  400
-:  0 ;  0
-:  500 ;  500
-:  1000 ;  1000
-:  2000 ;  2000
-:  2900 ;  2900
-PMTempCalcnThermNetVw_CalibParam.PlossIdFlatTop_LuTYaxis [FLOAT,(1,8)]
-:  800 ;  800
-:  600 ;  600
-:  400 ;  400
-:  200 ;  200
-:  200 ;  200
-:  400 ;  400
-:  600 ;  600
-:  800 ;  800
-PMTempCalcnThermNetVw_CalibParam.PlossIdSpcVec_LuTYaxis [FLOAT,(1,8)]
-:  800 ;  800
-:  600 ;  600
-:  400 ;  400
-:  200 ;  200
-:  200 ;  200
-:  400 ;  400
-:  600 ;  600
-:  800 ;  800
-PMTempCalcnThermNetVw_CalibParam.PmTempRplcVal [FLOAT]  80 ;  80
-PMTempCalcnThermNetVw_CalibParam.RotTimeConstFac_RotTempIniFlt [FLOAT]  0.2849999964237213 ;  0.2849999964237213
-PMTempCalcnThermNetVw_CalibParam.Rth_LuTYaxis [FLOAT,(1,8)]
-:  54.21879959106445 ;  54.21879959106445
-:  44 ;  44
-:  22 ;  22
-:  1 ;  1
-:  10 ;  10
-:  44 ;  44
-:  44 ;  44
-:  54.21879959106445 ;  54.21879959106445
-PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_CAN_HvOffTi [FLOAT]  600 ;  600
-PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_CAN_VehPrkgTi [FLOAT]  500 ;  500
-PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_FID_ErrHvOff [UINT(8)]  0 ;  0
-PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_FID_ErrNvm [UINT(8)]  0 ;  0
-PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_FID_ErrPrkgTi [UINT(8)]  0 ;  0
-PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_FID_IniHvOff [UINT(8)]  0 ;  0
-PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_FID_IniNvm [UINT(8)]  0 ;  0
-PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_FID_IniPrkgTi [UINT(8)]  0 ;  0
-PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_HwFlt_WindgSnsr [UINT(8)]  1 ;  1
-PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_NVM_TempDifAirGap [FLOAT]  20 ;  20
-PMTempCalcnThermNetVw_CalibParam.SimnPmTemp_NVM_TempDifWindg [FLOAT]  30 ;  30
-PMTempCalcnThermNetVw_CalibParam.SpdActFric_LuTXaxis [FLOAT,(1,8)]
-:  -16000 ; -16000
-:  -10000 ; -10000
-:  -5000 ; -5000
-:  0 ;  0
-:  2500 ;  2500
-:  5000 ;  5000
-:  10000 ;  10000
-:  16000 ;  16000
-PMTempCalcnThermNetVw_CalibParam.SpdActNac_LuTXaxis [FLOAT,(1,8)]
-:  -16000 ; -16000
-:  -10000 ; -10000
-:  -5000 ; -5000
-:  0 ;  0
-:  2500 ;  2500
-:  5000 ;  5000
-:  10000 ;  10000
-:  16000 ;  16000
-PMTempCalcnThermNetVw_CalibParam.SpdAct_RthLuTXaxis [FLOAT,(1,8)]
-:  -16000 ; -16000
-:  -10000 ; -10000
-:  -5000 ; -5000
-:  0 ;  0
-:  5 ;  5
-:  5000 ;  5000
-:  10000 ;  10000
-:  16000 ;  16000
-PMTempCalcnThermNetVw_CalibParam.SpdMax [FLOAT]  16000 ;  16000
-PMTempCalcnThermNetVw_CalibParam.TempWindgSnsr_PmTempMax [FLOAT]  130 ;  130
-PMTempCalcnThermNetVw_CalibParam.TimeKeyOff_LuTXaxis [FLOAT,(1,8)]
-:  0 ;  0
-:  5 ;  5
-:  50 ;  50
-:  100 ;  100
-:  1000 ;  1000
-:  10000 ;  10000
-:  12000 ;  12000
-:  16000 ;  16000
-PMTempCalcnThermNetVw_CalibParam.efuncFac_LuTYaxis [FLOAT,(1,8)]
-:  0.018400000408291817 ;  0.018400000408291817
-:  0.05000000074505806 ;  0.05000000074505806
-:  0.10000000149011612 ;  0.10000000149011612
-:  0.5 ;  0.5
-:  1 ;  1
-:  1.100000023841858 ;  1.100000023841858
-:  1.2999999523162842 ;  1.2999999523162842
-:  1.5 ;  1.5
+PmTempCalcnThermNet_CalibParam.RThermRotorAirgap_LuTYaxis [FLOAT,(1,16)] 13.1224002838134766 ; 13.1224002838134766
+:  13.1479997634887695 ; 13.1479997634887695
+:  10.4303998947143555 ; 10.4303998947143555
+:  9.3295001983642578 ; 9.3295001983642578
+:  5.5924000740051270 ; 5.5924000740051270
+:  8.2047004699707031 ; 8.2047004699707031
+:  6.0444998741149902 ; 6.0444998741149902
+:  3.8842000961303711 ; 3.8842000961303711
+:  6.0444998741149902 ; 6.0444998741149902
+:  8.2047004699707031 ; 8.2047004699707031
+:  5.5924000740051270 ; 5.5924000740051270
+:  9.3295001983642578 ; 9.3295001983642578
+:  10.4303998947143555 ; 10.4303998947143555
+:  13.1479997634887695 ; 13.1479997634887695
+:  13.1224002838134766 ; 13.1224002838134766
+:  13.1224002838134766 ; 13.1224002838134766
+PmTempCalcnThermNet_CalibParam.SpdActRTherm_LuTXaxis [FLOAT,(1,16)] -13200.0000000000000000 ; -13200.0000000000000000
+:  -10000.0000000000000000 ; -10000.0000000000000000
+:  -7000.0000000000000000 ; -7000.0000000000000000
+:  -5000.0000000000000000 ; -5000.0000000000000000
+:  -2500.0000000000000000 ; -2500.0000000000000000
+:  -1000.0000000000000000 ; -1000.0000000000000000
+:  -500.0000000000000000 ; -500.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  500.0000000000000000 ; 500.0000000000000000
+:  1000.0000000000000000 ; 1000.0000000000000000
+:  2500.0000000000000000 ; 2500.0000000000000000
+:  5000.0000000000000000 ; 5000.0000000000000000
+:  7000.0000000000000000 ; 7000.0000000000000000
+:  10000.0000000000000000 ; 10000.0000000000000000
+:  13200.0000000000000000 ; 13200.0000000000000000
+:  16000.0000000000000000 ; 16000.0000000000000000
+PmTempCalcnThermNet_CalibParam.CooltFlowRateRtherm_LuTXaxis [FLOAT,(1,16)] 0.5000000000000000 ; 0.5000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  2.0000000000000000 ; 2.0000000000000000
+:  2.5000000000000000 ; 2.5000000000000000
+:  3.0000000000000000 ; 3.0000000000000000
+:  4.0000000000000000 ; 4.0000000000000000
+:  4.5000000000000000 ; 4.5000000000000000
+:  5.0000000000000000 ; 5.0000000000000000
+:  6.0000000000000000 ; 6.0000000000000000
+:  6.5000000000000000 ; 6.5000000000000000
+:  7.0000000000000000 ; 7.0000000000000000
+:  8.0000000000000000 ; 8.0000000000000000
+:  8.5000000000000000 ; 8.5000000000000000
+:  9.0000000000000000 ; 9.0000000000000000
+:  9.5000000000000000 ; 9.5000000000000000
+:  10.0000000000000000 ; 10.0000000000000000
+PmTempCalcnThermNet_CalibParam.RThermRotorCoolt_LuTYaxis [FLOAT,(1,16)] 0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+PmTempCalcnThermNet_CalibParam.RThermStatorWindgEnd [FLOAT] 57.3502006530761719 ; 57.3502006530761719
+PmTempCalcnThermNet_CalibParam.RThermStatorWindg_LuTYaxis [FLOAT,(1,16)] 26.0284748077392578 ; 26.0284748077392578
+:  26.5106506347656250 ; 26.5106506347656250
+:  27.4750003814697266 ; 27.4750003814697266
+:  27.9571743011474609 ; 27.9571743011474609
+:  28.4393501281738281 ; 28.4393501281738281
+:  29.4036998748779297 ; 29.4036998748779297
+:  29.8858757019042969 ; 29.8858757019042969
+:  30.3680496215820313 ; 30.3680496215820313
+:  31.3323993682861328 ; 31.3323993682861328
+:  31.6023502349853516 ; 31.6023502349853516
+:  31.8722991943359375 ; 31.8722991943359375
+:  32.4122009277343750 ; 32.4122009277343750
+:  32.7238731384277344 ; 32.7238731384277344
+:  33.0355491638183594 ; 33.0355491638183594
+:  33.3472251892089844 ; 33.3472251892089844
+:  33.6589012145996094 ; 33.6589012145996094
+PmTempCalcnThermNet_CalibParam.StatorWindgCpTherm [FLOAT] 0.0001149099989561 ; 0.0001149099989561
+PmTempCalcnThermNet_CalibParam.StatorWindgEndCpTherm [FLOAT] 0.0003831800131593 ; 0.0003831800131593
+PmTempCalcnThermNet_CalibParam.RotorCpTherm [FLOAT] 0.0001268600026378 ; 0.0001268600026378
+PmTempCalcnThermNet_CalibParam.IntgTiSampleRot [FLOAT] 0.010 ; 0.010
+PmTempCalcnThermNet_CalibParam.IntgTiSampleWiko [FLOAT] 0.010 ; 0.010
+PmTempCalcnThermNet_CalibParam.IntgTiSampleWik [FLOAT] 0.010 ; 0.010
+PmTempCalcnThermNet_CalibParam.EnaStaWindg_CuLossEstim [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.CuResist_TempRef [FLOAT] 0.0040846997871995 ; 0.0040846997871995
+PmTempCalcnThermNet_CalibParam.MotorPhaseNum_StandStill [FLOAT] 2.0000000000000000 ; 2.0000000000000000
+PmTempCalcnThermNet_CalibParam.MotorPhaseNum_NomOp [FLOAT] 1.5000000000000000 ; 1.5000000000000000
+PmTempCalcnThermNet_CalibParam.TempCoeff_CuResist [FLOAT] 0.0039380001835525 ; 0.0039380001835525
+PmTempCalcnThermNet_CalibParam.TempRef_CuResist [FLOAT] 20.0000000000000000 ; 20.0000000000000000
+PmTempCalcnThermNet_CalibParam.EnaStandStillOp [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.MotSpdThd [FLOAT] 1.0000000000000000 ; 1.0000000000000000
+PmTempCalcnThermNet_CalibParam.CuWikoFac [FLOAT] 0.5519000291824341 ; 0.5519000291824341
+PmTempCalcnThermNet_CalibParam.PlossIdFlatTop_map [FLOAT,(4,16)] 59.7962760925292969 ; 59.7962760925292969
+:  56.9858703613281250 ; 56.9858703613281250
+:  56.6910896301269531 ; 56.6910896301269531
+:  61.3198509216308594 ; 61.3198509216308594
+:  58.0140304565429688 ; 58.0140304565429688
+:  54.0651016235351563 ; 54.0651016235351563
+:  52.5027656555175781 ; 52.5027656555175781
+:  52.9575843811035156 ; 52.9575843811035156
+:  61.9026794433593750 ; 61.9026794433593750
+:  111.9617309570312500 ; 111.9617309570312500
+:  71.3958206176757813 ; 71.3958206176757813
+:  106.1426315307617188 ; 106.1426315307617188
+:  92.0032882690429688 ; 92.0032882690429688
+:  83.9724197387695313 ; 83.9724197387695313
+:  68.4705581665039063 ; 68.4705581665039063
+:  1.9405499696731567 ; 1.9405499696731567
+:  59.7962760925292969 ; 59.7962760925292969
+:  56.9858703613281250 ; 56.9858703613281250
+:  56.6910896301269531 ; 56.6910896301269531
+:  61.3198509216308594 ; 61.3198509216308594
+:  58.0140304565429688 ; 58.0140304565429688
+:  54.0651016235351563 ; 54.0651016235351563
+:  52.5027656555175781 ; 52.5027656555175781
+:  52.9575843811035156 ; 52.9575843811035156
+:  61.9026794433593750 ; 61.9026794433593750
+:  111.9617309570312500 ; 111.9617309570312500
+:  71.3958206176757813 ; 71.3958206176757813
+:  106.1426315307617188 ; 106.1426315307617188
+:  92.0032882690429688 ; 92.0032882690429688
+:  83.9724197387695313 ; 83.9724197387695313
+:  68.4705581665039063 ; 68.4705581665039063
+:  1.9405499696731567 ; 1.9405499696731567
+:  59.7962760925292969 ; 59.7962760925292969
+:  56.9858703613281250 ; 56.9858703613281250
+:  56.6910896301269531 ; 56.6910896301269531
+:  61.3198509216308594 ; 61.3198509216308594
+:  58.0140304565429688 ; 58.0140304565429688
+:  54.0651016235351563 ; 54.0651016235351563
+:  52.5027656555175781 ; 52.5027656555175781
+:  52.9575843811035156 ; 52.9575843811035156
+:  61.9026794433593750 ; 61.9026794433593750
+:  111.9617309570312500 ; 111.9617309570312500
+:  71.3958206176757813 ; 71.3958206176757813
+:  106.1426315307617188 ; 106.1426315307617188
+:  92.0032882690429688 ; 92.0032882690429688
+:  83.9724197387695313 ; 83.9724197387695313
+:  68.4705581665039063 ; 68.4705581665039063
+:  1.9405499696731567 ; 1.9405499696731567
+:  59.7962760925292969 ; 59.7962760925292969
+:  56.9858703613281250 ; 56.9858703613281250
+:  56.6910896301269531 ; 56.6910896301269531
+:  61.3198509216308594 ; 61.3198509216308594
+:  58.0140304565429688 ; 58.0140304565429688
+:  54.0651016235351563 ; 54.0651016235351563
+:  52.5027656555175781 ; 52.5027656555175781
+:  52.9575843811035156 ; 52.9575843811035156
+:  61.9026794433593750 ; 61.9026794433593750
+:  111.9617309570312500 ; 111.9617309570312500
+:  71.3958206176757813 ; 71.3958206176757813
+:  106.1426315307617188 ; 106.1426315307617188
+:  92.0032882690429688 ; 92.0032882690429688
+:  83.9724197387695313 ; 83.9724197387695313
+:  68.4705581665039063 ; 68.4705581665039063
+:  1.9405499696731567 ; 1.9405499696731567
+PmTempCalcnThermNet_CalibParam.PlossIqFlatTop_map [FLOAT,(4,16)] 205.3657836914062500 ; 205.3657836914062500
+:  166.2283782958984375 ; 166.2283782958984375
+:  134.6399993896484375 ; 134.6399993896484375
+:  121.7716827392578125 ; 121.7716827392578125
+:  114.7958984375000000 ; 114.7958984375000000
+:  108.1200027465820313 ; 108.1200027465820313
+:  51.5099983215332031 ; 51.5099983215332031
+:  104.0400009155273438 ; 104.0400009155273438
+:  27.0534591674804688 ; 27.0534591674804688
+:  126.5146789550781250 ; 126.5146789550781250
+:  112.1999969482421875 ; 112.1999969482421875
+:  204.9802246093750000 ; 204.9802246093750000
+:  295.7999877929687500 ; 295.7999877929687500
+:  122.4000015258789063 ; 122.4000015258789063
+:  155.0399932861328125 ; 155.0399932861328125
+:  160.1399993896484375 ; 160.1399993896484375
+:  205.3657836914062500 ; 205.3657836914062500
+:  166.2283782958984375 ; 166.2283782958984375
+:  134.6399993896484375 ; 134.6399993896484375
+:  121.7716827392578125 ; 121.7716827392578125
+:  114.7958984375000000 ; 114.7958984375000000
+:  108.1200027465820313 ; 108.1200027465820313
+:  51.5099983215332031 ; 51.5099983215332031
+:  104.0400009155273438 ; 104.0400009155273438
+:  27.0534591674804688 ; 27.0534591674804688
+:  126.5146789550781250 ; 126.5146789550781250
+:  112.1999969482421875 ; 112.1999969482421875
+:  204.9802246093750000 ; 204.9802246093750000
+:  295.7999877929687500 ; 295.7999877929687500
+:  122.4000015258789063 ; 122.4000015258789063
+:  155.0399932861328125 ; 155.0399932861328125
+:  160.1399993896484375 ; 160.1399993896484375
+:  205.3657836914062500 ; 205.3657836914062500
+:  166.2283782958984375 ; 166.2283782958984375
+:  134.6399993896484375 ; 134.6399993896484375
+:  121.7716827392578125 ; 121.7716827392578125
+:  114.7958984375000000 ; 114.7958984375000000
+:  108.1200027465820313 ; 108.1200027465820313
+:  51.5099983215332031 ; 51.5099983215332031
+:  104.0400009155273438 ; 104.0400009155273438
+:  27.0534591674804688 ; 27.0534591674804688
+:  126.5146789550781250 ; 126.5146789550781250
+:  112.1999969482421875 ; 112.1999969482421875
+:  204.9802246093750000 ; 204.9802246093750000
+:  295.7999877929687500 ; 295.7999877929687500
+:  122.4000015258789063 ; 122.4000015258789063
+:  155.0399932861328125 ; 155.0399932861328125
+:  160.1399993896484375 ; 160.1399993896484375
+:  205.3657836914062500 ; 205.3657836914062500
+:  166.2283782958984375 ; 166.2283782958984375
+:  134.6399993896484375 ; 134.6399993896484375
+:  121.7716827392578125 ; 121.7716827392578125
+:  114.7958984375000000 ; 114.7958984375000000
+:  108.1200027465820313 ; 108.1200027465820313
+:  51.5099983215332031 ; 51.5099983215332031
+:  104.0400009155273438 ; 104.0400009155273438
+:  27.0534591674804688 ; 27.0534591674804688
+:  126.5146789550781250 ; 126.5146789550781250
+:  112.1999969482421875 ; 112.1999969482421875
+:  204.9802246093750000 ; 204.9802246093750000
+:  295.7999877929687500 ; 295.7999877929687500
+:  122.4000015258789063 ; 122.4000015258789063
+:  155.0399932861328125 ; 155.0399932861328125
+:  160.1399993896484375 ; 160.1399993896484375
+PmTempCalcnThermNet_CalibParam.IdMin [FLOAT] -750.0000000000000000 ; -750.0000000000000000
+PmTempCalcnThermNet_CalibParam.IdIvsStep [FLOAT] 0.0199999995529652 ; 0.0199999995529652
+PmTempCalcnThermNet_CalibParam.IdMaxIdx [UINT(8)] 15 ; 15
+PmTempCalcnThermNet_CalibParam.IqMin [FLOAT] -600.0000000000000000 ; -600.0000000000000000
+PmTempCalcnThermNet_CalibParam.IqIvsStep [FLOAT] 0.0133333336561918 ; 0.0133333336561918
+PmTempCalcnThermNet_CalibParam.IqMaxIdx [UINT(8)] 15 ; 15
+PmTempCalcnThermNet_CalibParam.PlossIdSpcVec_map [FLOAT,(4,16)] 58.6237983703613281 ; 58.6237983703613281
+:  55.8684997558593750 ; 55.8684997558593750
+:  55.5794982910156250 ; 55.5794982910156250
+:  60.1175003051757813 ; 60.1175003051757813
+:  56.8764991760253906 ; 56.8764991760253906
+:  53.0050010681152344 ; 53.0050010681152344
+:  51.4733009338378906 ; 51.4733009338378906
+:  51.9192008972167969 ; 51.9192008972167969
+:  60.6888999938964844 ; 60.6888999938964844
+:  109.7664031982421875 ; 109.7664031982421875
+:  69.9959030151367188 ; 69.9959030151367188
+:  104.0614013671875000 ; 104.0614013671875000
+:  90.1993026733398438 ; 90.1993026733398438
+:  82.3258972167968750 ; 82.3258972167968750
+:  67.1279983520507813 ; 67.1279983520507813
+:  1.9025000333786011 ; 1.9025000333786011
+:  58.6237983703613281 ; 58.6237983703613281
+:  55.8684997558593750 ; 55.8684997558593750
+:  55.5794982910156250 ; 55.5794982910156250
+:  60.1175003051757813 ; 60.1175003051757813
+:  56.8764991760253906 ; 56.8764991760253906
+:  53.0050010681152344 ; 53.0050010681152344
+:  51.4733009338378906 ; 51.4733009338378906
+:  51.9192008972167969 ; 51.9192008972167969
+:  60.6888999938964844 ; 60.6888999938964844
+:  109.7664031982421875 ; 109.7664031982421875
+:  69.9959030151367188 ; 69.9959030151367188
+:  104.0614013671875000 ; 104.0614013671875000
+:  90.1993026733398438 ; 90.1993026733398438
+:  82.3258972167968750 ; 82.3258972167968750
+:  67.1279983520507813 ; 67.1279983520507813
+:  1.9025000333786011 ; 1.9025000333786011
+:  58.6237983703613281 ; 58.6237983703613281
+:  55.8684997558593750 ; 55.8684997558593750
+:  55.5794982910156250 ; 55.5794982910156250
+:  60.1175003051757813 ; 60.1175003051757813
+:  56.8764991760253906 ; 56.8764991760253906
+:  53.0050010681152344 ; 53.0050010681152344
+:  51.4733009338378906 ; 51.4733009338378906
+:  51.9192008972167969 ; 51.9192008972167969
+:  60.6888999938964844 ; 60.6888999938964844
+:  109.7664031982421875 ; 109.7664031982421875
+:  69.9959030151367188 ; 69.9959030151367188
+:  104.0614013671875000 ; 104.0614013671875000
+:  90.1993026733398438 ; 90.1993026733398438
+:  82.3258972167968750 ; 82.3258972167968750
+:  67.1279983520507813 ; 67.1279983520507813
+:  1.9025000333786011 ; 1.9025000333786011
+:  58.6237983703613281 ; 58.6237983703613281
+:  55.8684997558593750 ; 55.8684997558593750
+:  55.5794982910156250 ; 55.5794982910156250
+:  60.1175003051757813 ; 60.1175003051757813
+:  56.8764991760253906 ; 56.8764991760253906
+:  53.0050010681152344 ; 53.0050010681152344
+:  51.4733009338378906 ; 51.4733009338378906
+:  51.9192008972167969 ; 51.9192008972167969
+:  60.6888999938964844 ; 60.6888999938964844
+:  109.7664031982421875 ; 109.7664031982421875
+:  69.9959030151367188 ; 69.9959030151367188
+:  104.0614013671875000 ; 104.0614013671875000
+:  90.1993026733398438 ; 90.1993026733398438
+:  82.3258972167968750 ; 82.3258972167968750
+:  67.1279983520507813 ; 67.1279983520507813
+:  1.9025000333786011 ; 1.9025000333786011
+PmTempCalcnThermNet_CalibParam.PlossIqSpcVec_map [FLOAT,(4,16)] 201.3390045166015625 ; 201.3390045166015625
+:  162.9689941406250000 ; 162.9689941406250000
+:  132.0000000000000000 ; 132.0000000000000000
+:  119.3840026855468750 ; 119.3840026855468750
+:  112.5449981689453125 ; 112.5449981689453125
+:  106.0000000000000000 ; 106.0000000000000000
+:  50.5000000000000000 ; 50.5000000000000000
+:  102.0000000000000000 ; 102.0000000000000000
+:  26.5230007171630859 ; 26.5230007171630859
+:  124.0339965820312500 ; 124.0339965820312500
+:  110.0000000000000000 ; 110.0000000000000000
+:  200.9609985351562500 ; 200.9609985351562500
+:  290.0000000000000000 ; 290.0000000000000000
+:  120.0000000000000000 ; 120.0000000000000000
+:  152.0000000000000000 ; 152.0000000000000000
+:  157.0000000000000000 ; 157.0000000000000000
+:  201.3390045166015625 ; 201.3390045166015625
+:  162.9689941406250000 ; 162.9689941406250000
+:  132.0000000000000000 ; 132.0000000000000000
+:  119.3840026855468750 ; 119.3840026855468750
+:  112.5449981689453125 ; 112.5449981689453125
+:  106.0000000000000000 ; 106.0000000000000000
+:  50.5000000000000000 ; 50.5000000000000000
+:  102.0000000000000000 ; 102.0000000000000000
+:  26.5230007171630859 ; 26.5230007171630859
+:  124.0339965820312500 ; 124.0339965820312500
+:  110.0000000000000000 ; 110.0000000000000000
+:  200.9609985351562500 ; 200.9609985351562500
+:  290.0000000000000000 ; 290.0000000000000000
+:  120.0000000000000000 ; 120.0000000000000000
+:  152.0000000000000000 ; 152.0000000000000000
+:  157.0000000000000000 ; 157.0000000000000000
+:  201.3390045166015625 ; 201.3390045166015625
+:  162.9689941406250000 ; 162.9689941406250000
+:  132.0000000000000000 ; 132.0000000000000000
+:  119.3840026855468750 ; 119.3840026855468750
+:  112.5449981689453125 ; 112.5449981689453125
+:  106.0000000000000000 ; 106.0000000000000000
+:  50.5000000000000000 ; 50.5000000000000000
+:  102.0000000000000000 ; 102.0000000000000000
+:  26.5230007171630859 ; 26.5230007171630859
+:  124.0339965820312500 ; 124.0339965820312500
+:  110.0000000000000000 ; 110.0000000000000000
+:  200.9609985351562500 ; 200.9609985351562500
+:  290.0000000000000000 ; 290.0000000000000000
+:  120.0000000000000000 ; 120.0000000000000000
+:  152.0000000000000000 ; 152.0000000000000000
+:  157.0000000000000000 ; 157.0000000000000000
+:  201.3390045166015625 ; 201.3390045166015625
+:  162.9689941406250000 ; 162.9689941406250000
+:  132.0000000000000000 ; 132.0000000000000000
+:  119.3840026855468750 ; 119.3840026855468750
+:  112.5449981689453125 ; 112.5449981689453125
+:  106.0000000000000000 ; 106.0000000000000000
+:  50.5000000000000000 ; 50.5000000000000000
+:  102.0000000000000000 ; 102.0000000000000000
+:  26.5230007171630859 ; 26.5230007171630859
+:  124.0339965820312500 ; 124.0339965820312500
+:  110.0000000000000000 ; 110.0000000000000000
+:  200.9609985351562500 ; 200.9609985351562500
+:  290.0000000000000000 ; 290.0000000000000000
+:  120.0000000000000000 ; 120.0000000000000000
+:  152.0000000000000000 ; 152.0000000000000000
+:  157.0000000000000000 ; 157.0000000000000000
+PmTempCalcnThermNet_CalibParam.PwmFreqActMin [FLOAT] 5500.0000000000000000 ; 5500.0000000000000000
+PmTempCalcnThermNet_CalibParam.PwmFreqActIvsStep [FLOAT] 0.0006666666595265 ; 0.0006666666595265
+PmTempCalcnThermNet_CalibParam.PwmFreqActMaxIdx [UINT(8)] 3 ; 3
+PmTempCalcnThermNet_CalibParam.PlossFric_LuTYaxis [FLOAT,(1,16)] 604.4121093750000000 ; 604.4121093750000000
+:  425.1682128906250000 ; 425.1682128906250000
+:  172.1130065917968750 ; 172.1130065917968750
+:  238.9965057373046875 ; 238.9965057373046875
+:  75.2470016479492188 ; 75.2470016479492188
+:  16.7833995819091797 ; 16.7833995819091797
+:  8.3916997909545898 ; 8.3916997909545898
+:  0.0000000000000000 ; 0.0000000000000000
+:  8.3916997909545898 ; 8.3916997909545898
+:  16.7833995819091797 ; 16.7833995819091797
+:  75.2470016479492188 ; 75.2470016479492188
+:  238.9965057373046875 ; 238.9965057373046875
+:  172.1130065917968750 ; 172.1130065917968750
+:  425.1682128906250000 ; 425.1682128906250000
+:  604.4121093750000000 ; 604.4121093750000000
+:  917.9860839843750000 ; 917.9860839843750000
+PmTempCalcnThermNet_CalibParam.SpdActFric_LuTXaxis [FLOAT,(1,16)] -13200.0000000000000000 ; -13200.0000000000000000
+:  -10000.0000000000000000 ; -10000.0000000000000000
+:  -7000.0000000000000000 ; -7000.0000000000000000
+:  -5000.0000000000000000 ; -5000.0000000000000000
+:  -2500.0000000000000000 ; -2500.0000000000000000
+:  -1000.0000000000000000 ; -1000.0000000000000000
+:  -500.0000000000000000 ; -500.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  500.0000000000000000 ; 500.0000000000000000
+:  1000.0000000000000000 ; 1000.0000000000000000
+:  2500.0000000000000000 ; 2500.0000000000000000
+:  5000.0000000000000000 ; 5000.0000000000000000
+:  7000.0000000000000000 ; 7000.0000000000000000
+:  10000.0000000000000000 ; 10000.0000000000000000
+:  13200.0000000000000000 ; 13200.0000000000000000
+:  16000.0000000000000000 ; 16000.0000000000000000
+PmTempCalcnThermNet_CalibParam.PlossNac_LuTYaxis [FLOAT,(1,16)] 3.8382999897003174 ; 3.8382999897003174
+:  2.7820999622344971 ; 2.7820999622344971
+:  3.1651000976562500 ; 3.1651000976562500
+:  1.4128999710083008 ; 1.4128999710083008
+:  2.0376999378204346 ; 2.0376999378204346
+:  1.1835999488830566 ; 1.1835999488830566
+:  0.5918099880218506 ; 0.5918099880218506
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.5918099880218506 ; 0.5918099880218506
+:  1.1835999488830566 ; 1.1835999488830566
+:  2.0376999378204346 ; 2.0376999378204346
+:  1.4128999710083008 ; 1.4128999710083008
+:  3.1651000976562500 ; 3.1651000976562500
+:  2.7820999622344971 ; 2.7820999622344971
+:  3.8382999897003174 ; 3.8382999897003174
+:  4.1865000724792480 ; 4.1865000724792480
+PmTempCalcnThermNet_CalibParam.SpdActNac_LuTXaxis [FLOAT,(1,16)] -13200.0000000000000000 ; -13200.0000000000000000
+:  -10000.0000000000000000 ; -10000.0000000000000000
+:  -7000.0000000000000000 ; -7000.0000000000000000
+:  -5000.0000000000000000 ; -5000.0000000000000000
+:  -2500.0000000000000000 ; -2500.0000000000000000
+:  -1000.0000000000000000 ; -1000.0000000000000000
+:  -500.0000000000000000 ; -500.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  500.0000000000000000 ; 500.0000000000000000
+:  1000.0000000000000000 ; 1000.0000000000000000
+:  2500.0000000000000000 ; 2500.0000000000000000
+:  5000.0000000000000000 ; 5000.0000000000000000
+:  7000.0000000000000000 ; 7000.0000000000000000
+:  10000.0000000000000000 ; 10000.0000000000000000
+:  13200.0000000000000000 ; 13200.0000000000000000
+:  16000.0000000000000000 ; 16000.0000000000000000
+PmTempCalcnThermNet_CalibParam.DiHwFltCheckStMachn [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.EnaTempWndgRplcmntVal [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.TwoValAvgFacInvs [FLOAT] 0.5000000000000000 ; 0.5000000000000000
+PmTempCalcnThermNet_CalibParam.ThreeValAvgFacInvs [FLOAT] 0.3334000110626221 ; 0.3334000110626221
+PmTempCalcnThermNet_CalibParam.EnaAvgWindTempCalc [UINT(8)] 1 ; 1
+PmTempCalcnThermNet_CalibParam.EnaCoolInp2TempCalc [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.CoolFlowRate_LuTXaxis [FLOAT,(1,16)] 0.5000000000000000 ; 0.5000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  2.0000000000000000 ; 2.0000000000000000
+:  2.5000000000000000 ; 2.5000000000000000
+:  3.0000000000000000 ; 3.0000000000000000
+:  4.0000000000000000 ; 4.0000000000000000
+:  4.5000000000000000 ; 4.5000000000000000
+:  5.0000000000000000 ; 5.0000000000000000
+:  6.0000000000000000 ; 6.0000000000000000
+:  6.5000000000000000 ; 6.5000000000000000
+:  7.0000000000000000 ; 7.0000000000000000
+:  8.0000000000000000 ; 8.0000000000000000
+:  8.5000000000000000 ; 8.5000000000000000
+:  9.0000000000000000 ; 9.0000000000000000
+:  9.5000000000000000 ; 9.5000000000000000
+:  10.0000000000000000 ; 10.0000000000000000
+PmTempCalcnThermNet_CalibParam.CooltTemp2_CoolTemp1Fac_LuTYaxis [FLOAT,(1,16)] 1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+:  1.0000000000000000 ; 1.0000000000000000
+PmTempCalcnThermNet_CalibParam.CooltTemp2_PmTempFac_LuTYaxis [FLOAT,(1,16)] 0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+PmTempCalcnThermNet_CalibParam.IniPmTempRplcVal [FLOAT] 25.0000000000000000 ; 25.0000000000000000
+PmTempCalcnThermNet_CalibParam.IniValCalcnMod [UINT(8)] 2 ; 2
+PmTempCalcnThermNet_CalibParam.EnaHvOffTime [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.DiSelAmbTempWindg [UINT(8)] 1 ; 1
+PmTempCalcnThermNet_CalibParam.DiSelAmbTempPm [UINT(8)] 1 ; 1
+PmTempCalcnThermNet_CalibParam.CoolDownTimeConstPm [FLOAT] -0.0003175199963152 ; -0.0003175199963152
+PmTempCalcnThermNet_CalibParam.CoolDownTimeWindg [FLOAT] -0.1343999952077866 ; -0.1343999952077866
+PmTempCalcnThermNet_CalibParam.CompareTimeConstFacWindg [FLOAT] 5000.0000000000000000 ; 5000.0000000000000000
+PmTempCalcnThermNet_CalibParam.CompareTimeConstFacWindgAmb [FLOAT] 250.0000000000000000 ; 250.0000000000000000
+PmTempCalcnThermNet_CalibParam.CompareTimeConstFacPmAmb [FLOAT] 700.0000000000000000 ; 700.0000000000000000
+PmTempCalcnThermNet_CalibParam.CompareTimeConstFacPm [FLOAT] 17500.0000000000000000 ; 17500.0000000000000000
+PmTempCalcnThermNet_CalibParam.IniWindgTempRplcVal [FLOAT] 30.0000000000000000 ; 30.0000000000000000
+PmTempCalcnThermNet_CalibParam.WindgIniValCalcnMod [UINT(8)] 2 ; 2
+PmTempCalcnThermNet_CalibParam.RotTimeConstFac_RotTempIniFlt [FLOAT] 900.0000000000000000 ; 900.0000000000000000
+PmTempCalcnThermNet_CalibParam.FuncTiSlc [FLOAT] 0.0099999997764826 ; 0.0099999997764826
+PmTempCalcnThermNet_CalibParam.DiIntClkCntr [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.ClckCntStep [UINT(32)] 1 ; 1
+PmTempCalcnThermNet_CalibParam.ClckCntMax [UINT(32)] 100000 ; 100000
+PmTempCalcnThermNet_CalibParam.DiThermNetCalcn [UINT(8)] 1 ; 1
+PmTempCalcnThermNet_CalibParam.PmTempRplcVal [FLOAT] 100.0000000000000000 ; 100.0000000000000000
+PmTempCalcnThermNet_CalibParam.StaWindgSnsrReplcmtVal [FLOAT] 80.0000000000000000 ; 80.0000000000000000
+PmTempCalcnThermNet_CalibParam.DiThermNetCalcn_UseTempWindgSnsr [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.TempWindgSnsr_PmTempMax [FLOAT] 130.0000000000000000 ; 130.0000000000000000
+PmTempCalcnThermNet_CalibParam.DiSimnPmTemp [UINT(8)] 1 ; 1
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_IniHvOff [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_IniPrkgTi [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_IniNvm [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_HwFlt_WindgSnsr1 [UINT(8)] 1 ; 1
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_HwFlt_WindgSnsr2 [UINT(8)] 1 ; 1
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_HwFlt_WindgSnsr3 [UINT(8)] 1 ; 1
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_ErrHvOff [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_ErrPrkgTi [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_FID_ErrNvm [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_NVM_Temp1 [FLOAT] 20.0000000000000000 ; 20.0000000000000000
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_NVM_Temp2 [FLOAT] 30.0000000000000000 ; 30.0000000000000000
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_NVM_Temp3 [FLOAT] 30.0000000000000000 ; 30.0000000000000000
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_CAN_VehPrkgTi [FLOAT] 500.0000000000000000 ; 500.0000000000000000
+PmTempCalcnThermNet_CalibParam.SimnPmTemp_CAN_HvOffTi [FLOAT] 600.0000000000000000 ; 600.0000000000000000
+PmTempCalcnThermNet_CalibParam.ConvTimeOff_Secs [FLOAT] 60.0000000000000000 ; 60.0000000000000000
+PmTempCalcnThermNet_CalibParam.GearRatioInvs [FLOAT] 0.0082895997911692 ; 0.0082895997911692
+PmTempCalcnThermNet_CalibParam.VehMovmnt_MinSpdThd [FLOAT] 10.0000000000000000 ; 10.0000000000000000
+PmTempCalcnThermNet_CalibParam.EnaVehSpdChck [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.DiSimnPmTemp_HwFlt [UINT(8)] 1 ; 1
+PmTempCalcnThermNet_CalibParam.StatorWindgTempMaxVal [FLOAT] 220.0000000000000000 ; 220.0000000000000000
+PmTempCalcnThermNet_CalibParam.StatorWindgTempMinVal [FLOAT] -40.0000000000000000 ; -40.0000000000000000
+PmTempCalcnThermNet_CalibParam.StatorWindgEndTempMaxVal [FLOAT] 220.0000000000000000 ; 220.0000000000000000
+PmTempCalcnThermNet_CalibParam.StatorWindgEndTempMinVal [FLOAT] -40.0000000000000000 ; -40.0000000000000000
+PmTempCalcnThermNet_CalibParam.PmTempMaxVal [FLOAT] 220.0000000000000000 ; 220.0000000000000000
+PmTempCalcnThermNet_CalibParam.PmTempMinVal [FLOAT] -40.0000000000000000 ; -40.0000000000000000
+PmTempCalcnThermNet_CalibParam.UseSnsrValAsWindgEndTemp [UINT(8)] 0 ; 0
+PmTempCalcnThermNet_CalibParam.FeLossSpdAct_LUTXaxis [FLOAT,(1,16)] -13200.0000000000000000 ; -13200.0000000000000000
+:  -10000.0000000000000000 ; -10000.0000000000000000
+:  -7000.0000000000000000 ; -7000.0000000000000000
+:  -5000.0000000000000000 ; -5000.0000000000000000
+:  -2500.0000000000000000 ; -2500.0000000000000000
+:  -1000.0000000000000000 ; -1000.0000000000000000
+:  -500.0000000000000000 ; -500.0000000000000000
+:  0.0000000000000000 ; 0.0000000000000000
+:  500.0000000000000000 ; 500.0000000000000000
+:  1000.0000000000000000 ; 1000.0000000000000000
+:  2500.0000000000000000 ; 2500.0000000000000000
+:  5000.0000000000000000 ; 5000.0000000000000000
+:  7000.0000000000000000 ; 7000.0000000000000000
+:  10000.0000000000000000 ; 10000.0000000000000000
+:  13200.0000000000000000 ; 13200.0000000000000000
+:  16000.0000000000000000 ; 16000.0000000000000000
+PmTempCalcnThermNet_CalibParam.FeLossRotDistbnFac_LuTYaxis [FLOAT,(1,16)] 0.2483499944210052 ; 0.2483499944210052
+:  0.2317100018262863 ; 0.2317100018262863
+:  0.2020100057125092 ; 0.2020100057125092
+:  0.1722999960184097 ; 0.1722999960184097
+:  0.1366499960422516 ; 0.1366499960422516
+:  0.1010000035166740 ; 0.1010000035166740
+:  0.0772370025515556 ; 0.0772370025515556
+:  0.0396090000867844 ; 0.0396090000867844
+:  0.0772370025515556 ; 0.0772370025515556
+:  0.1010000035166740 ; 0.1010000035166740
+:  0.1366499960422516 ; 0.1366499960422516
+:  0.1722999960184097 ; 0.1722999960184097
+:  0.2020100057125092 ; 0.2020100057125092
+:  0.2317100018262863 ; 0.2317100018262863
+:  0.2483499944210052 ; 0.2483499944210052
+:  0.2574599981307983 ; 0.2574599981307983
+PmTempCalcnThermNet_CalibParam.CuResistSpdCoeff2 [FLOAT] 0.0000000057784999 ; 0.0000000057784999
 PerfIndcrCalcn_CalibParam.ParamtoavoidzerodivPerfIndTemp [FLOAT]  1 ;  1
 Protocol_Detection_Wait_Time [UINT(32)]  500000 ;  500000
 Psr_EmStatorTempTimerLim [UINT(32)]  180000 ;  180000
'

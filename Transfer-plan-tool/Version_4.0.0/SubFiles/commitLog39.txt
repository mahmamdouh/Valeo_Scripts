b'commit bfaaaba75427d885b36fe3a3da6269549292e480
Author: Santosh Pallanti <santos.pallanti.jv.ext@valeo.com>
Date:   Fri Feb 25 00:33:38 2022 +0530

    $100kW-53525$ - Resolver offset cannot be Calibrated in B02
    
    Change-Id: I5d0604457d61d8dd1bd92ad2df515e66eb09844d

diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/Sfty_Common/src/SftyReplcmt_data.c b/src/fw_cu/Components/Safety/Sfty_Cmn/Sfty_Common/src/SftyReplcmt_data.c
index 5764f16e4..dd13b259a 100644
--- a/src/fw_cu/Components/Safety/Sfty_Cmn/Sfty_Common/src/SftyReplcmt_data.c
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/Sfty_Common/src/SftyReplcmt_data.c
@@ -1263,7 +1263,7 @@ CONST(float32, SFTYREPLCMT_CALIB) SftyReplcmtRslvrOffsPrm = 0.f;
 #define SFTYREPLCMT_START_SEC_CALIB_8
 #include "MemMap.h"
 
-CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtRslvrOffsStiEna = 0U;
+CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtRslvrOffsStiEna = 1U;
 #define SFTYREPLCMT_STOP_SEC_CALIB_8
 #include "MemMap.h"
 /* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
@@ -1272,7 +1272,7 @@ CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtRslvrOffsStiEna = 0U;
 #define SFTYREPLCMT_START_SEC_CALIB_8
 #include "MemMap.h"
 
-CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtRslvrOffsVld = 0U;
+CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtRslvrOffsVld = 1U;
 #define SFTYREPLCMT_STOP_SEC_CALIB_8
 #include "MemMap.h"
 /* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
diff --git a/src/fw_cu/Components/Safety/Sfty_Inv/SftyRslvrOffsHndlr/src/SftyRslvrOffsHndlr.c b/src/fw_cu/Components/Safety/Sfty_Inv/SftyRslvrOffsHndlr/src/SftyRslvrOffsHndlr.c
index b73be5e14..12211b7ec 100644
--- a/src/fw_cu/Components/Safety/Sfty_Inv/SftyRslvrOffsHndlr/src/SftyRslvrOffsHndlr.c
+++ b/src/fw_cu/Components/Safety/Sfty_Inv/SftyRslvrOffsHndlr/src/SftyRslvrOffsHndlr.c
@@ -84,6 +84,15 @@
 
 /*================== [type definitions] =====================================*/
 
+/*! Status of Calibration */
+typedef enum SftyRslvrOffsHndlrC2cStsCalibType_
+{
+   SFTYRSLVROFFSHNDLR_CALIB_PASSED   = 0, /* Calibration procedure successful */
+   SFTYRSLVROFFSHNDLR_CALIB_ACTIVE   = 1, /* Calibration procedure active (this state may be only shortly set/skipped by SSW!) */
+   SFTYRSLVROFFSHNDLR_CALIB_FAILED   = 2,  /* Calibration procedure failed */
+   SFTYRSLVROFFSHNDLR_CALIB_INACTIVE = 3 /* Calibration inactive */
+}SftyRslvrOffsHndlrC2cStsCalibType; /* PRQA S 3205 # Enum is needed for code readability */
+
 /*! Status of RODA learn */
 typedef enum SftyRslvrOffsHndlrRodaLearnSt_
 {
@@ -230,12 +239,22 @@ STATIC VAR(uint32, SFTYRSLVROFFSHNDLR_VAR) SftyRslvrOffsHndlrRodaLearnTmr;
 @@ SYMBOL = SftyRslvrOffsHndlrInternRslvrOffs
 @@ A2L_TYPE = MEASURE
 @@ DATA_TYPE = FLOAT
-@@ DESCRIPTION = "Resolver offset of internal logic; unit \'radians\'"
+@@ DESCRIPTION = "Resolver offset of internal logic; unit \'degrees\'"
 @@ GROUP = SftyRslvrOffsHndlr
 @@ END
 */
 STATIC VAR(float32, SFTYRSLVROFFSHNDLR_VAR) SftyRslvrOffsHndlrInternRslvrOffs;
 
+/*
+@@ SYMBOL = SftyRslvrOffsHndlrC2cRslvrOffsInDeg
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Resolver offset value to be propagated to DRCO and BSW; unit \'degrees\'"
+@@ GROUP = SftyRslvrOffsHndlr
+@@ END
+*/
+STATIC VAR(float32, SFTYRSLVROFFSHNDLR_VAR) SftyRslvrOffsHndlrC2cRslvrOffsInDeg;
+
 /*
 @@ SYMBOL = SftyRslvrOffsHndlrNvMOffsInDeg
 @@ A2L_TYPE = MEASURE
@@ -408,6 +427,7 @@ STATIC VAR(float32, SFTYRSLVROFFSHNDLR_VAR) SftyRslvrOffsHndlrlPhaISum;
 @@ SYMBOL = SftyRslvrOffsHndlrNvMOffsVldnState
 @@ A2L_TYPE = MEASURE
 @@ DATA_TYPE = UBYTE [0 ... 4]
+@@ CONVERSION = TABLE 0 "INIT" 1 "PATTERN_CHK" 2 "CRC_CHK" 3 "RNG_CHK" 4 "VLD_CMPLT"
 @@ DESCRIPTION = "Safety Resolver Offset NvM Validation State Machine; unit \'-\'"
 @@ GROUP = SftyRslvrOffsHndlr
 @@ END
@@ -418,6 +438,7 @@ STATIC VAR(SftyRslvrOffsHndlrNvMOffsVldnSt, SFTYRSLVROFFSHNDLR_VAR) SftyRslvrOff
 @@ SYMBOL = SftyRslvrOffsHndlrUdsOffsVldnState
 @@ A2L_TYPE = MEASURE
 @@ DATA_TYPE = UBYTE [0 ... 5]
+@@ CONVERSION = TABLE 0 "INIT" 1 "RNG_CHK" 2 "ASC_PLAUS_CHK" 3 "NVM_STORE" 4 "OFFSET_RAMP" 5 "CMPLT"
 @@ DESCRIPTION = "Safety Resolver Offset NvM Validation State Machine; unit \'-\'"
 @@ GROUP = SftyRslvrOffsHndlr
 @@ END
@@ -428,6 +449,7 @@ STATIC VAR(SftyRslvrOffsHndlrUdsOffsVldnSt, SFTYRSLVROFFSHNDLR_VAR) SftyRslvrOff
 @@ SYMBOL = SftyRslvrOffsHndlrRolOffsVldnState
 @@ A2L_TYPE = MEASURE
 @@ DATA_TYPE = UBYTE [0 ... 6]
+@@ CONVERSION = TABLE 0 "INIT" 1 "RODA_LEARN" 2 "RNG_CHK" 3 "ASC_PLAUS_CHK" 4 "NVM_STORE" 5 "OFFSET_RAMP" 6 "CMPLT"
 @@ DESCRIPTION = "Safety Resolver Offset NvM Validation State Machine; unit \'-\'"
 @@ GROUP = SftyRslvrOffsHndlr
 @@ END
@@ -438,6 +460,7 @@ STATIC VAR(SftyRslvrOffsHndlrRolOffsVldnSt, SFTYRSLVROFFSHNDLR_VAR) SftyRslvrOff
 @@ SYMBOL = SftyRslvrOffsHndlrNvmUpdtPrevSts
 @@ A2L_TYPE = MEASURE
 @@ DATA_TYPE = UBYTE [0 ... 3]
+@@ CONVERSION = TABLE 0 "NVM_UPDT_INACTIVE" 1 "NVM_UPDT_PENDING" 2 "NVM_UPDT_SUCCESS" 3 "NVM_UPDT_FAILED"
 @@ DESCRIPTION = "Safety Resolver Offset Handler Previous NvM Update Status; unit \'-\'"
 @@ GROUP = SftyRslvrOffsHndlr
 @@ END
@@ -448,6 +471,7 @@ STATIC VAR(RslvrOffsNvmUpdtStsType, SFTYRSLVROFFSHNDLR_VAR) SftyRslvrOffsHndlrNv
 @@ SYMBOL = SftyRslvrOffsHndlrNvmUpdtCurrSts
 @@ A2L_TYPE = MEASURE
 @@ DATA_TYPE = UBYTE [0 ... 3]
+@@ CONVERSION = TABLE 0 "NVM_UPDT_INACTIVE" 1 "NVM_UPDT_PENDING" 2 "NVM_UPDT_SUCCESS" 3 "NVM_UPDT_FAILED"
 @@ DESCRIPTION = "Safety Resolver Offset Handler Current NvM Update Status; unit \'-\'"
 @@ GROUP = SftyRslvrOffsHndlr
 @@ END
@@ -458,6 +482,7 @@ STATIC VAR(RslvrOffsNvmUpdtStsType, SFTYRSLVROFFSHNDLR_VAR) SftyRslvrOffsHndlrNv
 @@ SYMBOL = SftyRslvrOffsHndlrReqCalibSfty
 @@ A2L_TYPE = MEASURE
 @@ DATA_TYPE = UBYTE [0 ... 3]
+@@ CONVERSION = TABLE 0 "REQ_CALIB_NONE" 1 "REQ_CALIB_RODA" 2 "REQ_CALIB_NVM" 3 "REQ_CALIB_UDS"
 @@ DESCRIPTION = "Safety Resolver Offset Handler Calibration Request; unit \'-\'"
 @@ GROUP = SftyRslvrOffsHndlr
 @@ END
@@ -468,6 +493,7 @@ STATIC VAR(C2cReqCalibSftyType, SFTYRSLVROFFSHNDLR_VAR) SftyRslvrOffsHndlrReqCal
 @@ SYMBOL = SftyRslvrOffsHndlrSoftAscTmrState
 @@ A2L_TYPE = MEASURE
 @@ DATA_TYPE = UBYTE [0 ... 3]
+@@ CONVERSION = TABLE 0 "TIMER_INACTV" 1 "TIMER_INIT" 2 "TIMER_ACTV" 3 "TIMER_ELAPSED"
 @@ DESCRIPTION = "Safety Resolver Offset Handler Soft ASC Timer Status; unit \'-\'"
 @@ GROUP = SftyRslvrOffsHndlr
 @@ END
@@ -478,6 +504,7 @@ STATIC VAR(SftyRslvrOffsHndlrTmrState, SFTYRSLVROFFSHNDLR_VAR) SftyRslvrOffsHndl
 @@ SYMBOL = SftyRslvrOffsHndlrNvMStoreTmrState
 @@ A2L_TYPE = MEASURE
 @@ DATA_TYPE = UBYTE [0 ... 3]
+@@ CONVERSION = TABLE 0 "TIMER_INACTV" 1 "TIMER_INIT" 2 "TIMER_ACTV" 3 "TIMER_ELAPSED"
 @@ DESCRIPTION = "Safety Resolver Offset Handler NvM Store Timer Status; unit \'-\'"
 @@ GROUP = SftyRslvrOffsHndlr
 @@ END
@@ -488,6 +515,7 @@ STATIC VAR(SftyRslvrOffsHndlrTmrState, SFTYRSLVROFFSHNDLR_VAR) SftyRslvrOffsHndl
 @@ SYMBOL = SftyRslvrOffsHndlrRodaLearnTmrState
 @@ A2L_TYPE = MEASURE
 @@ DATA_TYPE = UBYTE [0 ... 3]
+@@ CONVERSION = TABLE 0 "TIMER_INACTV" 1 "TIMER_INIT" 2 "TIMER_ACTV" 3 "TIMER_ELAPSED"
 @@ DESCRIPTION = "Safety Resolver Offset Handler RODA Learn Timer Status; unit \'-\'"
 @@ GROUP = SftyRslvrOffsHndlr
 @@ END
@@ -498,6 +526,7 @@ STATIC VAR(SftyRslvrOffsHndlrTmrState, SFTYRSLVROFFSHNDLR_VAR) SftyRslvrOffsHndl
 @@ SYMBOL = SftyRslvrOffsHndlrMeasCycState
 @@ A2L_TYPE = MEASURE
 @@ DATA_TYPE = UBYTE [0 ... 5]
+@@ CONVERSION = TABLE 0 "MEASCYC_INACTV" 1 "MEASCYC_INIT" 2 "MEASCYC_START_DETECT" 3 "MEASCYC_ACTV" 4 "MEASCYC_ONE_CMPLT" 5 "MEASCYC_TOTAL_CMPLT"
 @@ DESCRIPTION = "Safety Resolver Offset Handler Measurement Cycle State; unit \'-\'"
 @@ GROUP = SftyRslvrOffsHndlr
 @@ END
@@ -508,6 +537,7 @@ STATIC VAR(SftyRslvrOffsHndlrMeasCycSt, SFTYRSLVROFFSHNDLR_VAR) SftyRslvrOffsHnd
 @@ SYMBOL = SftyRslvrOffsHndlrAscPlausChkState
 @@ A2L_TYPE = MEASURE
 @@ DATA_TYPE = UBYTE [0 ... 4]
+@@ CONVERSION = TABLE 0 "ASC_PLAUS_CHK_INACTV" 1 "ASC_PLAUS_CHK_START_TIMER" 2 "ASC_PLAUS_CHK_RUN" 3 "MEASCYC_ACTV" 4 "ASC_PLAUS_CHK_PASSED" 5 "ASC_PLAUS_CHK_PASSED"
 @@ DESCRIPTION = "Safety Resolver Offset Handler ASC Plausibility State Machine; unit \'-\'"
 @@ GROUP = SftyRslvrOffsHndlr
 @@ END
@@ -626,6 +656,17 @@ STATIC VAR(uint8, SFTYRSLVROFFSHNDLR_VAR) SftyRslvrOffsHndlrIacSumErrCntr;
 */
 STATIC VAR(uint8, SFTYRSLVROFFSHNDLR_VAR) SftyRslvrOffsHndlrInternRslvrOffsVld;
 
+/*
+@@ SYMBOL = SftyRslvrOffsHndlrC2cRslvrOffsVld
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE [0 ... 2]
+@@ CONVERSION = TABLE 0 "SFTY_RSLVR_OFFS_INVLD" 1 "SFTY_RSLVR_OFFS_VLD" 2 "SFTY_RSLVR_OFFS_UNDETM"
+@@ DESCRIPTION = "Status of internal offset validity flag; unit \'-\'"
+@@ GROUP = SftyRslvrOffsHndlr
+@@ END
+*/
+STATIC VAR(uint8, SFTYRSLVROFFSHNDLR_VAR) SftyRslvrOffsHndlrC2cRslvrOffsVld;
+
 /*
 @@ SYMBOL = SftyRslvrOffsHndlrMaxSpd
 @@ A2L_TYPE = MEASURE
@@ -720,7 +761,7 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_PerformCurrImbChk(void)
    /* Perform Current Imbalance Check */
    if(
       (SFTYRSLVROFFSHNDLR_TIMER_ELAPSED == SftyRslvrOffsHndlrSoftAscTmrState) &&
-      ((uint8)STS_CALIB_ACTIVE == SftyC2cData.StsCalibSfty) &&
+      ((uint8)SFTYRSLVROFFSHNDLR_CALIB_ACTIVE == SftyC2cData.StsCalibSfty) &&
       (STS_INV_SAFE_ST_ASC == DrvCtrlC2cData.StsInvSafeStFild)
      )
    {
@@ -753,7 +794,7 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_PerformCurrImbChk(void)
    else
    {
       /* Calibration status not Active */
-      if ((uint8)STS_CALIB_ACTIVE != SftyC2cData.StsCalibSfty)
+      if ((uint8)SFTYRSLVROFFSHNDLR_CALIB_ACTIVE != SftyC2cData.StsCalibSfty)
       {
          /* Reset Phase Current Sum Counter */
          SftyRslvrOffsHndlrIacSumErrCntr = 0U;
@@ -836,32 +877,14 @@ LOCAL_INLINE boolean SftyRslvrOffsHndlr_RampOffset(float32 pRoda)
  * \\return    : None
  */
 /*************************************************************************************************/
-/* PRQA S 4700 1 # Justification for STM29 HIS Warning. This function is supposed to be widely used within current SW-Component */
 LOCAL_INLINE void SftyRslvrOffsHndlr_PropagateOffsValues(float32 rslvrOffsInDeg, uint8 rslvrOffsVld)
 {
    /* ******** Variables declaration *********** */
-   float32 rslvrOffsInDegree;
 
    /* ************* Source code **************** */
-   /* During first time when resolver offset NVM is invalid set SftyRslvrOffsHndlrRslvrOffsRad to 0 */
-   if((BswC2cData.RslvrOffsNvm.RslvrOffs > 0.0f) &&
-     (BswC2cData.RslvrOffsNvm.RslvrOffsChks != 0U))
-   {
-      rslvrOffsInDegree = rslvrOffsInDeg;
-   }
-   else
-   {
-      rslvrOffsInDegree = 0.0f;
-   }
-
-   /* Update internal resolver offset value */
-   SftyRslvrOffsHndlrInternRslvrOffs = rslvrOffsInDegree;
-
-   /* Update internal resolver offset validity flag */
-   SftyRslvrOffsHndlrInternRslvrOffsVld = rslvrOffsVld;
 
    /* Conversion from degree to rad */
-   SftyRslvrOffsHndlrRslvrOffsRad = rslvrOffsInDegree * (float32)SYSCON_PI * (float32)SFTYRSLVROFFSHNDLR_RAD_CONVERSION;
+   SftyRslvrOffsHndlrRslvrOffsRad = (float32)(rslvrOffsInDeg * (float32)SYSCON_PI * (float32)SFTYRSLVROFFSHNDLR_RAD_CONVERSION);
 
    /* Provide offset to DRCO */
    SftyC2cData.RslvrOffs = SftyRslvrOffsHndlrRslvrOffsRad;
@@ -1843,7 +1866,7 @@ LOCAL_INLINE Std_ReturnType SftyRslvrOffsHndlr_OnlineRodaExitChk(void)
       (SftyHvDcUEvlnUdcVal > (SftyRslrOffsHndlrHvDcDerMinLow - SftyRslrOffsHndlrHvDcHysExitTq)) ||
       (SftyE2ePhyDataVcuInvCtrl2RslvrOffsCalReq == FALSE ) ||
       ((SftyRslvrCalcnMeclSpdFild > SftyRslrOffsHndlrCalSpdLo) && (SftyRslvrCalcnMeclSpdFild < SftyRslrOffsHndlrCalSpdHi)) ||
-      (SftyC2cData.StsCalibSfty == (uint8)STS_CALIB_FAILED)
+      (SftyC2cData.StsCalibSfty == (uint8)SFTYRSLVROFFSHNDLR_CALIB_FAILED)
      )
    {
       /* Exit online RODA validation */
@@ -1928,7 +1951,7 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_ValidateOnlineRodaInit(void)
    if(rodaEntryChkSt == E_OK)
    {
       /* Set safety calibration status to Active */
-      SftyC2cData.StsCalibSfty = (uint8)STS_CALIB_ACTIVE;
+      SftyC2cData.StsCalibSfty = (uint8)SFTYRSLVROFFSHNDLR_CALIB_ACTIVE;
 
       /* ROL entry check passed. Change validation state to RODA_LEARN */
       SftyRslvrOffsHndlrRolOffsVldnState = SFTYRSLVROFFSHNDLR_ROL_VLDN_RODA_LEARN;
@@ -1936,10 +1959,13 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_ValidateOnlineRodaInit(void)
    else
    {
       /* Entry check failed. Abort online RODA validation */
-      SftyC2cData.StsCalibSfty = (uint8)STS_CALIB_FAILED;
+      SftyC2cData.StsCalibSfty = (uint8)SFTYRSLVROFFSHNDLR_CALIB_FAILED;
 
-      /* Propagate offset value and validation status to DRCO and BSW  */
-      SftyRslvrOffsHndlr_PropagateOffsValues(SftyRslvrOffsHndlrRslvrOffDfltCalib, SFTY_RSLVR_OFFS_INVLD);
+      /* Update internal resolver offset value with default value */
+      SftyRslvrOffsHndlrInternRslvrOffs = SftyRslvrOffsHndlrRslvrOffDfltCalib;
+
+      /* Update internal resolver offset validity flag to invalid */
+      SftyRslvrOffsHndlrInternRslvrOffsVld = SFTY_RSLVR_OFFS_INVLD;
 
       /* ROL validation failed. Change validation state to VLDN_CMPLT */
       SftyRslvrOffsHndlrRolOffsVldnState = SFTYRSLVROFFSHNDLR_ROL_VLDN_CMPLT;
@@ -1981,10 +2007,13 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_ValidateOnlineRodaLearn(void)
       else if(rodaLearnStatus == RODA_LEARN_FAILED)
       {
          /* ROL learning failed */
-         SftyC2cData.StsCalibSfty = (uint8)STS_CALIB_FAILED;
+         SftyC2cData.StsCalibSfty = (uint8)SFTYRSLVROFFSHNDLR_CALIB_FAILED;
+
+         /* Update internal resolver offset value with default value */
+         SftyRslvrOffsHndlrInternRslvrOffs = SftyRslvrOffsHndlrRslvrOffDfltCalib;
 
-         /* Propagate default offset value and validation status to DRCO and BSW  */
-         SftyRslvrOffsHndlr_PropagateOffsValues(SftyRslvrOffsHndlrRslvrOffDfltCalib, SFTY_RSLVR_OFFS_INVLD);
+         /* Update internal resolver offset validity flag to invalid */
+         SftyRslvrOffsHndlrInternRslvrOffsVld = SFTY_RSLVR_OFFS_INVLD;
 
          /* ROL validation failed. Change validation state to VLDN_CMPLT */
          SftyRslvrOffsHndlrRolOffsVldnState = SFTYRSLVROFFSHNDLR_ROL_VLDN_CMPLT;
@@ -2000,10 +2029,13 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_ValidateOnlineRodaLearn(void)
       SftyC2cData.ReqRslvrCalib = FALSE;
 
       /* ROL learning failed */
-      SftyC2cData.StsCalibSfty = (uint8)STS_CALIB_FAILED;
+      SftyC2cData.StsCalibSfty = (uint8)SFTYRSLVROFFSHNDLR_CALIB_FAILED;
+
+      /* Update internal resolver offset value with default value */
+      SftyRslvrOffsHndlrInternRslvrOffs = SftyRslvrOffsHndlrRslvrOffDfltCalib;
 
-      /* Propagate default offset value and validation status to DRCO and BSW  */
-      SftyRslvrOffsHndlr_PropagateOffsValues(SftyRslvrOffsHndlrRslvrOffDfltCalib, SFTY_RSLVR_OFFS_INVLD);
+      /* Update internal resolver offset validity flag to invalid */
+      SftyRslvrOffsHndlrInternRslvrOffsVld = SFTY_RSLVR_OFFS_INVLD;
 
       /* ROL validation failed. Change validation state to VLDN_CMPLT */
       SftyRslvrOffsHndlrRolOffsVldnState = SFTYRSLVROFFSHNDLR_ROL_VLDN_CMPLT;
@@ -2064,10 +2096,13 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_ValidateOnlineRodaRangeChk(void)
          SftyRslvrOffsHndlrRslvrOffsRngErrMonrSt = ERR_DEB_MONR_STS_FAILED;
 
          /* ROL validation failed */
-         SftyC2cData.StsCalibSfty = (uint8)STS_CALIB_FAILED;
+         SftyC2cData.StsCalibSfty = (uint8)SFTYRSLVROFFSHNDLR_CALIB_FAILED;
 
-         /* Propagate default offset value and validation status to DRCO and BSW  */
-         SftyRslvrOffsHndlr_PropagateOffsValues(SftyRslvrOffsHndlrRslvrOffDfltCalib, SFTY_RSLVR_OFFS_INVLD);
+         /* Update internal resolver offset value with default value */
+         SftyRslvrOffsHndlrInternRslvrOffs = SftyRslvrOffsHndlrRslvrOffDfltCalib;
+
+         /* Update internal resolver offset validity flag to invalid */
+         SftyRslvrOffsHndlrInternRslvrOffsVld = SFTY_RSLVR_OFFS_INVLD;
 
          /* ROL validation failed. Change validation state to VLDN_CMPLT */
          SftyRslvrOffsHndlrRolOffsVldnState = SFTYRSLVROFFSHNDLR_ROL_VLDN_CMPLT;
@@ -2076,10 +2111,13 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_ValidateOnlineRodaRangeChk(void)
    else
    {
       /* Exit check failed. Abort online RODA validation */
-      SftyC2cData.StsCalibSfty = (uint8)STS_CALIB_FAILED;
+      SftyC2cData.StsCalibSfty = (uint8)SFTYRSLVROFFSHNDLR_CALIB_FAILED;
+
+      /* Update internal resolver offset value with default value */
+      SftyRslvrOffsHndlrInternRslvrOffs = SftyRslvrOffsHndlrRslvrOffDfltCalib;
 
-      /* Propagate default offset value and validation status to DRCO and BSW  */
-      SftyRslvrOffsHndlr_PropagateOffsValues(SftyRslvrOffsHndlrRslvrOffDfltCalib, SFTY_RSLVR_OFFS_INVLD);
+      /* Update internal resolver offset validity flag to invalid */
+      SftyRslvrOffsHndlrInternRslvrOffsVld = SFTY_RSLVR_OFFS_INVLD;
 
       /* ROL validation failed. Change validation state to VLDN_CMPLT */
       SftyRslvrOffsHndlrRolOffsVldnState = SFTYRSLVROFFSHNDLR_ROL_VLDN_CMPLT;
@@ -2130,7 +2168,7 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_ValidateOnlineRodaAscPlausChk(void)
          SftyC2cData.RslvrOffsNvm.Pattern = SFTY_RSLVR_OFFS_PATTERN_OFFLN_VLD;
 
          /* Inform BSW to store the new offset value by setting SSW calibration status to PASSED */
-         SftyC2cData.StsCalibSfty = (uint8)STS_CALIB_PASSED;
+         SftyC2cData.StsCalibSfty = (uint8)SFTYRSLVROFFSHNDLR_CALIB_PASSED;
 
          /* Start NvM storage timeout and monitor its status */
          SftyRslvrOffsHndlr_StartNvMStoreTimeout();
@@ -2140,11 +2178,17 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_ValidateOnlineRodaAscPlausChk(void)
       }
       else if (ascPlausCheckStatus == ASC_PLAUS_CHECK_FAILED)
       {
+         /* Stop ASC Plausibility check */
+         SftyRslvrOffsHndlr_StopAscPlausChk();
+
          /* ASC Plausibility check failed. Set SSW calibration status to failed */
-         SftyC2cData.StsCalibSfty = (uint8)STS_CALIB_FAILED;
+         SftyC2cData.StsCalibSfty = (uint8)SFTYRSLVROFFSHNDLR_CALIB_FAILED;
+
+         /* Update internal resolver offset value with default value */
+         SftyRslvrOffsHndlrInternRslvrOffs = SftyRslvrOffsHndlrRslvrOffDfltCalib;
 
-         /* Propagate offset value and validation status to DRCO and BSW  */
-         SftyRslvrOffsHndlr_PropagateOffsValues(SftyRslvrOffsHndlrRslvrOffDfltCalib, SFTY_RSLVR_OFFS_INVLD);
+         /* Update internal resolver offset validity flag to invalid */
+         SftyRslvrOffsHndlrInternRslvrOffsVld = SFTY_RSLVR_OFFS_INVLD;
 
          /* ROL validation failed. Change validation state to VLDN_CMPLT */
          SftyRslvrOffsHndlrRolOffsVldnState = SFTYRSLVROFFSHNDLR_ROL_VLDN_CMPLT;
@@ -2160,10 +2204,13 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_ValidateOnlineRodaAscPlausChk(void)
       SftyRslvrOffsHndlr_StopAscPlausChk();
 
       /* ASC Plausibility check failed due to RODA exit conditions */
-      SftyC2cData.StsCalibSfty = (uint8)STS_CALIB_FAILED;
+      SftyC2cData.StsCalibSfty = (uint8)SFTYRSLVROFFSHNDLR_CALIB_FAILED;
 
-      /* Propagate default offset value and validation status to DRCO and BSW  */
-      SftyRslvrOffsHndlr_PropagateOffsValues(SftyRslvrOffsHndlrRslvrOffDfltCalib, SFTY_RSLVR_OFFS_INVLD);
+      /* Update internal resolver offset value with default value */
+      SftyRslvrOffsHndlrInternRslvrOffs = SftyRslvrOffsHndlrRslvrOffDfltCalib;
+
+      /* Update internal resolver offset validity flag to invalid */
+      SftyRslvrOffsHndlrInternRslvrOffsVld = SFTY_RSLVR_OFFS_INVLD;
 
       /* ROL validation failed. Change validation state to VLDN_CMPLT */
       SftyRslvrOffsHndlrRolOffsVldnState = SFTYRSLVROFFSHNDLR_ROL_VLDN_CMPLT;
@@ -2202,10 +2249,13 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_ValidateOnlineRodaNvMStore(void)
    else if(nvmStoreStatus == NVM_STORE_FAILED)
    {
       /* ASC plausibility failed. Set SSW calibration status to failed */
-      SftyC2cData.StsCalibSfty = (uint8)STS_CALIB_FAILED;
+      SftyC2cData.StsCalibSfty = (uint8)SFTYRSLVROFFSHNDLR_CALIB_FAILED;
+
+      /* Update internal resolver offset value with default value */
+      SftyRslvrOffsHndlrInternRslvrOffs = SftyRslvrOffsHndlrRslvrOffDfltCalib;
 
-      /* Propagate default resolver offset value and validation status to DRCO and BSW  */
-      SftyRslvrOffsHndlr_PropagateOffsValues(SftyRslvrOffsHndlrRslvrOffDfltCalib, SFTY_RSLVR_OFFS_INVLD);
+      /* Update internal resolver offset validity flag to invalid */
+      SftyRslvrOffsHndlrInternRslvrOffsVld = SFTY_RSLVR_OFFS_INVLD;
 
       /* ROL offset store in NvM failed. Change validation state to VLDN_CMPLT */
       SftyRslvrOffsHndlrRolOffsVldnState = SFTYRSLVROFFSHNDLR_ROL_VLDN_CMPLT;
@@ -2239,8 +2289,11 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_ValidateOnlineRodaOffsetRamp(void)
    /* Check if ramping is done */
    if(rampDone == TRUE)
    {
-      /* Propagate new ROL offset value and validation status to DRCO and BSW  */
-      SftyRslvrOffsHndlr_PropagateOffsValues(SftyRslvrOffsHndlrBackEmfOffsInDeg, SFTY_RSLVR_OFFS_VLD);
+      /* Update internal resolver offset value with new RODA offset value */
+      SftyRslvrOffsHndlrInternRslvrOffs = SftyRslvrOffsHndlrBackEmfOffsInDeg;
+
+      /* Update internal resolver offset validity flag to valid */
+      SftyRslvrOffsHndlrInternRslvrOffsVld = SFTY_RSLVR_OFFS_VLD;
 
       /* ROL offset validation is successful. Change validation state to VLDN_CMPLT */
       SftyRslvrOffsHndlrRolOffsVldnState = SFTYRSLVROFFSHNDLR_ROL_VLDN_CMPLT;
@@ -2269,7 +2322,7 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_ValidateOnlineRodaComplete(void)
    /* ************* Source code **************** */
 
    /* Reset the calibration state to INACTIVE */
-   SftyC2cData.StsCalibSfty = (uint8)STS_CALIB_INACTIVE;
+   SftyC2cData.StsCalibSfty = (uint8)SFTYRSLVROFFSHNDLR_CALIB_INACTIVE;
 
    /* Reset ROL validation state to VALIDATION_ENTRY_CHK */
    SftyRslvrOffsHndlrRolOffsVldnState = SFTYRSLVROFFSHNDLR_ROL_VLDN_INIT;
@@ -2293,7 +2346,7 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_ValidateRslvrDataUdsInit(void)
    /* ************* Source code **************** */
 
    /* Set safety calibration status to Active */
-   SftyC2cData.StsCalibSfty = (uint8)STS_CALIB_ACTIVE;
+   SftyC2cData.StsCalibSfty = (uint8)SFTYRSLVROFFSHNDLR_CALIB_ACTIVE;
 
    /* Reset all error monitor states and variables before start of validation */
    SftyRslvrOffsHndlrRslvrOffsRngErrMonrSt      = ERR_DEB_MONR_STS_INACTIVE;
@@ -2347,13 +2400,16 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_ValidateRslvrDataUdsRangeChk(void)
    else
    {
       /* UDS validation failed */
-      SftyC2cData.StsCalibSfty = (uint8)STS_CALIB_FAILED;
+      SftyC2cData.StsCalibSfty = (uint8)SFTYRSLVROFFSHNDLR_CALIB_FAILED;
 
       /* Update resolver offset range error monitor state to failed */
       SftyRslvrOffsHndlrRslvrOffsRngErrMonrSt = ERR_DEB_MONR_STS_FAILED;
 
-      /* Propagate default offset value and validation status to DRCO and BSW  */
-      SftyRslvrOffsHndlr_PropagateOffsValues(SftyRslvrOffsHndlrRslvrOffDfltCalib, SFTY_RSLVR_OFFS_INVLD);
+      /* Update internal resolver offset value with default value */
+      SftyRslvrOffsHndlrInternRslvrOffs = SftyRslvrOffsHndlrRslvrOffDfltCalib;
+
+      /* Update internal resolver offset validity flag to invalid */
+      SftyRslvrOffsHndlrInternRslvrOffsVld = SFTY_RSLVR_OFFS_INVLD;
 
       /* UDS resolver offset validation failed. Change validation state to VLDN_CMPLT */
       SftyRslvrOffsHndlrUdsOffsVldnState = SFTYRSLVROFFSHNDLR_UDS_VLDN_CMPLT;
@@ -2395,7 +2451,7 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_ValidateRslvrDataUdsAscPlausChk(void)
       SftyC2cData.RslvrOffsNvm.Pattern = SFTY_RSLVR_OFFS_PATTERN_OFFLN_VLD;
 
       /* Inform BSW to store the new offset value by setting SSW calibration status to PASSED */
-      SftyC2cData.StsCalibSfty = (uint8)STS_CALIB_PASSED;
+      SftyC2cData.StsCalibSfty = (uint8)SFTYRSLVROFFSHNDLR_CALIB_PASSED;
 
       /* Start NvM storage timeout and monitor its status */
       SftyRslvrOffsHndlr_StartNvMStoreTimeout();
@@ -2405,11 +2461,17 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_ValidateRslvrDataUdsAscPlausChk(void)
    }
    else if(ascPlausCheckStatus == ASC_PLAUS_CHECK_FAILED)
    {
+      /* Stop ASC Plausibility check */
+      SftyRslvrOffsHndlr_StopAscPlausChk();
+
       /* ASC plausibility failed. Set SSW calibration status to failed */
-      SftyC2cData.StsCalibSfty = (uint8)STS_CALIB_FAILED;
+      SftyC2cData.StsCalibSfty = (uint8)SFTYRSLVROFFSHNDLR_CALIB_FAILED;
 
-      /* Propagate default resolver offset value and validation status to DRCO and BSW  */
-      SftyRslvrOffsHndlr_PropagateOffsValues(SftyRslvrOffsHndlrRslvrOffDfltCalib, SFTY_RSLVR_OFFS_INVLD);
+      /* Update internal resolver offset value with default value */
+      SftyRslvrOffsHndlrInternRslvrOffs = SftyRslvrOffsHndlrRslvrOffDfltCalib;
+
+      /* Update internal resolver offset validity flag to invalid */
+      SftyRslvrOffsHndlrInternRslvrOffsVld = SFTY_RSLVR_OFFS_INVLD;
 
       /* UDS resolver offset validation failed. Change validation state to VLDN_CMPLT */
       SftyRslvrOffsHndlrUdsOffsVldnState = SFTYRSLVROFFSHNDLR_UDS_VLDN_CMPLT;
@@ -2449,10 +2511,13 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_ValidateRslvrDataUdsNvMStore(void)
    else if(nvmStoreStatus == NVM_STORE_FAILED)
    {
       /* ASC plausibility failed. Set SSW calibration status to failed */
-      SftyC2cData.StsCalibSfty = (uint8)STS_CALIB_FAILED;
+      SftyC2cData.StsCalibSfty = (uint8)SFTYRSLVROFFSHNDLR_CALIB_FAILED;
+
+      /* Update internal resolver offset value with default value */
+      SftyRslvrOffsHndlrInternRslvrOffs = SftyRslvrOffsHndlrRslvrOffDfltCalib;
 
-      /* UDS offset value store in NvM failed. Propagate default resolver offset value and validation status to DRCO and BSW  */
-      SftyRslvrOffsHndlr_PropagateOffsValues(SftyRslvrOffsHndlrRslvrOffDfltCalib, SFTY_RSLVR_OFFS_INVLD);
+      /* Update internal resolver offset validity flag to invalid */
+      SftyRslvrOffsHndlrInternRslvrOffsVld = SFTY_RSLVR_OFFS_INVLD;
 
       /* UDS resolver offset validation failed. Change validation state to VLDN_CMPLT */
       SftyRslvrOffsHndlrUdsOffsVldnState = SFTYRSLVROFFSHNDLR_UDS_VLDN_CMPLT;
@@ -2486,8 +2551,11 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_ValidateRslvrDataUdsOffsetRamp(void)
    /* Check if ramping is done */
    if(rampDone == TRUE)
    {
-      /* Propagate new UDS resolver offset value and validation status to DRCO and BSW  */
-      SftyRslvrOffsHndlr_PropagateOffsValues(SftyRslvrOffsHndlrUdsOffsInDeg, SFTY_RSLVR_OFFS_VLD);
+      /* Update internal resolver offset value with new UDS offset value */
+      SftyRslvrOffsHndlrInternRslvrOffs = SftyRslvrOffsHndlrUdsOffsInDeg;
+
+      /* Update internal resolver offset validity flag to valid */
+      SftyRslvrOffsHndlrInternRslvrOffsVld = SFTY_RSLVR_OFFS_VLD;
 
       /* UDS resolver offset validation passed. Change validation state to VLDN_CMPLT */
       SftyRslvrOffsHndlrUdsOffsVldnState = SFTYRSLVROFFSHNDLR_UDS_VLDN_CMPLT;
@@ -2516,7 +2584,7 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_ValidateRslvrDataUdsComplete(void)
    /* ************* Source code **************** */
 
    /* Reset the calibration state to INACTIVE */
-   SftyC2cData.StsCalibSfty = (uint8)STS_CALIB_INACTIVE;
+   SftyC2cData.StsCalibSfty = (uint8)SFTYRSLVROFFSHNDLR_CALIB_INACTIVE;
 
    /* Reset UDS validation state to VALIDATION_INIT */
    SftyRslvrOffsHndlrUdsOffsVldnState = SFTYRSLVROFFSHNDLR_UDS_VLDN_INIT;
@@ -2540,7 +2608,7 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_ValidateRslvrDataNvmInit(void)
    /* ************* Source code **************** */
 
    /* Set safety calibration status to Active */
-   SftyC2cData.StsCalibSfty = (uint8)STS_CALIB_ACTIVE;
+   SftyC2cData.StsCalibSfty = (uint8)SFTYRSLVROFFSHNDLR_CALIB_ACTIVE;
 
    /* Reset all error monitor states and variables before start of validation */
    SftyRslvrOffsHndlrRslvrOffsCrcErrMonrSt    = ERR_DEB_MONR_STS_INACTIVE;
@@ -2579,10 +2647,13 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_ValidateRslvrDataNvmPatternChk(void)
    else
    {
       /* NvM Pattern check failed. Set SSW calibration status to failed */
-      SftyC2cData.StsCalibSfty = (uint8)STS_CALIB_FAILED;
+      SftyC2cData.StsCalibSfty = (uint8)SFTYRSLVROFFSHNDLR_CALIB_FAILED;
 
-      /* Propagate default offset value and validation status to DRCO and BSW  */
-      SftyRslvrOffsHndlr_PropagateOffsValues(SftyRslvrOffsHndlrRslvrOffDfltCalib, SFTY_RSLVR_OFFS_UNDETM);
+      /* Update internal resolver offset value with default value */
+      SftyRslvrOffsHndlrInternRslvrOffs = SftyRslvrOffsHndlrRslvrOffDfltCalib;
+
+      /* Update internal resolver offset validity flag to \'Undetermined\' */
+      SftyRslvrOffsHndlrInternRslvrOffsVld = SFTY_RSLVR_OFFS_UNDETM;
 
       /* NvM resolver offset validation failed. Change validation state to VLDN_CMPLT */
       SftyRslvrOffsHndlrNvMOffsVldnState = SFTYRSLVROFFSHNDLR_NVM_VLDN_CMPLT;
@@ -2634,10 +2705,13 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_ValidateRslvrDataNvmCrcChk(void)
    else
    {
       /* NvM resolver offset checksum is invalid. Set SSW calibration status to FAILED */
-      SftyC2cData.StsCalibSfty = (uint8)STS_CALIB_FAILED;
+      SftyC2cData.StsCalibSfty = (uint8)SFTYRSLVROFFSHNDLR_CALIB_FAILED;
+
+      /* Update internal resolver offset value with default value */
+      SftyRslvrOffsHndlrInternRslvrOffs = SftyRslvrOffsHndlrRslvrOffDfltCalib;
 
-      /* Propagate default offset value and validation status to DRCO and BSW  */
-      SftyRslvrOffsHndlr_PropagateOffsValues(SftyRslvrOffsHndlrRslvrOffDfltCalib, SFTY_RSLVR_OFFS_UNDETM);
+      /* Update internal resolver offset validity flag to \'Undetermined\' */
+      SftyRslvrOffsHndlrInternRslvrOffsVld = SFTY_RSLVR_OFFS_UNDETM;
 
       /* NvM resolver offset validation failed. Change validation state to VLDN_CMPLT */
       SftyRslvrOffsHndlrNvMOffsVldnState = SFTYRSLVROFFSHNDLR_NVM_VLDN_CMPLT;
@@ -2675,10 +2749,13 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_ValidateRslvrDataNvmRangeChk(void)
       SftyRslvrOffsHndlrNvMOffsInDeg = rslvrOffsNvmInDegree;
 
       /* NvM Validation passed */
-      SftyC2cData.StsCalibSfty = (uint8)STS_CALIB_PASSED;
+      SftyC2cData.StsCalibSfty = (uint8)SFTYRSLVROFFSHNDLR_CALIB_PASSED;
 
-      /* Propagate NvM offset value and validation status to DRCO and BSW  */
-      SftyRslvrOffsHndlr_PropagateOffsValues(SftyRslvrOffsHndlrNvMOffsInDeg, SFTY_RSLVR_OFFS_VLD);
+      /* Update internal resolver offset value with NvM offset value */
+      SftyRslvrOffsHndlrInternRslvrOffs = SftyRslvrOffsHndlrNvMOffsInDeg;
+
+      /* Update internal resolver offset validity flag to valid */
+      SftyRslvrOffsHndlrInternRslvrOffsVld = SFTY_RSLVR_OFFS_VLD;
 
       /* NvM resolver offset validation passed. Change validation state to VLDN_CMPLT */
       SftyRslvrOffsHndlrNvMOffsVldnState = SFTYRSLVROFFSHNDLR_NVM_VLDN_CMPLT;
@@ -2686,10 +2763,13 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_ValidateRslvrDataNvmRangeChk(void)
    else
    {
       /* NvM Validation failed */
-      SftyC2cData.StsCalibSfty = (uint8)STS_CALIB_FAILED;
+      SftyC2cData.StsCalibSfty = (uint8)SFTYRSLVROFFSHNDLR_CALIB_FAILED;
+
+      /* Update internal resolver offset value with default value */
+      SftyRslvrOffsHndlrInternRslvrOffs = SftyRslvrOffsHndlrRslvrOffDfltCalib;
 
-      /* Propagate default offset value and validation status to DRCO and BSW  */
-      SftyRslvrOffsHndlr_PropagateOffsValues(SftyRslvrOffsHndlrRslvrOffDfltCalib, SFTY_RSLVR_OFFS_UNDETM);
+      /* Update internal resolver offset validity flag to \'Undetermined\' */
+      SftyRslvrOffsHndlrInternRslvrOffsVld = SFTY_RSLVR_OFFS_UNDETM;
 
       /* NvM resolver offset validation failed. Change validation state to VLDN_CMPLT */
       SftyRslvrOffsHndlrNvMOffsVldnState = SFTYRSLVROFFSHNDLR_NVM_VLDN_CMPLT;
@@ -2715,7 +2795,7 @@ LOCAL_INLINE void SftyRslvrOffsHndlr_ValidateRslvrDataNvmComplete(void)
    /* ************* Source code **************** */
 
    /* Reset the calibration state to INACTIVE */
-   SftyC2cData.StsCalibSfty = (uint8)STS_CALIB_INACTIVE;
+   SftyC2cData.StsCalibSfty = (uint8)SFTYRSLVROFFSHNDLR_CALIB_INACTIVE;
 
    /* Reset NvM validation state to INACTIVE to process further requests */
    SftyRslvrOffsHndlrNvMOffsVldnState = SFTYRSLVROFFSHNDLR_NVM_VLDN_INIT;
@@ -3495,7 +3575,9 @@ FUNC(void, SFTYRSLVROFFSHNDLR_CODE) SftyRslvrOffsHndlr_InitAsilC(void)
    SftyRslvrOffsHndlrAscVldMeasCycCntr       = 0U;
    SftyRslvrOffsHndlrInVldMeasCycCntr        = 0U;
    SftyRslvrOffsHndlrIqCntr                  = 0U;
-   SftyRslvrOffsHndlrInternRslvrOffsVld      = SFTY_RSLVR_OFFS_INVLD;
+   SftyRslvrOffsHndlrInternRslvrOffsVld      = SFTY_RSLVR_OFFS_UNDETM;
+
+   SftyC2cData.StsCalibSfty = (uint8)SFTYRSLVROFFSHNDLR_CALIB_INACTIVE;
 
    /* Initialize all global variables used in slower raster */
    SftyRslvrOffsHndlrRslvrOffsRad = 0.0F;
@@ -3522,7 +3604,7 @@ FUNC(void, SFTYRSLVROFFSHNDLR_CODE) SftyRslvrOffsHndlr_MainFunctionAsilC(void)
    /* ************* Source code **************** */
 
    /* Accept requests only if current SSW validation state in Inactive */
-   if(SftyC2cData.StsCalibSfty == (uint8)STS_CALIB_INACTIVE)
+   if(SftyC2cData.StsCalibSfty == (uint8)SFTYRSLVROFFSHNDLR_CALIB_INACTIVE)
    {
       /* Accept request from BSW */
       SftyRslvrOffsHndlrReqCalibSfty = BswC2cData.ReqCalibSfty;
@@ -3572,6 +3654,24 @@ FUNC(void, SFTYRSLVROFFSHNDLR_CODE) SftyRslvrOffsHndlr_MainFunctionAsilC(void)
       }
    }
 
+#ifndef SERIES_PRODUCTION
+   if(SftyReplcmtRslvrOffsStiEna == TRUE)
+   {
+      /* Use replacement parameters */
+      SftyRslvrOffsHndlrC2cRslvrOffsInDeg  = SftyReplcmtRslvrOffsPrm;
+      SftyRslvrOffsHndlrC2cRslvrOffsVld    = SftyReplcmtRslvrOffsVld;
+   }
+   else
+#endif /* SERIES_PRODUCTION */
+   {
+      /* Use internal value */
+      SftyRslvrOffsHndlrC2cRslvrOffsInDeg = SftyRslvrOffsHndlrInternRslvrOffs;
+      SftyRslvrOffsHndlrC2cRslvrOffsVld   = SftyRslvrOffsHndlrInternRslvrOffsVld;
+   }
+
+   /* Propagate offset value and validation status to DRCO and BSW  */
+   SftyRslvrOffsHndlr_PropagateOffsValues(SftyRslvrOffsHndlrC2cRslvrOffsInDeg, SftyRslvrOffsHndlrC2cRslvrOffsVld);
+
 #ifdef SWIT_IT_Active
    SWIT_SftyRslvrOffsHndlr_MainFunctionAsilC_End_Hook();
 #endif
diff --git a/src/fw_cu/build/Parfiles/P2_100kW/Testbench/VW310E_76_49_A274_0028_VEH_200901.par b/src/fw_cu/build/Parfiles/P2_100kW/Testbench/VW310E_76_49_A274_0028_VEH_200901.par
index b6a9e8516..93eb07e00 100644
--- a/src/fw_cu/build/Parfiles/P2_100kW/Testbench/VW310E_76_49_A274_0028_VEH_200901.par
+++ b/src/fw_cu/build/Parfiles/P2_100kW/Testbench/VW310E_76_49_A274_0028_VEH_200901.par
@@ -10762,7 +10762,7 @@ SftyRslvrEvlnDsadcSinOffsCorrValRngThd [FLOAT]  250 ;  250
 SftyRslvrEvlnDsadcCosMeasPeak [FLOAT]  0.0004819277 ;  2075.0000466875
 SftyRslvrEvlnDsadcSinMeasPeak [FLOAT]  0.0004819277 ;  2075.0000466875
 SftyRslvrEvlnDsadcSinCosRatThd [FLOAT]  0.600000011920929 ;  0.600000011920929
-SftyRslvrEvlnDsadcSqrdSumDif [FLOAT]  0.30000001192092896 ;  0.30000001192092896
+SftyRslvrEvlnDsadcSqrdSumDif [FLOAT]  0.40000001192092896 ;  0.40000001192092896
 SftyRslvrEvlnVadcLstValGain [FLOAT]  0.20260000228881836 ;  0.20260000228881836
 SftyRslvrEvlnVadcPrevValGain [FLOAT]  0.8105000257492065 ;  0.8105000257492065
 SftyRslvrEvInGtmRslvrExctFreqMin [FLOAT] 8000.0; 8000.0
diff --git a/src/fw_cu/build/a2l/Measurements-to-Timeslices-Mapping.csv b/src/fw_cu/build/a2l/Measurements-to-Timeslices-Mapping.csv
index a2e41c761..7048ca9fb 100644
--- a/src/fw_cu/build/a2l/Measurements-to-Timeslices-Mapping.csv
+++ b/src/fw_cu/build/a2l/Measurements-to-Timeslices-Mapping.csv
@@ -5144,6 +5144,8 @@ SftyRslvrOffsHndlrAvgIqCntr,Core_1,Core_1_200us,0.2,,,SSW
 SftyRslvrOffsHndlrAvgSpd,Core_1,Core_1_200us,0.2,,,SSW
 SftyRslvrOffsHndlrAvgSpdCntr,Core_1,Core_1_200us,0.2,,,SSW
 SftyRslvrOffsHndlrBackEmfOffsInDeg,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrC2cRslvrOffsInDeg,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrC2cRslvrOffsVld,Core_1,Core_1_200us,0.2,,,SSW
 SftyRslvrOffsHndlrFirstRunDone,Core_1,Core_1_200us,0.2,,,SSW
 SftyRslvrOffsHndlrIacImbVldyFlg,Core_1,Core_1_200us,0.2,,,SSW
 SftyRslvrOffsHndlrIacSumErrCntr,Core_1,Core_1_200us,0.2,,,SSW
diff --git a/src/fw_cu/build/subVariants/series_production/Parfiles/Testbench/VW310E_75_49_265A_0024_VEH_192701.par b/src/fw_cu/build/subVariants/series_production/Parfiles/Testbench/VW310E_75_49_265A_0024_VEH_192701.par
index 3e655cf3f..4473b8435 100644
--- a/src/fw_cu/build/subVariants/series_production/Parfiles/Testbench/VW310E_75_49_265A_0024_VEH_192701.par
+++ b/src/fw_cu/build/subVariants/series_production/Parfiles/Testbench/VW310E_75_49_265A_0024_VEH_192701.par
@@ -29559,8 +29559,8 @@ SftyReplcmtPwrMdlEstimdTqStiEna [UINT(8)]  0 ; FALSE
 SftyReplcmtPwrMdlEstimdTqVal [FLOAT]  0 ;  0
 SftyReplcmtPwrMdlRawValStiEna [UINT(8)]  0 ;  0
 SftyReplcmtRslvrOffsPrm [FLOAT]  0 ;  0
-SftyReplcmtRslvrOffsStiEna [UINT(8)]  0 ; FALSE
-SftyReplcmtRslvrOffsVld [UINT(8)]  0 ; FALSE
+SftyReplcmtRslvrOffsStiEna [UINT(8)]  1 ; TRUE
+SftyReplcmtRslvrOffsVld [UINT(8)]  1 ; TRUE
 SftyReplcmtSbcCtrlNoClrRstErrCntrStiEna [UINT(8)]  0 ; FALSE
 SftyReplcmtSbcCtrlWaitTi [UINT(32)]  0 ;  0
 SftyReplcmtSbcCtrlWaitTiStiEna [UINT(8)]  0 ; FALSE
@@ -29616,7 +29616,7 @@ SftyRslvrEvlnDsadcSinOffsCorrValRngThd [FLOAT]  250 ;  250
 SftyRslvrEvlnDsadcCosMeasPeak [FLOAT]  0.0004819277 ;  2075.0000466875
 SftyRslvrEvlnDsadcSinMeasPeak [FLOAT]  0.0004819277 ;  2075.0000466875
 SftyRslvrEvlnDsadcSinCosRatThd [FLOAT]  0.600000011920929 ;  0.600000011920929
-SftyRslvrEvlnDsadcSqrdSumDif [FLOAT]  0.30000001192092896 ;  0.30000001192092896
+SftyRslvrEvlnDsadcSqrdSumDif [FLOAT]  0.40000001192092896 ;  0.40000001192092896
 SftyRslvrEvlnVadcLstValGain [FLOAT]  0.20260000228881836 ;  0.20260000228881836
 SftyRslvrEvlnVadcPrevValGain [FLOAT]  0.8105000257492065 ;  0.8105000257492065
 SftyRslvrEvInGtmRslvrExctFreqMin [FLOAT] 8000.0; 8000.0
'

b'commit 166464d73917b62b835409bcf44f51eddd62ffd1
Author: Neehara ODANKY <neehara.odanky.jv.ext@valeo.com>
Date:   Wed Mar 16 14:29:09 2022 +0530

    $100kW-55230$ - 100kW-54791 - [P2_100kW] UT Issue Fix : Code Update for SSW ParkLock Modules
    
    Change-Id: If0fc3b7744ef8328fcce9bea752394caba8d258e

diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/src/SftyParkLockActr.c b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/src/SftyParkLockActr.c
index fcd6f5e02..0f09afd4f 100644
--- a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/src/SftyParkLockActr.c
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/src/SftyParkLockActr.c
@@ -7,7 +7,7 @@
 /* Department: Valeo Siemens eAutomotive                                  */
 /* I DT EC R&D                                                            */
 /* ********************************************************************** */
-/* Copyright (C) Valeo Siemens eAutomotive Germany GmbH 2021              */
+/* Copyright (C) Valeo Siemens eAutomotive Germany GmbH 2022              */
 /* All Rights Reserved. Confidential                                      */
 /* ********************************************************************** */
 
@@ -477,31 +477,24 @@ LOCAL_INLINE float32 SftyParkLockActr_Intrpn (const float32 CurAct, const float3
    float32 deltaMap;
    float32 deltaFoundMap;
 
-   /* prevent division by zero */
-   if(XAxPrv == XAxAct)
-   {
-      intrpnVal = CurAct;
-   }
-   else
-   {
-      /* 1. Step: calculate delta between previous and actual found raw value */
-      rawDelta = XAxAct - XAxPrv;
+   /* 1. Step: calculate delta between previous and actual found raw value */
+   rawDelta = XAxAct - XAxPrv;
 
-      /* 2. Step: calculate delta between input value and actual found raw value */
-      rawDeltaFound = XAxAct - xAx;
+   /* 2. Step: calculate delta between input value and actual found raw value */
+   rawDeltaFound = XAxAct - xAx;
 
-      /* 3. Step: calculate factor */
-      fac = MLIB_F32S32((sint32)rawDeltaFound) / MLIB_F32S32((sint32)rawDelta);
+   /* 3. Step: calculate factor */
+   fac = MLIB_F32S32((sint32)rawDeltaFound) / MLIB_F32S32((sint32)rawDelta);
 
-      /* 4. Step: calculate delta between two map points */
-      deltaMap = CurAct - CurPrv;
+   /* 4. Step: calculate delta between two map points */
+   deltaMap = CurAct - CurPrv;
 
-      /* 5. Step: use factor to calculate delta between found temperature and actual table */
-      deltaFoundMap = deltaMap * fac;
+   /* 5. Step: use factor to calculate delta between found temperature and actual table */
+   deltaFoundMap = deltaMap * fac;
+
+   /* 6. Step: calculate interpolated value */
+   intrpnVal = CurAct - deltaFoundMap;
 
-      /* 6. Step: calculate interpolated value */
-      intrpnVal = CurAct - deltaFoundMap;
-   }
 
    return intrpnVal;
 }
@@ -526,7 +519,7 @@ LOCAL_INLINE float32 SftyParkLockActr_1DLookUpTable(uint16 uTblSize, const float
    /* ******** Variables declaration *********** */
    uint8  IpolReq = FALSE;
 
-   uint16 Ix = (uTblSize > 0U) ? (uTblSize - 1U) : 0U; /*start for index*/
+   uint16 Ix = uTblSize - 1U; /*start for index*/
 
    float32 retVal;
 
@@ -1644,7 +1637,7 @@ FUNC(void, SFTYPARKLOCKACTR_CODE) SftyParkLockActr_MainFast(void)
 
 /*================== [closure] ==============================================*/
 /* ********************************************************************** */
-/* Copyright (C) Valeo Siemens eAutomotive 2021                           */
+/* Copyright (C) Valeo Siemens eAutomotive 2022                           */
 /* All Rights Reserved. Confidential                                      */
 /* ********************************************************************** */
 /*==================[end of file]============================================*/
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockPosnAcqn/src/SftyParkLockPosnAcqn.c b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockPosnAcqn/src/SftyParkLockPosnAcqn.c
index bcde59b40..a5328dfa0 100644
--- a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockPosnAcqn/src/SftyParkLockPosnAcqn.c
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockPosnAcqn/src/SftyParkLockPosnAcqn.c
@@ -1,5 +1,5 @@
 /* ********************************************************************** */
-/* Sourcefile: SftyParkLockPosnAcqn.c                                            */
+/* Sourcefile: SftyParkLockPosnAcqn.c                                     */
 /*                                                                        */
 /* Project: 100KW                                                         */
 /* Aurix                                                                  */
@@ -7,7 +7,7 @@
 /* Department: Valeo Siemens eAutomotive                                  */
 /* I DT EC R&D                                                            */
 /* ********************************************************************** */
-/* Copyright (C) Valeo Siemens eAutomotive Germany GmbH 2021              */
+/* Copyright (C) Valeo Siemens eAutomotive Germany GmbH 2022              */
 /* All Rights Reserved. Confidential                                      */
 /* ********************************************************************** */
 
@@ -148,8 +148,6 @@ STATIC VAR(SftyParkLockSENTDataType, SFTYPARKLOCKPOSNACQN_VAR) SftyParkLockPosnA
 #define SFTYPARKLOCKPOSNACQN_AREA_2_STOP_SEC_VAR_FAST_CLEARED
 #include "MemMap.h"
 
-
-
 /*================== [definition of global functions] =======================*/
 /* ********************************** SLOW ********************************* */
 
@@ -216,6 +214,40 @@ LOCAL_INLINE void SftyParkLockPosnAcqn_GetParkLockVal(void)
 \treturn;
 
 }
+
+/******************************************************************/
+/*!
+ * \\fn         : uint8 SftyParkLockPosnAcqn_ChkTiStamp(uint32* lstTiStamp, const uint32* curTiStamp)
+ * \\brief      : This function checks whether timestamp is renewed or not
+ * \\param[in]  : lstTiStamp - Last time stamp
+ * \\param[out] : curTiStamp - Current time stamp
+ * \\return     : retVal
+ * \\return     : Result of operation.
+ *               E_NOT_OK - time stamp not OK
+ *               E_OK - time stamp OK
+ */
+/******************************************************************/
+LOCAL_INLINE uint8 SftyParkLockPosnAcqn_ChkTiStamp(const uint32* lstTiStamp, const uint32* curTiStamp)
+{
+   /* ******** Variables declaration *********** */
+   uint8 retVal;
+
+   /* ************* Source code **************** */
+   /* Check for new values */
+   if(*lstTiStamp == *curTiStamp)
+   {
+      /* No new values, error */
+      retVal = E_NOT_OK;
+   }
+   else
+   {
+      /* Values were renewed, everything OK */
+      retVal = E_OK;
+   }
+
+   return retVal;
+}
+
 /******************************************************************/
 /*!
  * \\fn      uint8 SftyParkLockPosnAcqn_ChkRtsTiStamp
@@ -233,32 +265,34 @@ LOCAL_INLINE uint8 SftyParkLockPosnAcqn_ChkRtsTiStamp(void)
    /* Get current timestamp */
    SftyParkLockPosnAcqnCurrRtsTiStamp = SftyParkLockPosnAcqnSENTSnrDataRx.TiStampRts;
 
-      /* Compare with current time stamp and last time stamp to confirm if the time stamp is updated*/
-\t  retVal = (uint8)SftyUtils_ChkTiStamp(&SftyParkLockPosnAcqnLstRtsTiStamp, &SftyParkLockPosnAcqnCurrRtsTiStamp);
-
-\t  if(retVal == ERR_DEB_MONR_STS_PASSED)
-\t  {    
-\t       /*if time updated, check if delta time is less than 1ms */
-\t       SftyParkLockPosnAcqnDeltaRtsTiStamp = SftyParkLockPosnAcqnCurrRtsTiStamp - SftyParkLockPosnAcqnLstRtsTiStamp;
-\t  
-\t\t   if((SftyParkLockPosnAcqnDeltaRtsTiStamp < SftyParkLockPosnAcqnDeltaRtsTiStampThd))
-\t\t\t{
-\t\t        /* if the delta time stamp is less than 1ms, set the timeout monitor to PASSED*/
-\t\t\t\tretVal = ERR_DEB_MONR_STS_PASSED;    
-\t\t\t}
-\t\t\telse
-\t\t\t{
-\t            /* if the delta time stamp is over than 1ms, set the timeout monitor to FAILED*/
-\t\t\t\tretVal = ERR_DEB_MONR_STS_FAILED; \t 
-\t\t\t}
-
-\t  }
-\t  else
-\t  {
-\t       /* if the time stamp is updated, set the timeout monitor to FAILED*/
-           retVal = ERR_DEB_MONR_STS_FAILED; 
-\t  }
-   
+   /* Compare with current time stamp and last time stamp to confirm if the time stamp is updated*/
+   retVal = SftyParkLockPosnAcqn_ChkTiStamp(&SftyParkLockPosnAcqnLstRtsTiStamp, &SftyParkLockPosnAcqnCurrRtsTiStamp);
+
+   if(retVal == E_OK)
+   {
+      /*if time updated, check if delta time is less than 1ms */
+      SftyParkLockPosnAcqnDeltaRtsTiStamp = SftyUtils_CalcTiStampDif(SftyParkLockPosnAcqnCurrRtsTiStamp,SftyParkLockPosnAcqnLstRtsTiStamp);
+
+      if((SftyParkLockPosnAcqnDeltaRtsTiStamp < SftyParkLockPosnAcqnDeltaRtsTiStampThd))
+      {
+         /* if the delta time stamp is less than 1ms, set the timeout monitor to PASSED*/
+         retVal = ERR_DEB_MONR_STS_PASSED;
+      }
+      else
+      {
+         /* if the delta time stamp is over than 1ms, set the timeout monitor to FAILED*/
+         retVal = ERR_DEB_MONR_STS_FAILED;
+      }
+
+   }
+   else
+   {
+      /* if the time stamp is updated, set the timeout monitor to FAILED*/
+      retVal = ERR_DEB_MONR_STS_FAILED;
+   }
+
+   /* Update the last timestamp */
+   SftyParkLockPosnAcqnLstRtsTiStamp = SftyParkLockPosnAcqnCurrRtsTiStamp;
 
    return retVal;
 
@@ -275,53 +309,53 @@ LOCAL_INLINE uint8 SftyParkLockPosnAcqn_ChkRtsTiStamp(void)
 
 LOCAL_INLINE void SftyParkLockPosnAcqn_TimeoutCheck(void)
 {
-    uint8 errMonSts;
-\t/************** Source code *****************/
-    /* Check if the parklock sensor power supply is normal */
-\tif(SftyParkLockPosnAcqnSnsrSts == TRUE)
-\t{
-\t     /* Get the SftyParkLockPosnAcqn WDI timestamp*/
-         SftyParkLockPosnAcqnCurrDmaTiStamp = SftyParkLockPosnAcqnSENTSnrDataRx.TiStampDma;
-\t\t 
-\t\t /* Check if the WDI timestamp updated normally*/
-\t\t errMonSts = SftyUtils_ChkTiStamp(&SftyParkLockPosnAcqnLstDmaTiStamp, &SftyParkLockPosnAcqnCurrDmaTiStamp);
-
-\t\t /*If the WDI timestamp update normally*/
-\t\t if(errMonSts == ERR_DEB_MONR_STS_PASSED)
-\t\t {
-\t\t    /* Get the SftyParkLockSnsrWdi flag*/
-\t\t    SftyParkLockPosnAcqnSnsrWdiFlg = SftyParkLockPosnAcqnSENTSnrDataRx.RxIntStat.B.bit13;
-
-\t\t\t/* Check if the WDI flag is triggered */
-            if(SftyParkLockPosnAcqnSnsrWdiFlg == FALSE)
-\t        {
-                /* Check parklock time stamp and update to the tim out monitor status*/
-\t\t        SftyParkLockPosnAcqnSnrToutErrMonrSt = SftyParkLockPosnAcqn_ChkRtsTiStamp();\t 
-\t\t\t\t
-\t        }
-\t\t    else
-\t        {
-\t            /* Set the time out monitor status to FAILED*/
-\t\t        SftyParkLockPosnAcqnSnrToutErrMonrSt = ERR_DEB_MONR_STS_FAILED;
-\t\t\t\t
-\t\t\t     /* If WDI flag is triggered, clear the WDI flag */
-\t\t\t     SENT_WDI_FLG_CLR = 1U;
-\t\t    }
-
-\t\t }
-\t     else
-\t     {
-\t\t      /* Set the time out monitor status to FAILED*/
-\t\t\t  SftyParkLockPosnAcqnSnrToutErrMonrSt = ERR_DEB_MONR_STS_FAILED;
-\t     }
-\t    
-\t}
-\telse
-\t{
-\t\t/*Do nothing*/
-\t}
-\t\t\t
-\treturn;
+   uint8 errMonSts;
+   /************** Source code *****************/
+   /* Check if the parklock sensor power supply is normal */
+   if(SftyParkLockPosnAcqnSnsrSts == TRUE)
+   {
+      /* Get the SftyParkLockPosnAcqn WDI timestamp*/
+      SftyParkLockPosnAcqnCurrDmaTiStamp = SftyParkLockPosnAcqnSENTSnrDataRx.TiStampDma;
+
+      /* Check if the WDI timestamp updated normally*/
+      errMonSts = SftyUtils_ChkTiStamp(&SftyParkLockPosnAcqnLstDmaTiStamp, &SftyParkLockPosnAcqnCurrDmaTiStamp);
+
+      /*If the WDI timestamp update normally*/
+      if(errMonSts == ERR_DEB_MONR_STS_PASSED)
+      {
+         /* Get the SftyParkLockSnsrWdi flag*/
+         SftyParkLockPosnAcqnSnsrWdiFlg = SftyParkLockPosnAcqnSENTSnrDataRx.RxIntStat.B.bit13;
+
+         /* Check if the WDI flag is triggered */
+         if(SftyParkLockPosnAcqnSnsrWdiFlg == FALSE)
+         {
+            /* Check parklock time stamp and update to the tim out monitor status*/
+            SftyParkLockPosnAcqnSnrToutErrMonrSt = SftyParkLockPosnAcqn_ChkRtsTiStamp();
+
+         }
+         else
+         {
+            /* Set the time out monitor status to FAILED*/
+            SftyParkLockPosnAcqnSnrToutErrMonrSt = ERR_DEB_MONR_STS_FAILED;
+
+            /* If WDI flag is triggered, clear the WDI flag */
+            SENT_WDI_FLG_CLR = 1U;
+         }
+
+      }
+      else
+      {
+         /* Set the time out monitor status to FAILED*/
+         SftyParkLockPosnAcqnSnrToutErrMonrSt = ERR_DEB_MONR_STS_FAILED;
+      }
+
+   }
+   else
+   {
+      /*Do nothing*/
+   }
+
+   return;
 }
 
 
@@ -458,7 +492,7 @@ FUNC(void, SFTYPARKLOCKPOSNACQN_CODE) SftyParkLockPosnAcqn_InitArea2(void)
 
 /*! @} doxygen end of group definition */
 /* ********************************************************************** */
-/* Copyright (C) Valeo Siemens eAutomotive Germany GmbH 2021              */
+/* Copyright (C) Valeo Siemens eAutomotive Germany GmbH 2022              */
 /* All Rights Reserved. Confidential                                      */
 /* ********************************************************************** */
 /*==================[end of file]============================================*/
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockPosnAcqn/src/SftyParkLockPosnAcqn_data.c b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockPosnAcqn/src/SftyParkLockPosnAcqn_data.c
index dc32a2d85..8e04a4345 100644
--- a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockPosnAcqn/src/SftyParkLockPosnAcqn_data.c
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockPosnAcqn/src/SftyParkLockPosnAcqn_data.c
@@ -1,9 +1,9 @@
 /* ***************************************************************** */
-/* Sourcefile: SftyParkLockPosnAcqn_data.c                                  */
-/* ADD Container: SftyParkLockPosnAcqn                                      */
+/* Sourcefile: SftyParkLockPosnAcqn_data.c                           */
+/* ADD Container: SftyParkLockPosnAcqn                               */
 /* ADD Container Version:01.00                                       */
 /* ***************************************************************** */
-/* Copyright (C) Valeo-Siemens eAutomotive GmbH 2021                 */
+/* Copyright (C) Valeo-Siemens eAutomotive GmbH 2022                 */
 /* All Rights Reserved. Confidential                                 */
 /* ***************************************************************** */
 /*!
@@ -81,7 +81,7 @@ VAR(uint32, SFTYPARKLOCKPOSNACQN_VAR) SftyParkLockPosnAcqnRawVal = 0U;
 #define SFTYPARKLOCKPOSNACQN_START_SEC_CALIB_32
 #include "MemMap.h"
 /*
-@@ SYMBOL = SftyParkLockPosnAcqnDeltaTiStampThd
+@@ SYMBOL = SftyParkLockPosnAcqnDeltaRtsTiStampThd
 @@ A2L_TYPE = PARAMETER
 @@ DATA_TYPE = ULONG
 @@ DESCRIPTION = "Safety parklock position detail time stamp threshold"
@@ -99,7 +99,7 @@ CONST(uint32, SFTYPARKLOCKPOSNACQN_VAR) SftyParkLockPosnAcqnDeltaRtsTiStampThd =
 
 /** @} doxygen end group definition */
 /* ***************************************************************** */
-/* Copyright (C) Valeo-Siemens eAutomotive GmbH 2021                 */
+/* Copyright (C) Valeo-Siemens eAutomotive GmbH 2022                 */
 /* All Rights Reserved. Confidential                                 */
 /* ***************************************************************** */
 
'

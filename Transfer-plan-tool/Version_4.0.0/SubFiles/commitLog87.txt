b'commit 0b159d59ea0ecd963b2ae38be28adb4e28148967
Author: Neehara ODANKY <neehara.odanky.jv.ext@valeo.com>
Date:   Fri Jan 7 10:09:06 2022 +0530

    $100kW-49472$ - FCT_CtrlParkPos - Implement SW Unit SftyParkLockActr
    
    Change-Id: I10d6a84e9145b4d3634fc8bfff132be7dd83a1eb

diff --git a/src/fw_cu/Components/Cmn/Shared/MemMap/include/SftyNextGen_MemMap.h b/src/fw_cu/Components/Cmn/Shared/MemMap/include/SftyNextGen_MemMap.h
index 9df160c8e..d1823f104 100644
--- a/src/fw_cu/Components/Cmn/Shared/MemMap/include/SftyNextGen_MemMap.h
+++ b/src/fw_cu/Components/Cmn/Shared/MemMap/include/SftyNextGen_MemMap.h
@@ -5481,6 +5481,64 @@
    #define SFTY_ASIL_A_STOP_SEC_VAR_FAST_CLEARED
    #include "BasicNextGen_MemMap.h"
 
+/******************************** SftyParkLockActr  ***********************************************************/
+
+#elif (defined SFTYPARKLOCKACTR_AREA_2_START_SEC_CODE_FAST)
+   #undef SFTYPARKLOCKACTR_AREA_2_START_SEC_CODE_FAST
+   #define SFTY_ASIL_B_START_SEC_CODE_FAST
+   #include "BasicNextGen_MemMap.h"
+#elif (defined SFTYPARKLOCKACTR_AREA_2_STOP_SEC_CODE_FAST)
+   #undef SFTYPARKLOCKACTR_AREA_2_STOP_SEC_CODE_FAST
+   #define SFTY_ASIL_B_STOP_SEC_CODE_FAST
+   #include "BasicNextGen_MemMap.h"
+#elif (defined SFTYPARKLOCKACTR_AREA_2_START_SEC_CODE_SLOW)
+   #undef SFTYPARKLOCKACTR_AREA_2_START_SEC_CODE_SLOW
+   #define SFTY_ASIL_B_START_SEC_CODE_SLOW
+   #include "BasicNextGen_MemMap.h"
+#elif (defined SFTYPARKLOCKACTR_AREA_2_STOP_SEC_CODE_SLOW)
+   #undef SFTYPARKLOCKACTR_AREA_2_STOP_SEC_CODE_SLOW
+   #define SFTY_ASIL_B_STOP_SEC_CODE_SLOW
+   #include "BasicNextGen_MemMap.h"
+#elif (defined SFTYPARKLOCKACTR_START_SEC_VAR_AREA_2_FAST_INIT_8)
+   #undef SFTYPARKLOCKACTR_START_SEC_VAR_AREA_2_FAST_INIT_8
+   #define SFTY_ASIL_B_START_SEC_VAR_FAST_INIT
+   #include "BasicNextGen_MemMap.h"
+#elif (defined SFTYPARKLOCKACTR_STOP_SEC_VAR_AREA_2_FAST_INIT_8)
+   #undef SFTYPARKLOCKACTR_STOP_SEC_VAR_AREA_2_FAST_INIT_8
+   #define SFTY_ASIL_B_STOP_SEC_VAR_FAST_INIT
+   #include "BasicNextGen_MemMap.h"
+#elif (defined SFTYPARKLOCKACTR_START_SEC_VAR_AREA_2_FAST_INIT_32)
+   #undef SFTYPARKLOCKACTR_START_SEC_VAR_AREA_2_FAST_INIT_32
+   #define SFTY_ASIL_B_START_SEC_VAR_FAST_INIT
+   #include "BasicNextGen_MemMap.h"
+#elif (defined SFTYPARKLOCKACTR_STOP_SEC_VAR_AREA_2_FAST_INIT_32)
+   #undef SFTYPARKLOCKACTR_STOP_SEC_VAR_AREA_2_FAST_INIT_32
+   #define SFTY_ASIL_B_STOP_SEC_VAR_FAST_INIT
+   #include "BasicNextGen_MemMap.h"
+#elif (defined SFTYPARKLOCKACTR_START_SEC_CALIB_8)
+   #undef SFTYPARKLOCKACTR_START_SEC_CALIB_8
+   #define SAFETY_START_SEC_CALIB
+   #include "BasicNextGen_MemMap.h"
+#elif (defined SFTYPARKLOCKACTR_STOP_SEC_CALIB_8)
+   #undef SFTYPARKLOCKACTR_STOP_SEC_CALIB_8
+   #define SAFETY_STOP_SEC_CALIB
+   #include "BasicNextGen_MemMap.h"
+#elif (defined SFTYPARKLOCKACTR_START_SEC_CALIB_16)
+   #undef SFTYPARKLOCKACTR_START_SEC_CALIB_16
+   #define SAFETY_START_SEC_CALIB
+   #include "BasicNextGen_MemMap.h"
+#elif (defined SFTYPARKLOCKACTR_STOP_SEC_CALIB_16)
+   #undef SFTYPARKLOCKACTR_STOP_SEC_CALIB_16
+   #define SAFETY_STOP_SEC_CALIB
+   #include "BasicNextGen_MemMap.h"
+#elif (defined SFTYPARKLOCKACTR_START_SEC_CALIB_32)
+   #undef SFTYPARKLOCKACTR_START_SEC_CALIB_32
+   #define SAFETY_START_SEC_CALIB
+   #include "BasicNextGen_MemMap.h"
+#elif (defined SFTYPARKLOCKACTR_STOP_SEC_CALIB_32)
+   #undef SFTYPARKLOCKACTR_STOP_SEC_CALIB_32
+   #define SAFETY_STOP_SEC_CALIB
+   #include "BasicNextGen_MemMap.h"
 /*************************************************HvInterlock************************************************************/
 
 #elif (defined SFTYHVINTERLOCK_AREA_2_START_SEC_VAR_FAST_CLEARED)
@@ -5523,7 +5581,6 @@
    #define SAFETY_STOP_SEC_CALIB
    #include "BasicNextGen_MemMap.h"
 
-
 /*************************************************SftyLvSplyEvln************************************************************/
 
 #elif (defined SFTYLVSPLYEVLN_ASIL_B_START_SEC_VAR_FAST_CLEARED)
diff --git a/src/fw_cu/Components/Cmn/Shared/SysDef/include/AddEnumTypes.h b/src/fw_cu/Components/Cmn/Shared/SysDef/include/AddEnumTypes.h
index f492d14e3..69fe07b74 100644
--- a/src/fw_cu/Components/Cmn/Shared/SysDef/include/AddEnumTypes.h
+++ b/src/fw_cu/Components/Cmn/Shared/SysDef/include/AddEnumTypes.h
@@ -47,7 +47,8 @@ typedef enum  {BSW_ERR_DEB_MONR_NOT_TESTD_ST = 0, BSW_ERR_DEB_MONR_NO_ERR_ST = 1
 typedef enum  {INV_STANDBY = 0, INV_TRQCTRL = 1, INV_INT_SPDCTRL = 2, INV_VTGCTRL = 3, INV_EX_SPDCTRL = 4, INV_FAILURE = 5, INV_CALIBRATION = 6, INV_SPCLBRK = 7, INV_FREEWHL = 8, INV_INIT = 15}Sfty_InvModType;
 typedef enum  {NVM_UPDT_INACTIVE = 0, NVM_UPDT_PENDING = 1, NVM_UPDT_SUCCESS = 2, NVM_UPDT_FAILED = 3} RslvrOffsNvmUpdtStsType;
 typedef enum  {SFTYPARKLOCK_POSN_SIGNAL_NOT_AVAILABLE = 0, SFTYPARKLOCK_POSN_ENGAGED = 1, SFTYPARKLOCK_POSN_UNDETERMINED = 2, SFTYPARKLOCK_POSN_DISENGAGED = 3} SftyParkLockEvln_AbsPosnType;
-
+typedef enum  {SFTYPARKLOCK_DIR_STOP = 0, SFTYPARKLOCK_DIR_DISENGAGE = 1, SFTYPARKLOCK_DIR_ENGAGE = 2} SftyParkLockActr_DirType;
+typedef enum  {SFTYPARKLOCKACTR_PRIMACTR_DISABLE = 0, SFTYPARKLOCKACTR_PRIMACTR_SLOWENG = 1, SFTYPARKLOCKACTR_PRIMACTR_FASTENG = 2, SFTYPARKLOCKACTR_PRIMACTR_SLOWDISENG = 3, SFTYPARKLOCKACTR_PRIMACTR_FASTDISENG = 4, SFTYPARKLOCKACTR_PRIMACTR_CLSD_LOOP_CTRL = 5} SftyParkLockActr_PrimActrCtrlStType;
 
 #endif
 /** @} doxygen end group definition */
diff --git a/src/fw_cu/Components/Cmn/Shared/SysDef/include/AddStructTypes.h b/src/fw_cu/Components/Cmn/Shared/SysDef/include/AddStructTypes.h
index e55af97e0..c93e37118 100644
--- a/src/fw_cu/Components/Cmn/Shared/SysDef/include/AddStructTypes.h
+++ b/src/fw_cu/Components/Cmn/Shared/SysDef/include/AddStructTypes.h
@@ -172,4 +172,236 @@ typedef struct SftyShutoffPahTst_IvtrNomValConfType_
 \t\t_param uint8 botNomVal;
 } SftyShutoffPahTst_IvtrNomValConfType;
 
+typedef struct SftyParkLockActrPrimActrPosnCtrlrCfgType_
+{
+   /*
+   @@ ELEMENT = Ts
+   @@ STRUCTURE = SftyParkLockActrPrimActrPosnCtrlrCfgType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ GROUP = AddStructTypes
+   @@ END
+   */
+   _param float32 Ts;
+   /*
+   @@ ELEMENT = EngmtCoeffKi
+   @@ STRUCTURE = SftyParkLockActrPrimActrPosnCtrlrCfgType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ GROUP = AddStructTypes
+   @@ END
+   */
+   _param float32 EngmtCoeffKi;
+   /*
+   @@ ELEMENT = EngmtCoeffKp
+   @@ STRUCTURE = SftyParkLockActrPrimActrPosnCtrlrCfgType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ GROUP = AddStructTypes
+   @@ END
+   */
+   _param float32 EngmtCoeffKp;
+   /*
+   @@ ELEMENT = DisengmtCoeffKi
+   @@ STRUCTURE = SftyParkLockActrPrimActrPosnCtrlrCfgType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ GROUP = AddStructTypes
+   @@ END
+   */
+   _param float32 DisengmtCoeffKi;
+   /*
+   @@ ELEMENT = DisengmtCoeffKp
+   @@ STRUCTURE = SftyParkLockActrPrimActrPosnCtrlrCfgType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ GROUP = AddStructTypes
+   @@ END
+   */
+   _param float32 DisengmtCoeffKp;
+   /*
+   @@ ELEMENT = EngmtFeedfwdSpd
+   @@ STRUCTURE = SftyParkLockActrPrimActrPosnCtrlrCfgType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ GROUP = AddStructTypes
+   @@ END
+   */
+   _param float32 EngmtFeedfwdSpd;
+   /*
+   @@ ELEMENT = DisengmtFeedfwdSpd
+   @@ STRUCTURE = SftyParkLockActrPrimActrPosnCtrlrCfgType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ GROUP = AddStructTypes
+   @@ END
+   */
+   _param float32 DisengmtFeedfwdSpd;
+   /*
+   @@ ELEMENT = EngmtSpdSatn
+   @@ STRUCTURE = SftyParkLockActrPrimActrPosnCtrlrCfgType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ GROUP = AddStructTypes
+   @@ END
+   */
+   _param float32 EngmtSpdSatn;
+   /*
+   @@ ELEMENT = DisengmtSpdSatn
+   @@ STRUCTURE = SftyParkLockActrPrimActrPosnCtrlrCfgType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ GROUP = AddStructTypes
+   @@ END
+   */
+   _param float32 DisengmtSpdSatn;
+} SftyParkLockActrPrimActrPosnCtrlrCfgType;
+
+typedef struct SftyParkLockActrPrimActrSpdCtrlrCfgType_
+{
+   /*
+   @@ ELEMENT = Ts
+   @@ STRUCTURE = SftyParkLockActrPrimActrSpdCtrlrCfgType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ GROUP = AddStructTypes
+   @@ END
+   */
+   _param float32 Ts;
+   /*
+   @@ ELEMENT = EngmtCoeffKi
+   @@ STRUCTURE = SftyParkLockActrPrimActrSpdCtrlrCfgType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ GROUP = AddStructTypes
+   @@ END
+   */
+   _param float32 EngmtCoeffKi;
+   /*
+   @@ ELEMENT = EngmtCoeffKp
+   @@ STRUCTURE = SftyParkLockActrPrimActrSpdCtrlrCfgType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ GROUP = AddStructTypes
+   @@ END
+   */
+   _param float32 EngmtCoeffKp;
+   /*
+   @@ ELEMENT = DisengmtCoeffKi
+   @@ STRUCTURE = SftyParkLockActrPrimActrSpdCtrlrCfgType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ GROUP = AddStructTypes
+   @@ END
+   */
+   _param float32 DisengmtCoeffKi;
+   /*
+   @@ ELEMENT = DisengmtCoeffKp
+   @@ STRUCTURE = SftyParkLockActrPrimActrSpdCtrlrCfgType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ GROUP = AddStructTypes
+   @@ END
+   */
+   _param float32 DisengmtCoeffKp;
+} SftyParkLockActrPrimActrSpdCtrlrCfgType;
+
+typedef struct SftyParkLockActrPrimActrTqCtrlrCfgType_
+{
+   /*
+   @@ ELEMENT = Ts
+   @@ STRUCTURE = SftyParkLockActrPrimActrTqCtrlrCfgType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ GROUP = AddStructTypes
+   @@ END
+   */
+   _param float32 Ts;
+   /*
+   @@ ELEMENT = EngmtCoeffKi
+   @@ STRUCTURE = SftyParkLockActrPrimActrTqCtrlrCfgType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ GROUP = AddStructTypes
+   @@ END
+   */
+   _param float32 EngmtCoeffKi;
+   /*
+   @@ ELEMENT = EngmtCoeffKp
+   @@ STRUCTURE = SftyParkLockActrPrimActrTqCtrlrCfgType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ GROUP = AddStructTypes
+   @@ END
+   */
+   _param float32 EngmtCoeffKp;
+   /*
+   @@ ELEMENT = DisengmtCoeffKi
+   @@ STRUCTURE = SftyParkLockActrPrimActrTqCtrlrCfgType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ GROUP = AddStructTypes
+   @@ END
+   */
+   _param float32 DisengmtCoeffKi;
+   /*
+   @@ ELEMENT = DisengmtCoeffKp
+   @@ STRUCTURE = SftyParkLockActrPrimActrTqCtrlrCfgType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ GROUP = AddStructTypes
+   @@ END
+   */
+   _param float32 DisengmtCoeffKp;
+} SftyParkLockActrPrimActrTqCtrlrCfgType;
+
+typedef struct SftyParkLockActrPiCtrlrCfgType_
+{
+   /*
+   @@ ELEMENT = CoeffKp
+   @@ STRUCTURE = SftyParkLockActrPiCtrlrCfgType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ GROUP = AddStructTypes
+   @@ END
+   */
+   _param float32 CoeffKp;
+   /*
+   @@ ELEMENT = CoeffKi
+   @@ STRUCTURE = SftyParkLockActrPiCtrlrCfgType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ GROUP = AddStructTypes
+   @@ END
+   */
+   _param float32 CoeffKi;
+   /*
+   @@ ELEMENT = CoeffAntiWindUp
+   @@ STRUCTURE = SftyParkLockActrPiCtrlrCfgType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ GROUP = AddStructTypes
+   @@ END
+   */
+   _param float32 CoeffAntiWindUp;
+   /*
+   @@ ELEMENT = OutpMaxLim
+   @@ STRUCTURE = SftyParkLockActrPiCtrlrCfgType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ GROUP = AddStructTypes
+   @@ END
+   */
+   _param float32 OutpMaxLim;
+   /*
+   @@ ELEMENT = OutpMinLim
+   @@ STRUCTURE = SftyParkLockActrPiCtrlrCfgType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ GROUP = AddStructTypes
+   @@ END
+   */
+   _param float32 OutpMinLim;
+} SftyParkLockActrPiCtrlrCfgType;
+
 #endif
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/a2l/.gitkeep b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/a2l/.gitkeep
new file mode 100644
index 000000000..e69de29bb
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/doc/.gitkeep b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/doc/.gitkeep
new file mode 100644
index 000000000..e69de29bb
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/include/SftyParkLockActr.h b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/include/SftyParkLockActr.h
new file mode 100644
index 000000000..b6dd92b96
--- /dev/null
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/include/SftyParkLockActr.h
@@ -0,0 +1,124 @@
+
+/* ********************************************************************** */
+/* Sourcefile: SftyParkLockActr.h                                         */
+/*                                                                        */
+/* Project: 100kw                                                        */
+/* Aurix                                                                  */
+/*                                                                        */
+/* Department: Valeo Siemens eAutomotive                                  */
+/*                                                                        */
+/* First author: Vipin Kumar Viswanatha Pillai                            */
+/* ********************************************************************** */
+/* Copyright (C) Valeo Siemens eAutomotive Germany GmbH 2021              */
+/* All Rights Reserved. Confidential                                      */
+/* ********************************************************************** */
+#ifndef SFTYPARKLOCKACTR_H
+#define SFTYPARKLOCKACTR_H
+/*!
+* \\add SftyParkLockActr
+* @{
+*/
+
+/*================== [includes] =============================================*/
+#include "AddEnumTypes.h"
+
+/*================== [macros] ===============================================*/
+
+/*================== [type definitions] =====================================*/
+
+typedef struct SftyParkLockActrPiCtrlrAuxStType_
+{
+   /*
+   @@ ELEMENT = init_flag
+   @@ STRUCTURE = SftyParkLockActrPiCtrlrAuxStType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = UBYTE
+   @@ DESCRIPTION = "Initialisation flag for proportional part of PI-AUX controller"
+   @@ GROUP = SftyParkLockActr
+   @@ END
+   */
+   boolean init_flag;
+   /*
+   @@ ELEMENT = integ_old
+   @@ STRUCTURE = SftyParkLockActrPiCtrlrAuxStType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ DESCRIPTION = "Itegral state of PI-AUX controller"
+   @@ GROUP = SftyParkLockActr
+   @@ END
+   */
+   float32 integ_old;
+   /*
+   @@ ELEMENT = propor_old
+   @@ STRUCTURE = SftyParkLockActrPiCtrlrAuxStType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ DESCRIPTION = "Proportional state of PI-AUX controller"
+   @@ GROUP = SftyParkLockActr
+   @@ END
+   */
+   float32 propor_old;
+   /*
+   @@ ELEMENT = value_prop_init
+   @@ STRUCTURE = SftyParkLockActrPiCtrlrAuxStType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ DESCRIPTION = "Initial value for proportional part of PI-AUX controller"
+   @@ GROUP = SftyParkLockActr
+   @@ END
+   */
+   float32 value_prop_init;
+   /*
+   @@ ELEMENT = output
+   @@ STRUCTURE = SftyParkLockActrPiCtrlrAuxStType
+   @@ A2L_TYPE = MEASURE
+   @@ DATA_TYPE = FLOAT
+   @@ DESCRIPTION = "Output value of PI-AUX controller"
+   @@ GROUP = SftyParkLockActr
+   @@ END
+   */
+   float32 output;
+} SftyParkLockActrPiCtrlrAuxStType;
+
+/*================== [declaration of public data] ===========================*/
+
+/*================== [declaration of global functions] ======================*/
+
+#define SFTYPARKLOCKACTR_AREA_2_START_SEC_CODE_SLOW
+#include "MemMap.h"
+
+extern FUNC(void, SFTYPARKLOCKACTR_CODE) SftyParkLockActr_Init(void);
+extern FUNC(void, SFTYPARKLOCKACTR_CODE) SftyParkLockActr_PosnSnsrEn(void);
+extern FUNC(void, SFTYPARKLOCKACTR_CODE) SftyParkLockActr_PosSnsrDi(void);
+
+extern FUNC(void, SFTYPARKLOCKACTR_CODE) SftyParkLockActr_Hb1EnTst(void);
+extern FUNC(void, SFTYPARKLOCKACTR_CODE) SftyParkLockActr_Hb1DiTst(void);
+extern FUNC(void, SFTYPARKLOCKACTR_CODE) SftyParkLockActr_Hb2EnTst(void);
+extern FUNC(void, SFTYPARKLOCKACTR_CODE) SftyParkLockActr_Hb2DiTst(void);
+extern FUNC(void, SFTYPARKLOCKACTR_CODE) SftyParkLockActr_DiTst(void);
+
+extern FUNC(void, SFTYPARKLOCKACTR_CODE) SftyParkLockActr_MainSlow(void);
+extern FUNC(void, SFTYPARKLOCKACTR_CODE) SftyParkLockActr_SetPrimActrTarAg(float32 targetAngSp, SftyParkLockActr_DirType dirReq);
+extern FUNC(void, SFTYPARKLOCKACTR_CODE) SftyParkLockActr_PrimActrStop(void);
+
+#define SFTYPARKLOCKACTR_AREA_2_STOP_SEC_CODE_SLOW
+#include "MemMap.h"
+
+#define SFTYPARKLOCKACTR_AREA_2_START_SEC_CODE_FAST
+#include "MemMap.h"
+
+extern FUNC(void, SFTY_MOD_MGR_CODE) SftyParkLockActr_MainFast(void);
+
+#define SFTYPARKLOCKACTR_AREA_2_STOP_SEC_CODE_FAST
+#include "MemMap.h"
+
+
+ /*================== [closure] ==============================================*/
+
+ #endif
+
+/* ********************************************************************** */
+/* Copyright (C) Valeo Siemens eAutomotive Germany GmbH 2021              */
+/* All Rights Reserved. Confidential                                      */
+/* ********************************************************************** */
+/*==================[end of file]=========================================*/
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/include/SftyParkLockActr_cfg.h b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/include/SftyParkLockActr_cfg.h
new file mode 100644
index 000000000..8de5af6dd
--- /dev/null
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/include/SftyParkLockActr_cfg.h
@@ -0,0 +1,138 @@
+/* ********************************************************************** */
+/* Sourcefile: SftyParkLockActr_cfg.h                                     */
+/*                                                                        */
+/* Project: 100kw                                                         */
+/* TriCore                                                                */
+/*                                                                        */
+/* Department: Valeo Siemens eAutomotive                                  */
+/*                                                                        */
+/* First author: Vipin Kumar Viswanatha Pillai                            */
+/* Other authors: -                                                       */
+/* ********************************************************************** */
+/* Copyright (C) Valeo Siemens eAutomotive Germany GmbH 2021              */
+/* All Rights Reserved. Confidential                                      */
+/* ********************************************************************** */
+#ifndef SFTYPARKLOCKACTR_CFG_H
+#define SFTYPARKLOCKACTR_CFG_H
+
+
+/*================== [includes] =============================================*/
+
+#include "AddEnumTypes.h"
+
+#include "IfxPort_regdef.h"
+#include "IfxPort_reg.h"
+#include "IfxGtm_reg.h"
+
+/*================== [macros] ===============================================*/
+
+
+/* Output - Push Pull - Alternate output function 1 */
+#define SFTY_HB1_CTRL_IOCR_VAL    0x11u
+
+/* ------------------------------------------------------------------------- */
+/* Primary Actuator GTOM Configuration                                       */
+/* ------------------------------------------------------------------------- */
+
+/* If SFTYPARKLOCKACTR_PRIMACTR_INIT_IN_GTMDRV is defined configuration is done by LLSW */
+#define SFTYPARKLOCKACTR_PRIMACTR_INIT_IN_GTMDRV
+
+
+/* If SFTYPARKLOCKACTR_PRIMACTR_TICKFRQ_10KHZ is defined GTOM will be
+ *  configured for 10kHz operation otherwise for 1kHz operation
+ */
+#define SFTYPARKLOCKACTR_PRIMACTR_TICKFRQ_10KHZ
+
+
+/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
+/*       Configuration Values for TOM2_CH1 used for PWM output HB1_CTRL      */
+/*       TOM2 CH1 output TOM2_1 = TOUT95 is connected to P11.2               */
+/*       Connection is done via TOUTSEL11.SEL7 = 1H (0001b)                  */
+/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
+
+/* Configuration of TOM2 Channel 1 Control Register: GTM_TOM2_CH1_CTRL
+ * included in LlswGtm_TomCfg.c
+ * CTRL.B.SL            = GTM_TOM_CH_HIGH_SIG_LEVEL=1        ==> SL=1
+ * CTRL.B.CLK_SRC_SR    = GTM_TOM_CH_SEL_CMU_FXCLK0=0        ==> CMU_FXCLK0: 100MHz = 10ns
+ * CTRL.B.RST_CCU0      = GTM_TOM_CH_RST_ON_CCU0_COMP_MTCH=0 ==> Reset counter register CN0 to 0 on matching comparison CM0
+ * CTRL.B.TRIGOUT       = GTM_TOM_CH_TRIGOUT_IS_TRIG_X_1=0   ==  Trigout is TRIG[x-1]
+ * CTRL.B.OSM           = GTM_TOM_CH_CONTNS_MODE=0           ==> One-shot mode disabled (continuous mode)
+ * CTRL.B.SPEM          = GTM_TOM_CH_SPEM_DISABLE=0          ==> PE mode disabled
+ * CTRL.B.GCM           = GTM_TOM_CH_GCM_DISABLE=0           ==> Gated Counter mode disabled
+ */
+#define SFTYPARKLOCKACTR_PRIMACTR_PWM_CTRL_REG_CNFG_VAL 0x00000800U
+
+
+/* Configuration of TOM2 Channel 1 Counter Register: GTM_TOM2_CH1_CN0  */
+#define SFTYPARKLOCKACTR_PRIMACTR_CNT_INIT_VAL   0U /* CN0:  16 bit counter,  start counting from 0 */
+
+/* Configuration of TOM2 Channel 1 CCU0 Compare and Shadow Registers:
+ *   GTM_TOM2_CH1_CM0
+ *   GTM_TOM2_CH1_SR0
+ */
+
+#ifdef SFTYPARKLOCKACTR_PRIMACTR_TICKFRQ_10KHZ
+    #define SFTYPARKLOCKACTR_PRIMACTR_PERIOD_COUNT_VAL  10000U  /* 10000 for 10KHz signal operating with CLK0 -10ns */
+#else
+    #define SFTYPARKLOCKACTR_PRIMACTR_PERIOD_COUNT_VAL  100000U  /* 100000 for 1KHz signal operating with CLK0 -10ns */
+#endif
+
+/* Configuration of TOM2 Channel 1 CCU1 Compare and Shadow Registers:
+ *   GTM_TOM2_CH1_CM1
+ *   GTM_TOM2_CH1_SR1
+ */
+#define SFTYPARKLOCKACTR_PRIMACTR_DUTY_CYCLE_COUNT_INIT_VAL 0U /* the configuration of CM1=0 represents 0% duty cycle (=NOT SL) at the output ==> HB1_CTRL = 0 */
+
+/* Configuration of TOM2 Channel 2 CCU1 Compare and Shadow Registers:
+ *   GTM_TOM2_CH2_CM1
+ *   GTM_TOM2_CH2_SR1
+ */
+
+/* Configuration of TOM2 Channel 1 Interrupt Notification Register: GTM_TOM2_CH1_IRQ_NOTIFY */
+#define SFTYPARKLOCKACTR_PRIMACTR_IRQ_NOTIFY_INIT_VAL               0U    /* cleared (informs if interrupt occurred triggered by CCU0 or CCU1) */
+
+/* Configuration of TOM2 Channel 1 IRQ Mode Configuration Register: GTM_TOM2_CH1_IRQ_MODE */
+#define SFTYPARKLOCKACTR_PRIMACTR_IRQ_MODE_INIT_VAL                 0U    /* IRQ mode (0:level, 1:pulse, 2:pulse-notify, 3:single-pulse) */
+
+/* Configuration of TOM2 Channel 1 Interrupt Enable Register: GTM_TOM2_CH1_IRQ_EN */
+#define SFTYPARKLOCKACTR_PRIMACTR_IRQ_EN_INIT_VAL                   0U    /* interrupt triggered by CCU0/1 both NOT visible outside GTM */
+
+/* Configuration of TOM2 Channel 1 enable/disable update value: GTM_TOM2_TGC0_ENDIS_CTRL.B.ENDIS_CTRL1 */
+#define SFTYPARKLOCKACTR_PRIMACTR_GLB_ENDIS_CTRL_INIT_VAL           2U    /* Enable channel on an update trigger*/
+
+/* Configuration of TOM2 Channel 1 output enable/disable update value :GTM_TOM2_TGC0_OUTEN_CTRL.B.OUTEN_CTRL1 */
+#define SFTYPARKLOCKACTR_PRIMACTR_GLB_OUTEN_CTRL_INIT_VAL           2U    /* Enable channel output on an update trigger */
+
+/* Configuration of TOM2 Channel 1 force update enable/disable update value :GTM_TOM2_TGC0_FUPD_CTRL.B.FUPD_CTRL1 */
+#define SFTYPARKLOCKACTR_PRIMACTR_GLB_FUPD_CTRL_INIT_VAL            2U    /* Enable channel output on an update trigger */
+
+/* Configuration of TOM2 Channel 1 update enable/disable update value :GTM_TOM2_TGC0_GLB_CTRL.B.UPEN_CTRL1 */
+#define SFTYPARKLOCKACTR_GLB_UPEN_ENABLE 2U
+
+#define SFTYPARKLOCKACTR_PRIMACTR_GTOM_CM0   GTM_TOM2_CH1_CM0.U
+#define SFTYPARKLOCKACTR_PRIMACTR_GTOM_SR0   GTM_TOM2_CH1_SR0.U
+#define SFTYPARKLOCKACTR_PRIMACTR_GTOM_CM1   GTM_TOM2_CH1_CM1.U
+#define SFTYPARKLOCKACTR_PRIMACTR_GTOM_SR1   GTM_TOM2_CH1_SR1.U
+#define SFTYPARKLOCKACTR_PRIMACTR_GTOM_CTRL  GTM_TOM2_CH1_CTRL.U
+#define SFTYPARKLOCKACTR_PRIMACTR_GTOM_CN0   GTM_TOM2_CH1_CN0.U
+
+#define SFTYPARKLOCKACTR_PRIMACTR_GTOM_IRQ_NOTIFY   GTM_TOM2_CH1_IRQ_NOTIFY.U
+#define SFTYPARKLOCKACTR_PRIMACTR_GTOM_IRQ_MODE   GTM_TOM2_CH1_IRQ_MODE.U
+#define SFTYPARKLOCKACTR_PRIMACTR_GTOM_IRQ_EN   GTM_TOM2_CH1_IRQ_EN.U
+#define SFTYPARKLOCKACTR_PRIMACTR_GTOM_GLB_UPEN   GTM_TOM2_TGC0_GLB_CTRL.B.UPEN_CTRL1
+#define SFTYPARKLOCKACTR_PRIMACTR_GTOM_GLB_ENDIS   GTM_TOM2_TGC0_ENDIS_CTRL.B.ENDIS_CTRL1
+#define SFTYPARKLOCKACTR_PRIMACTR_GTOM_GLB_OUTEN   GTM_TOM2_TGC0_OUTEN_CTRL.B.OUTEN_CTRL1
+#define SFTYPARKLOCKACTR_PRIMACTR_GTOM_GLB_FUPD   GTM_TOM2_TGC0_FUPD_CTRL.B.FUPD_CTRL1
+
+/*================== [declaration of public data] ===========================*/
+
+/*================== [declaration of global functions] ======================*/
+
+/*================== [closure] ==============================================*/
+
+#endif /*  SFTYPARKLOCKACTR_CFG_H */
+/* ********************************************************************** */
+/* Copyright (C) Valeo Siemens eAutomotive Germany GmbH 2021              */
+/* All Rights Reserved. Confidential                                      */
+/* ********************************************************************** */
+/*==================[end of file]============================================*/
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/include/SftyParkLockActr_data.h b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/include/SftyParkLockActr_data.h
new file mode 100644
index 000000000..3f49b1050
--- /dev/null
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/include/SftyParkLockActr_data.h
@@ -0,0 +1,180 @@
+/* ***************************************************************** */
+/* Sourcefile: SftyParkLockActr_data.h                                  */
+/* ADD Container: SftyParkLockActr                                      */
+/* ADD Container Version: 1.7.0                                      */
+/* ***************************************************************** */
+/* Copyright (C) Valeo-Siemens eAutomotive GmbH 2021                 */
+/* All Rights Reserved. Confidential                                 */
+/* ***************************************************************** */
+/*!
+ * \\addtogroup    SftyParkLockActr_data
+ * @{
+*/
+#ifndef\tSFTYPARKLOCKACTR_DATA_H
+#define\tSFTYPARKLOCKACTR_DATA_H
+
+
+#include "AddGlobalDefines.h"
+#include "Platform_Types.h"
+#include "Compiler.h"
+#include "AddStructTypes.h"
+#include "AddEnumTypes.h"
+
+#ifndef\t_online
+#define\t_online
+#endif
+#ifndef\t_param
+#define\t_param
+#endif
+#ifndef\t_axis
+#define\t_axis
+#endif
+#ifndef\t_map
+#define\t_map
+#endif
+
+/***************** External labels ****************************/
+
+/* Begin: SFTYPARKLOCKEVLN_START_SEC_VAR_AREA_2_FAST_INIT_32 (online) */
+#define SFTYPARKLOCKEVLN_START_SEC_VAR_AREA_2_FAST_INIT_32
+#include "MemMap.h"
+
+extern VAR(SftyParkLockEvln_AbsPosnType, SFTYPARKLOCKEVLN_VAR) SftyParkLockEvlnActrAbsPosn;
+extern VAR(float32, SFTYPARKLOCKEVLN_VAR) SftyParkLockEvlnActrAg;
+extern VAR(float32, SFTYPARKLOCKEVLN_VAR) SftyParkLockEvlnActrAgSpd;
+
+#define SFTYPARKLOCKEVLN_STOP_SEC_VAR_AREA_2_FAST_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKEVLN_STOP_SEC_VAR_AREA_2_FAST_INIT_32 (online) */
+
+
+/* Begin: SFTYPARKLOCKEVLN_AREA_0_START_SEC_VAR_FAST_INIT_32 (online) */
+#define SFTYPARKLOCKEVLN_AREA_0_START_SEC_VAR_FAST_INIT_32
+#include "MemMap.h"
+
+extern VAR(float32, SFTYPARKLOCKEVLN_VAR) SftyParkLockEvlnPrimActrIMeas;
+#define SFTYPARKLOCKEVLN_AREA_0_STOP_SEC_VAR_FAST_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKEVLN_AREA_0_STOP_SEC_VAR_FAST_INIT_32 (online) */
+
+/* Begin: SFTYLVSPLYEVLN_START_SEC_VAR_AREA_2_SLOW_INIT_32 */
+#define SFTYLVSPLYEVLN_START_SEC_VAR_AREA_2_SLOW_INIT_32
+#include "MemMap.h"
+
+extern VAR (float32, SFTYPARKLOCKEVLN_VAR) SftyLvSplyEvlnKl30UMeas;
+#define SFTYLVSPLYEVLN_STOP_SEC_VAR_AREA_2_SLOW_INIT_32
+#include "MemMap.h"
+/* End: SFTYLVSPLYEVLN_STOP_SEC_VAR_AREA_2_SLOW_INIT_32 */
+
+   /* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+
+extern CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockActrPrimActrSpdSpEna;
+extern CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockActrPrimActrTqSpEna;
+extern CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockActrPrimActrUSpEna;
+
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+   /* Begin: SFTYREPLCMT_START_SEC_CALIB_32 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_32
+#include "MemMap.h"
+
+extern CONST(float32, SFTYREPLCMT_CALIB) SftyReplcmtParkLockActrPrimActrSpdSpVal;
+extern CONST(float32, SFTYREPLCMT_CALIB) SftyReplcmtParkLockActrPrimActrTqSpVal;
+extern CONST(float32, SFTYREPLCMT_CALIB) SftyReplcmtParkLockActrPrimActrUSpVal;
+
+#define SFTYREPLCMT_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_32 (calib) */
+
+
+/***************** SftyParkLockActr labels ****************************/
+
+/* Begin: SFTYPARKLOCKACTR_START_SEC_VAR_AREA_2_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKACTR_START_SEC_VAR_AREA_2_FAST_INIT_8
+#include "MemMap.h"
+
+extern VAR(boolean, SFTYPARKLOCKACTR_VAR) SftyParkLockActrChkPrimActrPwmCfgVld;
+extern VAR(boolean, SFTYPARKLOCKACTR_VAR) SftyParkLockActrPosSnsrSts;
+extern VAR(uint8, SFTYPARKLOCKACTR_VAR) SftyParkLockActrPrimActrCfgFltErrMonrSt;
+extern VAR(boolean, SFTYPARKLOCKACTR_VAR) SftyParkLockActrPrimActrSts;
+
+#define SFTYPARKLOCKACTR_STOP_SEC_VAR_AREA_2_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKACTR_STOP_SEC_VAR_AREA_2_FAST_INIT_8 (online) */
+
+/* Begin: SFTYPARKLOCKACTR_START_SEC_VAR_AREA_2_FAST_INIT_32 (online) */
+#define SFTYPARKLOCKACTR_START_SEC_VAR_AREA_2_FAST_INIT_32
+#include "MemMap.h"
+
+extern VAR(SftyParkLockActr_PrimActrCtrlStType, SFTYPARKLOCKACTR_VAR) SftyParkLockActrPrimActrCtrlSt;
+extern VAR(float32, SFTYPARKLOCKACTR_VAR) SftyParkLockActrPrimActrCurDutyCycle;
+extern VAR(SftyParkLockActr_DirType, SFTYPARKLOCKACTR_VAR) SftyParkLockActrPrimActrDirRq;
+
+#define SFTYPARKLOCKACTR_STOP_SEC_VAR_AREA_2_FAST_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKACTR_STOP_SEC_VAR_AREA_2_FAST_INIT_32 (online) */
+
+
+/* Begin: SFTYPARKLOCKACTR_START_SEC_CALIB_8 (calib) */
+#define SFTYPARKLOCKACTR_START_SEC_CALIB_8
+#include "MemMap.h"
+
+extern CONST(boolean, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimActrMaxPwmEna;
+extern CONST(boolean, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimActrSpdDynSatnEna;
+extern CONST(boolean, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimActrTqDynSatnEna;
+
+#define SFTYPARKLOCKACTR_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKACTR_STOP_SEC_CALIB_8 (calib) */
+
+
+/* Begin: SFTYPARKLOCKACTR_START_SEC_CALIB_16 (calib) */
+#define SFTYPARKLOCKACTR_START_SEC_CALIB_16
+#include "MemMap.h"
+
+extern CONST(sint16, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimDisSpdSatnBkp[4];
+extern CONST(sint16, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimDisTqSatnBkp[4];
+extern CONST(sint16, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimEngSpdSatnBkp[4];
+extern CONST(sint16, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimEngTqSatnBkp[4];
+
+#define SFTYPARKLOCKACTR_STOP_SEC_CALIB_16
+#include "MemMap.h"
+/* End: SFTYPARKLOCKACTR_STOP_SEC_CALIB_16 (calib) */
+
+/* Begin: SFTYPARKLOCKACTR_START_SEC_CALIB_32 (calib struct) */
+#define SFTYPARKLOCKACTR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+extern CONST(SftyParkLockActrPrimActrPosnCtrlrCfgType, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimActrPosnCtrlrCfg;
+extern CONST(SftyParkLockActrPrimActrSpdCtrlrCfgType, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimActrSpdCtrlrCfg;
+extern CONST(SftyParkLockActrPrimActrTqCtrlrCfgType, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimActrTqCtrlrCfg;
+extern CONST(float32, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimActrDutyCycMax;
+extern CONST(float32, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimActrDutyCycMin;
+extern CONST(uint32, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimActrMaxPwmTmrTiOutThd;
+extern CONST(uint32, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrEngStopDetnTmrThd;
+extern CONST(uint32, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrDisengStopDetnTmrThd;
+extern CONST(float32, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimActrMotDisTqLim;
+extern CONST(float32, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimActrMotEngTqLim;
+extern CONST(float32, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimActrMotGain;
+extern CONST(float32, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimActrMotKprim;
+extern CONST(float32, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimDisSpdSatnTbl[4];
+extern CONST(float32, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimDisTqSatnTbl[4];
+extern CONST(float32, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimEngSpdSatnTbl[4];
+extern CONST(float32, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimEngTqSatnTbl[4];
+
+#define SFTYPARKLOCKACTR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKACTR_STOP_SEC_CALIB_32 (calib struct) */
+
+#endif
+
+
+/* ***************************************************************** */
+/* Copyright (C) Valeo-Siemens eAutomotive GmbH 2021                 */
+/* All Rights Reserved. Confidential                                 */
+/* ***************************************************************** */
+/*==================[end of file]====================================*/
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/lib/.gitkeep b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/lib/.gitkeep
new file mode 100644
index 000000000..e69de29bb
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/make/makefile.mak b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/make/makefile.mak
new file mode 100644
index 000000000..2e6dce61c
--- /dev/null
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/make/makefile.mak
@@ -0,0 +1,28 @@
+# \\\\file\
#
+# \\brief AUTOSAR <ComponentName>
+#
+# This file contains the implementation of AUTOSAR
+# module <ComponentName>.
+#
+# \\author <AuthorInformation> Siemens AG, 91056 Erlangen, Germany
+#
+# Copyright 2015 - 2015 Siemens AG
+# All rights exclusively reserved for Siemens AG,
+# unless expressly agreed to otherwise.#
+################################################################## DEFINITIONS#
+#################################################################
+
+
+SftyParkLockActr_BASE := $(dir $(abspath $(lastword $(dir $(abspath $(lastword $(MAKEFILE_LIST)))))))
+SftyParkLockActr_PATH_OUT := $(SftyParkLockActr_BASE)generated
+SftyParkLockActr_PATH_USE := $(SftyParkLockActr_BASE)
+CC_FILES_TO_BUILD += $(wildcard $(SftyParkLockActr_BASE)src/*.c)
+CPP_FILES_TO_BUILD += $(wildcard $(SftyParkLockActr_BASE)src/*.cpp)
+ASM_FILES_TO_BUILD += $(wildcard $(SftyParkLockActr_BASE)src/*.s)
+
+SftyParkLockActr_ARCHIVED_LIB := $(wildcard $(SftyParkLockActr_BASE)lib/*.a)
+SftyParkLockActr_GENERATED_LIB := $(SftyParkLockActr_BASE)generated/lib/SftyParkLockActr.a
+SftyParkLockActr_ARCHIVED_A2L := $(wildcard $(SftyParkLockActr_BASE)a2l/*.a2l)
+SftyParkLockActr_GENERATED_A2L := $(SftyParkLockActr_BASE)generated/a2l/SftyParkLockActr.a2l
+A2L_SLAVE_SftyParkLockActr = $(SftyParkLockActr_GENERATED_A2L)
+CC_INCLUDE_PATH += $(SftyParkLockActr_BASE)include
\\ No newline at end of file
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/src/SftyParkLockActr.c b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/src/SftyParkLockActr.c
new file mode 100644
index 000000000..49e0f8633
--- /dev/null
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/src/SftyParkLockActr.c
@@ -0,0 +1,1633 @@
+/* ********************************************************************** */
+/* Sourcefile:      SftyParkLockActr.c                                    */
+/*                                                                        */
+/* Department:      VSeA R&D SWENG OPS 1 OP                               */
+/*                                                                        */
+/* ********************************************************************** */
+/* Copyright (C) Valeo Siemens eAutomotive Germany GmbH 2021              */
+/* All Rights Reserved.  Confidential                                     */
+/* ********************************************************************** */
+
+/*!
+* \\defgroup SftyParkLockActr SftyParkLockActr - Control ParkLock Actuators
+*           This module shall control primary actuator and secondary actuator of park lock.
+*/
+
+/*!
+ * \\page SftyParkLockActr_reqs Control ParkLock Actuators Requirements
+ * \\ingroup SftyParkLockActr
+ * \\brief Control ParkLock Actuators Requirements
+ */
+
+/*!
+* \\defgroup SftyParkLockActr_module    SftyParkLockActr Parklock software component for actuation control
+* \\ingroup SftyParkLockActr
+* @{
+*/
+
+
+/*================== [includes] =============================================*/
+#include "Std_Types.h"
+#include "Sfty_Types.h"
+#include "AddEnumTypes.h"
+#include "Mathlib.h"
+
+#include "SftyParkLockActr_data.h"
+#include "SftyParkLockActr_cfg.h"   /* PRQA S 0380 #Macro definitions are required to meet the correct functionality */
+#include "SftyParkLockActr.h"
+#include "SftySysInit.h"
+#include "SftyErrDeb.h"
+#include "SftyUtils.h"
+
+//#include "C2cComSftyData.h"
+
+/*================== [defines] ==============================================*/
+#define SFTYPARKLOCKACTR_DC_100PERC (1.0f)
+#define SFTYPARKLOCKACTR_0_DEGREE   (0.0f)
+#define SFTYPARKLOCKACTR_180_DEGREE (180.0f)
+#define SPEED_SAT_TABLE_LENGTH      (4U)
+#define VOLTAGE_SCL                 (50U)
+#define TORQUE_SAT_TABLE_LENGTH     (4U)
+#define MAI_FAST_FCT_CYC            (200U)
+
+/*================== [type definitions] =====================================*/
+/* Configuration parameters type for look-up tables*/
+typedef const float32 *PtrToConstFloat_;
+typedef const sint16  *PtrToConstInt_;
+
+/* Structure to store the inputs for the Pi controller */
+typedef struct PiCtrlrAuxInType_
+{
+   /* set_point - target value for PI controller */
+   float32 sp;
+   /* actValIntgl - actual value to control for integral part of PI controller */
+   float32 actValIntgl;
+   /* actValProp - actual value to control for proportional part of PI controller */
+   float32 actValProp;
+   /* offsProp - offset value for proportional part of PI controller */
+   float32 offsProp;
+}PiCtrlrAuxInType;
+
+/*================== [local data] ===========================================*/
+
+/* Begin: SFTYPARKLOCKACTR_START_SEC_VAR_AREA_2_FAST_INIT_32 (online) */
+#define SFTYPARKLOCKACTR_START_SEC_VAR_AREA_2_FAST_INIT_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimActrMotTqLim
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Torque limit for torque controller"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+STATIC VAR(float32, SFTYPARKLOCKACTR_VAR) SftyParkLockActrPrimActrMotTqLim = 0.f;
+
+/*
+@@ INSTANCE = SftyParkLockActrPrimActrPosnCtrlrSt
+@@ STRUCTURE = SftyParkLockActrPiCtrlrAuxStType
+@@ END
+*/
+STATIC VAR(SftyParkLockActrPiCtrlrAuxStType, SFTYPARKLOCKACTR_VAR) SftyParkLockActrPrimActrPosnCtrlrSt = {
+   .init_flag = FALSE,
+   .integ_old = 0.0f,
+   .propor_old = 0.0f,
+   .value_prop_init = 0.0f,
+   .output = 0.0f
+};
+
+/*
+@@ INSTANCE = SftyParkLockActrPrimActrSpdCtrlrSt
+@@ STRUCTURE = SftyParkLockActrPiCtrlrAuxStType
+@@ END
+*/
+STATIC VAR(SftyParkLockActrPiCtrlrAuxStType, SFTYPARKLOCKACTR_VAR) SftyParkLockActrPrimActrSpdCtrlrSt = {
+   .init_flag = FALSE,
+   .integ_old = 0.0f,
+   .propor_old = 0.0f,
+   .value_prop_init = 0.0f,
+   .output = 0.0f
+};
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimActrSpdSp
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Motor speed set point from position controller"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+STATIC VAR(float32, SFTYPARKLOCKACTR_VAR) SftyParkLockActrPrimActrSpdSp = 0.0f;
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimActrTqSp
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Torque set point from speed controller"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+STATIC VAR(float32, SFTYPARKLOCKACTR_VAR) SftyParkLockActrPrimActrTqSp = 0.0f;
+
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimActrAgSp
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Actuator target angle set point"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+STATIC VAR(float32, SFTYPARKLOCKACTR_VAR) SftyParkLockActrPrimActrAgSp = 0.0f;
+
+/*
+@@ SYMBOL = SftyParkLockActrPosCntrfeedfwdSpd
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Position controller feed forward speed parameter value"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+STATIC VAR(float32, SFTYPARKLOCKACTR_VAR) SftyParkLockActrPosCntrfeedfwdSpd = 0.0f;
+
+
+/* PRQA S 1053 ++ */ /* Designators have been used in this initialization list for better readability */
+STATIC VAR(SftyParkLockActrPiCtrlrCfgType, SFTYPARKLOCKACTR_VAR) SftyParkLockActrPosCntrPiCtrlrCfg = {
+   .CoeffKp = 0.0f,
+   .CoeffKi = 0.0f,
+   .CoeffAntiWindUp = 0.0f,
+   .OutpMaxLim = 0.0f,
+   .OutpMinLim = 0.0f
+};
+
+/* PRQA S 1053 ++ */ /* Designators have been used in this initialization list for better readability */
+STATIC VAR(SftyParkLockActrPiCtrlrCfgType, SFTYPARKLOCKACTR_VAR) SftyParkLockActrSpeedCntrPiCtrlrCfg = {
+   .CoeffKp = 0.0f,
+   .CoeffKi = 0.0f,
+   .CoeffAntiWindUp = 0.0f,
+   .OutpMaxLim = 0.0f,
+   .OutpMinLim = 0.0f
+};
+
+STATIC VAR(PtrToConstFloat_, SFTYPARKLOCKACTR_VAR)  SftyParkLockActrTrqTblMap = SftyParkLockActrPrimEngTqSatnTbl;
+
+STATIC VAR(PtrToConstInt_, SFTYPARKLOCKACTR_VAR)    SftyParkLockActrTrqTblBkp = SftyParkLockActrPrimEngTqSatnBkp;
+
+STATIC VAR(PtrToConstFloat_, SFTYPARKLOCKACTR_VAR)  SftyParkLockActrSpdTblMap = SftyParkLockActrPrimEngSpdSatnTbl;
+
+STATIC VAR(PtrToConstInt_, SFTYPARKLOCKACTR_VAR)    SftyParkLockActrSpdTblBkp = SftyParkLockActrPrimEngSpdSatnBkp;
+
+/* PRQA S 1053 ++ */ /* Designators have been used in this initialization list for better readability */
+/*
+@@ INSTANCE = SftyParkLockActrPrimActrTqCtrlrSt
+@@ STRUCTURE = SftyParkLockActrPiCtrlrAuxStType
+@@ END
+*/
+STATIC VAR(SftyParkLockActrPiCtrlrAuxStType, SFTYPARKLOCKACTR_VAR) SftyParkLockActrPrimActrTqCtrlrSt = {
+   .init_flag = FALSE,
+   .integ_old = 0.0f,
+   .propor_old = 0.0f,
+   .value_prop_init = 0.0f,
+   .output = 0.0f
+};
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimActrTqEstimdMotMdl
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Estimated motor torque based on the measured motor current"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+STATIC VAR(float32, SFTYPARKLOCKACTR_VAR) SftyParkLockActrPrimActrTqEstimdMotMdl = 0.0f;
+
+/* PRQA S 1053 ++ */ /* Designators have been used in this initialization list for better readability */
+STATIC VAR(SftyParkLockActrPiCtrlrCfgType, SFTYPARKLOCKACTR_VAR) SftyParkLockActrTorqCntrPiCtrlrCfg = {
+   .CoeffKp = 0.0f,
+   .CoeffKi = 0.0f,
+   .CoeffAntiWindUp = 0.0f,
+   .OutpMaxLim = 0.0f,
+   .OutpMinLim = 0.0f
+};
+
+/*
+@@ SYMBOL = disengStopDetnCycCntr
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG
+@@ DESCRIPTION = "Debounce Counter for stop position confirmtion in disengage direction (1 cycle is 200us)"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+STATIC VAR(uint32, SFTYPARKLOCKACTR_VAR) disengStopDetnCycCntr = 0u;
+
+/*
+@@ SYMBOL = engStopDetnCycCntr
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG
+@@ DESCRIPTION = "Debounce Counter for stop position confirmtion in engaged direction (1 cycle is 200us)"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+STATIC VAR(uint32, SFTYPARKLOCKACTR_VAR) engStopDetnCycCntr = 0u;
+
+STATIC VAR(uint32, SFTYPARKLOCKACTR_VAR) SftyParkLockActrPrimActrMaxPwmTmrVar = 0u;
+
+#define SFTYPARKLOCKACTR_STOP_SEC_VAR_AREA_2_FAST_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKACTR_STOP_SEC_VAR_AREA_2_FAST_INIT_32 (online) */
+
+
+/* Begin: SFTYPARKLOCKACTR_START_SEC_VAR_AREA_2_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKACTR_START_SEC_VAR_AREA_2_FAST_INIT_8
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimFlgPwmMax
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = "Indicates that the PWM has been set to 100 percent"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+STATIC VAR(boolean, SFTYPARKLOCKACTR_VAR) SftyParkLockActrPrimFlgPwmMax = 0U;
+
+#define SFTYPARKLOCKACTR_STOP_SEC_VAR_AREA_2_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKACTR_STOP_SEC_VAR_AREA_2_FAST_INIT_8 (online) */
+
+/*================== [declaration of public data] ===========================*/
+
+/*================== [prototype of local functions] =========================*/
+
+/*================== [definition of local functions] ========================*/
+
+/*****************************************************************************/
+/*!
+ * \\fn         : void SftyParkLockActr_PrimActrChkTomCfg(void)
+ * \\brief      : This API-Function checks the TOM configuration of HB1_CTRL
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\return     : None
+ * \\Parent_DD  : SftyParkLockActr_Init
+ */
+/*****************************************************************************/
+LOCAL_INLINE boolean SftyParkLockActr_PrimActrChkTomCfg(void)
+{
+   boolean chkTomCfg = FALSE;
+   /* Check if initialisation of GTM TOM2_CH1 in LlswGtm_ is correct*/
+   if (((uint32)SFTYPARKLOCKACTR_PRIMACTR_GTOM_CM0  == (uint32)SFTYPARKLOCKACTR_PRIMACTR_PERIOD_COUNT_VAL) &&
+       ((uint32)SFTYPARKLOCKACTR_PRIMACTR_GTOM_SR0  == (uint32)SFTYPARKLOCKACTR_PRIMACTR_PERIOD_COUNT_VAL) &&
+       ((uint32)SFTYPARKLOCKACTR_PRIMACTR_GTOM_CM1  == (uint32)SFTYPARKLOCKACTR_PRIMACTR_DUTY_CYCLE_COUNT_INIT_VAL) &&
+       ((uint32)SFTYPARKLOCKACTR_PRIMACTR_GTOM_SR1  == (uint32)SFTYPARKLOCKACTR_PRIMACTR_DUTY_CYCLE_COUNT_INIT_VAL) &&
+       ((uint32)SFTYPARKLOCKACTR_PRIMACTR_GTOM_CTRL == (uint32)SFTYPARKLOCKACTR_PRIMACTR_PWM_CTRL_REG_CNFG_VAL))
+   {
+      chkTomCfg = TRUE;
+   }
+   else
+   {
+      /* Do nothing */
+   }
+
+   return chkTomCfg;
+}
+
+/*****************************************************************************/
+/*!
+ * \\fn         : void SftyParkLockActr_PrimActrChkPwmGenrCfg(void)
+ * \\brief      : This API-Function checks the PWM configuration of Signal Generator (TOM)
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\return     : None
+ * \\Parent_DD  : SftyParkLockActr_Init
+ */
+/*****************************************************************************/
+LOCAL_INLINE FUNC(void, SFTYPARKLOCKACTR_CODE) SftyParkLockActr_PrimActrChkPwmGenrCfg(void)
+{
+
+   boolean chkTom;
+
+   /* Check HB1_CTRL TOM configuration in LLsw */
+   chkTom = SftyParkLockActr_PrimActrChkTomCfg();
+
+   if(chkTom != FALSE)
+   {
+       /* Set GTM configuration validity flag*/
+       SftyParkLockActrChkPrimActrPwmCfgVld = TRUE;
+       /* Set monitoring status to No error*/
+       SftyParkLockActrPrimActrCfgFltErrMonrSt = ERR_DEB_MONR_STS_INACTIVE;
+   }
+   else
+   {
+       /* Set GTM configuration error */
+       SftyParkLockActrChkPrimActrPwmCfgVld = FALSE;
+       /* Reset GTM configuration validity flag*/
+       SftyParkLockActrPrimActrCfgFltErrMonrSt = ERR_DEB_MONR_STS_FAILED;
+   }
+   return;
+}
+
+
+/*****************************************************************************/
+/*!
+ * \\fn         :void SftyParkLockActr_PortConfg(void)
+ * \\brief      :This API-Function configure the needed ports for PLK actuator control functionality
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\return     : None
+ * \\Parent_DD  : SftyParkLockActr_Init
+ */
+/*****************************************************************************/
+LOCAL_INLINE FUNC(void, SFTYPARKLOCKACTR_CODE) SftyParkLockActr_PortConfg(void)
+/* This API-Function configure the following ports: 
+- P11.6 for PLK motor half bridge enable HB1_EN (Digital output)
+- P13.0 for PLK motor half bridge enable HB2_EN (Digital output)
+- P11.2 for PLK motor half bridge control HB1_CTRL (GTM TOM2_CH1 PWM output TOUT95)
+- P13.1 for PLK motor half bridge control HB2_CTRL (Digital output)
+- P11.9 for PLK sensor power supply enable P5V_PLC_SENS_EN */
+{
+    /* HB1_EN P11.6 port config: PCx = 10000 --> Push pull, general purpose output */
+    SFTY_HB1_EN_IOCR_PC = SFTY_GPO_IOCR_VAL;
+    /* HB2_EN P13.0 port config: PCx = 10000 --> Push pull, general purpose output */
+    SFTY_HB2_EN_IOCR_PC = SFTY_GPO_IOCR_VAL;
+    /* P5V_PLC_SENS_EN P11.9 port config: PCx = 10000 --> Push pull, general purpose output */
+    SFTY_N_P5V_PLC_SENS_EN_IOCR_PC = SFTY_GPO_IOCR_VAL;
+    /* HB2_CTRL P13.1 port config PCx = 10000 --> Push pull, general purpose output */
+    SFTY_HB2_CTRL_IOCR_PC = SFTY_GPO_IOCR_VAL;
+    /* HB1_CTRL P11.2 PWM Output - Push Pull - Alternate output function 1*/
+    SFTY_HB1_CTRL_IOCR_PC = SFTY_HB1_CTRL_IOCR_VAL;
+   
+   return;
+}
+
+#ifndef SFTYPARKLOCKACTR_PRIMACTR_INIT_IN_GTMDRV
+/******************************************************************/
+/*!
+ * \\fn         : void SftyParkLockActr_GtmDrvTOMInit(void)
+ * \\brief      : Initialize TOM2_CH1 output module for HB1_CTRL PWM output
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\return     : None
+ * \\Parent_DD  : SftyParkLockActr_Init
+ */
+/*****************************************************************************/
+LOCAL_INLINE void SftyParkLockActr_GtmDrvTOMInit(void)
+/* Initialize TOM2 output module for CH1 */
+{
+    /* asynchronous update of duty cycle */
+    /* If defined GTM Configuration of Port P11.2 for HB1_CTRL : to drive Motor Clockwise (Engage Request) */
+    /* Using CLOCK Source Fcmu=100MHz */
+
+    SFTYPARKLOCKACTR_PRIMACTR_GTOM_CTRL = SFTYPARKLOCKACTR_PRIMACTR_PWM_CTRL_REG_CNFG_VAL;                  /* Trigout is TRIG[x-1],reset on match CMO, CMU_FXCLK0 (100MHz clock), SL=1 */
+    SFTYPARKLOCKACTR_PRIMACTR_GTOM_CN0 = SFTYPARKLOCKACTR_PRIMACTR_CNT_INIT_VAL;                            /* CN0:  16 bit counter,  start counting from 0 */
+    /* 10us timer */
+    SFTYPARKLOCKACTR_PRIMACTR_GTOM_CM0 = SFTYPARKLOCKACTR_PRIMACTR_PERIOD_COUNT_VAL;                        /* CM0: compare for about 1ms (100,3us) period of PWM Signal (10Khz Signal) (SET with SL=1) */
+    SFTYPARKLOCKACTR_PRIMACTR_GTOM_SR0 = SFTYPARKLOCKACTR_PRIMACTR_PERIOD_COUNT_VAL;                        /* Shadow of CM0 */
+    SFTYPARKLOCKACTR_PRIMACTR_GTOM_CM1 = SFTYPARKLOCKACTR_PRIMACTR_DUTY_CYCLE_COUNT_INIT_VAL;               /* CM1:  compare to reset (RESET with SL=1) which will be duty cycle of PWM Signal */
+    SFTYPARKLOCKACTR_PRIMACTR_GTOM_SR1 = SFTYPARKLOCKACTR_PRIMACTR_DUTY_CYCLE_COUNT_INIT_VAL;               /* Shadow of CM1 */
+    SFTYPARKLOCKACTR_PRIMACTR_GTOM_IRQ_NOTIFY = SFTYPARKLOCKACTR_PRIMACTR_IRQ_NOTIFY_INIT_VAL;              /* Cleared (informs if interrupt occurred triggered by CCU0 or CCU1) */
+    SFTYPARKLOCKACTR_PRIMACTR_GTOM_IRQ_MODE = SFTYPARKLOCKACTR_PRIMACTR_IRQ_MODE_INIT_VAL;                  /* IRQ mode (0:level, 1:pulse, 2:pulse-notify, 3:single-pulse) */
+    SFTYPARKLOCKACTR_PRIMACTR_GTOM_IRQ_EN = SFTYPARKLOCKACTR_PRIMACTR_IRQ_EN_INIT_VAL;                      /* Interrupt triggered by CCU0/1 both NOT visible outside GTM */
+    SFTYPARKLOCKACTR_PRIMACTR_GTOM_GLB_UPEN = (uint32)SFTYPARKLOCKACTR_GLB_UPEN_ENABLE,                     /* Enabled update for TOM2 CH1 */
+    SFTYPARKLOCKACTR_PRIMACTR_GTOM_GLB_ENDIS = (uint32)SFTYPARKLOCKACTR_PRIMACTR_GLB_ENDIS_CTRL_INIT_VAL,   /* Enabled update for TOM2 CH1 */
+    SFTYPARKLOCKACTR_PRIMACTR_GTOM_GLB_OUTEN = (uint32)SFTYPARKLOCKACTR_PRIMACTR_GLB_OUTEN_CTRL_INIT_VAL,   /* Enabled update for TOM2 CH1 */
+    SFTYPARKLOCKACTR_PRIMACTR_GTOM_GLB_FUPD = (uint32)SFTYPARKLOCKACTR_PRIMACTR_GLB_FUPD_CTRL_INIT_VAL;     /* Enabled update for TOM2 CH1 */
+
+    return;
+}
+#endif
+
+
+/*****************************************************************************/
+/*!
+ * \\fn         : void SftyParkLockActr_PrimActrEn(SftyParkLockActr_DirType dir)
+ * \\brief      : This function enables the primary actuator
+ * \\param[in]  : dir - requested park lock position
+ * \\param[out] : None
+ * \\return     : None
+ * \\Parent_DD  : SftyParkLockActr_SetPrimActrTarAg
+ */
+/*****************************************************************************/
+LOCAL_INLINE void SftyParkLockActr_PrimActrEn(SftyParkLockActr_DirType dir)
+{
+   /* Enable power supply to H-bridge for primary actuator */
+   SFTY_HB1_EN_OUT_P = STD_HIGH;
+   SFTY_HB2_EN_OUT_P = STD_HIGH;
+
+   /* Set status of primary actuator */
+   SftyParkLockActrPrimActrSts = TRUE;
+
+   /* Update primary actuator direction request */
+   SftyParkLockActrPrimActrDirRq = dir;
+
+   return;
+}
+
+
+/*****************************************************************************/
+/*!
+ * \\fn         : void SftyParkLockActr_PrimActrDi(void)
+ * \\brief      : This function disables the primary actuator
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\return     : None
+ * \\Parent_DD  : SftyParkLockActr_SetPrimActrTarAg
+ */
+/*****************************************************************************/
+LOCAL_INLINE void SftyParkLockActr_PrimActrDi(void)
+{
+   /* Disable power supply to H-bridge for primary actuator */
+   SFTY_HB1_EN_OUT_P = STD_LOW;
+   SFTY_HB2_EN_OUT_P = STD_LOW;
+
+   /* Set PWM control pins to logical LOW */
+   SFTYPARKLOCKACTR_PRIMACTR_GTOM_SR1 = (uint32) STD_LOW;
+   SFTYPARKLOCKACTR_PRIMACTR_GTOM_CM1 = (uint32) STD_LOW;
+   SFTY_HB2_CTRL_OUT_P = STD_LOW;
+
+   return;
+}
+
+
+/*****************************************************************************/
+/*!
+ * \\fn         : SftyParkLockActr_Intrpn
+ * \\brief      : This function performs interpolation
+ * \\param[in]  : CurAct - look up table output for XAxAct
+ * \\param[in]  : CurPrv - look up table output for XAxPrv
+ * \\param[in]  : XAxAct - look up table X axis value chosen for xAx
+ * \\param[in]  : XAxPrv - look up table X axis previous value
+ * \\param[in]  : xAx - input value to the look up table
+ * \\return     : intrpnVal - interpolated lookup table output value
+ */
+/*****************************************************************************/
+LOCAL_INLINE float32 SftyParkLockActr_Intrpn (const float32 CurAct, const float32 CurPrv, const sint16 XAxAct, const sint16 XAxPrv, const sint16 xAx)
+{
+   /* ******** Variables declaration *********** */
+
+   float32 intrpnVal;
+
+   sint16  rawDelta;
+   sint16  rawDeltaFound;
+   float32 fac;
+   float32 deltaMap;
+   float32 deltaFoundMap;
+
+   /* prevent division by zero */
+   if(XAxPrv == XAxAct)
+   {
+      intrpnVal = CurAct;
+   }
+   else
+   {
+      /* 1. Step: calculate delta between previous and actual found raw value */
+      rawDelta = XAxAct - XAxPrv;
+
+      /* 2. Step: calculate delta between input value and actual found raw value */
+      rawDeltaFound = XAxAct - xAx;
+
+      /* 3. Step: calculate factor */
+      fac = MLIB_F32S32((sint32)rawDeltaFound) / MLIB_F32S32((sint32)rawDelta);
+
+      /* 4. Step: calculate delta between two map points */
+      deltaMap = CurAct - CurPrv;
+
+      /* 5. Step: use factor to calculate delta between found temperature and actual table */
+      deltaFoundMap = deltaMap * fac;
+
+      /* 6. Step: calculate interpolated value */
+      intrpnVal = CurAct - deltaFoundMap;
+   }
+
+   return intrpnVal;
+}
+
+
+/* *************************************************************************** */
+/*!
+ * \\fn        : float32 SftyParkLockActr_1DLookUpTable(const float32 pCurve[], const uint16 pAx[], uint16 xAx)
+ * \\brief     : CLIB-LookUpTable-Function. This function searches (linear search, starting from the end)
+ * \
           xAx in provided xAxis pAx and returns value from curve pCurve using interpolation according to determined
+ * \
           position of xAx in x-Axis.
+ * \
           Data dimension of pCurve and pAx must be equal
+ * \\param[in] : uTblSize size of the pCurve and pAx arrays
+ * \\param[in] : pCurve pointer to const float32 Curve
+ * \\param[in] : pAx    pointer to const signed pAx.
+ * \\param[in] : xAx    axis value, which is used to identify position and interpolation for curve-value determination
+ * \\return    : float32 estimated curve value
+ */
+/* *************************************************************************** */
+LOCAL_INLINE float32 SftyParkLockActr_1DLookUpTable(uint16 uTblSize, const float32 pCurve[], const sint16 pAx[], sint16 xAx)
+{
+   /* ******** Variables declaration *********** */
+   uint8  IpolReq = FALSE;
+
+   uint16 Ix = (uTblSize > 0U) ? (uTblSize - 1U) : 0U; /*start for index*/
+
+   float32 retVal;
+
+   /* ************* Source code **************** */
+
+   /* - linear search of xAx in pAx, starting from the end */
+   if (pAx[Ix] > xAx)
+   {
+      if (pAx[0] < xAx)
+      {
+         do
+         {
+            Ix -= 1u;
+         }
+         while (pAx[Ix] > xAx);
+
+         if (pAx[Ix] != xAx)
+         {
+            IpolReq = TRUE;
+            Ix += 1u;
+         }
+      }
+      else
+      {
+         /* xAx is smaller/equal smallest pAx element */
+         Ix = 0u;
+      }
+   }
+   else
+   {
+      /* xAx is bigger/equal biggest pAx element */
+   }
+
+   /* estimate pointer to element of current index */
+   if (IpolReq != FALSE)
+   {
+      /* - do interpolation if requested */
+
+      /* Estimate pointer to element of preceded index */
+      /* In case of interpolation request (IpolReq == TRUE), index Ix is always equal/bigger than 1" */
+      /* Apparent: Implicit conversion to a signed integer type of insufficient size. */
+      /* Apparent: Wraparound in unsigned arithmetic operation. */
+      // SftyParkLockActr_Intrpn (CurAct, CurPrv, XAxAct, XAxPrv, xAx)
+      retVal = SftyParkLockActr_Intrpn (pCurve[Ix], pCurve[Ix-1u], pAx[Ix], pAx[Ix-1u], xAx);  /* PRQA S 2852,2912 */
+   }
+   else
+   {
+      /* - else return Curve value without interpolation */
+      retVal = pCurve[Ix]; //CurAct;
+   }
+
+   return retVal;
+}
+
+
+/*************************************************************************** */
+/*!
+ * \\fn         : void SftyParkLockActr_PiCtrlrAux()
+ * \\brief      : Aux implementation of PI controller, using Tustin integrator and different inputs for I and P parts
+ * \\param[in]  : piCtrlrAuxIn - structure having PI controller inputs for I and P parts
+ * \\param[in]  : cfg - configuration parameter for PI controller
+ * \\param[out] : state - structure of PI controller states
+ * \\return     : None
+ */
+/******************************************************************/
+LOCAL_INLINE void SftyParkLockActr_PiCtrlrAux(const PiCtrlrAuxInType* piCtrlrAuxIn, SftyParkLockActrPiCtrlrAuxStType* state,  const SftyParkLockActrPiCtrlrCfgType* cfg)
+{
+    float32 fIntegPart;
+    float32 fProporPart;
+    float32 fOutput;
+
+    /*initialization of proportional part of PI controller at first entry*/
+    if(state->init_flag != TRUE)
+    {
+        state->value_prop_init = piCtrlrAuxIn->actValProp;
+        state->init_flag = TRUE;
+    }
+
+    fIntegPart  = (piCtrlrAuxIn->sp - piCtrlrAuxIn->actValIntgl)*cfg->CoeffKi;
+    fProporPart = ((piCtrlrAuxIn->actValProp - state->value_prop_init)* cfg->CoeffKp) + piCtrlrAuxIn->offsProp;
+
+    /* y[n] = (x[n] + x[n-1])*ki/2 + (x[n] - x[n-1])*kp + y[n-1] -> Tustin integral formula*/
+    fOutput = ((fIntegPart + state->integ_old) * 0.5f) + (fProporPart - state->propor_old) + state->output;
+
+    state->output = ((fOutput > cfg->OutpMaxLim) ? cfg->OutpMaxLim : ((fOutput < cfg->OutpMinLim) ? cfg->OutpMinLim : fOutput));
+    state->propor_old = fProporPart;
+    state->integ_old = fIntegPart;
+
+    return;
+}
+
+
+/* *************************************************************************** */
+/*!
+ * \\fn         : float32 SftyParkLockActr_PrimActrPosnCtrlr(float32 actAgRad)
+ * \\brief      : This function implements the position controller of park lock actuator control
+ * \\param[in]  : actAgRad - Current Parklock actuator position [Angle in rad]
+ * \\param[out] : None
+ * \\return     : Parklock Actuator (Motor) speed set point [rad/s]
+ * \\Parent_DD  : SftyParkLockActr_MainSlow
+ */
+/* *************************************************************************** */
+LOCAL_INLINE float32 SftyParkLockActr_PrimActrPosnCtrlr(float32 actAgRad)
+/* The function calculates the desired actuator speed set point value from the current parklock actuator angle 
+   using a position PI controller */
+{
+    float32 spAgRad;
+    float32 ret;
+    sint16  s16kl30UMeas;
+    PiCtrlrAuxInType posnPiCtrlrAuxIn;
+    /* Calculate the primary actuator target set point angle in rad */
+    spAgRad = (SftyParkLockActrPrimActrAgSp * (float32)SYSCON_PI) / (float32)SFTYPARKLOCKACTR_180_DEGREE;
+
+    if(SftyParkLockActrPrimActrSpdDynSatnEna == TRUE)   
+    {
+        /* This feature is enabled in another series project having similar PLK control algorithm and hence kept in the code.
+           If not needed, it shall be disabled via calibration */
+        /* Use a dynamic value for primary actuator (motor) speed limit */
+        s16kl30UMeas =  MLIB_S16S32(MLIB_S32F32(((float32)VOLTAGE_SCL*SftyLvSplyEvlnKl30UMeas)));
+        /* Some of the generic functions like _1DLookUpTable to be moved to SftyUtils later */
+        SftyParkLockActrPosCntrPiCtrlrCfg.OutpMaxLim = SftyParkLockActr_1DLookUpTable(SPEED_SAT_TABLE_LENGTH, SftyParkLockActrSpdTblMap, SftyParkLockActrSpdTblBkp, s16kl30UMeas);
+        SftyParkLockActrPosCntrPiCtrlrCfg.OutpMinLim = -SftyParkLockActrPosCntrPiCtrlrCfg.OutpMaxLim;
+    }
+    else
+    {
+        /* Do nothing: use the default value from configuration function*/
+    }
+    
+    /* If replacement value is disabled for primary actuator speed set point */
+    if(SftyReplcmtParkLockActrPrimActrSpdSpEna == FALSE)
+    {
+        /* Run PI controller */
+        /* Some of the generic functions like _PiCtrlrAux to be moved to SftyUtils later */
+       posnPiCtrlrAuxIn.sp = spAgRad;
+       posnPiCtrlrAuxIn.actValIntgl = actAgRad;
+       posnPiCtrlrAuxIn.actValProp = actAgRad;
+       posnPiCtrlrAuxIn.offsProp = SftyParkLockActrPosCntrfeedfwdSpd;
+
+        SftyParkLockActr_PiCtrlrAux(&posnPiCtrlrAuxIn, &SftyParkLockActrPrimActrPosnCtrlrSt, &SftyParkLockActrPosCntrPiCtrlrCfg);
+        
+        /* Return updated value of speed set point from from controller */
+        ret = SftyParkLockActrPrimActrPosnCtrlrSt.output;
+    }
+    else
+    {
+        /* Return replacement value for primary actuator speed set point*/
+        ret = SftyReplcmtParkLockActrPrimActrSpdSpVal;
+    }
+    
+    return ret;
+}
+
+
+/* *************************************************************************** */
+/*!
+ * \\fn         : float32 SftyParkLockActr_PrimActrSpdCtrlr(float32 spdSp)
+ * \\brief      : The function implements the speed controller of Parklock actuator control
+ * \\param[in]  : spdSp - Parklock Actuator speed set point value [rad/s]
+ * \\param[out] : None
+ * \\return     : Parklock Actuator (Motor) torque set point [Nm]
+ * \\Parent_DD  : SftyParkLockActr_MainSlow
+ */
+/* *************************************************************************** */
+/* The function calculates the torque set point value from speed set point value & actuator estimated speed 
+    using a speed PI controller */
+LOCAL_INLINE float32 SftyParkLockActr_PrimActrSpdCtrlr(float32 spdSp)
+{
+    float32 spdFdbk;
+    float32 tqFdbk  = 0.0f;
+    float32 ret;
+    PiCtrlrAuxInType spdPiCtrlrAuxIn;
+    
+    /* Update max and min limit for primary actuator (motor) torque */
+    SftyParkLockActrSpeedCntrPiCtrlrCfg.OutpMaxLim = SftyParkLockActrPrimActrMotTqLim;
+    SftyParkLockActrSpeedCntrPiCtrlrCfg.OutpMinLim = -SftyParkLockActrPrimActrMotTqLim;
+    
+    /* Update as per primary actuator motor speed */
+    spdFdbk = SftyParkLockEvlnActrAgSpd;
+    
+    /* If replacement value for primary actuator torque set point is disabled */
+    if(SftyReplcmtParkLockActrPrimActrTqSpEna == FALSE)
+    {
+        /* Run PI controller */
+        spdPiCtrlrAuxIn.sp = spdSp;
+        spdPiCtrlrAuxIn.actValIntgl = spdFdbk;
+        spdPiCtrlrAuxIn.actValProp = spdFdbk;
+        spdPiCtrlrAuxIn.offsProp = tqFdbk;
+        SftyParkLockActr_PiCtrlrAux(&spdPiCtrlrAuxIn, &SftyParkLockActrPrimActrSpdCtrlrSt, &SftyParkLockActrSpeedCntrPiCtrlrCfg);
+    
+        /* Return the updated primary actuator motor set point from PI controller */
+        ret = SftyParkLockActrPrimActrSpdCtrlrSt.output;
+    }
+    else
+    {
+        /* Return replacement value for primary actuator motor torque set point */
+        ret = SftyReplcmtParkLockActrPrimActrTqSpVal;
+    }
+    
+    return ret;
+}
+
+/* *************************************************************************** */
+/*!
+ * \\fn         : float32 SftyParkLockActr_PrimActrTqCtrlr(float32 tqSp, float32 tqEstimdMotMdl)
+ * \\brief      : The function implements the torque controller of Parklock actuator control
+ * \\param[in]  : tqSp - Actuator torque set point [Nm]
+ * \\param[in]  : tqEstimdMotMdl - Estimated actuator torque from motor model [Nm]
+ * \\param[out] : None
+ * \\return     : Motor control voltage set point [V]
+ * \\Parent_DD  : SftyParkLockActr_MainFast
+ */
+/* *************************************************************************** */
+LOCAL_INLINE float32 SftyParkLockActr_PrimActrTqCtrlr(float32 tqSp, float32 tqEstimdMotMdl)
+/* The function implements the torque controller for the actuator control */
+{
+    float32 voltageOffset = 0.0f;
+    float32 ret;
+    PiCtrlrAuxInType tqPiCtrlrAuxIn;
+    
+    /* If replacement value for primary actuator voltage set point is disabled */
+    if(SftyReplcmtParkLockActrPrimActrUSpEna == FALSE)
+    {
+        /* Run PI controller */
+        tqPiCtrlrAuxIn.sp = tqSp;
+        tqPiCtrlrAuxIn.actValIntgl = tqEstimdMotMdl;
+        tqPiCtrlrAuxIn.actValProp = tqEstimdMotMdl;
+        tqPiCtrlrAuxIn.offsProp = voltageOffset;
+        SftyParkLockActr_PiCtrlrAux(&tqPiCtrlrAuxIn, &SftyParkLockActrPrimActrTqCtrlrSt, &SftyParkLockActrTorqCntrPiCtrlrCfg);
+        /* Return updated value for motor control voltage set point from PI controller */
+        ret = SftyParkLockActrPrimActrTqCtrlrSt.output;
+    }
+    else
+    {
+        /* Return replacement value for motor control voltage set point*/
+        ret = SftyReplcmtParkLockActrPrimActrUSpVal;
+    }
+    return ret;
+}
+
+
+/* *************************************************************************** */
+/*!
+ * \\fn         : float32 SftyParkLockActr_PrimActrUCtrlr(float32 uSp)
+ * \\brief      : The function implements the converting the control voltage to the PWM duty cycle
+ * \\param[in]  : uSp -  Control voltage set point [V]
+ * \\param[out] : None
+ * \\Parent_DD  : SftyParkLockActr_MainFast
+ * \\return     : PWM duty cycle [ration]
+ */
+/* *************************************************************************** */
+LOCAL_INLINE float32 SftyParkLockActr_PrimActrUCtrlr(float32 uSp)
+/* The function implements the converting the control voltage to the PWM duty cycle */
+{
+   float32 dutyCyc = 0.0f;
+
+   /* If measured voltage of clamp 30 is above 0 */
+   if(SftyLvSplyEvlnKl30UMeas > 0.0f)
+   {
+       /* Calculate the duty cycle */
+       dutyCyc = uSp / SftyLvSplyEvlnKl30UMeas;
+
+       /* Park Lock control duty cycle saturation*/
+
+       if(dutyCyc > SftyParkLockActrPrimActrDutyCycMax)
+       {
+         dutyCyc = SftyParkLockActrPrimActrDutyCycMax;
+       }
+       else if(dutyCyc < SftyParkLockActrPrimActrDutyCycMin)
+       {
+         dutyCyc = SftyParkLockActrPrimActrDutyCycMin;
+       }
+       else
+       {
+           /* Do nothing */
+       }
+   }
+   else
+   {
+       /* Return duty cycle equel to 0 */
+   }
+   return dutyCyc;
+}
+
+
+/* *************************************************************************** */
+/*!
+ * \\fn         : float32 SftyParkLockActr_PrimActrMotMdl(void)
+ * \\brief      : The function returns the estimated torque of park lock motor
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\return     : Estimated motor torque from motor current [Nm]
+ * \\Parent_DD  : SftyParkLockActr_MainFast
+ */
+/* *************************************************************************** */
+LOCAL_INLINE float32 SftyParkLockActr_PrimActrMotMdl(void)
+/* The function returns the estimated torque of park lock motor */
+{
+   sint16 s16kl30UMeas;
+
+   /* If calibratable switch for dynamic torque limit is enabled */
+   if(SftyParkLockActrPrimActrTqDynSatnEna == TRUE)
+   {
+       /* Calculate a dynamic torque limit depending on actual KL30 voltage value*/
+       s16kl30UMeas =  MLIB_S16S32(MLIB_S32F32(((float32)VOLTAGE_SCL*SftyLvSplyEvlnKl30UMeas)));
+       SftyParkLockActrPrimActrMotTqLim = SftyParkLockActr_1DLookUpTable(TORQUE_SAT_TABLE_LENGTH, SftyParkLockActrTrqTblMap, SftyParkLockActrTrqTblBkp, s16kl30UMeas);
+   }
+   /* Default value for maximal torque from initialisation is applied */
+   else
+   {
+       /* Do nothing */
+   }
+   /* Return estimated motor torque */
+   return  (SftyParkLockEvlnPrimActrIMeas * SftyParkLockActrPrimActrMotGain * SftyParkLockActrPrimActrMotKprim);
+}
+
+
+/* *************************************************************************** */
+/*!
+ * \\fn         : void SftySftyParkLockActr_PrimActrEngmtConfig(void)
+ * \\brief      : The function implements the configuration of the park lock controller engagement
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\return     : None
+ * \\Parent_DD  : SftyParkLockActr_MainFast
+ */
+/* *************************************************************************** */
+LOCAL_INLINE void SftySftyParkLockActr_PrimActrEngmtConfig(void)
+{
+   /* Set coeffcients of position controller for engagement operation*/
+    if(SftyParkLockActrPrimActrAgSp <= SftyParkLockEvlnActrAg)
+    {
+        SftyParkLockActrPosCntrfeedfwdSpd = SftyParkLockActrPrimActrPosnCtrlrCfg.EngmtFeedfwdSpd;
+    }
+    else
+    {
+        /* Target under the actual position, initialize in the other direction */
+        SftyParkLockActrPosCntrfeedfwdSpd = (SftyParkLockActrPrimActrPosnCtrlrCfg.EngmtFeedfwdSpd) * (-1.f);
+    }
+    SftyParkLockActrPosCntrPiCtrlrCfg.CoeffKi = SftyParkLockActrPrimActrPosnCtrlrCfg.Ts * SftyParkLockActrPrimActrPosnCtrlrCfg.EngmtCoeffKi;
+    SftyParkLockActrPosCntrPiCtrlrCfg.CoeffKp = -SftyParkLockActrPrimActrPosnCtrlrCfg.EngmtCoeffKp;
+
+    /* Set coeffcients of speed controller for engagement operation*/
+    SftyParkLockActrSpeedCntrPiCtrlrCfg.CoeffKi = SftyParkLockActrPrimActrSpdCtrlrCfg.Ts * SftyParkLockActrPrimActrSpdCtrlrCfg.EngmtCoeffKi;
+    SftyParkLockActrSpeedCntrPiCtrlrCfg.CoeffKp = -SftyParkLockActrPrimActrSpdCtrlrCfg.EngmtCoeffKp;
+
+    /* Set coeffcients of torque controller for engagement operation*/
+    SftyParkLockActrTorqCntrPiCtrlrCfg.CoeffKi = SftyParkLockActrPrimActrTqCtrlrCfg.Ts * SftyParkLockActrPrimActrTqCtrlrCfg.EngmtCoeffKi;
+    SftyParkLockActrTorqCntrPiCtrlrCfg.CoeffKp = -SftyParkLockActrPrimActrTqCtrlrCfg.EngmtCoeffKp;
+
+    /* Configure the saturation maps for engagement operation*/
+    SftyParkLockActrTrqTblMap = SftyParkLockActrPrimEngTqSatnTbl;
+    SftyParkLockActrTrqTblBkp = SftyParkLockActrPrimEngTqSatnBkp;
+    SftyParkLockActrSpdTblMap = SftyParkLockActrPrimEngSpdSatnTbl;
+    SftyParkLockActrSpdTblBkp = SftyParkLockActrPrimEngSpdSatnBkp;
+
+    /* Set torque limit for torque controller */
+    SftyParkLockActrPrimActrMotTqLim = SftyParkLockActrPrimActrMotEngTqLim;
+
+    /* Set target speed limits */
+    SftyParkLockActrPosCntrPiCtrlrCfg.OutpMaxLim = SftyParkLockActrPrimActrPosnCtrlrCfg.EngmtSpdSatn;
+    SftyParkLockActrPosCntrPiCtrlrCfg.OutpMinLim = SftyParkLockActrPrimActrPosnCtrlrCfg.DisengmtSpdSatn;
+
+    /* Set target voltage limits */
+    SftyParkLockActrTorqCntrPiCtrlrCfg.OutpMaxLim =  SftyLvSplyEvlnKl30UMeas;
+    SftyParkLockActrTorqCntrPiCtrlrCfg.OutpMinLim = -SftyLvSplyEvlnKl30UMeas;
+
+    /* Start timer for timeout detection of engage operation */
+    SftyUtils_StrtTmrUs(&SftyParkLockActrPrimActrMaxPwmTmrVar, SftyParkLockActrPrimActrMaxPwmTmrTiOutThd);
+    SftyParkLockActrPrimFlgPwmMax = FALSE;
+
+    return;
+}
+
+
+/* *************************************************************************** */
+/*!
+ * \\fn         : void SftySftyParkLockActr_PrimActrDisengmtConfig(void)
+ * \\brief      : The function implements the configuration of the park lock controller disengagement
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\return     : None
+ * \\Parent_DD  : SftyParkLockActr_MainFast
+ */
+/* *************************************************************************** */
+LOCAL_INLINE void SftySftyParkLockActr_PrimActrDisengmtConfig(void)
+{
+    /* Position controller for disengagement operation*/
+    SftyParkLockActrPosCntrfeedfwdSpd = SftyParkLockActrPrimActrPosnCtrlrCfg.DisengmtFeedfwdSpd;
+    SftyParkLockActrPosCntrPiCtrlrCfg.CoeffKi = SftyParkLockActrPrimActrPosnCtrlrCfg.Ts * SftyParkLockActrPrimActrPosnCtrlrCfg.DisengmtCoeffKi;
+    SftyParkLockActrPosCntrPiCtrlrCfg.CoeffKp = -SftyParkLockActrPrimActrPosnCtrlrCfg.DisengmtCoeffKp;
+
+    /* Speed controller or disengagement operation*/
+    SftyParkLockActrSpeedCntrPiCtrlrCfg.CoeffKi = SftyParkLockActrPrimActrSpdCtrlrCfg.Ts * SftyParkLockActrPrimActrSpdCtrlrCfg.DisengmtCoeffKi;
+    SftyParkLockActrSpeedCntrPiCtrlrCfg.CoeffKp = -SftyParkLockActrPrimActrSpdCtrlrCfg.DisengmtCoeffKp;
+
+    /* Torque Controller or disengagement operation*/
+    SftyParkLockActrTorqCntrPiCtrlrCfg.CoeffKi = SftyParkLockActrPrimActrTqCtrlrCfg.Ts * SftyParkLockActrPrimActrTqCtrlrCfg.DisengmtCoeffKi;
+    SftyParkLockActrTorqCntrPiCtrlrCfg.CoeffKp = -SftyParkLockActrPrimActrTqCtrlrCfg.DisengmtCoeffKp;
+
+    /* Configure the saturation maps or disengagement operation*/
+    SftyParkLockActrTrqTblMap = SftyParkLockActrPrimDisTqSatnTbl;
+    SftyParkLockActrTrqTblBkp = SftyParkLockActrPrimDisTqSatnBkp;
+    SftyParkLockActrSpdTblMap = SftyParkLockActrPrimDisSpdSatnTbl;
+    SftyParkLockActrSpdTblBkp = SftyParkLockActrPrimDisSpdSatnBkp;
+
+    /* Set torque limit for torque controller */
+    SftyParkLockActrPrimActrMotTqLim = SftyParkLockActrPrimActrMotDisTqLim;
+
+    /* Set target speed limits */
+    SftyParkLockActrPosCntrPiCtrlrCfg.OutpMaxLim = SftyParkLockActrPrimActrPosnCtrlrCfg.EngmtSpdSatn;
+    SftyParkLockActrPosCntrPiCtrlrCfg.OutpMinLim = SftyParkLockActrPrimActrPosnCtrlrCfg.DisengmtSpdSatn;
+
+    /* Set target voltage limits */
+    SftyParkLockActrTorqCntrPiCtrlrCfg.OutpMaxLim =  SftyLvSplyEvlnKl30UMeas;
+    SftyParkLockActrTorqCntrPiCtrlrCfg.OutpMinLim = -SftyLvSplyEvlnKl30UMeas;
+
+    /* Start timer for timeout detection of engage operation */
+    SftyUtils_StrtTmrUs(&SftyParkLockActrPrimActrMaxPwmTmrVar, SftyParkLockActrPrimActrMaxPwmTmrTiOutThd);
+    SftyParkLockActrPrimFlgPwmMax = FALSE;
+
+    return;
+}
+
+/* *************************************************************************** */
+/*!
+ * \\fn      void SftySftyParkLockActr_PrimActrConfig(void)
+ * \\brief   The function implements the configuration of the park lock controller depending on the requested direction
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\return     : None
+ * \\Parent_DD  : SftyParkLockActr_MainFast
+ */
+/* *************************************************************************** */
+LOCAL_INLINE void SftySftyParkLockActr_PrimActrConfig(void)
+{
+    switch(SftyParkLockActrPrimActrDirRq)
+    {
+        /* engage operation */
+        case SFTYPARKLOCK_DIR_ENGAGE:
+        {
+            SftySftyParkLockActr_PrimActrEngmtConfig();
+            break;
+        }
+        /* disengage operation */
+        case SFTYPARKLOCK_DIR_DISENGAGE:
+        {
+            SftySftyParkLockActr_PrimActrDisengmtConfig();
+            break;
+        }
+        default:
+        {
+            /* do nothing */
+            break;
+        }
+    }
+    return;
+}
+
+
+/*****************************************************************************/
+/*!
+ * \\fn         : void SftyParkLockActr_PrimActrEngmtFinshCdn(void)
+ * \\brief      : Conditions to finish engagement movement
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\return     : None
+ * \\Parent_DD  : SftyParkLockActr_MainFast
+ */
+/*****************************************************************************/
+LOCAL_INLINE void SftyParkLockActr_PrimActrEngmtFinshCdn(void)
+/* The function deal with the conditions to finish engagement movement */
+{
+/* The piece of code below is intentionally commented out and kept for possible future use in PLK calibration test */
+//   if (SftyParkLockMgrOperMod == SFTYPARKLOCKMGR_OPERMOD_CALIBRATETEST)
+//   {
+       /* Do nothing in case of end stopper calibration test */
+       /* Actuation shall be stopped by SftyParkLockMgr calibration test upon 
+       - end stopper detection by increase in current OR
+       - timeout of calibration test 
+       */
+//  }
+//   else
+   {
+       /* If actual park lock position is greater then engagement target position */
+       if(SftyParkLockEvlnActrAbsPosn == SFTYPARKLOCK_POSN_ENGAGED)
+       {
+           /* Wait for a calibratable time delay to confirm the engagement */
+           if (engStopDetnCycCntr >= (uint32)(SftyParkLockActrEngStopDetnTmrThd / MAI_FAST_FCT_CYC))
+           {
+               /* Stop primary actuator */
+               SftyParkLockActr_PrimActrStop();
+               engStopDetnCycCntr = 0u;   
+           }  
+           else
+           {
+                /* Increment the counter */
+                engStopDetnCycCntr++;  
+           }
+       }
+       else
+       {
+            /* Reset the counter */
+            engStopDetnCycCntr = 0u;               
+       }   
+   } 
+   return;
+}
+
+
+/*****************************************************************************/
+/*!
+ * \\fn         : void SftyParkLockActr_PrimActrDisengmtFinshCdn(void)
+ * \\brief      : Conditions to finish disengagement movement
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\return     : None
+ * \\Parent_DD  : SftyParkLockActr_MainFast
+ */
+/*****************************************************************************/
+LOCAL_INLINE void SftyParkLockActr_PrimActrDisengmtFinshCdn(void)
+/* The function deal with the conditions to finish disengagement movement */
+{
+/* The piece of code below is intentionally commented out and kept for possible future use in PLK calibration test */
+//   if (SftyParkLockMgrOperMod == SFTYPARKLOCKMGR_OPERMOD_CALIBRATETEST)
+//   {
+       /* Do nothing in case of end stopper calibration test */
+       /* Actuation shall be stopped by SftyParkLockMgr calibration test upon 
+       - end stopper detection by increase in current OR
+       - timeout of calibration test 
+       */
+//   }
+//   else
+   {
+       /* If actual park lock position is greater then engagement target position */
+       if(SftyParkLockEvlnActrAbsPosn == SFTYPARKLOCK_POSN_DISENGAGED)
+       {
+           /* Wait for a calibratable time delay to confirm the engagement */
+           if (disengStopDetnCycCntr >= (uint32)(SftyParkLockActrDisengStopDetnTmrThd / MAI_FAST_FCT_CYC))
+           {
+               /* Stop primary actuator */
+               SftyParkLockActr_PrimActrStop();
+               disengStopDetnCycCntr = 0u;   
+           }  
+           else
+           {
+                /* Increment the counter */
+                disengStopDetnCycCntr++;  
+           }
+       }
+       else
+       {
+            /* Reset the counter */
+            disengStopDetnCycCntr = 0u;               
+       }   
+   } 
+   return;
+}
+
+
+/*****************************************************************************/
+/*!
+ * \\fn         : void SftyParkLockActr_PrimActrCntrEndPosn(void)
+ * \\brief      : Handle primary actuator controller at the park lock end positions
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\return     : None
+ * \\Parent_DD  : SftyParkLockActr_MainFast
+ */
+/*****************************************************************************/
+LOCAL_INLINE void SftyParkLockActr_PrimActrCntrEndPosn(void)
+{
+   switch(SftyParkLockActrPrimActrDirRq)
+   {
+       case SFTYPARKLOCK_DIR_ENGAGE:
+       {
+           /* Call the function to terminate the engagement movement */
+           SftyParkLockActr_PrimActrEngmtFinshCdn();
+           break;
+       }
+       case SFTYPARKLOCK_DIR_DISENGAGE:
+       {
+           /* Call the function to terminate the disengagement movement */
+           SftyParkLockActr_PrimActrDisengmtFinshCdn();
+           break;
+       }
+       default:
+       {
+           /* Do nothing*/
+           break;
+       }
+   }
+}
+
+
+/*****************************************************************************/
+/*!
+ * \\fn         : void SftyParkLockActr_PrimActrFastCascadeCtrlr(void)
+ * \\brief      : Fast cascade controller of park lock
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\return     : None
+ * \\Parent_DD  : SftyParkLockActr_MainFast
+ */
+/*****************************************************************************/
+LOCAL_INLINE void SftyParkLockActr_PrimActrFastCascadeCtrlr(void)
+/* Fast cascade controller of park lock */
+{
+   float32 uSp;
+
+   /* Update the estimated torque */
+   SftyParkLockActrPrimActrTqEstimdMotMdl = SftyParkLockActr_PrimActrMotMdl();
+
+   /* Update primary actuator control voltage*/
+   uSp = SftyParkLockActr_PrimActrTqCtrlr(SftyParkLockActrPrimActrTqSp, SftyParkLockActrPrimActrTqEstimdMotMdl);
+
+   /* If enable switch is set for override of the primary actuator pwm with the maximal value*/ 
+   /* and limitation timer is still runing*/
+   if((SftyParkLockActrPrimActrMaxPwmEna == TRUE) &&
+      (SftyParkLockActrPrimFlgPwmMax == FALSE))
+   {
+\t   /* Check the limitation timer */
+      /* The sftyUtil function name to be corrected in future .. IsTrmElpd -> IsTmrElpd */
+       SftyParkLockActrPrimFlgPwmMax = SftyUtils_IsTrmElpd(&SftyParkLockActrPrimActrMaxPwmTmrVar);
+
+       if(SftyParkLockActrPrimActrDirRq == SFTYPARKLOCK_DIR_ENGAGE)
+       {
+           SftyParkLockActrPrimActrCurDutyCycle = SftyParkLockActrPrimActrDutyCycMax;
+       }
+       else if(SftyParkLockActrPrimActrDirRq == SFTYPARKLOCK_DIR_DISENGAGE)
+       {
+           SftyParkLockActrPrimActrCurDutyCycle = -SftyParkLockActrPrimActrDutyCycMax;
+       }
+       else
+       {
+           SftyParkLockActrPrimActrCurDutyCycle = 0.0f;
+       }
+   }
+   else
+   {
+       /* Update duty cycle of primary actuator based on primary actuator control voltage*/
+       SftyParkLockActrPrimActrCurDutyCycle = SftyParkLockActr_PrimActrUCtrlr(uSp);
+   }
+
+   return;
+}
+
+
+/*****************************************************************************/
+/*!
+ * \\fn         : void SftyParkLockActr_PrimActrSlowCascadeCtrlr(void)
+ * \\brief      : Fast cascade controller of park lock
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\return     : None
+ * \\Parent_DD  : SftyParkLockActr_PrimActrSlowDrvr
+ */
+/*****************************************************************************/
+LOCAL_INLINE void SftyParkLockActr_PrimActrSlowCascadeCtrlr(void)
+{
+    /* Update the primary actuator target speed */
+    SftyParkLockActrPrimActrSpdSp = SftyParkLockActr_PrimActrPosnCtrlr(((SftyParkLockEvlnActrAg * (float32)SYSCON_PI) / (float32)SFTYPARKLOCKACTR_180_DEGREE));
+
+    /* Update the primary actuator target torque */
+    SftyParkLockActrPrimActrTqSp = SftyParkLockActr_PrimActrSpdCtrlr(SftyParkLockActrPrimActrSpdSp);
+
+    return;
+}
+
+
+/*****************************************************************************/
+/*!
+ * \\fn     void SftyParkLockActr_PrimActrPwmCntr(void)
+ * \\brief  Function to control output PWM of primary actuator
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\return     : None
+ * \\Parent_DD  : SftyParkLockActr_MainFast
+ */
+/*****************************************************************************/
+LOCAL_INLINE void SftyParkLockActr_PrimActrPwmCntr(void)
+/* Function to control output PWM of primary actuator */
+{
+  float32 cnvPrimActrCurDutyCycle = SftyParkLockActrPrimActrCurDutyCycle;
+  uint16  dutyCycRegVal;
+
+  /* If current duty cycle of primary actuator is positive*/
+  if(cnvPrimActrCurDutyCycle >= 0.0f)
+  {
+     /* Set pin MODULE_P13.OUT.B.P1 to LOW */
+     SFTY_HB2_CTRL_OUT_P = STD_LOW;
+  }
+  else
+  {
+     cnvPrimActrCurDutyCycle = (float32)SFTYPARKLOCKACTR_DC_100PERC + cnvPrimActrCurDutyCycle;
+     /* Set pin MODULE_P13.OUT.B.P1 to HIGH*/
+     SFTY_HB2_CTRL_OUT_P = STD_HIGH;
+  }
+
+  /* Update the value for duty cycle register with the current target value*/
+  dutyCycRegVal = (uint16)MLIB_U32F32(cnvPrimActrCurDutyCycle * (float32)SFTYPARKLOCKACTR_PRIMACTR_PERIOD_COUNT_VAL);
+
+  /* update register GTM_TOM2_CH1_SR1 */
+  SFTYPARKLOCKACTR_PRIMACTR_GTOM_SR1 = dutyCycRegVal;
+
+  /* update register GTM_TOM2_CH1_CM1 */
+  SFTYPARKLOCKACTR_PRIMACTR_GTOM_CM1 = dutyCycRegVal;
+
+  return;
+}
+
+
+/*****************************************************************************/
+/*!
+ * \\fn         : void SftyParkLockActr_PrimActrFastDrvr(void)
+ * \\brief      : Primary actuator fast task driver
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\return     : None
+ * \\Parent_DD  : SftyParkLockActr_MainFast
+ */
+/*****************************************************************************/
+LOCAL_INLINE void SftyParkLockActr_PrimActrFastDrvr(void)
+{
+  /* Check if the park lock close to the end positions (P or D) */
+  SftyParkLockActr_PrimActrCntrEndPosn();
+ 
+  /* If primary actuator is enabled */
+  if(SftyParkLockActrPrimActrDirRq != SFTYPARKLOCK_DIR_STOP)
+  {
+    /* Call fast functions of the park lock cascade controller */
+    SftyParkLockActr_PrimActrFastCascadeCtrlr();
+    /* Call PWM control for primary actuator */
+    SftyParkLockActr_PrimActrPwmCntr();
+  }
+  else
+  {
+     /* Do nothing */
+  }
+
+  return;
+}
+
+
+/*****************************************************************************/
+/*!
+ * \\fn         : void SftyParkLockActr_PrimActrSlowtDrvr(void)
+ * \\brief      : Primary actuator slow task driver
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\Parent_DD  : SftyParkLockActr_PrimActrSlowtDrvr
+ * \\return     : None
+ */
+/*****************************************************************************/
+LOCAL_INLINE void SftyParkLockActr_PrimActrSlowDrvr(void)
+{
+   /* Check if primary actuator is activated */
+   if(SftyParkLockActrPrimActrDirRq != SFTYPARKLOCK_DIR_STOP)
+   {
+       /* Call slow function of the park lock cascade controller */
+       SftyParkLockActr_PrimActrSlowCascadeCtrlr();
+   }
+   else
+   {
+       /* Do nothing */
+   }
+  return;
+}
+
+
+/*================== [definition of global functions] =======================*/
+
+/******************************** AREA2 ************************************ */
+/******************************** SLOW   *********************************** */
+
+#define SFTYPARKLOCKACTR_AREA_2_START_SEC_CODE_SLOW
+#include "MemMap.h"
+
+/*****************************************************************************/
+/*!
+ * \\fn         : void SftyParkLockActr_PosnSnsrEn(void)
+ * \\brief      : This function enables the position sensor.
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\Parent_DD  : SftyParkLockActr_PosnSnsrEn
+ * \\return     : None
+ */
+/*****************************************************************************/
+FUNC(void, SFTYPARKLOCKACTR_CODE) SftyParkLockActr_PosnSnsrEn(void)   /* PRQA S 1503 #Called from sftyparklockmgr. Suppression can be removed after its integration */
+{
+   /* Set the sensor enable control pin to logical LOW */
+   SFTY_N_P5V_PLC_SENS_EN_OUT_P = STD_LOW;
+   /* Set the status of position sensor */
+   SftyParkLockActrPosSnsrSts = TRUE;
+
+   return;
+}
+
+
+/*****************************************************************************/
+/*!
+ * \\fn         : void SftyParkLockActr_PosSnsrDi(void)
+ * \\brief      : This function disables the position sensor.
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\Parent_DD  : SftyParkLockActr_PosSnsrDi
+ * \\return     : void
+ */
+/*****************************************************************************/
+FUNC(void, SFTYPARKLOCKACTR_CODE) SftyParkLockActr_PosSnsrDi(void) /* PRQA S 1503 #Called from sftyparklockmgr. Suppression can be removed after its integration */
+{
+   /* Set the sensor enable control pin to logical HIGH */
+   SFTY_N_P5V_PLC_SENS_EN_OUT_P = STD_HIGH;
+   /* Reset the status of position sensor */
+   SftyParkLockActrPosSnsrSts = FALSE;
+
+   return;
+}
+
+
+/*****************************************************************************/
+/*!
+ * \\fn         : void SftyParkLockActr_Hb1EnTst(void)
+ * \\brief      : This function configures the HB1 enable test
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\Parent_DD  : SftyParkLockActr_Hb1EnTst
+ * \\return     : void
+ */
+/*****************************************************************************/
+FUNC(void, SFTYPARKLOCKACTR_CODE) SftyParkLockActr_Hb1EnTst(void)   /* PRQA S 1503 #Called from sftyparklockmgr. Suppression can be removed after its integration */
+{
+   /* Set duty cycle of HB1 to 100 percent (update SR1 with CM1 before writing to CM1) */
+   SFTYPARKLOCKACTR_PRIMACTR_GTOM_SR1 = SFTYPARKLOCKACTR_PRIMACTR_PERIOD_COUNT_VAL;
+   SFTYPARKLOCKACTR_PRIMACTR_GTOM_CM1 = SFTYPARKLOCKACTR_PRIMACTR_PERIOD_COUNT_VAL;
+
+   SFTY_HB1_EN_OUT_P = STD_HIGH;
+
+   return;
+}
+
+
+/*****************************************************************************/
+/*!
+ * \\fn         : void SftyParkLockActr_Hb1DiTst(void)
+ * \\brief      : This function configures the HB1 disable test
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\Parent_DD  : SftyParkLockActr_Hb1DiTst
+ * \\return     : void
+ */
+/*****************************************************************************/
+FUNC(void, SFTYPARKLOCKACTR_CODE) SftyParkLockActr_Hb1DiTst(void)   /* PRQA S 1503 #Called from sftyparklockmgr. Suppression can be removed after its integration */
+{
+   /* Set duty cycle of HB1 to 100 percent (update SR1 with CM1 before writing to CM1) */
+   SFTYPARKLOCKACTR_PRIMACTR_GTOM_SR1 = SFTYPARKLOCKACTR_PRIMACTR_PERIOD_COUNT_VAL;
+   SFTYPARKLOCKACTR_PRIMACTR_GTOM_CM1 = SFTYPARKLOCKACTR_PRIMACTR_PERIOD_COUNT_VAL;
+
+    SFTY_HB1_EN_OUT_P = STD_LOW;
+
+   return;
+}
+
+
+/*****************************************************************************/
+/*!
+ * \\fn         : void SftyParkLockActr_Hb2EnTst(void)
+ * \\brief      : This function configures the HB2 enable test
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\Parent_DD  : SftyParkLockActr_Hb2EnTst
+ * \\return     : void
+ */
+/*****************************************************************************/
+FUNC(void, SFTYPARKLOCKACTR_CODE) SftyParkLockActr_Hb2EnTst(void)   /* PRQA S 1503 #Called from sftyparklockmgr. Suppression can be removed after its integration */
+{
+   SFTY_HB2_CTRL_OUT_P = STD_HIGH;
+   SFTY_HB2_EN_OUT_P = STD_HIGH;
+
+   return;
+}
+
+
+/*****************************************************************************/
+/*!
+ * \\fn         : void SftyParkLockActr_Hb2DiTst(void)
+ * \\brief      : This function configures the HB2 disable test
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\Parent_DD  : SftyParkLockActr_Hb2DiTst
+ * \\return     : void
+ */
+/*****************************************************************************/
+FUNC(void, SFTYPARKLOCKACTR_CODE) SftyParkLockActr_Hb2DiTst(void)   /* PRQA S 1503 #Called from sftyparklockmgr. Suppression can be removed after its integration */
+{
+   SFTY_HB2_CTRL_OUT_P = STD_HIGH;
+   SFTY_HB2_EN_OUT_P = STD_LOW;
+
+   return;
+}
+
+
+/*****************************************************************************/
+/*!
+ * \\fn         : void SftyParkLockActr_DiTst(void)
+ * \\brief      : This function resets all configurations done for HB1 or HB2 tests
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\Parent_DD  : SftyParkLockActr_DiTst
+ * \\return     : void
+ */
+/*****************************************************************************/
+FUNC(void, SFTYPARKLOCKACTR_CODE) SftyParkLockActr_DiTst(void)   /* PRQA S 1503 #Called from sftyparklockmgr. Suppression can be removed after its integration */
+{
+   /* Call function to disables the primary actuator */
+   SftyParkLockActr_PrimActrDi();
+   return;
+}
+/* @MRTZ_endBlock */
+
+/*****************************************************************************/
+/*!
+ * \\fn         : void SftyParkLockActr_SetPrimActrTarAg(float32 targetAngSp, SftyParkLockActr_DirType dirReq)
+ * \\brief      : Set function for actuator target angle
+ * \\param[in]  : targetAngSp - Actuator position set point [degree]
+ * \\param[in]  : dirReq - direction request
+ * \\param[out] : None
+ * \\return     : void
+ * \\Parent_DD  : SftyParkLockActr_SetPrimActrTarAg
+ */
+/*****************************************************************************/
+FUNC(void, SFTYPARKLOCKACTR_CODE) SftyParkLockActr_SetPrimActrTarAg(float32 targetAngSp, SftyParkLockActr_DirType dirReq)   /* PRQA S 1503 #Called from sftyparklockmgr. Suppression can be removed after its integration */
+{
+   
+   /* Set the status of primary actuator to closed loop control */
+   SftyParkLockActrPrimActrCtrlSt = SFTYPARKLOCKACTR_PRIMACTR_CLSD_LOOP_CTRL;
+     
+   if(targetAngSp > SFTYPARKLOCKACTR_180_DEGREE)
+   {
+       SftyParkLockActrPrimActrAgSp = SFTYPARKLOCKACTR_180_DEGREE;
+   }
+   else if (targetAngSp < SFTYPARKLOCKACTR_0_DEGREE)
+   {
+       SftyParkLockActrPrimActrAgSp = SFTYPARKLOCKACTR_0_DEGREE;
+   }
+   else
+   {
+       SftyParkLockActrPrimActrAgSp = targetAngSp;
+   }
+   
+   switch(dirReq)
+   {
+       /* engagement requested */
+       case SFTYPARKLOCK_DIR_ENGAGE:
+       {
+           /* Enable the primary actuator to engage */
+           SftyParkLockActr_PrimActrEn(SFTYPARKLOCK_DIR_ENGAGE);
+           break;
+       }
+       /* disengagement requested*/
+       case SFTYPARKLOCK_DIR_DISENGAGE:
+       {
+           /* Enable the primary actuator to disengage */
+           SftyParkLockActr_PrimActrEn(SFTYPARKLOCK_DIR_DISENGAGE);
+           break;
+       }
+       default:
+       {
+           /* Stop actuator */
+           SftyParkLockActr_PrimActrStop();
+           break;
+       }
+   }
+
+   /* configure the park lock controller depending on the requested direction */
+   SftySftyParkLockActr_PrimActrConfig();
+
+   return;
+}
+
+
+/*****************************************************************************/
+/*!
+ * \\fn         : void SftyParkLockActr_PrimActrStop(void)
+ * \\brief      : Stop primary actuator
+ * \\param[in]  : dirReq - direction request
+ * \\param[out] : None
+ * \\return     : void
+ * \\Parent_DD  : SftyParkLockActr_PrimActrStop
+ */
+/*****************************************************************************/
+FUNC(void, SFTYPARKLOCKACTR_CODE) SftyParkLockActr_PrimActrStop(void)    /* PRQA S 1505 #Called from sftyparklockmgr. Suppression can be removed after its integration */
+{
+    /* Stop actuator*/
+    SftyParkLockActr_PrimActrDi();
+   
+    /* Reset primary actuator active status*/
+    SftyParkLockActrPrimActrSts = FALSE;
+   
+    /* Set primary actuator direction request to STOP */
+    SftyParkLockActrPrimActrDirRq = SFTYPARKLOCK_DIR_STOP;
+   
+    /* Disable primary actuator control state */
+    SftyParkLockActrPrimActrCtrlSt = SFTYPARKLOCKACTR_PRIMACTR_DISABLE;
+   
+    /* Reset current duty cycle of primary actuator */
+    SftyParkLockActrPrimActrCurDutyCycle   = 0.0f;
+   
+    /* Reset motor speed set point from position controller */
+    SftyParkLockActrPrimActrSpdSp = 0.0f;
+    /* Reset torque set point from speed controller */
+    SftyParkLockActrPrimActrTqSp = 0.0f;
+    /* Reset estimated motor torque */
+    SftyParkLockActrPrimActrTqEstimdMotMdl = 0.0f;
+   
+    SftyParkLockActrPrimActrTqCtrlrSt.output     = 0.0f;
+    SftyParkLockActrPrimActrTqCtrlrSt.integ_old  = 0.0f;
+    SftyParkLockActrPrimActrTqCtrlrSt.propor_old = 0.0f;
+    SftyParkLockActrPrimActrTqCtrlrSt.init_flag  = 0U;
+
+    SftyParkLockActrPrimActrSpdCtrlrSt.output          = 0.0f;
+    SftyParkLockActrPrimActrSpdCtrlrSt.integ_old       = 0.0f;
+    SftyParkLockActrPrimActrSpdCtrlrSt.propor_old      = 0.0f;
+    SftyParkLockActrPrimActrSpdCtrlrSt.value_prop_init = 0.0f;
+    SftyParkLockActrPrimActrSpdCtrlrSt.init_flag       = 0U;
+
+    SftyParkLockActrPrimActrPosnCtrlrSt.output          = 0.0f;
+    SftyParkLockActrPrimActrPosnCtrlrSt.integ_old       = 0.0f;
+    SftyParkLockActrPrimActrPosnCtrlrSt.propor_old      = 0.0f;
+    SftyParkLockActrPrimActrPosnCtrlrSt.value_prop_init = 0.0f;
+    SftyParkLockActrPrimActrPosnCtrlrSt.init_flag       = 0U;
+   
+    return;
+}
+
+
+/****************************************************************************/
+/*!
+ * \\fn         : void SftyParkLockActr_Init(void)
+ * \\brief      : This Function initialises all PLC actuator components and ports
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\Parent_DD  : SftyParkLockActr_Init
+ * \\return     : None
+ */
+/****************************************************************************/
+FUNC(void, SFTYPARKLOCKACTR_CODE) SftyParkLockActr_Init(void) 
+{
+    /* Configure ports */
+    SftyParkLockActr_PortConfg();
+    #ifndef SFTYPARKLOCKACTR_PRIMACTR_INIT_IN_GTMDRV
+    /* Initialize TOM2 output module CH1 */
+    SftyParkLockActr_GtmDrvTOMInit();   /* PRQA S 2987 #Content of function can be reactivated for other purposes */
+    #endif
+    /* Monitor GTM configuration */
+    SftyParkLockActr_PrimActrChkPwmGenrCfg();
+    /* Initialise C2C variables */
+}
+
+
+/*****************************************************************************/
+/*!
+ * \\fn         : void SftyParkLockActr_MainSlow(void)
+ * \\brief      : Main function for 1 ms task to control primary park lock actuator
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\Parent_DD  : SftyParkLockActr_MainSlow
+ * \\return     : None
+ */
+/*****************************************************************************/
+FUNC(void, SFTYPARKLOCKACTR_CODE) SftyParkLockActr_MainSlow(void)
+{
+   /* configure primary actuator slow task driver */
+   SftyParkLockActr_PrimActrSlowDrvr();
+}
+
+#define SFTYPARKLOCKACTR_AREA_2_STOP_SEC_CODE_SLOW
+#include "MemMap.h"
+
+
+#define SFTYPARKLOCKACTR_AREA_2_START_SEC_CODE_FAST
+#include "MemMap.h"
+/*****************************************************************************/
+/*!
+ * \\fn         : void SftyParkLockActr_MainFast(void)
+ * \\brief      : Main function for 200us task to control primary park lock actuator
+ * \\param[in]  : None
+ * \\param[out] : None
+ * \\Parent_DD  : SftyParkLockActr_MainFast
+ * \\return     : None
+ */
+/*****************************************************************************/
+FUNC(void, SFTYPARKLOCKACTR_CODE) SftyParkLockActr_MainFast(void)
+{
+   /* Configure primary actuator fast task driver */
+   SftyParkLockActr_PrimActrFastDrvr();
+}
+
+#define SFTYPARKLOCKACTR_AREA_2_STOP_SEC_CODE_FAST
+#include "MemMap.h"
+
+//test
+
+/*================== [closure] ==============================================*/
+/* ********************************************************************** */
+/* Copyright (C) Valeo Siemens eAutomotive 2021                           */
+/* All Rights Reserved. Confidential                                      */
+/* ********************************************************************** */
+/*==================[end of file]============================================*/
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/src/SftyParkLockActr_data.c b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/src/SftyParkLockActr_data.c
new file mode 100644
index 000000000..3c96b395c
--- /dev/null
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/SftyParkLockActr/src/SftyParkLockActr_data.c
@@ -0,0 +1,391 @@
+/* ********************************************************************** */
+/* Sourcefile:      SftyParkLockActr_data.c                               */
+/*                                                                        */
+/* Department:      VSeA R&D SWENG OPS 1 OP                               */
+/*                                                                        */
+/* ********************************************************************** */
+/* Copyright (C) Valeo Siemens eAutomotive Germany GmbH 2021              */
+/* All Rights Reserved.  Confidential                                     */
+/* ********************************************************************** */
+
+/*!
+ * \\defgroup      SftyParkLockActr_data   SftyParkLockActr_data -  SftyParkLockActr\'s calibration data
+ * \\ingroup       SftyParkLockActr
+ * @{
+*/
+
+#include "Std_Types.h"
+#include "AddStructTypes.h"
+#include "SftyParkLockActr_data.h"
+#include "AddEnumTypes.h"
+
+/************************* MEASURABLE LIST - BEGIN *****************************/
+
+/* Begin: SFTYPARKLOCKACTR_START_SEC_VAR_AREA_2_FAST_INIT_8 (online) */
+#define SFTYPARKLOCKACTR_START_SEC_VAR_AREA_2_FAST_INIT_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyParkLockActrPrimActrCfgFltErrMonrSt
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE [0 ... 2]
+@@ CONVERSION = TABLE 0 "INACTIVE" 1 "PASSED" 2 "FAILED"
+@@ DESCRIPTION = "ParkLock Actuator PWM Configuration error monitor; unit \'-\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+VAR(uint8, SFTYPARKLOCKACTR_VAR) SftyParkLockActrPrimActrCfgFltErrMonrSt = 0U;
+
+/*
+@@ SYMBOL = SftyParkLockActrChkPrimActrPwmCfgVld
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE [0 ... 1]
+@@ CONVERSION = TABLE 0 "FALSE" 1 "TRUE"
+@@ DESCRIPTION = "ParkLock Actuator GTM Configuration validity flag; unit \'-\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+VAR(boolean, SFTYPARKLOCKACTR_VAR) SftyParkLockActrChkPrimActrPwmCfgVld = 0U;
+
+/*
+@@ SYMBOL = SftyParkLockActrPosSnsrSts
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE [0 ... 1]
+@@ CONVERSION = TABLE 0 "POWER_DOWN" 1 "POWER_ON"
+@@ DESCRIPTION = "Status of ParkLock position sensor; unit \'-\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+VAR(boolean, SFTYPARKLOCKACTR_VAR) SftyParkLockActrPosSnsrSts = 0U;
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimActrDirRq
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE [0 ... 2]
+@@ CONVERSION = TABLE 0 "SFTYPARKLOCK_DIR_STOP" 1 "SFTYPARKLOCK_DIR_DISENGAGE" 2 "SFTYPARKLOCK_DIR_ENGAGE" 
+@@ DESCRIPTION = "Parklock Primary actuator direction request flag; unit \'-\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+VAR(SftyParkLockActr_DirType, SFTYPARKLOCKACTR_VAR) SftyParkLockActrPrimActrDirRq = SFTYPARKLOCK_DIR_STOP;
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimActrSts
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = UBYTE [0 ... 1]
+@@ DESCRIPTION = "Active status of primary acutator; unit \'-\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+VAR(boolean, SFTYPARKLOCKACTR_VAR) SftyParkLockActrPrimActrSts = 0U;
+
+#define SFTYPARKLOCKACTR_STOP_SEC_VAR_AREA_2_FAST_INIT_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKACTR_STOP_SEC_VAR_AREA_2_FAST_INIT_8 (online) */
+
+
+/* Begin: SFTYPARKLOCKACTR_START_SEC_VAR_AREA_2_FAST_INIT_32 (online) */
+#define SFTYPARKLOCKACTR_START_SEC_VAR_AREA_2_FAST_INIT_32
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimActrCtrlSt
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = SLONG
+@@ CONVERSION = TABLE 0 "SFTYPARKLOCKACTR_PRIMACTR_DISABLE" 1 "SFTYPARKLOCKACTR_PRIMACTR_SLOWENG" 2 "SFTYPARKLOCKACTR_PRIMACTR_FASTENG" 3 "SFTYPARKLOCKACTR_PRIMACTR_SLOWDISENG" 4 "SFTYPARKLOCKACTR_PRIMACTR_FASTDISENG" 5 "SFTYPARKLOCKACTR_PRIMACTR_CLSD_LOOP_CTRL"
+@@ DESCRIPTION = "Parklock Actuator Control State; unit \'-\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+VAR(SftyParkLockActr_PrimActrCtrlStType, SFTYPARKLOCKACTR_VAR) SftyParkLockActrPrimActrCtrlSt = SFTYPARKLOCKACTR_PRIMACTR_DISABLE;
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimActrCurDutyCycle
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = FLOAT
+@@ UNIT = "%"
+@@ DESCRIPTION = "Current duty cycle of primary actuator; unit \'%\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+VAR(float32, SFTYPARKLOCKACTR_VAR) SftyParkLockActrPrimActrCurDutyCycle = 0.f;
+
+#define SFTYPARKLOCKACTR_STOP_SEC_VAR_AREA_2_FAST_INIT_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKACTR_STOP_SEC_VAR_AREA_2_FAST_INIT_32 (online) */
+
+/************************* MEASURABLE LIST - END **************************************/
+
+/************************* CALIBRATION PARAMETERS - BEGIN *****************************/
+
+
+/* Begin: SFTYPARKLOCKACTR_START_SEC_CALIB_8 (calib) */
+#define SFTYPARKLOCKACTR_START_SEC_CALIB_8
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimActrSpdDynSatnEna
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = "Enable flag for dynamic park lock actuator speed limitation: TRUE - dynamic limits enable, FALSE - dynamic limits disable; unit \'-\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+CONST(boolean, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimActrSpdDynSatnEna = 1U;
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimActrMaxPwmEna
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = "Enable of override the primary actuator pwm with the maximal value; unit \'-\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+CONST(boolean, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimActrMaxPwmEna = 0U;
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimActrTqDynSatnEna
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = "Enable flag for dynamic park lock actuator torque limitation: TRUE - dynamic limits enable, FALSE - dynamic limits disable; unit \'-\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+CONST(boolean, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimActrTqDynSatnEna = 1U;
+
+#define SFTYPARKLOCKACTR_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYPARKLOCKACTR_STOP_SEC_CALIB_8 (calib) */
+
+
+/* Begin: SFTYPARKLOCKACTR_START_SEC_CALIB_16 (calib) */
+#define SFTYPARKLOCKACTR_START_SEC_CALIB_16
+#include "MemMap.h"
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimDisTqSatnBkp
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = SWORD
+@@ DESCRIPTION = "Breakpoints for dynamic motor torque limit of primary actuator disengagement; unit \'V\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+CONST(sint16, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimDisTqSatnBkp[4] = 
+    {450,550,650,800};
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimEngTqSatnBkp
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = SWORD
+@@ DESCRIPTION = "Breakpoints for dynamic motor torque limit of primary actuator engagement; unit \'V\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+CONST(sint16, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimEngTqSatnBkp[4] = 
+    {450,550,650,800};
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimEngSpdSatnBkp
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = SWORD
+@@ DIMENSION = 1
+@@ DESCRIPTION = "Breakpoints for dynamic motor speed limit of primary actuator engagement; unit \'V\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+CONST(sint16, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimEngSpdSatnBkp[4] = 
+    {450,550,650,800};
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimDisSpdSatnBkp
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = SWORD
+@@ DIMENSION = 1
+@@ DESCRIPTION = "Breakpoints for dynamic motor speed limit of primary actuator disengagement; unit \'V\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+CONST(sint16, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimDisSpdSatnBkp[4] = 
+    {450,550,650,800};
+
+#define SFTYPARKLOCKACTR_STOP_SEC_CALIB_16
+#include "MemMap.h"
+/* End: SFTYPARKLOCKACTR_STOP_SEC_CALIB_16 (calib) */
+
+/* Begin: SFTYPARKLOCKACTR_START_SEC_CALIB_32 (calib) */
+#define SFTYPARKLOCKACTR_START_SEC_CALIB_32
+#include "MemMap.h"
+
+/*
+@@ INSTANCE = SftyParkLockActrPrimActrPosnCtrlrCfg
+@@ STRUCTURE = SftyParkLockActrPrimActrPosnCtrlrCfgType
+@@ END
+*/
+CONST(SftyParkLockActrPrimActrPosnCtrlrCfgType, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimActrPosnCtrlrCfg = 
+    {0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f};
+
+/*
+@@ INSTANCE = SftyParkLockActrPrimActrSpdCtrlrCfg
+@@ STRUCTURE = SftyParkLockActrPrimActrSpdCtrlrCfgType
+@@ END
+*/
+CONST(SftyParkLockActrPrimActrSpdCtrlrCfgType, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimActrSpdCtrlrCfg = 
+    {0.001f,1.f,0.03f,1.f,0.03f};
+
+/*
+@@ INSTANCE = SftyParkLockActrPrimActrTqCtrlrCfg
+@@ STRUCTURE = SftyParkLockActrPrimActrTqCtrlrCfgType
+@@ END
+*/
+CONST(SftyParkLockActrPrimActrTqCtrlrCfgType, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimActrTqCtrlrCfg = 
+    {0.f,0.f,0.f,0.f,0.f};
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimActrDutyCycMax
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Maximal PWM duty cycle value for park lock primary actuator control; unit \'-\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+CONST(float32, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimActrDutyCycMax = 1.f;
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimActrDutyCycMin
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Minimal PWM duty cycle value for park lock primary actuator control; unit \'-\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+CONST(float32, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimActrDutyCycMin = -1.f;
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimActrMaxPwmTmrTiOutThd
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = ULONG
+@@ DESCRIPTION = "Duration of the primary actuator pwm override with the maximal value; unit \'\\265s\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+CONST(uint32, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimActrMaxPwmTmrTiOutThd = 20000UL;
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimActrMotDisTqLim
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Constant motor torque limit for engagement; unit \'Nm\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+CONST(float32, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimActrMotDisTqLim = 0.25f;
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimActrMotEngTqLim
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Constant motor torque limit for engagement; unit \'Nm\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+CONST(float32, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimActrMotEngTqLim = 0.25f;
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimActrMotGain
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Gain paramater of parklock motor model for torque estimation; unit \'-\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+CONST(float32, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimActrMotGain = 1.f;
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimActrMotKprim
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Kprim paramater of parklock motor model for torque estimation; unit \'-\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+CONST(float32, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimActrMotKprim = 0.01894f;
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimDisTqSatnTbl
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Table values for dynamic torque limit of parklock (motor) actuator disengagement; unit \'Nm\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+CONST(float32, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimDisTqSatnTbl[4] = 
+    {0.2f,0.25f,0.3f,0.35f};
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimEngSpdSatnTbl
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ DIMENSION = 1
+@@ DESCRIPTION = "Table values for dynamic motor speed limit of primary actuator engagement; unit \'rad/s\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+CONST(float32, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimEngSpdSatnTbl[4] = 
+    {9.2f,11.6f,14.f,17.5f};
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimDisSpdSatnTbl
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ DIMENSION = 1
+@@ DESCRIPTION = "Table values for dynamic motor speed limit of primary actuator disengagement; unit \'rad/s\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+CONST(float32, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimDisSpdSatnTbl[4] = 
+    {7.5f,9.95f,12.4f,16.5f};
+
+/*
+@@ SYMBOL = SftyParkLockActrPrimEngTqSatnTbl
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ DIMENSION = 1
+@@ DESCRIPTION = "Table values for dynamic motor torque limit of primary actuator engagement; unit \'Nm\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+CONST(float32, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrPrimEngTqSatnTbl[4] = 
+    {0.2f,0.225f,0.25f,0.3f};
+
+/*
+@@ SYMBOL = SftyParkLockActrEngStopDetnTmrThd
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = ULONG
+@@ UNIT = "uSec"
+@@ DESCRIPTION = "Time threshold for the parklock engage confirmation; unit \'uSec\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+CONST(uint32, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrEngStopDetnTmrThd = 1000UL;
+
+/*
+@@ SYMBOL = SftyParkLockActrDisengStopDetnTmrThd
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = ULONG
+@@ UNIT = "uSec"
+@@ DESCRIPTION = "Time threshold for the parklock disengage confirmation; unit \'uSec\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+CONST(uint32, SFTYPARKLOCKACTR_CALIB) SftyParkLockActrDisengStopDetnTmrThd = 1000UL;
+
+#define SFTYPARKLOCKACTR_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYPARKLOCKACTR_STOP_SEC_CALIB_32 (calib) */
+
+/************************* CALIBRATION PARAMETERS - END *****************************/
+
+/* ***************************************************************** */
+/* Copyright (C) Valeo-Siemens eAutomotive GmbH 2021                 */
+/* All Rights Reserved. Confidential                                 */
+/* ***************************************************************** */
+/*==================[end of file]====================================*/
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftySdl/src/SftySdl_cfg.c b/src/fw_cu/Components/Safety/Sfty_Cmn/SftySdl/src/SftySdl_cfg.c
index ccd794e57..fd4ce21d2 100644
--- a/src/fw_cu/Components/Safety/Sfty_Cmn/SftySdl/src/SftySdl_cfg.c
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/SftySdl/src/SftySdl_cfg.c
@@ -40,6 +40,7 @@
 #include "SftyFlshVldt.h"
 #include "SftyCrc.h"
 #include "SftySysInit_data.h"
+#include "SftyParkLockActr.h"
 #include "SftyParkLockPosnAcqn.h"
 #include "SftyLvSplyEvln.h"
 #include "SftyParkLockEvln.h"
@@ -471,28 +472,34 @@ STATIC FUNC(void, SFTYSDL) SftySdl_FinishInit(void)
 @@ INSTANCE = SftySdlTickCntNormRun._40_ SftySdlRunTiNormRun_SftyParkLockEvln_SlowFunctionArea2
 @@ STRUCTURE = SftySdl_TickCntType
 @@ END
-@@ INSTANCE = SftySdlTickCntNormRun._41_ SftySdlRunTiNormRun_SftySdl_MPUChkArea1Slow
+@@ INSTANCE = SftySdlTickCntNormRun._41_ SftySdlRunTiNormRun_SftyParkLockActr_MainSlow
 @@ STRUCTURE = SftySdl_TickCntType
 @@ END
-@@ INSTANCE = SftySdlTickCntNormRun._42_ SftySdlRunTiNormRun_SftySdl_MPUChkArea2Slow
+@@ INSTANCE = SftySdlTickCntNormRun._42_ SftySdlRunTiNormRun_SftyParkLockActr_MainFast
 @@ STRUCTURE = SftySdl_TickCntType
 @@ END
-@@ INSTANCE = SftySdlTickCntNormRun._43_ SftySdlRunTiNormRun_SftySdl_MPUChkAreaCmnSlow
+@@ INSTANCE = SftySdlTickCntNormRun._43_ SftySdlRunTiNormRun_SftySdl_MPUChkArea1Slow
 @@ STRUCTURE = SftySdl_TickCntType
 @@ END
-@@ INSTANCE = SftySdlTickCntNormRun._44_ SftySdlRunTiNormRun_SftySdl_MPUChkArea0
+@@ INSTANCE = SftySdlTickCntNormRun._44_ SftySdlRunTiNormRun_SftySdl_MPUChkArea2Slow
 @@ STRUCTURE = SftySdl_TickCntType
 @@ END
-@@ INSTANCE = SftySdlTickCntNormRun._45_ SftySdlRunTiNormRun_SftySdl_MPUChkArea1
+@@ INSTANCE = SftySdlTickCntNormRun._45_ SftySdlRunTiNormRun_SftySdl_MPUChkAreaCmnSlow
 @@ STRUCTURE = SftySdl_TickCntType
 @@ END
-@@ INSTANCE = SftySdlTickCntNormRun._46_ SftySdlRunTiNormRun_SftySdl_MPUChkArea2
+@@ INSTANCE = SftySdlTickCntNormRun._46_ SftySdlRunTiNormRun_SftySdl_MPUChkArea0
 @@ STRUCTURE = SftySdl_TickCntType
 @@ END
-@@ INSTANCE = SftySdlTickCntNormRun._47_ SftySdlRunTiNormRun_SftySdl_MPUChkAreaCmn
+@@ INSTANCE = SftySdlTickCntNormRun._47_ SftySdlRunTiNormRun_SftySdl_MPUChkArea1
 @@ STRUCTURE = SftySdl_TickCntType
 @@ END
-@@ INSTANCE = SftySdlTickCntNormRun._48_ SftySdlRunTiNormRun_SftySysInit_DebugModChk
+@@ INSTANCE = SftySdlTickCntNormRun._48_ SftySdlRunTiNormRun_SftySdl_MPUChkArea2
+@@ STRUCTURE = SftySdl_TickCntType
+@@ END
+@@ INSTANCE = SftySdlTickCntNormRun._49_ SftySdlRunTiNormRun_SftySdl_MPUChkAreaCmn
+@@ STRUCTURE = SftySdl_TickCntType
+@@ END
+@@ INSTANCE = SftySdlTickCntNormRun._50_ SftySdlRunTiNormRun_SftySysInit_DebugModChk
 @@ STRUCTURE = SftySdl_TickCntType
 @@ END
 */
@@ -559,6 +566,8 @@ CONST(SftySdl_TaskTblType, SFTYSDL) SftySdlNormRunTaskTbl[]=
    ,{ SFTYSDL_AREA_0,   &SftyParkLockEvln_MainFastArea0,           2u,           0u}
    ,{ SFTYSDL_AREA_2,   &SftyParkLockEvln_MainFunctionArea2,      10u,           0u}
    ,{ SFTYSDL_AREA_2,   &SftyParkLockEvln_SlowFunctionArea2,     100u,           0u}
+   ,{ SFTYSDL_AREA_2,   &SftyParkLockActr_MainSlow,               10u,           0u}   
+   ,{ SFTYSDL_AREA_2,   &SftyParkLockActr_MainFast,                2u,           0u} 
 #ifndef SERIES_PRODUCTION
     /* function for testing MPU */
    ,{ SFTYSDL_AREA_1,   &SftySdl_MPUChkArea1Slow,                100u,           0u}
@@ -633,6 +642,7 @@ CONST(SftySdl_InitTblType, SFTYSDL) SftySdlInitNormRunTbl[] =
     ,{ SFTYSDL_AREA_1,   &SftyCrashSigMon_Init}
     ,{ SFTYSDL_AREA_2,   &SftyHvInterlock_Init}
     ,{ SFTYSDL_AREA_2,   &SftyLvSplyEvln_InitArea2}
+\t,{ SFTYSDL_AREA_2,   &SftyParkLockActr_Init}
 \t,{ SFTYSDL_AREA_2,   &SftyParkLockPosnAcqn_InitArea2}
 \t,{ SFTYSDL_AREA_2,   &SftyParkLockEvln_Init}
 };
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/SftySysInit/include/SftySysInit.h b/src/fw_cu/Components/Safety/Sfty_Cmn/SftySysInit/include/SftySysInit.h
index 5d4bc20ee..072ff2ea8 100644
--- a/src/fw_cu/Components/Safety/Sfty_Cmn/SftySysInit/include/SftySysInit.h
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/SftySysInit/include/SftySysInit.h
@@ -453,6 +453,357 @@
 #define SFTY_N_ASC_TOP_CTRL_RST_PORT_OMR_PCL_PIN               MODULE_P01.OMR.B.PCL4
 #define SFTY_N_ASC_TOP_CTRL_RST_PORT_OMR_PS_PIN                MODULE_P01.OMR.B.PS4
 
+/* *************************** ParkLock function Port&Pin configurations ******************* */
+/* ******************************* M_PLC_HB1_ENA ******************************************* */
+/* Port 11, pin 6 */
+/* Base Address of P11 as per TC3xx */
+/*
+@@ SYMBOL = HB1_EN.OUT
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x00000800 [0 ... 1]
+@@ DESCRIPTION = "Parklock H-Bridge HB1_EN signal out"
+@@ ADDRESS = 0xf003ab00                  
+@@ END
+*/
+#define SFTY_HB1_EN_OUT_P                        MODULE_P11.OUT.B.P6
+
+/* IOCR4 at offset address 0x014 */
+/*
+@@ SYMBOL = HB1_EN.IOCR
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0xf8000000 [0 ... 31]
+@@ CONVERSION = TABLE 0 "No input pull device connected, tristate mode" 1 "Input pull-down device connected" 2 "Input pull-up device connected" 3 "No input pull device connected, tristate mode" 4 "No input pull device connected, tristate mode" 5 "Input pull-down device connected" 6 "Input pull-up device connected" 7 "No input pull device connected, tristate mode" 8 "No input pull device connected, tristate mode" 9 "Input pull-down device connected" 10 "Input pull-up device connected" 11 "No input pull device connected, tristate mode" 12 "No input pull device connected, tristate mode" 13 "Input pull-down device connected" 14 "Input pull-up device connected" 15 "No input pull device connected, tristate mode" 16 "Push-pull, General-purpose output" 17 "Push-pull, Alternate output function 1" 18 "Push-pull, Alternate output function 2" 19 "Push-pull, Alternate output function 3" 20 "Push-pull, Alternate output function 4" 21 "Push-pull, Alternate output function 5" 22 "Push-pull, Alternate output function 6" 23 "Push-pull, Alternate output function 7" 24 "Open-drain, General-purpose output" 25 "Open-drain, Alternate output function 1" 26 "Open-drain, Alternate output function 2" 27 "Open-drain, Alternate output function 3" 28 "Open-drain, Alternate output function 4" 29 "Open-drain, Alternate output function 5" 30 "Open-drain, Alternate output function 6" 31 "Open-drain, Alternate output function 7" DEFAULT_VALUE "Unknown"
+@@ ADDRESS = 0xf003ab14                  
+@@ END
+*/
+#define SFTY_HB1_EN_IOCR_PC                      MODULE_P11.IOCR4.B.PC6
+
+/* Pad Driver Mode for P11.6 is configured in PD6 field of P11_PDR0 resgister. Offset 0x040 */
+/*
+@@ SYMBOL = HB1_EN.PDR.PD
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x00007000 [0 ... 7]
+@@ CONVERSION = TABLE 0 "Speed grade 1, hystersis inactive" 1 "Speed grade 2, hystersis active" 2 "Speed grade 3, hystersis active" 3 "Speed grade 4, hystersis active" 4 "Speed grade 1, hystersis inactive" 5 "Speed grade 2, hystersis active" 6 "Speed grade 3, hystersis active" 7 "Speed grade 4, hystersis active" DEFAULT_VALUE "Unknown"
+@@ ADDRESS = 0xf003ab40                  
+@@ END
+*/
+#define SFTY_HB1_EN_PDR_PD                       MODULE_P11.PDR0.B.PD6
+
+/* Pad Level selection for P11.6 is configured in PL6 field of P11_PDR0 resgister. Offset 0x040 */
+/*
+@@ SYMBOL = HB1_EN.PDR.PL
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x00008000 [0 ... 1]
+@@ CONVERSION = TABLE 0 "Automotive level" 1 "TTL level" DEFAULT_VALUE "Unknown"
+@@ ADDRESS = 0xf003ab40                  
+@@ END
+*/
+#define SFTY_HB1_EN_PDR_PL                       MODULE_P11.PDR1.B.PL6
+
+/* P11.6 input register offset address 0x024 */
+/*
+@@ SYMBOL = HB1_EN.IN
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x00000800 [0 ... 1]
+@@ DESCRIPTION = "Parklock H-Bridge HB1_EN signal read back"
+@@ ADDRESS = 0xf003ab24                  
+@@ END
+*/
+#define SFTY_HB1_EN_IN_P                         MODULE_P11.IN.B.P6
+
+/* P11.6 Emergency stop register offset address 0x050 */
+/*
+@@ SYMBOL = HB1_EN.ESR
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x00000800 [0 ... 1]
+@@ ADDRESS = 0xf003ab50                  
+@@ END
+*/
+#define SFTY_HB1_EN_ESR_EN                       MODULE_P11.ESR.B.EN6
+
+#define SFTY_HB1_EN_OMCR_PCL                     MODULE_P11.OMCR.B.PCL6
+#define SFTY_HB1_EN_OMSR_PS                      MODULE_P11.OMSR.B.PS6
+
+/* ******************************* M_PLC_HB2_ENA ******************************************* */
+/* Port 13, pin 0 */
+/* Base Address of P13 as per TC3xx */
+/*
+@@ SYMBOL = HB2_EN.OUT
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x00001000 [0 ... 1]
+@@ DESCRIPTION = "Parklock H-Bridge HB2_EN signal out"
+@@ ADDRESS = 0xf003ad00                  
+@@ END
+*/
+#define SFTY_HB2_EN_OUT_P                        MODULE_P13.OUT.B.P0
+
+/* IOCR0 at offset address 0x010 */
+/*
+@@ SYMBOL = HB2_EN.IOCR
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x000000f8 [0 ... 31]
+@@ CONVERSION = TABLE 0 "No input pull device connected, tristate mode" 1 "Input pull-down device connected" 2 "Input pull-up device connected" 3 "No input pull device connected, tristate mode" 4 "No input pull device connected, tristate mode" 5 "Input pull-down device connected" 6 "Input pull-up device connected" 7 "No input pull device connected, tristate mode" 8 "No input pull device connected, tristate mode" 9 "Input pull-down device connected" 10 "Input pull-up device connected" 11 "No input pull device connected, tristate mode" 12 "No input pull device connected, tristate mode" 13 "Input pull-down device connected" 14 "Input pull-up device connected" 15 "No input pull device connected, tristate mode" 16 "Push-pull, General-purpose output" 17 "Push-pull, Alternate output function 1" 18 "Push-pull, Alternate output function 2" 19 "Push-pull, Alternate output function 3" 20 "Push-pull, Alternate output function 4" 21 "Push-pull, Alternate output function 5" 22 "Push-pull, Alternate output function 6" 23 "Push-pull, Alternate output function 7" 24 "Open-drain, General-purpose output" 25 "Open-drain, Alternate output function 1" 26 "Open-drain, Alternate output function 2" 27 "Open-drain, Alternate output function 3" 28 "Open-drain, Alternate output function 4" 29 "Open-drain, Alternate output function 5" 30 "Open-drain, Alternate output function 6" 31 "Open-drain, Alternate output function 7" DEFAULT_VALUE "Unknown"
+@@ ADDRESS = 0xf003ad10                  
+@@ END
+*/
+#define SFTY_HB2_EN_IOCR_PC                      MODULE_P13.IOCR0.B.PC0
+
+/* Pad Driver Mode for P13.0 is configured in PD0 field of P13_PDR0 resgister. Offset 0x040 */
+/*
+@@ SYMBOL = HB2_EN.PDR.PD
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x00070000 [0 ... 7]
+@@ CONVERSION = TABLE 0 "Speed grade 1, hystersis inactive" 1 "Speed grade 2, hystersis active" 2 "Speed grade 3, hystersis active" 3 "Speed grade 4, hystersis active" 4 "Speed grade 1, hystersis inactive" 5 "Speed grade 2, hystersis active" 6 "Speed grade 3, hystersis active" 7 "Speed grade 4, hystersis active" DEFAULT_VALUE "Unknown"
+@@ ADDRESS = 0xf003ad40                  
+@@ END
+*/
+#define SFTY_HB2_EN_PDR_PD                       MODULE_P13.PDR0.B.PD0
+
+/* Pad Level selection for P13.0 is configured in PL0 field of P13_PDR0 resgister. Offset 0x040 */
+/*
+@@ SYMBOL = HB2_EN.PDR.PL
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x00080000 [0 ... 1]
+@@ CONVERSION = TABLE 0 "Automotive level" 1 "TTL level" DEFAULT_VALUE "Unknown"
+@@ ADDRESS = 0xf003ad40                  
+@@ END
+*/
+#define SFTY_HB2_EN_PDR_PL                       MODULE_P13.PDR1.B.PL0
+
+/* P13.0 input register offset address 0x024 */
+/*
+@@ SYMBOL = HB2_EN.IN
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x00001000 [0 ... 1]
+@@ DESCRIPTION = "Parklock H-Bridge HB2_EN signal read back"
+@@ ADDRESS = 0xf003ad24                  
+@@ END
+*/
+#define SFTY_HB2_EN_IN_P                         MODULE_P13.IN.B.P0
+
+/* P13.0 Emergency stop register offset address 0x050 */
+/*
+@@ SYMBOL = HB2_EN.ESR
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x00001000 [0 ... 1]
+@@ ADDRESS = 0xf003ad50                  
+@@ END
+*/
+#define SFTY_HB2_EN_ESR_EN                       MODULE_P13.ESR.B.EN0
+
+#define SFTY_HB2_EN_OMCR_PCL                     MODULE_P13.OMCR.B.PCL0
+#define SFTY_HB2_EN_OMSR_PS                      MODULE_P13.OMSR.B.PS0
+
+/* ******************************* M_PLC_HB1_CTRL ******************************************* */
+/* Port 11, pin 2 */
+/* Base Address of P11 as per TC3xx */
+/*
+@@ SYMBOL = HB1_CTRL.OUT
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x00002000 [0 ... 1]
+@@ DESCRIPTION = "Parklock H-Bridge HB1_CTRL signal out"
+@@ ADDRESS = 0xf003ab00                  
+@@ END
+*/
+#define SFTY_HB1_CTRL_OUT_P                      MODULE_P11.OUT.B.P2
+
+/* IOCR0 at offset address 0x010 */
+/*
+@@ SYMBOL = HB1_CTRL.IOCR
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x0000f800 [0 ... 31]
+@@ CONVERSION = TABLE 0 "No input pull device connected, tristate mode" 1 "Input pull-down device connected" 2 "Input pull-up device connected" 3 "No input pull device connected, tristate mode" 4 "No input pull device connected, tristate mode" 5 "Input pull-down device connected" 6 "Input pull-up device connected" 7 "No input pull device connected, tristate mode" 8 "No input pull device connected, tristate mode" 9 "Input pull-down device connected" 10 "Input pull-up device connected" 11 "No input pull device connected, tristate mode" 12 "No input pull device connected, tristate mode" 13 "Input pull-down device connected" 14 "Input pull-up device connected" 15 "No input pull device connected, tristate mode" 16 "Push-pull, General-purpose output" 17 "Push-pull, Alternate output function 1" 18 "Push-pull, Alternate output function 2" 19 "Push-pull, Alternate output function 3" 20 "Push-pull, Alternate output function 4" 21 "Push-pull, Alternate output function 5" 22 "Push-pull, Alternate output function 6" 23 "Push-pull, Alternate output function 7" 24 "Open-drain, General-purpose output" 25 "Open-drain, Alternate output function 1" 26 "Open-drain, Alternate output function 2" 27 "Open-drain, Alternate output function 3" 28 "Open-drain, Alternate output function 4" 29 "Open-drain, Alternate output function 5" 30 "Open-drain, Alternate output function 6" 31 "Open-drain, Alternate output function 7" DEFAULT_VALUE "Unknown"
+@@ ADDRESS = 0xf003ab10                  
+@@ END
+*/
+#define SFTY_HB1_CTRL_IOCR_PC                    MODULE_P11.IOCR0.B.PC2
+
+/* Pad Driver Mode for P11.2 is configured in PD2 field of P11_PDR0 resgister. Offset 0x040 */
+/*
+@@ SYMBOL = HB1_CTRL.PDR.PD
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x00700000 [0 ... 7]
+@@ CONVERSION = TABLE 0 "Speed grade 1, hystersis inactive" 1 "Speed grade 2, hystersis active" 2 "Speed grade 3, hystersis active" 3 "Speed grade 4, hystersis active" 4 "Speed grade 1, hystersis inactive" 5 "Speed grade 2, hystersis active" 6 "Speed grade 3, hystersis active" 7 "Speed grade 4, hystersis active" DEFAULT_VALUE "Unknown"
+@@ ADDRESS = 0xf003ab40                  
+@@ END
+*/
+#define SFTY_HB1_CTRL_PDR_PD                     MODULE_P11.PDR0.B.PD2
+
+/* Pad Level selection for P11.2 is configured in PL2 field of P11_PDR0 resgister. Offset 0x040 */
+/*
+@@ SYMBOL = HB1_CTRL.PDR.PL
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x00800000 [0 ... 1]
+@@ CONVERSION = TABLE 0 "Automotive level" 1 "TTL level" DEFAULT_VALUE "Unknown"
+@@ ADDRESS = 0xf003ab40                  
+@@ END
+*/
+#define SFTY_HB1_CTRL_PDR_PL                     MODULE_P11.PDR0.B.PL2
+
+/* P11.2 input register offset address 0x024 */
+/*
+@@ SYMBOL = HB1_CTRL.IN
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x00002000 [0 ... 1]
+@@ DESCRIPTION = "Parklock H-Bridge HB1_CTRL signal read back"
+@@ ADDRESS = 0xf003ab24                  
+@@ END
+*/
+#define SFTY_HB1_CTRL_IN_P                       MODULE_P11.IN.B.P2
+
+/* P11.2 Emergency stop register offset address 0x050 */
+/*
+@@ SYMBOL = HB1_CTRL.ESR
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x00002000 [0 ... 1]
+@@ ADDRESS = 0xf003ab50                  
+@@ END
+*/
+#define SFTY_HB1_CTRL_ESR_EN                     MODULE_P11.ESR.B.EN2
+
+#define SFTY_HB1_CTRL_OMCR_PCL                   MODULE_P11.OMCR.B.PCL2
+#define SFTY_HB1_CTRL_OMSR_PS                    MODULE_P11.OMSR.B.PS2
+
+/* ******************************* M_PLC_HB2_CTRL ******************************************* */
+/* Port 13, pin 1 */
+/* Base Address of P13 as per TC3xx */
+/*
+@@ SYMBOL = HB2_CTRL.OUT
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x00000800 [0 ... 1]
+@@ DESCRIPTION = "Parklock H-Bridge HB2_CTRL signal out"
+@@ ADDRESS = 0xf003ad00                  
+@@ END
+*/
+#define SFTY_HB2_CTRL_OUT_P                      MODULE_P13.OUT.B.P1
+
+/* IOCR0 at offset address 0x010 */
+/*
+@@ SYMBOL = HB2_CTRL.IOCR
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0xf8000000 [0 ... 31]
+@@ CONVERSION = TABLE 0 "No input pull device connected, tristate mode" 1 "Input pull-down device connected" 2 "Input pull-up device connected" 3 "No input pull device connected, tristate mode" 4 "No input pull device connected, tristate mode" 5 "Input pull-down device connected" 6 "Input pull-up device connected" 7 "No input pull device connected, tristate mode" 8 "No input pull device connected, tristate mode" 9 "Input pull-down device connected" 10 "Input pull-up device connected" 11 "No input pull device connected, tristate mode" 12 "No input pull device connected, tristate mode" 13 "Input pull-down device connected" 14 "Input pull-up device connected" 15 "No input pull device connected, tristate mode" 16 "Push-pull, General-purpose output" 17 "Push-pull, Alternate output function 1" 18 "Push-pull, Alternate output function 2" 19 "Push-pull, Alternate output function 3" 20 "Push-pull, Alternate output function 4" 21 "Push-pull, Alternate output function 5" 22 "Push-pull, Alternate output function 6" 23 "Push-pull, Alternate output function 7" 24 "Open-drain, General-purpose output" 25 "Open-drain, Alternate output function 1" 26 "Open-drain, Alternate output function 2" 27 "Open-drain, Alternate output function 3" 28 "Open-drain, Alternate output function 4" 29 "Open-drain, Alternate output function 5" 30 "Open-drain, Alternate output function 6" 31 "Open-drain, Alternate output function 7" DEFAULT_VALUE "Unknown"
+@@ ADDRESS = 0xf003ad10                  
+@@ END
+*/
+#define SFTY_HB2_CTRL_IOCR_PC                    MODULE_P13.IOCR0.B.PC1
+
+/* Pad Driver Mode for P13.1 is configured in PD1 field of P13_PDR0 resgister. Offset 0x040 */
+/*
+@@ SYMBOL = HB2_CTRL.PDR.PD
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x00007000 [0 ... 7]
+@@ CONVERSION = TABLE 0 "Speed grade 1, hystersis inactive" 1 "Speed grade 2, hystersis active" 2 "Speed grade 3, hystersis active" 3 "Speed grade 4, hystersis active" 4 "Speed grade 1, hystersis inactive" 5 "Speed grade 2, hystersis active" 6 "Speed grade 3, hystersis active" 7 "Speed grade 4, hystersis active" DEFAULT_VALUE "Unknown"
+@@ ADDRESS = 0xf003ad40                  
+@@ END
+*/
+#define SFTY_HB2_CTRL_PDR_PD                     MODULE_P13.PDR0.B.PD1
+
+/* Pad Level selection for P13.1 is configured in PL1 field of P13_PDR0 resgister. Offset 0x040 */
+/*
+@@ SYMBOL = HB2_CTRL.PDR.PL
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x00008000 [0 ... 1]
+@@ CONVERSION = TABLE 0 "Automotive level" 1 "TTL level" DEFAULT_VALUE "Unknown"
+@@ ADDRESS = 0xf003ad40                  
+@@ END
+*/
+#define SFTY_HB2_CTRL_PDR_PL                     MODULE_P13.PDR0.B.PL1
+
+/* P13.1 input register offset address 0x024 */
+/*
+@@ SYMBOL = HB2_CTRL.IN
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x00000800 [0 ... 1]
+@@ DESCRIPTION = "Parklock H-Bridge HB2_CTRL signal read back"
+@@ ADDRESS = 0xf003ad24                  
+@@ END
+*/
+#define SFTY_HB2_CTRL_IN_P                       MODULE_P13.IN.B.P1
+
+/* P13.1 Emergency stop register offset address 0x050 */
+/*
+@@ SYMBOL = HB2_CTRL.ESR
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x00000800 [0 ... 1]
+@@ ADDRESS = 0xf003ad50                  
+@@ END
+*/
+#define SFTY_HB2_CTRL_ESR_EN                     MODULE_P13.ESR.B.EN1
+
+#define SFTY_HB2_CTRL_OMCR_PCL                   MODULE_P13.OMCR.B.PCL1
+#define SFTY_HB2_CTRL_OMSR_PS                    MODULE_P13.OMSR.B.PS1
+
+/* ******************************* M_PLC_P5V_SENS_EN_P ******************************************* */
+/* Port 11, pin 9 */
+/* Base Address of P11 as per TC3xx */
+/*
+@@ SYMBOL = N_P5V_PLC_SENS_EN.OUT
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x00004000 [0 ... 1]
+@@ DESCRIPTION = "Parklock position sensor supply enable signal PLC_SENS_EN out"
+@@ ADDRESS = 0xf003ab00                  
+@@ END
+*/
+#define SFTY_N_P5V_PLC_SENS_EN_OUT_P             MODULE_P11.OUT.B.P9
+
+/* IOCR8 at offset address 0x018 */
+/*
+@@ SYMBOL = N_P5V_PLC_SENS_EN.IOCR
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x00f80000 [0 ... 31]
+@@ CONVERSION = TABLE 0 "No input pull device connected, tristate mode" 1 "Input pull-down device connected" 2 "Input pull-up device connected" 3 "No input pull device connected, tristate mode" 4 "No input pull device connected, tristate mode" 5 "Input pull-down device connected" 6 "Input pull-up device connected" 7 "No input pull device connected, tristate mode" 8 "No input pull device connected, tristate mode" 9 "Input pull-down device connected" 10 "Input pull-up device connected" 11 "No input pull device connected, tristate mode" 12 "No input pull device connected, tristate mode" 13 "Input pull-down device connected" 14 "Input pull-up device connected" 15 "No input pull device connected, tristate mode" 16 "Push-pull, General-purpose output" 17 "Push-pull, Alternate output function 1" 18 "Push-pull, Alternate output function 2" 19 "Push-pull, Alternate output function 3" 20 "Push-pull, Alternate output function 4" 21 "Push-pull, Alternate output function 5" 22 "Push-pull, Alternate output function 6" 23 "Push-pull, Alternate output function 7" 24 "Open-drain, General-purpose output" 25 "Open-drain, Alternate output function 1" 26 "Open-drain, Alternate output function 2" 27 "Open-drain, Alternate output function 3" 28 "Open-drain, Alternate output function 4" 29 "Open-drain, Alternate output function 5" 30 "Open-drain, Alternate output function 6" 31 "Open-drain, Alternate output function 7" DEFAULT_VALUE "Unknown"
+@@ ADDRESS = 0xf003ab18                  
+@@ END
+*/
+#define SFTY_N_P5V_PLC_SENS_EN_IOCR_PC           MODULE_P11.IOCR8.B.PC9
+
+/* Pad Driver Mode for P11.9 is configured in PD9 field of P11_PDR1 resgister. Offset 0x044 */
+/*
+@@ SYMBOL = N_P5V_PLC_SENS_EN.PDR.PD
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x07000000 [0 ... 7]
+@@ CONVERSION = TABLE 0 "Speed grade 1, hystersis inactive" 1 "Speed grade 2, hystersis active" 2 "Speed grade 3, hystersis active" 3 "Speed grade 4, hystersis active" 4 "Speed grade 1, hystersis inactive" 5 "Speed grade 2, hystersis active" 6 "Speed grade 3, hystersis active" 7 "Speed grade 4, hystersis active" DEFAULT_VALUE "Unknown"
+@@ ADDRESS = 0xf003ab44                  
+@@ END
+*/
+#define SFTY_N_P5V_PLC_SENS_EN_PDR_PD            MODULE_P11.PDR1.B.PD9
+
+/* Pad Level selection for P11.9 is configured in PL9 field of P11_PDR1 resgister. Offset 0x044 */
+/*
+@@ SYMBOL = N_P5V_PLC_SENS_EN.PDR.PL
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x08000000 [0 ... 1]
+@@ CONVERSION = TABLE 0 "Automotive level" 1 "TTL level" DEFAULT_VALUE "Unknown"
+@@ ADDRESS = 0xf003ab44                  
+@@ END
+*/
+#define SFTY_N_P5V_PLC_SENS_EN_PDR_PL            MODULE_P11.PDR1.B.PL9
+
+/* P11.9 input register offset address 0x024 */
+/*
+@@ SYMBOL = N_P5V_PLC_SENS_EN.IN
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x00004000 [0 ... 1]
+@@ DESCRIPTION = "Parklock position sensor supply enable signal PLC_SENS_EN read back"
+@@ ADDRESS = 0xf003ab24                  
+@@ END
+*/
+#define SFTY_N_P5V_PLC_SENS_EN_IN_P              MODULE_P11.IN.B.P9
+
+/* P11.9 Emergency stop register offset address 0x050 */
+/*
+@@ SYMBOL = N_P5V_PLC_SENS_EN.ESR
+@@ A2L_TYPE = MEASURE
+@@ DATA_TYPE = ULONG 0x00004000 [0 ... 1]
+@@ ADDRESS = 0xf003ab50                  
+@@ END
+*/
+#define SFTY_N_P5V_PLC_SENS_EN_ESR_EN            MODULE_P11.ESR.B.EN9
+
+#define SFTY_N_P5V_PLC_SENS_EN_OMCR_PCL          MODULE_P11.OMCR.B.PCL9
+#define SFTY_N_P5V_PLC_SENS_EN_OMSR_PS           MODULE_P11.OMSR.B.PS9
+
 /* ========================== [type definitions] ===================================== */
 
 /*================== [declaration of global data] ===========================*/
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/Sfty_Common/include/SftyReplcmt_data.h b/src/fw_cu/Components/Safety/Sfty_Cmn/Sfty_Common/include/SftyReplcmt_data.h
index 75ea2eeba..344296b15 100644
--- a/src/fw_cu/Components/Safety/Sfty_Cmn/Sfty_Common/include/SftyReplcmt_data.h
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/Sfty_Common/include/SftyReplcmt_data.h
@@ -3030,4 +3030,52 @@ extern CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockActrPosSnsrSts;
 #include "MemMap.h"
 /* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
 
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+extern CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockActrPrimActrSpdSpEna;
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_32 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_32
+#include "MemMap.h"
+extern CONST(float32, SFTYREPLCMT_CALIB) SftyReplcmtParkLockActrPrimActrSpdSpVal;
+#define SFTYREPLCMT_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+extern CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockActrPrimActrTqSpEna;
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_32 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_32
+#include "MemMap.h"
+extern CONST(float32, SFTYREPLCMT_CALIB) SftyReplcmtParkLockActrPrimActrTqSpVal;
+#define SFTYREPLCMT_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+extern CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockActrPrimActrUSpEna;
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_32 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_32
+#include "MemMap.h"
+extern CONST(float32, SFTYREPLCMT_CALIB) SftyReplcmtParkLockActrPrimActrUSpVal;
+#define SFTYREPLCMT_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_32 (calib) */
+
 #endif
diff --git a/src/fw_cu/Components/Safety/Sfty_Cmn/Sfty_Common/src/SftyReplcmt_data.c b/src/fw_cu/Components/Safety/Sfty_Cmn/Sfty_Common/src/SftyReplcmt_data.c
index 70074d4bc..fb1a1634d 100644
--- a/src/fw_cu/Components/Safety/Sfty_Cmn/Sfty_Common/src/SftyReplcmt_data.c
+++ b/src/fw_cu/Components/Safety/Sfty_Cmn/Sfty_Common/src/SftyReplcmt_data.c
@@ -3433,3 +3433,102 @@ CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockActrPosSnsrSts = 0U;
 #define SFTYREPLCMT_STOP_SEC_CALIB_8
 #include "MemMap.h"
 /* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyReplcmtParkLockActrPrimActrSpdSpEna
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = "Replacement enable flag for Parklock actuator speed set point: 1 - replacement enabled, 0 - replacement disabled; unit \'-\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockActrPrimActrSpdSpEna = 0U;
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_32 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_32
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyReplcmtParkLockActrPrimActrSpdSpVal
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Replacement value for Parklock actuator speed set point; unit \'rad/s\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+CONST(float32, SFTYREPLCMT_CALIB) SftyReplcmtParkLockActrPrimActrSpdSpVal = 0.f;
+#define SFTYREPLCMT_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyReplcmtParkLockActrPrimActrTqSpEna
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = "Replacement enable flag for Parklock actuator torque set point: 1 - replacement enabled, 0 - replacement disabled; unit \'-\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockActrPrimActrTqSpEna = 0U;
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_32 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_32
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyReplcmtParkLockActrPrimActrTqSpVal
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Replacement value for Parklock actuator torque set point; unit \'Nm\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+CONST(float32, SFTYREPLCMT_CALIB) SftyReplcmtParkLockActrPrimActrTqSpVal = 0.f;
+#define SFTYREPLCMT_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_32 (calib) */
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_8 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_8
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyReplcmtParkLockActrPrimActrUSpEna
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = UBYTE
+@@ DESCRIPTION = "Replacement enable flag for Parklock actuator voltage set point: 1 - replacement enabled, 0 - replacement disabled; unit \'-\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+CONST(uint8, SFTYREPLCMT_CALIB) SftyReplcmtParkLockActrPrimActrUSpEna = 0U;
+#define SFTYREPLCMT_STOP_SEC_CALIB_8
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_8 (calib) */
+
+/* Begin: SFTYREPLCMT_START_SEC_CALIB_32 (calib) */
+#define SFTYREPLCMT_START_SEC_CALIB_32
+#include "MemMap.h"
+/*
+@@ SYMBOL = SftyReplcmtParkLockActrPrimActrUSpVal
+@@ A2L_TYPE = PARAMETER
+@@ DATA_TYPE = FLOAT
+@@ DESCRIPTION = "Replacement value for Parklock actuator voltage set point; unit \'V\'"
+@@ GROUP = SftyParkLockActr
+@@ END
+*/
+CONST(float32, SFTYREPLCMT_CALIB) SftyReplcmtParkLockActrPrimActrUSpVal = 0.f;
+#define SFTYREPLCMT_STOP_SEC_CALIB_32
+#include "MemMap.h"
+/* End: SFTYREPLCMT_STOP_SEC_CALIB_32 (calib) */
+
+
+
diff --git a/src/fw_cu/build/a2l/Measurements-to-Timeslices-Mapping.csv b/src/fw_cu/build/a2l/Measurements-to-Timeslices-Mapping.csv
index 050bc75c2..54935a7f1 100644
--- a/src/fw_cu/build/a2l/Measurements-to-Timeslices-Mapping.csv
+++ b/src/fw_cu/build/a2l/Measurements-to-Timeslices-Mapping.csv
@@ -6457,10 +6457,54 @@ SftyRslvrEvlnValCompErrMonrSt,Core_1,Core_1_200us,0.2,,,SSW
 SftyRslvrEvlnValCompErrMonrSt.MonrStsCombined,Core_1,Core_1_200us,0.2,,,SSW
 SftyRslvrEvlnVldyFlg,Core_1,Core_1_200us,0.2,,,SSW
 SftyRslvrOffsHndlrAscIqPlausErrMonrSt,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrAscPlausChkState,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrAscVldMeasCycCntr,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrAvgIq,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrAvgIqCntr,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrAvgSpd,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrAvgSpdCntr,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrBackEmfOffsInDeg,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrFirstRunDone,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrIacImbVldyFlg,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrIacSumErrCntr,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrIAlpha,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrIBeta,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrInternRslvrOffs,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrInternRslvrOffsVld,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrInVldMeasCycCntr,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrIq,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrIqCntr,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrIqSum,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrlPhaISum,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrMaxSpd,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrMeasCycCntr,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrMeasCycState,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrMinSpd,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrNvMOffsInDeg,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrNvMOffsVldnState,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrNvMStoreTmr,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrNvMStoreTmrState,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrNvmUpdtCurrSts,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrNvmUpdtPrevSts,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrOffsForAscPlausInDeg,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrPhaIU,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrPhaIV,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrPhaIW,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrPrevElecAg,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrReqCalibSfty,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrRodaLearnTmr,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrRodaLearnTmrState,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrRolOffsVldnState,Core_1,Core_1_200us,0.2,,,SSW
 SftyRslvrOffsHndlrRslvrOffsCrcErrMonrSt,Core_1,Core_1_200us,0.2,,,SSW
 SftyRslvrOffsHndlrRslvrOffsNvmWrErrMonrSt,Core_1,Core_1_200us,0.2,,,SSW
 SftyRslvrOffsHndlrRslvrOffsRad,Core_1,Core_1_200us,0.2,,,SSW
 SftyRslvrOffsHndlrRslvrOffsRngErrMonrSt,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrSoftASCTmr,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrSoftAscTmrState,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrSpdSum,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrTotalMeasCycCntr,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrUdsOffsInDeg,Core_1,Core_1_200us,0.2,,,SSW
+SftyRslvrOffsHndlrUdsOffsVldnState,Core_1,Core_1_200us,0.2,,,SSW
 SftySbcFs6500WakeupSrc,Core_1,Core_1_200us,0.2,,,SSW
 SftySdlIdCntInv,Core_1,Core_1_200us,0.2,,,SSW
 SftySdlOverallCpuLoad,Core_1,Core_1_200us,10,,,SSW
@@ -8623,47 +8667,89 @@ ErrDebTaskDataCore2.FctInhbnSts.B.FCT_ID_SPD_MAX_LIM,Core_2,C2_100u_PWM,0.1,,,DR
 ErrDebTaskDataCore2.FctInhbnSts.B.FCT_ID_TQ_MAX_LIM_30,Core_2,C2_100u_PWM,0.1,,,DRCO
 ErrDebTaskDataCore2.FctInhbnSts.B.FCT_ID_VEH_PRKG_TI_INI,Core_2,C2_100u_PWM,0.1,,,DRCO
 ErrDebTaskDataCore2.FctInhbnSts.B.FCT_ID_VEH_PRKG_TI_INVLD,Core_2,C2_100u_PWM,0.1,,,DRCO
-SftyRslvrOffsHndlrAscPlausChkState,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrAscVldMeasCycCntr,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrAvgIq,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrAvgIqCntr,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrAvgSpd,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrAvgSpdCntr,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrBackEmfOffsInDeg,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrFirstRunDone,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrIAlpha,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrIBeta,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrIacImbVldyFlg,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrIacSumErrCntr,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrInVldMeasCycCntr,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrInternRslvrOffs,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrInternRslvrOffsVld,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrIq,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrIqCntr,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrIqSum,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrMaxSpd,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrMeasCycCntr,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrMeasCycState,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrMinSpd,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrNvMOffsInDeg,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrNvMOffsVldnState,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrNvMStoreTmr,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrNvMStoreTmrState,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrNvmUpdtCurrSts,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrNvmUpdtPrevSts,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrOffsForAscPlausInDeg,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrPhaIU,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrPhaIV,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrPhaIW,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrPrevElecAg,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrReqCalibSfty,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrRodaLearnTmr,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrRodaLearnTmrState,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrRolOffsVldnState,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrSoftASCTmr,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrSoftAscTmrState,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrSpdSum,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrTotalMeasCycCntr,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrUdsOffsInDeg,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrUdsOffsVldnState,Core_1,Core_1_200us,0.2,,,SSW
-SftyRslvrOffsHndlrlPhaISum,Core_1,Core_1_200us,0.2,,,SSW
+HB1_CTRL.ESR,Core_1,Core_1_200us,0.2,,,SSW
+HB1_CTRL.IN,Core_1,Core_1_200us,0.2,,,SSW
+HB1_CTRL.IOCR,Core_1,Core_1_200us,0.2,,,SSW
+HB1_CTRL.OUT,Core_1,Core_1_200us,0.2,,,SSW
+HB1_CTRL.PDR.PD,Core_1,Core_1_200us,0.2,,,SSW
+HB1_CTRL.PDR.PL,Core_1,Core_1_200us,0.2,,,SSW
+HB1_EN.ESR,Core_1,Core_1_200us,0.2,,,SSW
+HB1_EN.IN,Core_1,Core_1_200us,0.2,,,SSW
+HB1_EN.IOCR,Core_1,Core_1_200us,0.2,,,SSW
+HB1_EN.OUT,Core_1,Core_1_200us,0.2,,,SSW
+HB1_EN.PDR.PD,Core_1,Core_1_200us,0.2,,,SSW
+HB1_EN.PDR.PL,Core_1,Core_1_200us,0.2,,,SSW
+HB2_CTRL.ESR,Core_1,Core_1_200us,0.2,,,SSW
+HB2_CTRL.IN,Core_1,Core_1_200us,0.2,,,SSW
+HB2_CTRL.IOCR,Core_1,Core_1_200us,0.2,,,SSW
+HB2_CTRL.OUT,Core_1,Core_1_200us,0.2,,,SSW
+HB2_CTRL.PDR.PD,Core_1,Core_1_200us,0.2,,,SSW
+HB2_CTRL.PDR.PL,Core_1,Core_1_200us,0.2,,,SSW
+HB2_EN.ESR,Core_1,Core_1_200us,0.2,,,SSW
+HB2_EN.IN,Core_1,Core_1_200us,0.2,,,SSW
+HB2_EN.IOCR,Core_1,Core_1_200us,0.2,,,SSW
+HB2_EN.OUT,Core_1,Core_1_200us,0.2,,,SSW
+HB2_EN.PDR.PD,Core_1,Core_1_200us,0.2,,,SSW
+HB2_EN.PDR.PL,Core_1,Core_1_200us,0.2,,,SSW
+N_P5V_PLC_SENS_EN.ESR,Core_1,Core_1_200us,0.2,,,SSW
+N_P5V_PLC_SENS_EN.IN,Core_1,Core_1_200us,0.2,,,SSW
+N_P5V_PLC_SENS_EN.IOCR,Core_1,Core_1_200us,0.2,,,SSW
+N_P5V_PLC_SENS_EN.OUT,Core_1,Core_1_200us,0.2,,,SSW
+N_P5V_PLC_SENS_EN.PDR.PD,Core_1,Core_1_200us,0.2,,,SSW
+N_P5V_PLC_SENS_EN.PDR.PL,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrChkPrimActrPwmCfgVld,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPosCntrfeedfwdSpd,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPosSnsrSts,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrAgSp,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrCfgFltErrMonrSt,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrCtrlSt,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrCurDutyCycle,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrDirRq,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrMotTqLim,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrPosnCtrlrCfg.DisengmtCoeffKi,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrPosnCtrlrCfg.DisengmtCoeffKp,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrPosnCtrlrCfg.DisengmtFeedfwdSpd,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrPosnCtrlrCfg.DisengmtSpdSatn,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrPosnCtrlrCfg.EngmtCoeffKi,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrPosnCtrlrCfg.EngmtCoeffKp,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrPosnCtrlrCfg.EngmtFeedfwdSpd,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrPosnCtrlrCfg.EngmtSpdSatn,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrPosnCtrlrCfg.Ts,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrPosnCtrlrSt.init_flag,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrPosnCtrlrSt.integ_old,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrPosnCtrlrSt.output,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrPosnCtrlrSt.propor_old,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrPosnCtrlrSt.value_prop_init,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrSpdCtrlrCfg.DisengmtCoeffKi,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrSpdCtrlrCfg.DisengmtCoeffKp,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrSpdCtrlrCfg.EngmtCoeffKi,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrSpdCtrlrCfg.EngmtCoeffKp,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrSpdCtrlrCfg.Ts,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrSpdCtrlrSt.init_flag,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrSpdCtrlrSt.integ_old,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrSpdCtrlrSt.output,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrSpdCtrlrSt.propor_old,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrSpdCtrlrSt.value_prop_init,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrSpdSp,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrSts,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrTqCtrlrCfg.DisengmtCoeffKi,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrTqCtrlrCfg.DisengmtCoeffKp,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrTqCtrlrCfg.EngmtCoeffKi,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrTqCtrlrCfg.EngmtCoeffKp,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrTqCtrlrCfg.Ts,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrTqCtrlrSt.init_flag,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrTqCtrlrSt.integ_old,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrTqCtrlrSt.output,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrTqCtrlrSt.propor_old,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrTqCtrlrSt.value_prop_init,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrTqEstimdMotMdl,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimActrTqSp,Core_1,Core_1_200us,0.2,,,SSW
+SftyParkLockActrPrimFlgPwmMax,Core_1,Core_1_200us,0.2,,,SSW
+SftySdlRunTiNormRun_SftyParkLockActr_MainFast.CycTi,Core_1,Core_1_200us,0.2,,,SSW
+SftySdlRunTiNormRun_SftyParkLockActr_MainFast.RunTi,Core_1,Core_1_200us,0.2,,,SSW
+SftySdlRunTiNormRun_SftyParkLockActr_MainFast.TickStart,Core_1,Core_1_200us,0.2,,,SSW
+SftySdlRunTiNormRun_SftyParkLockActr_MainSlow.CycTi,Core_1,Core_1_200us,0.2,,,SSW
+SftySdlRunTiNormRun_SftyParkLockActr_MainSlow.RunTi,Core_1,Core_1_200us,0.2,,,SSW
+SftySdlRunTiNormRun_SftyParkLockActr_MainSlow.TickStart,Core_1,Core_1_200us,0.2,,,SSW
+disengStopDetnCycCntr,Core_1,Core_1_200us,0.2,,,SSW
+engStopDetnCycCntr,Core_1,Core_1_200us,0.2,,,SSW
'
